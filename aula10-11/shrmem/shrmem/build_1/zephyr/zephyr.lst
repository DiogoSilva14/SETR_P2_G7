
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	200024c0 	.word	0x200024c0
}
   4:	000033a5 	.word	0x000033a5
   8:	0000b35f 	.word	0x0000b35f
   c:	0000335d 	.word	0x0000335d
  10:	0000335d 	.word	0x0000335d
  14:	0000335d 	.word	0x0000335d
  18:	0000335d 	.word	0x0000335d
	...
  2c:	00002f25 	.word	0x00002f25
  30:	0000335d 	.word	0x0000335d
  34:	00000000 	.word	0x00000000
  38:	00002ecd 	.word	0x00002ecd
  3c:	0000335d 	.word	0x0000335d

00000040 <_irq_vector_table>:
  40:	00003011 00003011 00003011 00003011     .0...0...0...0..
  50:	00003011 00003011 00003011 00003011     .0...0...0...0..
  60:	00003011 00003011 00003011 00003011     .0...0...0...0..
  70:	00003011 00003011 00003011 00003011     .0...0...0...0..
  80:	00003011 00003011 00003011 00003011     .0...0...0...0..
  90:	00003011 00003011 00003011 00003011     .0...0...0...0..
  a0:	00003011 00003011 00003011 00003011     .0...0...0...0..
  b0:	00003011 00003011 00003011 00003011     .0...0...0...0..
  c0:	00003011 00003011 00003011 00003011     .0...0...0...0..
  d0:	00003011 00003011 00003011 00003011     .0...0...0...0..
  e0:	00003011 00003011 00003011 00003011     .0...0...0...0..
  f0:	00003011 00003011 00003011 00003011     .0...0...0...0..

Disassembly of section text:

00000100 <__aeabi_drsub>:
     100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     104:	e002      	b.n	10c <__adddf3>
     106:	bf00      	nop

00000108 <__aeabi_dsub>:
     108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000010c <__adddf3>:
     10c:	b530      	push	{r4, r5, lr}
     10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     112:	ea4f 0543 	mov.w	r5, r3, lsl #1
     116:	ea94 0f05 	teq	r4, r5
     11a:	bf08      	it	eq
     11c:	ea90 0f02 	teqeq	r0, r2
     120:	bf1f      	itttt	ne
     122:	ea54 0c00 	orrsne.w	ip, r4, r0
     126:	ea55 0c02 	orrsne.w	ip, r5, r2
     12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     132:	f000 80e2 	beq.w	2fa <__data_size+0x10e>
     136:	ea4f 5454 	mov.w	r4, r4, lsr #21
     13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     13e:	bfb8      	it	lt
     140:	426d      	neglt	r5, r5
     142:	dd0c      	ble.n	15e <CONFIG_IDLE_STACK_SIZE+0x1e>
     144:	442c      	add	r4, r5
     146:	ea80 0202 	eor.w	r2, r0, r2
     14a:	ea81 0303 	eor.w	r3, r1, r3
     14e:	ea82 0000 	eor.w	r0, r2, r0
     152:	ea83 0101 	eor.w	r1, r3, r1
     156:	ea80 0202 	eor.w	r2, r0, r2
     15a:	ea81 0303 	eor.w	r3, r1, r3
     15e:	2d36      	cmp	r5, #54	; 0x36
     160:	bf88      	it	hi
     162:	bd30      	pophi	{r4, r5, pc}
     164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     168:	ea4f 3101 	mov.w	r1, r1, lsl #12
     16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     174:	d002      	beq.n	17c <CONFIG_IDLE_STACK_SIZE+0x3c>
     176:	4240      	negs	r0, r0
     178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     180:	ea4f 3303 	mov.w	r3, r3, lsl #12
     184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     188:	d002      	beq.n	190 <CONFIG_IDLE_STACK_SIZE+0x50>
     18a:	4252      	negs	r2, r2
     18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     190:	ea94 0f05 	teq	r4, r5
     194:	f000 80a7 	beq.w	2e6 <__data_size+0xfa>
     198:	f1a4 0401 	sub.w	r4, r4, #1
     19c:	f1d5 0e20 	rsbs	lr, r5, #32
     1a0:	db0d      	blt.n	1be <CONFIG_IDLE_STACK_SIZE+0x7e>
     1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
     1a6:	fa22 f205 	lsr.w	r2, r2, r5
     1aa:	1880      	adds	r0, r0, r2
     1ac:	f141 0100 	adc.w	r1, r1, #0
     1b0:	fa03 f20e 	lsl.w	r2, r3, lr
     1b4:	1880      	adds	r0, r0, r2
     1b6:	fa43 f305 	asr.w	r3, r3, r5
     1ba:	4159      	adcs	r1, r3
     1bc:	e00e      	b.n	1dc <CONFIG_IDLE_STACK_SIZE+0x9c>
     1be:	f1a5 0520 	sub.w	r5, r5, #32
     1c2:	f10e 0e20 	add.w	lr, lr, #32
     1c6:	2a01      	cmp	r2, #1
     1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1cc:	bf28      	it	cs
     1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
     1d2:	fa43 f305 	asr.w	r3, r3, r5
     1d6:	18c0      	adds	r0, r0, r3
     1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1e0:	d507      	bpl.n	1f2 <__data_size+0x6>
     1e2:	f04f 0e00 	mov.w	lr, #0
     1e6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ee:	eb6e 0101 	sbc.w	r1, lr, r1
     1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1f6:	d31b      	bcc.n	230 <__data_size+0x44>
     1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1fc:	d30c      	bcc.n	218 <__data_size+0x2c>
     1fe:	0849      	lsrs	r1, r1, #1
     200:	ea5f 0030 	movs.w	r0, r0, rrx
     204:	ea4f 0c3c 	mov.w	ip, ip, rrx
     208:	f104 0401 	add.w	r4, r4, #1
     20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     214:	f080 809a 	bcs.w	34c <__data_size+0x160>
     218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     21c:	bf08      	it	eq
     21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     222:	f150 0000 	adcs.w	r0, r0, #0
     226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     22a:	ea41 0105 	orr.w	r1, r1, r5
     22e:	bd30      	pop	{r4, r5, pc}
     230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     234:	4140      	adcs	r0, r0
     236:	eb41 0101 	adc.w	r1, r1, r1
     23a:	3c01      	subs	r4, #1
     23c:	bf28      	it	cs
     23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     242:	d2e9      	bcs.n	218 <__data_size+0x2c>
     244:	f091 0f00 	teq	r1, #0
     248:	bf04      	itt	eq
     24a:	4601      	moveq	r1, r0
     24c:	2000      	moveq	r0, #0
     24e:	fab1 f381 	clz	r3, r1
     252:	bf08      	it	eq
     254:	3320      	addeq	r3, #32
     256:	f1a3 030b 	sub.w	r3, r3, #11
     25a:	f1b3 0220 	subs.w	r2, r3, #32
     25e:	da0c      	bge.n	27a <__data_size+0x8e>
     260:	320c      	adds	r2, #12
     262:	dd08      	ble.n	276 <__data_size+0x8a>
     264:	f102 0c14 	add.w	ip, r2, #20
     268:	f1c2 020c 	rsb	r2, r2, #12
     26c:	fa01 f00c 	lsl.w	r0, r1, ip
     270:	fa21 f102 	lsr.w	r1, r1, r2
     274:	e00c      	b.n	290 <__data_size+0xa4>
     276:	f102 0214 	add.w	r2, r2, #20
     27a:	bfd8      	it	le
     27c:	f1c2 0c20 	rsble	ip, r2, #32
     280:	fa01 f102 	lsl.w	r1, r1, r2
     284:	fa20 fc0c 	lsr.w	ip, r0, ip
     288:	bfdc      	itt	le
     28a:	ea41 010c 	orrle.w	r1, r1, ip
     28e:	4090      	lslle	r0, r2
     290:	1ae4      	subs	r4, r4, r3
     292:	bfa2      	ittt	ge
     294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     298:	4329      	orrge	r1, r5
     29a:	bd30      	popge	{r4, r5, pc}
     29c:	ea6f 0404 	mvn.w	r4, r4
     2a0:	3c1f      	subs	r4, #31
     2a2:	da1c      	bge.n	2de <__data_size+0xf2>
     2a4:	340c      	adds	r4, #12
     2a6:	dc0e      	bgt.n	2c6 <__data_size+0xda>
     2a8:	f104 0414 	add.w	r4, r4, #20
     2ac:	f1c4 0220 	rsb	r2, r4, #32
     2b0:	fa20 f004 	lsr.w	r0, r0, r4
     2b4:	fa01 f302 	lsl.w	r3, r1, r2
     2b8:	ea40 0003 	orr.w	r0, r0, r3
     2bc:	fa21 f304 	lsr.w	r3, r1, r4
     2c0:	ea45 0103 	orr.w	r1, r5, r3
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f1c4 040c 	rsb	r4, r4, #12
     2ca:	f1c4 0220 	rsb	r2, r4, #32
     2ce:	fa20 f002 	lsr.w	r0, r0, r2
     2d2:	fa01 f304 	lsl.w	r3, r1, r4
     2d6:	ea40 0003 	orr.w	r0, r0, r3
     2da:	4629      	mov	r1, r5
     2dc:	bd30      	pop	{r4, r5, pc}
     2de:	fa21 f004 	lsr.w	r0, r1, r4
     2e2:	4629      	mov	r1, r5
     2e4:	bd30      	pop	{r4, r5, pc}
     2e6:	f094 0f00 	teq	r4, #0
     2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ee:	bf06      	itte	eq
     2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2f4:	3401      	addeq	r4, #1
     2f6:	3d01      	subne	r5, #1
     2f8:	e74e      	b.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2fe:	bf18      	it	ne
     300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     304:	d029      	beq.n	35a <__data_size+0x16e>
     306:	ea94 0f05 	teq	r4, r5
     30a:	bf08      	it	eq
     30c:	ea90 0f02 	teqeq	r0, r2
     310:	d005      	beq.n	31e <__data_size+0x132>
     312:	ea54 0c00 	orrs.w	ip, r4, r0
     316:	bf04      	itt	eq
     318:	4619      	moveq	r1, r3
     31a:	4610      	moveq	r0, r2
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	ea91 0f03 	teq	r1, r3
     322:	bf1e      	ittt	ne
     324:	2100      	movne	r1, #0
     326:	2000      	movne	r0, #0
     328:	bd30      	popne	{r4, r5, pc}
     32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     32e:	d105      	bne.n	33c <__data_size+0x150>
     330:	0040      	lsls	r0, r0, #1
     332:	4149      	adcs	r1, r1
     334:	bf28      	it	cs
     336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     33a:	bd30      	pop	{r4, r5, pc}
     33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     340:	bf3c      	itt	cc
     342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     346:	bd30      	popcc	{r4, r5, pc}
     348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     354:	f04f 0000 	mov.w	r0, #0
     358:	bd30      	pop	{r4, r5, pc}
     35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     35e:	bf1a      	itte	ne
     360:	4619      	movne	r1, r3
     362:	4610      	movne	r0, r2
     364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     368:	bf1c      	itt	ne
     36a:	460b      	movne	r3, r1
     36c:	4602      	movne	r2, r0
     36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     372:	bf06      	itte	eq
     374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     378:	ea91 0f03 	teqeq	r1, r3
     37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     380:	bd30      	pop	{r4, r5, pc}
     382:	bf00      	nop

00000384 <__aeabi_ui2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f04f 0500 	mov.w	r5, #0
     39c:	f04f 0100 	mov.w	r1, #0
     3a0:	e750      	b.n	244 <__data_size+0x58>
     3a2:	bf00      	nop

000003a4 <__aeabi_i2d>:
     3a4:	f090 0f00 	teq	r0, #0
     3a8:	bf04      	itt	eq
     3aa:	2100      	moveq	r1, #0
     3ac:	4770      	bxeq	lr
     3ae:	b530      	push	{r4, r5, lr}
     3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     3bc:	bf48      	it	mi
     3be:	4240      	negmi	r0, r0
     3c0:	f04f 0100 	mov.w	r1, #0
     3c4:	e73e      	b.n	244 <__data_size+0x58>
     3c6:	bf00      	nop

000003c8 <__aeabi_f2d>:
     3c8:	0042      	lsls	r2, r0, #1
     3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ce:	ea4f 0131 	mov.w	r1, r1, rrx
     3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3d6:	bf1f      	itttt	ne
     3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3e4:	4770      	bxne	lr
     3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ea:	bf08      	it	eq
     3ec:	4770      	bxeq	lr
     3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3f2:	bf04      	itt	eq
     3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3f8:	4770      	bxeq	lr
     3fa:	b530      	push	{r4, r5, lr}
     3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
     400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     408:	e71c      	b.n	244 <__data_size+0x58>
     40a:	bf00      	nop

0000040c <__aeabi_ul2d>:
     40c:	ea50 0201 	orrs.w	r2, r0, r1
     410:	bf08      	it	eq
     412:	4770      	bxeq	lr
     414:	b530      	push	{r4, r5, lr}
     416:	f04f 0500 	mov.w	r5, #0
     41a:	e00a      	b.n	432 <__aeabi_l2d+0x16>

0000041c <__aeabi_l2d>:
     41c:	ea50 0201 	orrs.w	r2, r0, r1
     420:	bf08      	it	eq
     422:	4770      	bxeq	lr
     424:	b530      	push	{r4, r5, lr}
     426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     42a:	d502      	bpl.n	432 <__aeabi_l2d+0x16>
     42c:	4240      	negs	r0, r0
     42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     432:	f44f 6480 	mov.w	r4, #1024	; 0x400
     436:	f104 0432 	add.w	r4, r4, #50	; 0x32
     43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     43e:	f43f aed8 	beq.w	1f2 <__data_size+0x6>
     442:	f04f 0203 	mov.w	r2, #3
     446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     44a:	bf18      	it	ne
     44c:	3203      	addne	r2, #3
     44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     452:	bf18      	it	ne
     454:	3203      	addne	r2, #3
     456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     45a:	f1c2 0320 	rsb	r3, r2, #32
     45e:	fa00 fc03 	lsl.w	ip, r0, r3
     462:	fa20 f002 	lsr.w	r0, r0, r2
     466:	fa01 fe03 	lsl.w	lr, r1, r3
     46a:	ea40 000e 	orr.w	r0, r0, lr
     46e:	fa21 f102 	lsr.w	r1, r1, r2
     472:	4414      	add	r4, r2
     474:	e6bd      	b.n	1f2 <__data_size+0x6>
     476:	bf00      	nop

00000478 <__aeabi_dmul>:
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     47e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     486:	bf1d      	ittte	ne
     488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     48c:	ea94 0f0c 	teqne	r4, ip
     490:	ea95 0f0c 	teqne	r5, ip
     494:	f000 f8de 	bleq	654 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x16c>
     498:	442c      	add	r4, r5
     49a:	ea81 0603 	eor.w	r6, r1, r3
     49e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     4aa:	bf18      	it	ne
     4ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     4b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     4b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     4b8:	d038      	beq.n	52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>
     4ba:	fba0 ce02 	umull	ip, lr, r0, r2
     4be:	f04f 0500 	mov.w	r5, #0
     4c2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4ca:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ce:	f04f 0600 	mov.w	r6, #0
     4d2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4d6:	f09c 0f00 	teq	ip, #0
     4da:	bf18      	it	ne
     4dc:	f04e 0e01 	orrne.w	lr, lr, #1
     4e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4ec:	d204      	bcs.n	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
     4ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4f2:	416d      	adcs	r5, r5
     4f4:	eb46 0606 	adc.w	r6, r6, r6
     4f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     50c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     510:	bf88      	it	hi
     512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     516:	d81e      	bhi.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     51c:	bf08      	it	eq
     51e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     522:	f150 0000 	adcs.w	r0, r0, #0
     526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     52a:	bd70      	pop	{r4, r5, r6, pc}
     52c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     530:	ea46 0101 	orr.w	r1, r6, r1
     534:	ea40 0002 	orr.w	r0, r0, r2
     538:	ea81 0103 	eor.w	r1, r1, r3
     53c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     540:	bfc2      	ittt	gt
     542:	ebd4 050c 	rsbsgt	r5, r4, ip
     546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     54a:	bd70      	popgt	{r4, r5, r6, pc}
     54c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     550:	f04f 0e00 	mov.w	lr, #0
     554:	3c01      	subs	r4, #1
     556:	f300 80ab 	bgt.w	6b0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c8>
     55a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     55e:	bfde      	ittt	le
     560:	2000      	movle	r0, #0
     562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     566:	bd70      	pople	{r4, r5, r6, pc}
     568:	f1c4 0400 	rsb	r4, r4, #0
     56c:	3c20      	subs	r4, #32
     56e:	da35      	bge.n	5dc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf4>
     570:	340c      	adds	r4, #12
     572:	dc1b      	bgt.n	5ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc4>
     574:	f104 0414 	add.w	r4, r4, #20
     578:	f1c4 0520 	rsb	r5, r4, #32
     57c:	fa00 f305 	lsl.w	r3, r0, r5
     580:	fa20 f004 	lsr.w	r0, r0, r4
     584:	fa01 f205 	lsl.w	r2, r1, r5
     588:	ea40 0002 	orr.w	r0, r0, r2
     58c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     598:	fa21 f604 	lsr.w	r6, r1, r4
     59c:	eb42 0106 	adc.w	r1, r2, r6
     5a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5a4:	bf08      	it	eq
     5a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5aa:	bd70      	pop	{r4, r5, r6, pc}
     5ac:	f1c4 040c 	rsb	r4, r4, #12
     5b0:	f1c4 0520 	rsb	r5, r4, #32
     5b4:	fa00 f304 	lsl.w	r3, r0, r4
     5b8:	fa20 f005 	lsr.w	r0, r0, r5
     5bc:	fa01 f204 	lsl.w	r2, r1, r4
     5c0:	ea40 0002 	orr.w	r0, r0, r2
     5c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5cc:	f141 0100 	adc.w	r1, r1, #0
     5d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5d4:	bf08      	it	eq
     5d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5da:	bd70      	pop	{r4, r5, r6, pc}
     5dc:	f1c4 0520 	rsb	r5, r4, #32
     5e0:	fa00 f205 	lsl.w	r2, r0, r5
     5e4:	ea4e 0e02 	orr.w	lr, lr, r2
     5e8:	fa20 f304 	lsr.w	r3, r0, r4
     5ec:	fa01 f205 	lsl.w	r2, r1, r5
     5f0:	ea43 0302 	orr.w	r3, r3, r2
     5f4:	fa21 f004 	lsr.w	r0, r1, r4
     5f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5fc:	fa21 f204 	lsr.w	r2, r1, r4
     600:	ea20 0002 	bic.w	r0, r0, r2
     604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     60c:	bf08      	it	eq
     60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     612:	bd70      	pop	{r4, r5, r6, pc}
     614:	f094 0f00 	teq	r4, #0
     618:	d10f      	bne.n	63a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x152>
     61a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     61e:	0040      	lsls	r0, r0, #1
     620:	eb41 0101 	adc.w	r1, r1, r1
     624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3c01      	subeq	r4, #1
     62c:	d0f7      	beq.n	61e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x136>
     62e:	ea41 0106 	orr.w	r1, r1, r6
     632:	f095 0f00 	teq	r5, #0
     636:	bf18      	it	ne
     638:	4770      	bxne	lr
     63a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     63e:	0052      	lsls	r2, r2, #1
     640:	eb43 0303 	adc.w	r3, r3, r3
     644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     648:	bf08      	it	eq
     64a:	3d01      	subeq	r5, #1
     64c:	d0f7      	beq.n	63e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x156>
     64e:	ea43 0306 	orr.w	r3, r3, r6
     652:	4770      	bx	lr
     654:	ea94 0f0c 	teq	r4, ip
     658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     65c:	bf18      	it	ne
     65e:	ea95 0f0c 	teqne	r5, ip
     662:	d00c      	beq.n	67e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x196>
     664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     668:	bf18      	it	ne
     66a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66e:	d1d1      	bne.n	614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>
     670:	ea81 0103 	eor.w	r1, r1, r3
     674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     678:	f04f 0000 	mov.w	r0, #0
     67c:	bd70      	pop	{r4, r5, r6, pc}
     67e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     682:	bf06      	itte	eq
     684:	4610      	moveq	r0, r2
     686:	4619      	moveq	r1, r3
     688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     68c:	d019      	beq.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     68e:	ea94 0f0c 	teq	r4, ip
     692:	d102      	bne.n	69a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1b2>
     694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     698:	d113      	bne.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     69a:	ea95 0f0c 	teq	r5, ip
     69e:	d105      	bne.n	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     6a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6a4:	bf1c      	itt	ne
     6a6:	4610      	movne	r0, r2
     6a8:	4619      	movne	r1, r3
     6aa:	d10a      	bne.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     6ac:	ea81 0103 	eor.w	r1, r1, r3
     6b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     6bc:	f04f 0000 	mov.w	r0, #0
     6c0:	bd70      	pop	{r4, r5, r6, pc}
     6c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6ca:	bd70      	pop	{r4, r5, r6, pc}

000006cc <__aeabi_ddiv>:
     6cc:	b570      	push	{r4, r5, r6, lr}
     6ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6da:	bf1d      	ittte	ne
     6dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6e0:	ea94 0f0c 	teqne	r4, ip
     6e4:	ea95 0f0c 	teqne	r5, ip
     6e8:	f000 f8a7 	bleq	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     6ec:	eba4 0405 	sub.w	r4, r4, r5
     6f0:	ea81 0e03 	eor.w	lr, r1, r3
     6f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6fc:	f000 8088 	beq.w	810 <CONFIG_ISR_STACK_SIZE+0x10>
     700:	ea4f 3303 	mov.w	r3, r3, lsl #12
     704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     70c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     710:	ea4f 2202 	mov.w	r2, r2, lsl #8
     714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     71c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     724:	429d      	cmp	r5, r3
     726:	bf08      	it	eq
     728:	4296      	cmpeq	r6, r2
     72a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     72e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     732:	d202      	bcs.n	73a <__aeabi_ddiv+0x6e>
     734:	085b      	lsrs	r3, r3, #1
     736:	ea4f 0232 	mov.w	r2, r2, rrx
     73a:	1ab6      	subs	r6, r6, r2
     73c:	eb65 0503 	sbc.w	r5, r5, r3
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     74a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     74e:	ebb6 0e02 	subs.w	lr, r6, r2
     752:	eb75 0e03 	sbcs.w	lr, r5, r3
     756:	bf22      	ittt	cs
     758:	1ab6      	subcs	r6, r6, r2
     75a:	4675      	movcs	r5, lr
     75c:	ea40 000c 	orrcs.w	r0, r0, ip
     760:	085b      	lsrs	r3, r3, #1
     762:	ea4f 0232 	mov.w	r2, r2, rrx
     766:	ebb6 0e02 	subs.w	lr, r6, r2
     76a:	eb75 0e03 	sbcs.w	lr, r5, r3
     76e:	bf22      	ittt	cs
     770:	1ab6      	subcs	r6, r6, r2
     772:	4675      	movcs	r5, lr
     774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     778:	085b      	lsrs	r3, r3, #1
     77a:	ea4f 0232 	mov.w	r2, r2, rrx
     77e:	ebb6 0e02 	subs.w	lr, r6, r2
     782:	eb75 0e03 	sbcs.w	lr, r5, r3
     786:	bf22      	ittt	cs
     788:	1ab6      	subcs	r6, r6, r2
     78a:	4675      	movcs	r5, lr
     78c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     790:	085b      	lsrs	r3, r3, #1
     792:	ea4f 0232 	mov.w	r2, r2, rrx
     796:	ebb6 0e02 	subs.w	lr, r6, r2
     79a:	eb75 0e03 	sbcs.w	lr, r5, r3
     79e:	bf22      	ittt	cs
     7a0:	1ab6      	subcs	r6, r6, r2
     7a2:	4675      	movcs	r5, lr
     7a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     7a8:	ea55 0e06 	orrs.w	lr, r5, r6
     7ac:	d018      	beq.n	7e0 <__aeabi_ddiv+0x114>
     7ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
     7b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     7b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
     7ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     7be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7ca:	d1c0      	bne.n	74e <__aeabi_ddiv+0x82>
     7cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7d0:	d10b      	bne.n	7ea <__aeabi_ddiv+0x11e>
     7d2:	ea41 0100 	orr.w	r1, r1, r0
     7d6:	f04f 0000 	mov.w	r0, #0
     7da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7de:	e7b6      	b.n	74e <__aeabi_ddiv+0x82>
     7e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7e4:	bf04      	itt	eq
     7e6:	4301      	orreq	r1, r0
     7e8:	2000      	moveq	r0, #0
     7ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ee:	bf88      	it	hi
     7f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7f4:	f63f aeaf 	bhi.w	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     7f8:	ebb5 0c03 	subs.w	ip, r5, r3
     7fc:	bf04      	itt	eq
     7fe:	ebb6 0c02 	subseq.w	ip, r6, r2
     802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     806:	f150 0000 	adcs.w	r0, r0, #0
     80a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     80e:	bd70      	pop	{r4, r5, r6, pc}
     810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     81c:	bfc2      	ittt	gt
     81e:	ebd4 050c 	rsbsgt	r5, r4, ip
     822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     826:	bd70      	popgt	{r4, r5, r6, pc}
     828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     82c:	f04f 0e00 	mov.w	lr, #0
     830:	3c01      	subs	r4, #1
     832:	e690      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     834:	ea45 0e06 	orr.w	lr, r5, r6
     838:	e68d      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     83a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     83e:	ea94 0f0c 	teq	r4, ip
     842:	bf08      	it	eq
     844:	ea95 0f0c 	teqeq	r5, ip
     848:	f43f af3b 	beq.w	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     84c:	ea94 0f0c 	teq	r4, ip
     850:	d10a      	bne.n	868 <CONFIG_ISR_STACK_SIZE+0x68>
     852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     856:	f47f af34 	bne.w	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     85a:	ea95 0f0c 	teq	r5, ip
     85e:	f47f af25 	bne.w	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     862:	4610      	mov	r0, r2
     864:	4619      	mov	r1, r3
     866:	e72c      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     868:	ea95 0f0c 	teq	r5, ip
     86c:	d106      	bne.n	87c <CONFIG_ISR_STACK_SIZE+0x7c>
     86e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     872:	f43f aefd 	beq.w	670 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x188>
     876:	4610      	mov	r0, r2
     878:	4619      	mov	r1, r3
     87a:	e722      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     87c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     880:	bf18      	it	ne
     882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     886:	f47f aec5 	bne.w	614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>
     88a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     88e:	f47f af0d 	bne.w	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     896:	f47f aeeb 	bne.w	670 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x188>
     89a:	e712      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>

0000089c <__aeabi_d2f>:
     89c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     8a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     8a4:	bf24      	itt	cs
     8a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     8aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     8ae:	d90d      	bls.n	8cc <__aeabi_d2f+0x30>
     8b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     8b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     8b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     8bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     8c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     8c4:	bf08      	it	eq
     8c6:	f020 0001 	biceq.w	r0, r0, #1
     8ca:	4770      	bx	lr
     8cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     8d0:	d121      	bne.n	916 <__aeabi_d2f+0x7a>
     8d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     8d6:	bfbc      	itt	lt
     8d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     8dc:	4770      	bxlt	lr
     8de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     8e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
     8e6:	f1c2 0218 	rsb	r2, r2, #24
     8ea:	f1c2 0c20 	rsb	ip, r2, #32
     8ee:	fa10 f30c 	lsls.w	r3, r0, ip
     8f2:	fa20 f002 	lsr.w	r0, r0, r2
     8f6:	bf18      	it	ne
     8f8:	f040 0001 	orrne.w	r0, r0, #1
     8fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     900:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     904:	fa03 fc0c 	lsl.w	ip, r3, ip
     908:	ea40 000c 	orr.w	r0, r0, ip
     90c:	fa23 f302 	lsr.w	r3, r3, r2
     910:	ea4f 0343 	mov.w	r3, r3, lsl #1
     914:	e7cc      	b.n	8b0 <__aeabi_d2f+0x14>
     916:	ea7f 5362 	mvns.w	r3, r2, asr #21
     91a:	d107      	bne.n	92c <__aeabi_d2f+0x90>
     91c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     920:	bf1e      	ittt	ne
     922:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     926:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     92a:	4770      	bxne	lr
     92c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     930:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     934:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     938:	4770      	bx	lr
     93a:	bf00      	nop

0000093c <__aeabi_frsub>:
     93c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     940:	e002      	b.n	948 <__addsf3>
     942:	bf00      	nop

00000944 <__aeabi_fsub>:
     944:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000948 <__addsf3>:
     948:	0042      	lsls	r2, r0, #1
     94a:	bf1f      	itttt	ne
     94c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     950:	ea92 0f03 	teqne	r2, r3
     954:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     958:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     95c:	d06a      	beq.n	a34 <__addsf3+0xec>
     95e:	ea4f 6212 	mov.w	r2, r2, lsr #24
     962:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     966:	bfc1      	itttt	gt
     968:	18d2      	addgt	r2, r2, r3
     96a:	4041      	eorgt	r1, r0
     96c:	4048      	eorgt	r0, r1
     96e:	4041      	eorgt	r1, r0
     970:	bfb8      	it	lt
     972:	425b      	neglt	r3, r3
     974:	2b19      	cmp	r3, #25
     976:	bf88      	it	hi
     978:	4770      	bxhi	lr
     97a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     97e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     982:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     986:	bf18      	it	ne
     988:	4240      	negne	r0, r0
     98a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     98e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     992:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     996:	bf18      	it	ne
     998:	4249      	negne	r1, r1
     99a:	ea92 0f03 	teq	r2, r3
     99e:	d03f      	beq.n	a20 <__addsf3+0xd8>
     9a0:	f1a2 0201 	sub.w	r2, r2, #1
     9a4:	fa41 fc03 	asr.w	ip, r1, r3
     9a8:	eb10 000c 	adds.w	r0, r0, ip
     9ac:	f1c3 0320 	rsb	r3, r3, #32
     9b0:	fa01 f103 	lsl.w	r1, r1, r3
     9b4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     9b8:	d502      	bpl.n	9c0 <__addsf3+0x78>
     9ba:	4249      	negs	r1, r1
     9bc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     9c0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     9c4:	d313      	bcc.n	9ee <__addsf3+0xa6>
     9c6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     9ca:	d306      	bcc.n	9da <__addsf3+0x92>
     9cc:	0840      	lsrs	r0, r0, #1
     9ce:	ea4f 0131 	mov.w	r1, r1, rrx
     9d2:	f102 0201 	add.w	r2, r2, #1
     9d6:	2afe      	cmp	r2, #254	; 0xfe
     9d8:	d251      	bcs.n	a7e <__addsf3+0x136>
     9da:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     9de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     9e2:	bf08      	it	eq
     9e4:	f020 0001 	biceq.w	r0, r0, #1
     9e8:	ea40 0003 	orr.w	r0, r0, r3
     9ec:	4770      	bx	lr
     9ee:	0049      	lsls	r1, r1, #1
     9f0:	eb40 0000 	adc.w	r0, r0, r0
     9f4:	3a01      	subs	r2, #1
     9f6:	bf28      	it	cs
     9f8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     9fc:	d2ed      	bcs.n	9da <__addsf3+0x92>
     9fe:	fab0 fc80 	clz	ip, r0
     a02:	f1ac 0c08 	sub.w	ip, ip, #8
     a06:	ebb2 020c 	subs.w	r2, r2, ip
     a0a:	fa00 f00c 	lsl.w	r0, r0, ip
     a0e:	bfaa      	itet	ge
     a10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     a14:	4252      	neglt	r2, r2
     a16:	4318      	orrge	r0, r3
     a18:	bfbc      	itt	lt
     a1a:	40d0      	lsrlt	r0, r2
     a1c:	4318      	orrlt	r0, r3
     a1e:	4770      	bx	lr
     a20:	f092 0f00 	teq	r2, #0
     a24:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     a28:	bf06      	itte	eq
     a2a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     a2e:	3201      	addeq	r2, #1
     a30:	3b01      	subne	r3, #1
     a32:	e7b5      	b.n	9a0 <__addsf3+0x58>
     a34:	ea4f 0341 	mov.w	r3, r1, lsl #1
     a38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     a3c:	bf18      	it	ne
     a3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     a42:	d021      	beq.n	a88 <__addsf3+0x140>
     a44:	ea92 0f03 	teq	r2, r3
     a48:	d004      	beq.n	a54 <__addsf3+0x10c>
     a4a:	f092 0f00 	teq	r2, #0
     a4e:	bf08      	it	eq
     a50:	4608      	moveq	r0, r1
     a52:	4770      	bx	lr
     a54:	ea90 0f01 	teq	r0, r1
     a58:	bf1c      	itt	ne
     a5a:	2000      	movne	r0, #0
     a5c:	4770      	bxne	lr
     a5e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     a62:	d104      	bne.n	a6e <__addsf3+0x126>
     a64:	0040      	lsls	r0, r0, #1
     a66:	bf28      	it	cs
     a68:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     a6c:	4770      	bx	lr
     a6e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     a72:	bf3c      	itt	cc
     a74:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     a78:	4770      	bxcc	lr
     a7a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     a7e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     a82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     a86:	4770      	bx	lr
     a88:	ea7f 6222 	mvns.w	r2, r2, asr #24
     a8c:	bf16      	itet	ne
     a8e:	4608      	movne	r0, r1
     a90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     a94:	4601      	movne	r1, r0
     a96:	0242      	lsls	r2, r0, #9
     a98:	bf06      	itte	eq
     a9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     a9e:	ea90 0f01 	teqeq	r0, r1
     aa2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     aa6:	4770      	bx	lr

00000aa8 <__aeabi_ui2f>:
     aa8:	f04f 0300 	mov.w	r3, #0
     aac:	e004      	b.n	ab8 <__aeabi_i2f+0x8>
     aae:	bf00      	nop

00000ab0 <__aeabi_i2f>:
     ab0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     ab4:	bf48      	it	mi
     ab6:	4240      	negmi	r0, r0
     ab8:	ea5f 0c00 	movs.w	ip, r0
     abc:	bf08      	it	eq
     abe:	4770      	bxeq	lr
     ac0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     ac4:	4601      	mov	r1, r0
     ac6:	f04f 0000 	mov.w	r0, #0
     aca:	e01c      	b.n	b06 <__aeabi_l2f+0x2a>

00000acc <__aeabi_ul2f>:
     acc:	ea50 0201 	orrs.w	r2, r0, r1
     ad0:	bf08      	it	eq
     ad2:	4770      	bxeq	lr
     ad4:	f04f 0300 	mov.w	r3, #0
     ad8:	e00a      	b.n	af0 <__aeabi_l2f+0x14>
     ada:	bf00      	nop

00000adc <__aeabi_l2f>:
     adc:	ea50 0201 	orrs.w	r2, r0, r1
     ae0:	bf08      	it	eq
     ae2:	4770      	bxeq	lr
     ae4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     ae8:	d502      	bpl.n	af0 <__aeabi_l2f+0x14>
     aea:	4240      	negs	r0, r0
     aec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     af0:	ea5f 0c01 	movs.w	ip, r1
     af4:	bf02      	ittt	eq
     af6:	4684      	moveq	ip, r0
     af8:	4601      	moveq	r1, r0
     afa:	2000      	moveq	r0, #0
     afc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     b00:	bf08      	it	eq
     b02:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     b06:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     b0a:	fabc f28c 	clz	r2, ip
     b0e:	3a08      	subs	r2, #8
     b10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     b14:	db10      	blt.n	b38 <__aeabi_l2f+0x5c>
     b16:	fa01 fc02 	lsl.w	ip, r1, r2
     b1a:	4463      	add	r3, ip
     b1c:	fa00 fc02 	lsl.w	ip, r0, r2
     b20:	f1c2 0220 	rsb	r2, r2, #32
     b24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     b28:	fa20 f202 	lsr.w	r2, r0, r2
     b2c:	eb43 0002 	adc.w	r0, r3, r2
     b30:	bf08      	it	eq
     b32:	f020 0001 	biceq.w	r0, r0, #1
     b36:	4770      	bx	lr
     b38:	f102 0220 	add.w	r2, r2, #32
     b3c:	fa01 fc02 	lsl.w	ip, r1, r2
     b40:	f1c2 0220 	rsb	r2, r2, #32
     b44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     b48:	fa21 f202 	lsr.w	r2, r1, r2
     b4c:	eb43 0002 	adc.w	r0, r3, r2
     b50:	bf08      	it	eq
     b52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     b56:	4770      	bx	lr

00000b58 <__aeabi_fmul>:
     b58:	f04f 0cff 	mov.w	ip, #255	; 0xff
     b5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     b60:	bf1e      	ittt	ne
     b62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     b66:	ea92 0f0c 	teqne	r2, ip
     b6a:	ea93 0f0c 	teqne	r3, ip
     b6e:	d06f      	beq.n	c50 <__aeabi_fmul+0xf8>
     b70:	441a      	add	r2, r3
     b72:	ea80 0c01 	eor.w	ip, r0, r1
     b76:	0240      	lsls	r0, r0, #9
     b78:	bf18      	it	ne
     b7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     b7e:	d01e      	beq.n	bbe <__aeabi_fmul+0x66>
     b80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     b84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     b88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     b8c:	fba0 3101 	umull	r3, r1, r0, r1
     b90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     b94:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     b98:	bf3e      	ittt	cc
     b9a:	0049      	lslcc	r1, r1, #1
     b9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     ba0:	005b      	lslcc	r3, r3, #1
     ba2:	ea40 0001 	orr.w	r0, r0, r1
     ba6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     baa:	2afd      	cmp	r2, #253	; 0xfd
     bac:	d81d      	bhi.n	bea <__aeabi_fmul+0x92>
     bae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     bb2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     bb6:	bf08      	it	eq
     bb8:	f020 0001 	biceq.w	r0, r0, #1
     bbc:	4770      	bx	lr
     bbe:	f090 0f00 	teq	r0, #0
     bc2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     bc6:	bf08      	it	eq
     bc8:	0249      	lsleq	r1, r1, #9
     bca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     bce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     bd2:	3a7f      	subs	r2, #127	; 0x7f
     bd4:	bfc2      	ittt	gt
     bd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     bda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     bde:	4770      	bxgt	lr
     be0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     be4:	f04f 0300 	mov.w	r3, #0
     be8:	3a01      	subs	r2, #1
     bea:	dc5d      	bgt.n	ca8 <__aeabi_fmul+0x150>
     bec:	f112 0f19 	cmn.w	r2, #25
     bf0:	bfdc      	itt	le
     bf2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     bf6:	4770      	bxle	lr
     bf8:	f1c2 0200 	rsb	r2, r2, #0
     bfc:	0041      	lsls	r1, r0, #1
     bfe:	fa21 f102 	lsr.w	r1, r1, r2
     c02:	f1c2 0220 	rsb	r2, r2, #32
     c06:	fa00 fc02 	lsl.w	ip, r0, r2
     c0a:	ea5f 0031 	movs.w	r0, r1, rrx
     c0e:	f140 0000 	adc.w	r0, r0, #0
     c12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     c16:	bf08      	it	eq
     c18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     c1c:	4770      	bx	lr
     c1e:	f092 0f00 	teq	r2, #0
     c22:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     c26:	bf02      	ittt	eq
     c28:	0040      	lsleq	r0, r0, #1
     c2a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     c2e:	3a01      	subeq	r2, #1
     c30:	d0f9      	beq.n	c26 <__aeabi_fmul+0xce>
     c32:	ea40 000c 	orr.w	r0, r0, ip
     c36:	f093 0f00 	teq	r3, #0
     c3a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     c3e:	bf02      	ittt	eq
     c40:	0049      	lsleq	r1, r1, #1
     c42:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     c46:	3b01      	subeq	r3, #1
     c48:	d0f9      	beq.n	c3e <__aeabi_fmul+0xe6>
     c4a:	ea41 010c 	orr.w	r1, r1, ip
     c4e:	e78f      	b.n	b70 <__aeabi_fmul+0x18>
     c50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     c54:	ea92 0f0c 	teq	r2, ip
     c58:	bf18      	it	ne
     c5a:	ea93 0f0c 	teqne	r3, ip
     c5e:	d00a      	beq.n	c76 <__aeabi_fmul+0x11e>
     c60:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     c64:	bf18      	it	ne
     c66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     c6a:	d1d8      	bne.n	c1e <__aeabi_fmul+0xc6>
     c6c:	ea80 0001 	eor.w	r0, r0, r1
     c70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     c74:	4770      	bx	lr
     c76:	f090 0f00 	teq	r0, #0
     c7a:	bf17      	itett	ne
     c7c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     c80:	4608      	moveq	r0, r1
     c82:	f091 0f00 	teqne	r1, #0
     c86:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     c8a:	d014      	beq.n	cb6 <__aeabi_fmul+0x15e>
     c8c:	ea92 0f0c 	teq	r2, ip
     c90:	d101      	bne.n	c96 <__aeabi_fmul+0x13e>
     c92:	0242      	lsls	r2, r0, #9
     c94:	d10f      	bne.n	cb6 <__aeabi_fmul+0x15e>
     c96:	ea93 0f0c 	teq	r3, ip
     c9a:	d103      	bne.n	ca4 <__aeabi_fmul+0x14c>
     c9c:	024b      	lsls	r3, r1, #9
     c9e:	bf18      	it	ne
     ca0:	4608      	movne	r0, r1
     ca2:	d108      	bne.n	cb6 <__aeabi_fmul+0x15e>
     ca4:	ea80 0001 	eor.w	r0, r0, r1
     ca8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     cb4:	4770      	bx	lr
     cb6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     cba:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     cbe:	4770      	bx	lr

00000cc0 <__aeabi_fdiv>:
     cc0:	f04f 0cff 	mov.w	ip, #255	; 0xff
     cc4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     cc8:	bf1e      	ittt	ne
     cca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     cce:	ea92 0f0c 	teqne	r2, ip
     cd2:	ea93 0f0c 	teqne	r3, ip
     cd6:	d069      	beq.n	dac <__aeabi_fdiv+0xec>
     cd8:	eba2 0203 	sub.w	r2, r2, r3
     cdc:	ea80 0c01 	eor.w	ip, r0, r1
     ce0:	0249      	lsls	r1, r1, #9
     ce2:	ea4f 2040 	mov.w	r0, r0, lsl #9
     ce6:	d037      	beq.n	d58 <__aeabi_fdiv+0x98>
     ce8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     cec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     cf0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     cf4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     cf8:	428b      	cmp	r3, r1
     cfa:	bf38      	it	cc
     cfc:	005b      	lslcc	r3, r3, #1
     cfe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     d02:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     d06:	428b      	cmp	r3, r1
     d08:	bf24      	itt	cs
     d0a:	1a5b      	subcs	r3, r3, r1
     d0c:	ea40 000c 	orrcs.w	r0, r0, ip
     d10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     d14:	bf24      	itt	cs
     d16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     d1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     d1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     d22:	bf24      	itt	cs
     d24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     d28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     d2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     d30:	bf24      	itt	cs
     d32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     d36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     d3a:	011b      	lsls	r3, r3, #4
     d3c:	bf18      	it	ne
     d3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     d42:	d1e0      	bne.n	d06 <__aeabi_fdiv+0x46>
     d44:	2afd      	cmp	r2, #253	; 0xfd
     d46:	f63f af50 	bhi.w	bea <__aeabi_fmul+0x92>
     d4a:	428b      	cmp	r3, r1
     d4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     d50:	bf08      	it	eq
     d52:	f020 0001 	biceq.w	r0, r0, #1
     d56:	4770      	bx	lr
     d58:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     d5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     d60:	327f      	adds	r2, #127	; 0x7f
     d62:	bfc2      	ittt	gt
     d64:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     d68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     d6c:	4770      	bxgt	lr
     d6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     d72:	f04f 0300 	mov.w	r3, #0
     d76:	3a01      	subs	r2, #1
     d78:	e737      	b.n	bea <__aeabi_fmul+0x92>
     d7a:	f092 0f00 	teq	r2, #0
     d7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     d82:	bf02      	ittt	eq
     d84:	0040      	lsleq	r0, r0, #1
     d86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     d8a:	3a01      	subeq	r2, #1
     d8c:	d0f9      	beq.n	d82 <__aeabi_fdiv+0xc2>
     d8e:	ea40 000c 	orr.w	r0, r0, ip
     d92:	f093 0f00 	teq	r3, #0
     d96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     d9a:	bf02      	ittt	eq
     d9c:	0049      	lsleq	r1, r1, #1
     d9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     da2:	3b01      	subeq	r3, #1
     da4:	d0f9      	beq.n	d9a <__aeabi_fdiv+0xda>
     da6:	ea41 010c 	orr.w	r1, r1, ip
     daa:	e795      	b.n	cd8 <__aeabi_fdiv+0x18>
     dac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     db0:	ea92 0f0c 	teq	r2, ip
     db4:	d108      	bne.n	dc8 <__aeabi_fdiv+0x108>
     db6:	0242      	lsls	r2, r0, #9
     db8:	f47f af7d 	bne.w	cb6 <__aeabi_fmul+0x15e>
     dbc:	ea93 0f0c 	teq	r3, ip
     dc0:	f47f af70 	bne.w	ca4 <__aeabi_fmul+0x14c>
     dc4:	4608      	mov	r0, r1
     dc6:	e776      	b.n	cb6 <__aeabi_fmul+0x15e>
     dc8:	ea93 0f0c 	teq	r3, ip
     dcc:	d104      	bne.n	dd8 <__aeabi_fdiv+0x118>
     dce:	024b      	lsls	r3, r1, #9
     dd0:	f43f af4c 	beq.w	c6c <__aeabi_fmul+0x114>
     dd4:	4608      	mov	r0, r1
     dd6:	e76e      	b.n	cb6 <__aeabi_fmul+0x15e>
     dd8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     ddc:	bf18      	it	ne
     dde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     de2:	d1ca      	bne.n	d7a <__aeabi_fdiv+0xba>
     de4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     de8:	f47f af5c 	bne.w	ca4 <__aeabi_fmul+0x14c>
     dec:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     df0:	f47f af3c 	bne.w	c6c <__aeabi_fmul+0x114>
     df4:	e75f      	b.n	cb6 <__aeabi_fmul+0x15e>
     df6:	bf00      	nop

00000df8 <__gesf2>:
     df8:	f04f 3cff 	mov.w	ip, #4294967295
     dfc:	e006      	b.n	e0c <__cmpsf2+0x4>
     dfe:	bf00      	nop

00000e00 <__lesf2>:
     e00:	f04f 0c01 	mov.w	ip, #1
     e04:	e002      	b.n	e0c <__cmpsf2+0x4>
     e06:	bf00      	nop

00000e08 <__cmpsf2>:
     e08:	f04f 0c01 	mov.w	ip, #1
     e0c:	f84d cd04 	str.w	ip, [sp, #-4]!
     e10:	ea4f 0240 	mov.w	r2, r0, lsl #1
     e14:	ea4f 0341 	mov.w	r3, r1, lsl #1
     e18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     e1c:	bf18      	it	ne
     e1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     e22:	d011      	beq.n	e48 <__cmpsf2+0x40>
     e24:	b001      	add	sp, #4
     e26:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
     e2a:	bf18      	it	ne
     e2c:	ea90 0f01 	teqne	r0, r1
     e30:	bf58      	it	pl
     e32:	ebb2 0003 	subspl.w	r0, r2, r3
     e36:	bf88      	it	hi
     e38:	17c8      	asrhi	r0, r1, #31
     e3a:	bf38      	it	cc
     e3c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
     e40:	bf18      	it	ne
     e42:	f040 0001 	orrne.w	r0, r0, #1
     e46:	4770      	bx	lr
     e48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     e4c:	d102      	bne.n	e54 <__cmpsf2+0x4c>
     e4e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
     e52:	d105      	bne.n	e60 <__cmpsf2+0x58>
     e54:	ea7f 6c23 	mvns.w	ip, r3, asr #24
     e58:	d1e4      	bne.n	e24 <__cmpsf2+0x1c>
     e5a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
     e5e:	d0e1      	beq.n	e24 <__cmpsf2+0x1c>
     e60:	f85d 0b04 	ldr.w	r0, [sp], #4
     e64:	4770      	bx	lr
     e66:	bf00      	nop

00000e68 <__aeabi_cfrcmple>:
     e68:	4684      	mov	ip, r0
     e6a:	4608      	mov	r0, r1
     e6c:	4661      	mov	r1, ip
     e6e:	e7ff      	b.n	e70 <__aeabi_cfcmpeq>

00000e70 <__aeabi_cfcmpeq>:
     e70:	b50f      	push	{r0, r1, r2, r3, lr}
     e72:	f7ff ffc9 	bl	e08 <__cmpsf2>
     e76:	2800      	cmp	r0, #0
     e78:	bf48      	it	mi
     e7a:	f110 0f00 	cmnmi.w	r0, #0
     e7e:	bd0f      	pop	{r0, r1, r2, r3, pc}

00000e80 <__aeabi_fcmpeq>:
     e80:	f84d ed08 	str.w	lr, [sp, #-8]!
     e84:	f7ff fff4 	bl	e70 <__aeabi_cfcmpeq>
     e88:	bf0c      	ite	eq
     e8a:	2001      	moveq	r0, #1
     e8c:	2000      	movne	r0, #0
     e8e:	f85d fb08 	ldr.w	pc, [sp], #8
     e92:	bf00      	nop

00000e94 <__aeabi_fcmplt>:
     e94:	f84d ed08 	str.w	lr, [sp, #-8]!
     e98:	f7ff ffea 	bl	e70 <__aeabi_cfcmpeq>
     e9c:	bf34      	ite	cc
     e9e:	2001      	movcc	r0, #1
     ea0:	2000      	movcs	r0, #0
     ea2:	f85d fb08 	ldr.w	pc, [sp], #8
     ea6:	bf00      	nop

00000ea8 <__aeabi_fcmple>:
     ea8:	f84d ed08 	str.w	lr, [sp, #-8]!
     eac:	f7ff ffe0 	bl	e70 <__aeabi_cfcmpeq>
     eb0:	bf94      	ite	ls
     eb2:	2001      	movls	r0, #1
     eb4:	2000      	movhi	r0, #0
     eb6:	f85d fb08 	ldr.w	pc, [sp], #8
     eba:	bf00      	nop

00000ebc <__aeabi_fcmpge>:
     ebc:	f84d ed08 	str.w	lr, [sp, #-8]!
     ec0:	f7ff ffd2 	bl	e68 <__aeabi_cfrcmple>
     ec4:	bf94      	ite	ls
     ec6:	2001      	movls	r0, #1
     ec8:	2000      	movhi	r0, #0
     eca:	f85d fb08 	ldr.w	pc, [sp], #8
     ece:	bf00      	nop

00000ed0 <__aeabi_fcmpgt>:
     ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
     ed4:	f7ff ffc8 	bl	e68 <__aeabi_cfrcmple>
     ed8:	bf34      	ite	cc
     eda:	2001      	movcc	r0, #1
     edc:	2000      	movcs	r0, #0
     ede:	f85d fb08 	ldr.w	pc, [sp], #8
     ee2:	bf00      	nop

00000ee4 <__aeabi_f2iz>:
     ee4:	ea4f 0240 	mov.w	r2, r0, lsl #1
     ee8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     eec:	d30f      	bcc.n	f0e <__aeabi_f2iz+0x2a>
     eee:	f04f 039e 	mov.w	r3, #158	; 0x9e
     ef2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     ef6:	d90d      	bls.n	f14 <__aeabi_f2iz+0x30>
     ef8:	ea4f 2300 	mov.w	r3, r0, lsl #8
     efc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     f00:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     f04:	fa23 f002 	lsr.w	r0, r3, r2
     f08:	bf18      	it	ne
     f0a:	4240      	negne	r0, r0
     f0c:	4770      	bx	lr
     f0e:	f04f 0000 	mov.w	r0, #0
     f12:	4770      	bx	lr
     f14:	f112 0f61 	cmn.w	r2, #97	; 0x61
     f18:	d101      	bne.n	f1e <__aeabi_f2iz+0x3a>
     f1a:	0242      	lsls	r2, r0, #9
     f1c:	d105      	bne.n	f2a <__aeabi_f2iz+0x46>
     f1e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
     f22:	bf08      	it	eq
     f24:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     f28:	4770      	bx	lr
     f2a:	f04f 0000 	mov.w	r0, #0
     f2e:	4770      	bx	lr

00000f30 <__aeabi_f2uiz>:
     f30:	0042      	lsls	r2, r0, #1
     f32:	d20e      	bcs.n	f52 <__aeabi_f2uiz+0x22>
     f34:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     f38:	d30b      	bcc.n	f52 <__aeabi_f2uiz+0x22>
     f3a:	f04f 039e 	mov.w	r3, #158	; 0x9e
     f3e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     f42:	d409      	bmi.n	f58 <__aeabi_f2uiz+0x28>
     f44:	ea4f 2300 	mov.w	r3, r0, lsl #8
     f48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     f4c:	fa23 f002 	lsr.w	r0, r3, r2
     f50:	4770      	bx	lr
     f52:	f04f 0000 	mov.w	r0, #0
     f56:	4770      	bx	lr
     f58:	f112 0f61 	cmn.w	r2, #97	; 0x61
     f5c:	d101      	bne.n	f62 <__aeabi_f2uiz+0x32>
     f5e:	0242      	lsls	r2, r0, #9
     f60:	d102      	bne.n	f68 <__aeabi_f2uiz+0x38>
     f62:	f04f 30ff 	mov.w	r0, #4294967295
     f66:	4770      	bx	lr
     f68:	f04f 0000 	mov.w	r0, #0
     f6c:	4770      	bx	lr
     f6e:	bf00      	nop

00000f70 <__aeabi_uldivmod>:
     f70:	b953      	cbnz	r3, f88 <__aeabi_uldivmod+0x18>
     f72:	b94a      	cbnz	r2, f88 <__aeabi_uldivmod+0x18>
     f74:	2900      	cmp	r1, #0
     f76:	bf08      	it	eq
     f78:	2800      	cmpeq	r0, #0
     f7a:	bf1c      	itt	ne
     f7c:	f04f 31ff 	movne.w	r1, #4294967295
     f80:	f04f 30ff 	movne.w	r0, #4294967295
     f84:	f000 b96c 	b.w	1260 <__aeabi_idiv0>
     f88:	f1ad 0c08 	sub.w	ip, sp, #8
     f8c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     f90:	f000 f806 	bl	fa0 <__udivmoddi4>
     f94:	f8dd e004 	ldr.w	lr, [sp, #4]
     f98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     f9c:	b004      	add	sp, #16
     f9e:	4770      	bx	lr

00000fa0 <__udivmoddi4>:
     fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     fa4:	9e08      	ldr	r6, [sp, #32]
     fa6:	460d      	mov	r5, r1
     fa8:	4604      	mov	r4, r0
     faa:	468e      	mov	lr, r1
     fac:	2b00      	cmp	r3, #0
     fae:	f040 8082 	bne.w	10b6 <CONFIG_FPROTECT_BLOCK_SIZE+0xb6>
     fb2:	428a      	cmp	r2, r1
     fb4:	4617      	mov	r7, r2
     fb6:	d946      	bls.n	1046 <CONFIG_FPROTECT_BLOCK_SIZE+0x46>
     fb8:	fab2 f282 	clz	r2, r2
     fbc:	b14a      	cbz	r2, fd2 <__udivmoddi4+0x32>
     fbe:	f1c2 0120 	rsb	r1, r2, #32
     fc2:	fa05 f302 	lsl.w	r3, r5, r2
     fc6:	fa20 f101 	lsr.w	r1, r0, r1
     fca:	4097      	lsls	r7, r2
     fcc:	ea41 0e03 	orr.w	lr, r1, r3
     fd0:	4094      	lsls	r4, r2
     fd2:	ea4f 4817 	mov.w	r8, r7, lsr #16
     fd6:	0c23      	lsrs	r3, r4, #16
     fd8:	fbbe fcf8 	udiv	ip, lr, r8
     fdc:	b2b9      	uxth	r1, r7
     fde:	fb08 ee1c 	mls	lr, r8, ip, lr
     fe2:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     fe6:	fb0c f001 	mul.w	r0, ip, r1
     fea:	4298      	cmp	r0, r3
     fec:	d90a      	bls.n	1004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>
     fee:	18fb      	adds	r3, r7, r3
     ff0:	f10c 35ff 	add.w	r5, ip, #4294967295
     ff4:	f080 8116 	bcs.w	1224 <CONFIG_FPROTECT_BLOCK_SIZE+0x224>
     ff8:	4298      	cmp	r0, r3
     ffa:	f240 8113 	bls.w	1224 <CONFIG_FPROTECT_BLOCK_SIZE+0x224>
     ffe:	f1ac 0c02 	sub.w	ip, ip, #2
    1002:	443b      	add	r3, r7
    1004:	1a1b      	subs	r3, r3, r0
    1006:	b2a4      	uxth	r4, r4
    1008:	fbb3 f0f8 	udiv	r0, r3, r8
    100c:	fb08 3310 	mls	r3, r8, r0, r3
    1010:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    1014:	fb00 f101 	mul.w	r1, r0, r1
    1018:	42a1      	cmp	r1, r4
    101a:	d909      	bls.n	1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
    101c:	193c      	adds	r4, r7, r4
    101e:	f100 33ff 	add.w	r3, r0, #4294967295
    1022:	f080 8101 	bcs.w	1228 <CONFIG_FPROTECT_BLOCK_SIZE+0x228>
    1026:	42a1      	cmp	r1, r4
    1028:	f240 80fe 	bls.w	1228 <CONFIG_FPROTECT_BLOCK_SIZE+0x228>
    102c:	3802      	subs	r0, #2
    102e:	443c      	add	r4, r7
    1030:	1a64      	subs	r4, r4, r1
    1032:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    1036:	2100      	movs	r1, #0
    1038:	b11e      	cbz	r6, 1042 <CONFIG_FPROTECT_BLOCK_SIZE+0x42>
    103a:	40d4      	lsrs	r4, r2
    103c:	2300      	movs	r3, #0
    103e:	e9c6 4300 	strd	r4, r3, [r6]
    1042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1046:	b902      	cbnz	r2, 104a <CONFIG_FPROTECT_BLOCK_SIZE+0x4a>
    1048:	deff      	udf	#255	; 0xff
    104a:	fab2 f282 	clz	r2, r2
    104e:	2a00      	cmp	r2, #0
    1050:	d14f      	bne.n	10f2 <CONFIG_FPROTECT_BLOCK_SIZE+0xf2>
    1052:	1bcb      	subs	r3, r1, r7
    1054:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    1058:	fa1f f887 	uxth.w	r8, r7
    105c:	2101      	movs	r1, #1
    105e:	fbb3 fcfe 	udiv	ip, r3, lr
    1062:	0c25      	lsrs	r5, r4, #16
    1064:	fb0e 331c 	mls	r3, lr, ip, r3
    1068:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    106c:	fb08 f30c 	mul.w	r3, r8, ip
    1070:	42ab      	cmp	r3, r5
    1072:	d907      	bls.n	1084 <CONFIG_FPROTECT_BLOCK_SIZE+0x84>
    1074:	197d      	adds	r5, r7, r5
    1076:	f10c 30ff 	add.w	r0, ip, #4294967295
    107a:	d202      	bcs.n	1082 <CONFIG_FPROTECT_BLOCK_SIZE+0x82>
    107c:	42ab      	cmp	r3, r5
    107e:	f200 80e7 	bhi.w	1250 <CONFIG_FPROTECT_BLOCK_SIZE+0x250>
    1082:	4684      	mov	ip, r0
    1084:	1aed      	subs	r5, r5, r3
    1086:	b2a3      	uxth	r3, r4
    1088:	fbb5 f0fe 	udiv	r0, r5, lr
    108c:	fb0e 5510 	mls	r5, lr, r0, r5
    1090:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    1094:	fb08 f800 	mul.w	r8, r8, r0
    1098:	45a0      	cmp	r8, r4
    109a:	d907      	bls.n	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
    109c:	193c      	adds	r4, r7, r4
    109e:	f100 33ff 	add.w	r3, r0, #4294967295
    10a2:	d202      	bcs.n	10aa <CONFIG_FPROTECT_BLOCK_SIZE+0xaa>
    10a4:	45a0      	cmp	r8, r4
    10a6:	f200 80d7 	bhi.w	1258 <CONFIG_FPROTECT_BLOCK_SIZE+0x258>
    10aa:	4618      	mov	r0, r3
    10ac:	eba4 0408 	sub.w	r4, r4, r8
    10b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    10b4:	e7c0      	b.n	1038 <CONFIG_FPROTECT_BLOCK_SIZE+0x38>
    10b6:	428b      	cmp	r3, r1
    10b8:	d908      	bls.n	10cc <CONFIG_FPROTECT_BLOCK_SIZE+0xcc>
    10ba:	2e00      	cmp	r6, #0
    10bc:	f000 80af 	beq.w	121e <CONFIG_FPROTECT_BLOCK_SIZE+0x21e>
    10c0:	2100      	movs	r1, #0
    10c2:	e9c6 0500 	strd	r0, r5, [r6]
    10c6:	4608      	mov	r0, r1
    10c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    10cc:	fab3 f183 	clz	r1, r3
    10d0:	2900      	cmp	r1, #0
    10d2:	d14b      	bne.n	116c <CONFIG_FPROTECT_BLOCK_SIZE+0x16c>
    10d4:	42ab      	cmp	r3, r5
    10d6:	d302      	bcc.n	10de <CONFIG_FPROTECT_BLOCK_SIZE+0xde>
    10d8:	4282      	cmp	r2, r0
    10da:	f200 80b7 	bhi.w	124c <CONFIG_FPROTECT_BLOCK_SIZE+0x24c>
    10de:	1a84      	subs	r4, r0, r2
    10e0:	eb65 0303 	sbc.w	r3, r5, r3
    10e4:	2001      	movs	r0, #1
    10e6:	469e      	mov	lr, r3
    10e8:	2e00      	cmp	r6, #0
    10ea:	d0aa      	beq.n	1042 <CONFIG_FPROTECT_BLOCK_SIZE+0x42>
    10ec:	e9c6 4e00 	strd	r4, lr, [r6]
    10f0:	e7a7      	b.n	1042 <CONFIG_FPROTECT_BLOCK_SIZE+0x42>
    10f2:	f1c2 0c20 	rsb	ip, r2, #32
    10f6:	fa01 f302 	lsl.w	r3, r1, r2
    10fa:	4097      	lsls	r7, r2
    10fc:	fa20 f00c 	lsr.w	r0, r0, ip
    1100:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    1104:	fa21 fc0c 	lsr.w	ip, r1, ip
    1108:	4318      	orrs	r0, r3
    110a:	fbbc f1fe 	udiv	r1, ip, lr
    110e:	0c05      	lsrs	r5, r0, #16
    1110:	fb0e cc11 	mls	ip, lr, r1, ip
    1114:	fa1f f887 	uxth.w	r8, r7
    1118:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    111c:	fb01 f308 	mul.w	r3, r1, r8
    1120:	42ab      	cmp	r3, r5
    1122:	fa04 f402 	lsl.w	r4, r4, r2
    1126:	d909      	bls.n	113c <CONFIG_FPROTECT_BLOCK_SIZE+0x13c>
    1128:	197d      	adds	r5, r7, r5
    112a:	f101 3cff 	add.w	ip, r1, #4294967295
    112e:	f080 808b 	bcs.w	1248 <CONFIG_FPROTECT_BLOCK_SIZE+0x248>
    1132:	42ab      	cmp	r3, r5
    1134:	f240 8088 	bls.w	1248 <CONFIG_FPROTECT_BLOCK_SIZE+0x248>
    1138:	3902      	subs	r1, #2
    113a:	443d      	add	r5, r7
    113c:	1aeb      	subs	r3, r5, r3
    113e:	b285      	uxth	r5, r0
    1140:	fbb3 f0fe 	udiv	r0, r3, lr
    1144:	fb0e 3310 	mls	r3, lr, r0, r3
    1148:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    114c:	fb00 f308 	mul.w	r3, r0, r8
    1150:	42ab      	cmp	r3, r5
    1152:	d907      	bls.n	1164 <CONFIG_FPROTECT_BLOCK_SIZE+0x164>
    1154:	197d      	adds	r5, r7, r5
    1156:	f100 3cff 	add.w	ip, r0, #4294967295
    115a:	d271      	bcs.n	1240 <CONFIG_FPROTECT_BLOCK_SIZE+0x240>
    115c:	42ab      	cmp	r3, r5
    115e:	d96f      	bls.n	1240 <CONFIG_FPROTECT_BLOCK_SIZE+0x240>
    1160:	3802      	subs	r0, #2
    1162:	443d      	add	r5, r7
    1164:	1aeb      	subs	r3, r5, r3
    1166:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    116a:	e778      	b.n	105e <CONFIG_FPROTECT_BLOCK_SIZE+0x5e>
    116c:	f1c1 0c20 	rsb	ip, r1, #32
    1170:	408b      	lsls	r3, r1
    1172:	fa22 f70c 	lsr.w	r7, r2, ip
    1176:	431f      	orrs	r7, r3
    1178:	fa20 f40c 	lsr.w	r4, r0, ip
    117c:	fa05 f301 	lsl.w	r3, r5, r1
    1180:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    1184:	fa25 f50c 	lsr.w	r5, r5, ip
    1188:	431c      	orrs	r4, r3
    118a:	0c23      	lsrs	r3, r4, #16
    118c:	fbb5 f9fe 	udiv	r9, r5, lr
    1190:	fa1f f887 	uxth.w	r8, r7
    1194:	fb0e 5519 	mls	r5, lr, r9, r5
    1198:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
    119c:	fb09 fa08 	mul.w	sl, r9, r8
    11a0:	45aa      	cmp	sl, r5
    11a2:	fa02 f201 	lsl.w	r2, r2, r1
    11a6:	fa00 f301 	lsl.w	r3, r0, r1
    11aa:	d908      	bls.n	11be <CONFIG_FPROTECT_BLOCK_SIZE+0x1be>
    11ac:	197d      	adds	r5, r7, r5
    11ae:	f109 30ff 	add.w	r0, r9, #4294967295
    11b2:	d247      	bcs.n	1244 <CONFIG_FPROTECT_BLOCK_SIZE+0x244>
    11b4:	45aa      	cmp	sl, r5
    11b6:	d945      	bls.n	1244 <CONFIG_FPROTECT_BLOCK_SIZE+0x244>
    11b8:	f1a9 0902 	sub.w	r9, r9, #2
    11bc:	443d      	add	r5, r7
    11be:	eba5 050a 	sub.w	r5, r5, sl
    11c2:	b2a4      	uxth	r4, r4
    11c4:	fbb5 f0fe 	udiv	r0, r5, lr
    11c8:	fb0e 5510 	mls	r5, lr, r0, r5
    11cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    11d0:	fb00 f808 	mul.w	r8, r0, r8
    11d4:	45a0      	cmp	r8, r4
    11d6:	d907      	bls.n	11e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e8>
    11d8:	193c      	adds	r4, r7, r4
    11da:	f100 35ff 	add.w	r5, r0, #4294967295
    11de:	d22d      	bcs.n	123c <CONFIG_FPROTECT_BLOCK_SIZE+0x23c>
    11e0:	45a0      	cmp	r8, r4
    11e2:	d92b      	bls.n	123c <CONFIG_FPROTECT_BLOCK_SIZE+0x23c>
    11e4:	3802      	subs	r0, #2
    11e6:	443c      	add	r4, r7
    11e8:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    11ec:	eba4 0408 	sub.w	r4, r4, r8
    11f0:	fba0 8902 	umull	r8, r9, r0, r2
    11f4:	454c      	cmp	r4, r9
    11f6:	46c6      	mov	lr, r8
    11f8:	464d      	mov	r5, r9
    11fa:	d319      	bcc.n	1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>
    11fc:	d016      	beq.n	122c <CONFIG_FPROTECT_BLOCK_SIZE+0x22c>
    11fe:	b15e      	cbz	r6, 1218 <CONFIG_FPROTECT_BLOCK_SIZE+0x218>
    1200:	ebb3 020e 	subs.w	r2, r3, lr
    1204:	eb64 0405 	sbc.w	r4, r4, r5
    1208:	fa04 fc0c 	lsl.w	ip, r4, ip
    120c:	40ca      	lsrs	r2, r1
    120e:	ea4c 0202 	orr.w	r2, ip, r2
    1212:	40cc      	lsrs	r4, r1
    1214:	e9c6 2400 	strd	r2, r4, [r6]
    1218:	2100      	movs	r1, #0
    121a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    121e:	4631      	mov	r1, r6
    1220:	4630      	mov	r0, r6
    1222:	e70e      	b.n	1042 <CONFIG_FPROTECT_BLOCK_SIZE+0x42>
    1224:	46ac      	mov	ip, r5
    1226:	e6ed      	b.n	1004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>
    1228:	4618      	mov	r0, r3
    122a:	e701      	b.n	1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
    122c:	4543      	cmp	r3, r8
    122e:	d2e6      	bcs.n	11fe <CONFIG_FPROTECT_BLOCK_SIZE+0x1fe>
    1230:	ebb8 0e02 	subs.w	lr, r8, r2
    1234:	eb69 0507 	sbc.w	r5, r9, r7
    1238:	3801      	subs	r0, #1
    123a:	e7e0      	b.n	11fe <CONFIG_FPROTECT_BLOCK_SIZE+0x1fe>
    123c:	4628      	mov	r0, r5
    123e:	e7d3      	b.n	11e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e8>
    1240:	4660      	mov	r0, ip
    1242:	e78f      	b.n	1164 <CONFIG_FPROTECT_BLOCK_SIZE+0x164>
    1244:	4681      	mov	r9, r0
    1246:	e7ba      	b.n	11be <CONFIG_FPROTECT_BLOCK_SIZE+0x1be>
    1248:	4661      	mov	r1, ip
    124a:	e777      	b.n	113c <CONFIG_FPROTECT_BLOCK_SIZE+0x13c>
    124c:	4608      	mov	r0, r1
    124e:	e74b      	b.n	10e8 <CONFIG_FPROTECT_BLOCK_SIZE+0xe8>
    1250:	f1ac 0c02 	sub.w	ip, ip, #2
    1254:	443d      	add	r5, r7
    1256:	e715      	b.n	1084 <CONFIG_FPROTECT_BLOCK_SIZE+0x84>
    1258:	3802      	subs	r0, #2
    125a:	443c      	add	r4, r7
    125c:	e726      	b.n	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
    125e:	bf00      	nop

00001260 <__aeabi_idiv0>:
    1260:	4770      	bx	lr
    1262:	bf00      	nop
    1264:	0000      	movs	r0, r0
	...

00001268 <thread_B_code>:

}

/** @brief The this thread is responsible for calculating the average excluding the outliers (10% off from average)
 */
void thread_B_code(void *argA , void *argB, void *argC){
    1268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    126c:	e045      	b.n	12fa <thread_B_code+0x92>
		/* Compute the average of the buffer */
		for(int i=0; i < 10; i++){
			sum += buffer[i];
		}

		avg = sum/10;
    126e:	4b32      	ldr	r3, [pc, #200]	; (1338 <thread_B_code+0xd0>)
    1270:	fba3 3000 	umull	r3, r0, r3, r0

		/* Calculate an inferior and superior limit (10% off from average) */
		inf_lim = avg * 0.9;
    1274:	08c0      	lsrs	r0, r0, #3
    1276:	f7ff f885 	bl	384 <__aeabi_ui2d>
    127a:	4604      	mov	r4, r0
    127c:	460d      	mov	r5, r1
    127e:	a32a      	add	r3, pc, #168	; (adr r3, 1328 <thread_B_code+0xc0>)
    1280:	e9d3 2300 	ldrd	r2, r3, [r3]
    1284:	f7ff f8f8 	bl	478 <__aeabi_dmul>
    1288:	f7ff fb08 	bl	89c <__aeabi_d2f>
    128c:	4680      	mov	r8, r0
		sup_lim = avg * 1.1;
    128e:	a328      	add	r3, pc, #160	; (adr r3, 1330 <thread_B_code+0xc8>)
    1290:	e9d3 2300 	ldrd	r2, r3, [r3]
    1294:	4620      	mov	r0, r4
    1296:	4629      	mov	r1, r5
    1298:	f7ff f8ee 	bl	478 <__aeabi_dmul>
    129c:	f7ff fafe 	bl	89c <__aeabi_d2f>
    12a0:	4607      	mov	r7, r0
		/* Reset the sum and count */
		sum = 0;
		count = 0;

		/* Add the values to the sum excluding the outliers, and count them */
		for(int i=0; i < 10; i++){
    12a2:	2400      	movs	r4, #0
		count = 0;
    12a4:	46a2      	mov	sl, r4
		sum = 0;
    12a6:	46a1      	mov	r9, r4
		for(int i=0; i < 10; i++){
    12a8:	e000      	b.n	12ac <thread_B_code+0x44>
    12aa:	3401      	adds	r4, #1
    12ac:	2c09      	cmp	r4, #9
    12ae:	dc15      	bgt.n	12dc <thread_B_code+0x74>
			if(!(buffer[i] > sup_lim || buffer[i] < inf_lim)){
    12b0:	4b22      	ldr	r3, [pc, #136]	; (133c <thread_B_code+0xd4>)
    12b2:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
    12b6:	4630      	mov	r0, r6
    12b8:	f7ff fbf6 	bl	aa8 <__aeabi_ui2f>
    12bc:	4605      	mov	r5, r0
    12be:	4639      	mov	r1, r7
    12c0:	f7ff fe06 	bl	ed0 <__aeabi_fcmpgt>
    12c4:	2800      	cmp	r0, #0
    12c6:	d1f0      	bne.n	12aa <thread_B_code+0x42>
    12c8:	4641      	mov	r1, r8
    12ca:	4628      	mov	r0, r5
    12cc:	f7ff fde2 	bl	e94 <__aeabi_fcmplt>
    12d0:	2800      	cmp	r0, #0
    12d2:	d1ea      	bne.n	12aa <thread_B_code+0x42>
				sum += buffer[i];
    12d4:	44b1      	add	r9, r6
				count++;
    12d6:	f10a 0a01 	add.w	sl, sl, #1
    12da:	e7e6      	b.n	12aa <thread_B_code+0x42>
			}
		}

		/* Compute the average except if the count is 0, to avoid dividing by 0 */
		if(count != 0){
    12dc:	f1ba 0f00 	cmp.w	sl, #0
    12e0:	d01c      	beq.n	131c <thread_B_code+0xb4>
			avg = sum/count;
    12e2:	fbb9 f3fa 	udiv	r3, r9, sl
    12e6:	4a16      	ldr	r2, [pc, #88]	; (1340 <thread_B_code+0xd8>)
    12e8:	6013      	str	r3, [r2, #0]
		}else{
			avg = 0;
		}

		printk("AVG: %d \n", avg);
    12ea:	4b15      	ldr	r3, [pc, #84]	; (1340 <thread_B_code+0xd8>)
    12ec:	6819      	ldr	r1, [r3, #0]
    12ee:	4815      	ldr	r0, [pc, #84]	; (1344 <thread_B_code+0xdc>)
    12f0:	f009 febb 	bl	b06a <printk>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    12f4:	4814      	ldr	r0, [pc, #80]	; (1348 <thread_B_code+0xe0>)
    12f6:	f006 ffa5 	bl	8244 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    12fa:	f04f 32ff 	mov.w	r2, #4294967295
    12fe:	f04f 33ff 	mov.w	r3, #4294967295
    1302:	4812      	ldr	r0, [pc, #72]	; (134c <thread_B_code+0xe4>)
    1304:	f006 ffe6 	bl	82d4 <z_impl_k_sem_take>
		for(int i=0; i < 10; i++){
    1308:	2300      	movs	r3, #0
		sum = 0;
    130a:	4618      	mov	r0, r3
		for(int i=0; i < 10; i++){
    130c:	2b09      	cmp	r3, #9
    130e:	dcae      	bgt.n	126e <thread_B_code+0x6>
			sum += buffer[i];
    1310:	4a0a      	ldr	r2, [pc, #40]	; (133c <thread_B_code+0xd4>)
    1312:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1316:	4410      	add	r0, r2
		for(int i=0; i < 10; i++){
    1318:	3301      	adds	r3, #1
    131a:	e7f7      	b.n	130c <thread_B_code+0xa4>
			avg = 0;
    131c:	4b08      	ldr	r3, [pc, #32]	; (1340 <thread_B_code+0xd8>)
    131e:	2200      	movs	r2, #0
    1320:	601a      	str	r2, [r3, #0]
    1322:	e7e2      	b.n	12ea <thread_B_code+0x82>
    1324:	f3af 8000 	nop.w
    1328:	cccccccd 	.word	0xcccccccd
    132c:	3feccccc 	.word	0x3feccccc
    1330:	9999999a 	.word	0x9999999a
    1334:	3ff19999 	.word	0x3ff19999
    1338:	cccccccd 	.word	0xcccccccd
    133c:	200006fc 	.word	0x200006fc
    1340:	200006f8 	.word	0x200006f8
    1344:	0000c36c 	.word	0x0000c36c
    1348:	2000073c 	.word	0x2000073c
    134c:	20000724 	.word	0x20000724

00001350 <adc_sample>:
static int adc_sample(void){
    1350:	b510      	push	{r4, lr}
    1352:	b086      	sub	sp, #24
	const struct adc_sequence sequence = {
    1354:	2300      	movs	r3, #0
    1356:	9301      	str	r3, [sp, #4]
    1358:	9305      	str	r3, [sp, #20]
    135a:	2302      	movs	r3, #2
    135c:	9302      	str	r3, [sp, #8]
    135e:	4a0e      	ldr	r2, [pc, #56]	; (1398 <adc_sample+0x48>)
    1360:	9203      	str	r2, [sp, #12]
    1362:	9304      	str	r3, [sp, #16]
    1364:	230a      	movs	r3, #10
    1366:	f88d 3014 	strb.w	r3, [sp, #20]
	if (adc_dev == NULL) {
    136a:	4b0c      	ldr	r3, [pc, #48]	; (139c <adc_sample+0x4c>)
    136c:	6818      	ldr	r0, [r3, #0]
    136e:	b140      	cbz	r0, 1382 <adc_sample+0x32>
		       const struct adc_sequence *sequence);

static inline int z_impl_adc_read(const struct device *dev,
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
    1370:	6883      	ldr	r3, [r0, #8]
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
    1372:	685b      	ldr	r3, [r3, #4]
    1374:	a901      	add	r1, sp, #4
    1376:	4798      	blx	r3
	if (ret) {
    1378:	4604      	mov	r4, r0
    137a:	b940      	cbnz	r0, 138e <adc_sample+0x3e>
}
    137c:	4620      	mov	r0, r4
    137e:	b006      	add	sp, #24
    1380:	bd10      	pop	{r4, pc}
            printk("adc_sample(): error, must bind to adc first \n\r");
    1382:	4807      	ldr	r0, [pc, #28]	; (13a0 <adc_sample+0x50>)
    1384:	f009 fe71 	bl	b06a <printk>
            return -1;
    1388:	f04f 34ff 	mov.w	r4, #4294967295
    138c:	e7f6      	b.n	137c <adc_sample+0x2c>
            printk("adc_read() failed with code %d\n", ret);
    138e:	4601      	mov	r1, r0
    1390:	4804      	ldr	r0, [pc, #16]	; (13a4 <adc_sample+0x54>)
    1392:	f009 fe6a 	bl	b06a <printk>
    1396:	e7f1      	b.n	137c <adc_sample+0x2c>
    1398:	200006f4 	.word	0x200006f4
    139c:	200006f0 	.word	0x200006f0
    13a0:	0000c2f8 	.word	0x0000c2f8
    13a4:	0000c328 	.word	0x0000c328

000013a8 <thread_A_code>:
void thread_A_code(void *argA , void *argB, void *argC){
    13a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_uptime_ticks();
    13ac:	f00a fd9d 	bl	beea <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    13b0:	014e      	lsls	r6, r1, #5
    13b2:	0143      	lsls	r3, r0, #5
    13b4:	ea46 62d0 	orr.w	r2, r6, r0, lsr #27
    13b8:	1a1b      	subs	r3, r3, r0
    13ba:	eb62 0201 	sbc.w	r2, r2, r1
    13be:	0096      	lsls	r6, r2, #2
    13c0:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
    13c4:	009f      	lsls	r7, r3, #2
    13c6:	4632      	mov	r2, r6
    13c8:	183b      	adds	r3, r7, r0
    13ca:	eb41 0202 	adc.w	r2, r1, r2
    13ce:	00d1      	lsls	r1, r2, #3
    13d0:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
    13d4:	00d8      	lsls	r0, r3, #3
    13d6:	0bc3      	lsrs	r3, r0, #15
 *
 * @return Current uptime in milliseconds.
 */
static inline int64_t k_uptime_get(void)
{
	return k_ticks_to_ms_floor64(k_uptime_ticks());
    13d8:	ea43 4241 	orr.w	r2, r3, r1, lsl #17
    13dc:	0bc8      	lsrs	r0, r1, #15
    release_time = k_uptime_get() + SAMP_PERIOD_MS;
    13de:	f512 747a 	adds.w	r4, r2, #1000	; 0x3e8
    13e2:	f140 0500 	adc.w	r5, r0, #0
	for(int y=0; y < 10; y++){
    13e6:	2300      	movs	r3, #0
    13e8:	e004      	b.n	13f4 <thread_A_code+0x4c>
		buffer[y] = 0;
    13ea:	4a31      	ldr	r2, [pc, #196]	; (14b0 <thread_A_code+0x108>)
    13ec:	2100      	movs	r1, #0
    13ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int y=0; y < 10; y++){
    13f2:	3301      	adds	r3, #1
    13f4:	2b09      	cmp	r3, #9
    13f6:	ddf8      	ble.n	13ea <thread_A_code+0x42>
	uint8_t i = 0;
    13f8:	2600      	movs	r6, #0
    13fa:	e01e      	b.n	143a <thread_A_code+0x92>
			printk("Error reading ADC\n");
    13fc:	482d      	ldr	r0, [pc, #180]	; (14b4 <thread_A_code+0x10c>)
    13fe:	f009 fe34 	bl	b06a <printk>
    1402:	e01e      	b.n	1442 <thread_A_code+0x9a>
            k_msleep(release_time - fin_time);
    1404:	1ae3      	subs	r3, r4, r3
	return k_sleep(Z_TIMEOUT_MS(ms));
    1406:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    140a:	ea4f 79e3 	mov.w	r9, r3, asr #31
    140e:	ea4f 31c9 	mov.w	r1, r9, lsl #15
    1412:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
    1416:	03d8      	lsls	r0, r3, #15
    1418:	f240 37e7 	movw	r7, #999	; 0x3e7
    141c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1420:	2300      	movs	r3, #0
    1422:	19c0      	adds	r0, r0, r7
    1424:	f04f 0700 	mov.w	r7, #0
    1428:	eb47 0101 	adc.w	r1, r7, r1
    142c:	f7ff fda0 	bl	f70 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    1430:	f008 fa2a 	bl	9888 <z_impl_k_sleep>
            release_time += SAMP_PERIOD_MS;
    1434:	f514 747a 	adds.w	r4, r4, #1000	; 0x3e8
    1438:	417d      	adcs	r5, r7
		err = adc_sample();
    143a:	f7ff ff89 	bl	1350 <adc_sample>
		if(err){
    143e:	2800      	cmp	r0, #0
    1440:	d1dc      	bne.n	13fc <thread_A_code+0x54>
		buffer[i] = adc_sample_buffer[0];
    1442:	4b1d      	ldr	r3, [pc, #116]	; (14b8 <thread_A_code+0x110>)
    1444:	8819      	ldrh	r1, [r3, #0]
    1446:	4b1a      	ldr	r3, [pc, #104]	; (14b0 <thread_A_code+0x108>)
    1448:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
		printk("\n\n\n\nADC: %d \n", buffer[i]);
    144c:	481b      	ldr	r0, [pc, #108]	; (14bc <thread_A_code+0x114>)
    144e:	f009 fe0c 	bl	b06a <printk>
		i++;
    1452:	3601      	adds	r6, #1
    1454:	b2f6      	uxtb	r6, r6
		i = i % 10; 
    1456:	4b1a      	ldr	r3, [pc, #104]	; (14c0 <thread_A_code+0x118>)
    1458:	fba3 2306 	umull	r2, r3, r3, r6
    145c:	08db      	lsrs	r3, r3, #3
    145e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1462:	eba6 0643 	sub.w	r6, r6, r3, lsl #1
    1466:	b2f6      	uxtb	r6, r6
	z_impl_k_sem_give(sem);
    1468:	4816      	ldr	r0, [pc, #88]	; (14c4 <thread_A_code+0x11c>)
    146a:	f006 feeb 	bl	8244 <z_impl_k_sem_give>
	return z_impl_k_uptime_ticks();
    146e:	f00a fd3c 	bl	beea <z_impl_k_uptime_ticks>
    1472:	014b      	lsls	r3, r1, #5
    1474:	0142      	lsls	r2, r0, #5
    1476:	ea43 67d0 	orr.w	r7, r3, r0, lsr #27
    147a:	1a13      	subs	r3, r2, r0
    147c:	eb67 0201 	sbc.w	r2, r7, r1
    1480:	0097      	lsls	r7, r2, #2
    1482:	ea47 7793 	orr.w	r7, r7, r3, lsr #30
    1486:	ea4f 0c83 	mov.w	ip, r3, lsl #2
    148a:	463a      	mov	r2, r7
    148c:	eb1c 0300 	adds.w	r3, ip, r0
    1490:	eb41 0202 	adc.w	r2, r1, r2
    1494:	00d1      	lsls	r1, r2, #3
    1496:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
    149a:	00d8      	lsls	r0, r3, #3
    149c:	0bc3      	lsrs	r3, r0, #15
    149e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
	return k_ticks_to_ms_floor64(k_uptime_ticks());
    14a2:	ea4f 39d1 	mov.w	r9, r1, lsr #15
        if( fin_time < release_time) {
    14a6:	42a3      	cmp	r3, r4
    14a8:	eb79 0205 	sbcs.w	r2, r9, r5
    14ac:	dac5      	bge.n	143a <thread_A_code+0x92>
    14ae:	e7a9      	b.n	1404 <thread_A_code+0x5c>
    14b0:	200006fc 	.word	0x200006fc
    14b4:	0000c348 	.word	0x0000c348
    14b8:	200006f4 	.word	0x200006f4
    14bc:	0000c35c 	.word	0x0000c35c
    14c0:	cccccccd 	.word	0xcccccccd
    14c4:	20000724 	.word	0x20000724

000014c8 <thread_C_code>:
  }
}

/** @brief The this thread is responsible for generating a PWM signal and outputing it to a LED
 */
void thread_C_code(void *argA , void *argB, void *argC){
    14c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    14cc:	b085      	sub	sp, #20
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    14ce:	4846      	ldr	r0, [pc, #280]	; (15e8 <thread_C_code+0x120>)
    14d0:	f006 f800 	bl	74d4 <z_impl_device_get_binding>

	unsigned int pwmPeriod_us = 1000;       /* PWM period in us */

	/* Bind to PWM */
	pwm0_dev = device_get_binding(DT_LABEL(PWM0_NID));	
    if (pwm0_dev == NULL) {
    14d4:	2800      	cmp	r0, #0
    14d6:	d078      	beq.n	15ca <thread_C_code+0x102>
    14d8:	4682      	mov	sl, r0
		printk("Error: Failed to bind to PWM0\n r");
		return;
    }
    else  {
        printk("Bind to PWM0 successful\n\r");            
    14da:	4844      	ldr	r0, [pc, #272]	; (15ec <thread_C_code+0x124>)
    14dc:	f009 fdc5 	bl	b06a <printk>
	return z_impl_k_sem_take(sem, timeout);
    14e0:	f04f 32ff 	mov.w	r2, #4294967295
    14e4:	f04f 33ff 	mov.w	r3, #4294967295
    14e8:	4841      	ldr	r0, [pc, #260]	; (15f0 <thread_C_code+0x128>)
    14ea:	f006 fef3 	bl	82d4 <z_impl_k_sem_take>
    while(1) {
		/* Take semaphore */
        k_sem_take(&sem_bc, K_FOREVER);

		/* Calculate the duty_cycle from the average value */
		duty_cycle = (float)avg*100/1023;
    14ee:	4b41      	ldr	r3, [pc, #260]	; (15f4 <thread_C_code+0x12c>)
    14f0:	6818      	ldr	r0, [r3, #0]
    14f2:	f7ff fad9 	bl	aa8 <__aeabi_ui2f>
    14f6:	4940      	ldr	r1, [pc, #256]	; (15f8 <thread_C_code+0x130>)
    14f8:	f7ff fb2e 	bl	b58 <__aeabi_fmul>
    14fc:	493f      	ldr	r1, [pc, #252]	; (15fc <thread_C_code+0x134>)
    14fe:	f7ff fbdf 	bl	cc0 <__aeabi_fdiv>
    1502:	4604      	mov	r4, r0

		printk("DUTY: %d \n", (int)duty_cycle);
    1504:	f7ff fcee 	bl	ee4 <__aeabi_f2iz>
    1508:	4601      	mov	r1, r0
    150a:	483d      	ldr	r0, [pc, #244]	; (1600 <thread_C_code+0x138>)
    150c:	f009 fdad 	bl	b06a <printk>
	
		/* Apply the PWM signal and indicate the error in case there is any */
		ret = pwm_pin_set_usec(pwm0_dev, BOARDLED_PIN,
		      pwmPeriod_us,(unsigned int)((pwmPeriod_us*(unsigned int)duty_cycle)/100), PWM_POLARITY_NORMAL);
    1510:	4620      	mov	r0, r4
    1512:	f7ff fd0d 	bl	f30 <__aeabi_f2uiz>
    1516:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
    151a:	fb08 f800 	mul.w	r8, r8, r0
		ret = pwm_pin_set_usec(pwm0_dev, BOARDLED_PIN,
    151e:	4839      	ldr	r0, [pc, #228]	; (1604 <thread_C_code+0x13c>)
    1520:	fba0 3808 	umull	r3, r8, r0, r8
    1524:	ea4f 1858 	mov.w	r8, r8, lsr #5
						uint32_t pwm,
						uint64_t *cycles)
{
	struct pwm_driver_api *api;

	api = (struct pwm_driver_api *)dev->api;
    1528:	f8da 3008 	ldr.w	r3, [sl, #8]
	return api->get_cycles_per_sec(dev, pwm, cycles);
    152c:	685b      	ldr	r3, [r3, #4]
    152e:	aa02      	add	r2, sp, #8
    1530:	210d      	movs	r1, #13
    1532:	4650      	mov	r0, sl
    1534:	4798      	blx	r3
				   uint32_t period, uint32_t pulse,
				   pwm_flags_t flags)
{
	uint64_t period_cycles, pulse_cycles, cycles_per_sec;

	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
    1536:	2800      	cmp	r0, #0
    1538:	d14d      	bne.n	15d6 <thread_C_code+0x10e>
		return -EIO;
	}

	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
    153a:	9c02      	ldr	r4, [sp, #8]
    153c:	f8dd 900c 	ldr.w	r9, [sp, #12]
    1540:	ea4f 1149 	mov.w	r1, r9, lsl #5
    1544:	0163      	lsls	r3, r4, #5
    1546:	ea41 62d4 	orr.w	r2, r1, r4, lsr #27
    154a:	1b1b      	subs	r3, r3, r4
    154c:	eb62 0209 	sbc.w	r2, r2, r9
    1550:	0091      	lsls	r1, r2, #2
    1552:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
    1556:	0098      	lsls	r0, r3, #2
    1558:	1906      	adds	r6, r0, r4
    155a:	eb41 0709 	adc.w	r7, r1, r9
    155e:	00fb      	lsls	r3, r7, #3
    1560:	ea43 7356 	orr.w	r3, r3, r6, lsr #29
    1564:	00f2      	lsls	r2, r6, #3
    1566:	4616      	mov	r6, r2
    1568:	461f      	mov	r7, r3
    156a:	4a27      	ldr	r2, [pc, #156]	; (1608 <thread_C_code+0x140>)
    156c:	2300      	movs	r3, #0
    156e:	4630      	mov	r0, r6
    1570:	4639      	mov	r1, r7
    1572:	f7ff fcfd 	bl	f70 <__aeabi_uldivmod>
    1576:	4683      	mov	fp, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
    1578:	f04f 32ff 	mov.w	r2, #4294967295
    157c:	4b23      	ldr	r3, [pc, #140]	; (160c <thread_C_code+0x144>)
    157e:	42bb      	cmp	r3, r7
    1580:	bf08      	it	eq
    1582:	42b2      	cmpeq	r2, r6
    1584:	d32a      	bcc.n	15dc <thread_C_code+0x114>
		return -ENOTSUP;
	}

	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
    1586:	fba8 4504 	umull	r4, r5, r8, r4
    158a:	fb08 5509 	mla	r5, r8, r9, r5
    158e:	4a1e      	ldr	r2, [pc, #120]	; (1608 <thread_C_code+0x140>)
    1590:	2300      	movs	r3, #0
    1592:	4620      	mov	r0, r4
    1594:	4629      	mov	r1, r5
    1596:	f7ff fceb 	bl	f70 <__aeabi_uldivmod>
    159a:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
    159c:	f04f 30ff 	mov.w	r0, #4294967295
    15a0:	491a      	ldr	r1, [pc, #104]	; (160c <thread_C_code+0x144>)
    15a2:	42a9      	cmp	r1, r5
    15a4:	bf08      	it	eq
    15a6:	42a0      	cmpeq	r0, r4
    15a8:	d31b      	bcc.n	15e2 <thread_C_code+0x11a>
	api = (struct pwm_driver_api *)dev->api;
    15aa:	f8da 2008 	ldr.w	r2, [sl, #8]
	return api->pin_set(dev, pwm, period, pulse, flags);
    15ae:	6814      	ldr	r4, [r2, #0]
    15b0:	2200      	movs	r2, #0
    15b2:	9200      	str	r2, [sp, #0]
    15b4:	465a      	mov	r2, fp
    15b6:	210d      	movs	r1, #13
    15b8:	4650      	mov	r0, sl
    15ba:	47a0      	blx	r4
    15bc:	4601      	mov	r1, r0

		if(ret){
    15be:	2900      	cmp	r1, #0
    15c0:	d08e      	beq.n	14e0 <thread_C_code+0x18>
			printk("Error %d setting PWM\n", ret);
    15c2:	4813      	ldr	r0, [pc, #76]	; (1610 <thread_C_code+0x148>)
    15c4:	f009 fd51 	bl	b06a <printk>
    while(1) {
    15c8:	e78a      	b.n	14e0 <thread_C_code+0x18>
		printk("Error: Failed to bind to PWM0\n r");
    15ca:	4812      	ldr	r0, [pc, #72]	; (1614 <thread_C_code+0x14c>)
    15cc:	f009 fd4d 	bl	b06a <printk>
		}

	}
    15d0:	b005      	add	sp, #20
    15d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EIO;
    15d6:	f06f 0104 	mvn.w	r1, #4
    15da:	e7f0      	b.n	15be <thread_C_code+0xf6>
		return -ENOTSUP;
    15dc:	f06f 0185 	mvn.w	r1, #133	; 0x85
    15e0:	e7ed      	b.n	15be <thread_C_code+0xf6>
		return -ENOTSUP;
    15e2:	f06f 0185 	mvn.w	r1, #133	; 0x85
    15e6:	e7ea      	b.n	15be <thread_C_code+0xf6>
    15e8:	0000c378 	.word	0x0000c378
    15ec:	0000c3a4 	.word	0x0000c3a4
    15f0:	2000073c 	.word	0x2000073c
    15f4:	200006f8 	.word	0x200006f8
    15f8:	42c80000 	.word	0x42c80000
    15fc:	447fc000 	.word	0x447fc000
    1600:	0000c3c0 	.word	0x0000c3c0
    1604:	51eb851f 	.word	0x51eb851f
    1608:	000f4240 	.word	0x000f4240
    160c:	000f423f 	.word	0x000f423f
    1610:	0000c3cc 	.word	0x0000c3cc
    1614:	0000c380 	.word	0x0000c380

00001618 <main>:
void main(void){
    1618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    161c:	b088      	sub	sp, #32
    161e:	482e      	ldr	r0, [pc, #184]	; (16d8 <main+0xc0>)
    1620:	f005 ff58 	bl	74d4 <z_impl_device_get_binding>
	adc_dev = device_get_binding(DT_LABEL(ADC_NID));
    1624:	4b2d      	ldr	r3, [pc, #180]	; (16dc <main+0xc4>)
    1626:	6018      	str	r0, [r3, #0]
	if (!adc_dev) {
    1628:	2800      	cmp	r0, #0
    162a:	d04d      	beq.n	16c8 <main+0xb0>
    err = adc_channel_setup(adc_dev, &my_channel_cfg);
    162c:	4b2b      	ldr	r3, [pc, #172]	; (16dc <main+0xc4>)
    162e:	6818      	ldr	r0, [r3, #0]
	const struct adc_driver_api *api =
    1630:	6883      	ldr	r3, [r0, #8]
	return api->channel_setup(dev, channel_cfg);
    1632:	681b      	ldr	r3, [r3, #0]
    1634:	492a      	ldr	r1, [pc, #168]	; (16e0 <main+0xc8>)
    1636:	4798      	blx	r3
    if (err) {
    1638:	4601      	mov	r1, r0
    163a:	2800      	cmp	r0, #0
    163c:	d148      	bne.n	16d0 <main+0xb8>
    NRF_SAADC->TASKS_CALIBRATEOFFSET = 1;
    163e:	2501      	movs	r5, #1
    1640:	4b28      	ldr	r3, [pc, #160]	; (16e4 <main+0xcc>)
    1642:	60dd      	str	r5, [r3, #12]
	return z_impl_k_sem_init(sem, initial_count, limit);
    1644:	462a      	mov	r2, r5
    1646:	2100      	movs	r1, #0
    1648:	4827      	ldr	r0, [pc, #156]	; (16e8 <main+0xd0>)
    164a:	f00a fbf4 	bl	be36 <z_impl_k_sem_init>
    164e:	462a      	mov	r2, r5
    1650:	2100      	movs	r1, #0
    1652:	4826      	ldr	r0, [pc, #152]	; (16ec <main+0xd4>)
    1654:	f00a fbef 	bl	be36 <z_impl_k_sem_init>
    thread_A_tid = k_thread_create(&thread_A_data, thread_A_stack,
    1658:	2600      	movs	r6, #0
    165a:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    165c:	e9cd 6706 	strd	r6, r7, [sp, #24]
    1660:	2400      	movs	r4, #0
    1662:	9404      	str	r4, [sp, #16]
    1664:	9503      	str	r5, [sp, #12]
    1666:	9402      	str	r4, [sp, #8]
    1668:	9401      	str	r4, [sp, #4]
    166a:	9400      	str	r4, [sp, #0]
    166c:	4b20      	ldr	r3, [pc, #128]	; (16f0 <main+0xd8>)
    166e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1672:	4920      	ldr	r1, [pc, #128]	; (16f4 <main+0xdc>)
    1674:	4820      	ldr	r0, [pc, #128]	; (16f8 <main+0xe0>)
    1676:	f006 fafd 	bl	7c74 <z_impl_k_thread_create>
    167a:	4b20      	ldr	r3, [pc, #128]	; (16fc <main+0xe4>)
    167c:	6018      	str	r0, [r3, #0]
    167e:	e9cd 6706 	strd	r6, r7, [sp, #24]
    1682:	9404      	str	r4, [sp, #16]
    1684:	9503      	str	r5, [sp, #12]
    1686:	9402      	str	r4, [sp, #8]
    1688:	9401      	str	r4, [sp, #4]
    168a:	9400      	str	r4, [sp, #0]
    168c:	4b1c      	ldr	r3, [pc, #112]	; (1700 <main+0xe8>)
    168e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1692:	491c      	ldr	r1, [pc, #112]	; (1704 <main+0xec>)
    1694:	481c      	ldr	r0, [pc, #112]	; (1708 <main+0xf0>)
    1696:	f006 faed 	bl	7c74 <z_impl_k_thread_create>
    thread_B_tid = k_thread_create(&thread_B_data, thread_B_stack,
    169a:	f8df 8084 	ldr.w	r8, [pc, #132]	; 1720 <main+0x108>
    169e:	f8c8 0000 	str.w	r0, [r8]
    16a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
    16a6:	9404      	str	r4, [sp, #16]
    16a8:	9503      	str	r5, [sp, #12]
    16aa:	9402      	str	r4, [sp, #8]
    16ac:	9401      	str	r4, [sp, #4]
    16ae:	9400      	str	r4, [sp, #0]
    16b0:	4b16      	ldr	r3, [pc, #88]	; (170c <main+0xf4>)
    16b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    16b6:	4916      	ldr	r1, [pc, #88]	; (1710 <main+0xf8>)
    16b8:	4816      	ldr	r0, [pc, #88]	; (1714 <main+0xfc>)
    16ba:	f006 fadb 	bl	7c74 <z_impl_k_thread_create>
    thread_B_tid = k_thread_create(&thread_C_data, thread_C_stack,
    16be:	f8c8 0000 	str.w	r0, [r8]
} 
    16c2:	b008      	add	sp, #32
    16c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        printk("ADC device_get_binding() failed\n");
    16c8:	4813      	ldr	r0, [pc, #76]	; (1718 <main+0x100>)
    16ca:	f009 fcce 	bl	b06a <printk>
    16ce:	e7ad      	b.n	162c <main+0x14>
        printk("adc_channel_setup() failed with error code %d\n", err);
    16d0:	4812      	ldr	r0, [pc, #72]	; (171c <main+0x104>)
    16d2:	f009 fcca 	bl	b06a <printk>
    16d6:	e7b2      	b.n	163e <main+0x26>
    16d8:	0000c3e4 	.word	0x0000c3e4
    16dc:	200006f0 	.word	0x200006f0
    16e0:	0000c440 	.word	0x0000c440
    16e4:	40007000 	.word	0x40007000
    16e8:	20000724 	.word	0x20000724
    16ec:	2000073c 	.word	0x2000073c
    16f0:	000013a9 	.word	0x000013a9
    16f4:	20001460 	.word	0x20001460
    16f8:	20000258 	.word	0x20000258
    16fc:	20000754 	.word	0x20000754
    1700:	00001269 	.word	0x00001269
    1704:	20001880 	.word	0x20001880
    1708:	20000310 	.word	0x20000310
    170c:	000014c9 	.word	0x000014c9
    1710:	20001ca0 	.word	0x20001ca0
    1714:	200003c8 	.word	0x200003c8
    1718:	0000c3ec 	.word	0x0000c3ec
    171c:	0000c410 	.word	0x0000c410
    1720:	20000758 	.word	0x20000758

00001724 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    1724:	b570      	push	{r4, r5, r6, lr}
    1726:	4604      	mov	r4, r0
    1728:	460d      	mov	r5, r1
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    172a:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
    172c:	f003 0303 	and.w	r3, r3, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    1730:	6081      	str	r1, [r0, #8]
	switch (method) {
    1732:	2b02      	cmp	r3, #2
    1734:	d014      	beq.n	1760 <sys_notify_finalize+0x3c>
    1736:	2b03      	cmp	r3, #3
    1738:	d00f      	beq.n	175a <sys_notify_finalize+0x36>
    173a:	2b01      	cmp	r3, #1
    173c:	d013      	beq.n	1766 <sys_notify_finalize+0x42>
		break;
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
		break;
	default:
		__ASSERT_NO_MSG(false);
    173e:	4e0f      	ldr	r6, [pc, #60]	; (177c <sys_notify_finalize+0x58>)
    1740:	2345      	movs	r3, #69	; 0x45
    1742:	4632      	mov	r2, r6
    1744:	490e      	ldr	r1, [pc, #56]	; (1780 <sys_notify_finalize+0x5c>)
    1746:	480f      	ldr	r0, [pc, #60]	; (1784 <sys_notify_finalize+0x60>)
    1748:	f009 fc8f 	bl	b06a <printk>
    174c:	2145      	movs	r1, #69	; 0x45
    174e:	4630      	mov	r0, r6
    1750:	f009 fde4 	bl	b31c <assert_post_action>
	sys_notify_generic_callback rv = NULL;
    1754:	2600      	movs	r6, #0
	struct k_poll_signal *sig = NULL;
    1756:	4630      	mov	r0, r6
    1758:	e007      	b.n	176a <sys_notify_finalize+0x46>
		rv = notify->method.callback;
    175a:	6806      	ldr	r6, [r0, #0]
	struct k_poll_signal *sig = NULL;
    175c:	2000      	movs	r0, #0
		break;
    175e:	e004      	b.n	176a <sys_notify_finalize+0x46>
		sig = notify->method.signal;
    1760:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    1762:	2600      	movs	r6, #0
		break;
    1764:	e001      	b.n	176a <sys_notify_finalize+0x46>
	switch (method) {
    1766:	2600      	movs	r6, #0
    1768:	4630      	mov	r0, r6
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    176a:	2300      	movs	r3, #0
    176c:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    176e:	b110      	cbz	r0, 1776 <sys_notify_finalize+0x52>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    1770:	4629      	mov	r1, r5
    1772:	f008 ff2d 	bl	a5d0 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    1776:	4630      	mov	r0, r6
    1778:	bd70      	pop	{r4, r5, r6, pc}
    177a:	bf00      	nop
    177c:	0000c448 	.word	0x0000c448
    1780:	0000c3e8 	.word	0x0000c3e8
    1784:	0000c46c 	.word	0x0000c46c

00001788 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
    1788:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
    178a:	680b      	ldr	r3, [r1, #0]
    178c:	3301      	adds	r3, #1
    178e:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    1790:	4b01      	ldr	r3, [pc, #4]	; (1798 <char_out+0x10>)
    1792:	681b      	ldr	r3, [r3, #0]
    1794:	4798      	blx	r3
}
    1796:	bd08      	pop	{r3, pc}
    1798:	200000b0 	.word	0x200000b0

0000179c <__printk_hook_install>:
	_char_out = fn;
    179c:	4b01      	ldr	r3, [pc, #4]	; (17a4 <__printk_hook_install+0x8>)
    179e:	6018      	str	r0, [r3, #0]
}
    17a0:	4770      	bx	lr
    17a2:	bf00      	nop
    17a4:	200000b0 	.word	0x200000b0

000017a8 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    17a8:	b500      	push	{lr}
    17aa:	b083      	sub	sp, #12
    17ac:	4602      	mov	r2, r0
    17ae:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    17b0:	2100      	movs	r1, #0
    17b2:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    17b4:	a901      	add	r1, sp, #4
    17b6:	4803      	ldr	r0, [pc, #12]	; (17c4 <vprintk+0x1c>)
    17b8:	f000 fb72 	bl	1ea0 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    17bc:	b003      	add	sp, #12
    17be:	f85d fb04 	ldr.w	pc, [sp], #4
    17c2:	bf00      	nop
    17c4:	00001789 	.word	0x00001789

000017c8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    17c8:	b510      	push	{r4, lr}
    17ca:	b084      	sub	sp, #16
    17cc:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    17ce:	9001      	str	r0, [sp, #4]
    17d0:	9102      	str	r1, [sp, #8]
    17d2:	2100      	movs	r1, #0
    17d4:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
    17d6:	a901      	add	r1, sp, #4
    17d8:	4805      	ldr	r0, [pc, #20]	; (17f0 <vsnprintk+0x28>)
    17da:	f000 fb61 	bl	1ea0 <cbvprintf>

	if (ctx.count < ctx.max) {
    17de:	9b03      	ldr	r3, [sp, #12]
    17e0:	9a02      	ldr	r2, [sp, #8]
    17e2:	4293      	cmp	r3, r2
    17e4:	da01      	bge.n	17ea <vsnprintk+0x22>
		str[ctx.count] = '\0';
    17e6:	2200      	movs	r2, #0
    17e8:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
    17ea:	9803      	ldr	r0, [sp, #12]
    17ec:	b004      	add	sp, #16
    17ee:	bd10      	pop	{r4, pc}
    17f0:	0000b03b 	.word	0x0000b03b

000017f4 <process_complete>:
 * from the manager to the output list for notification.
 */
static void process_complete(struct onoff_manager *mgr,
			     sys_slist_t *clients,
			     int res)
{
    17f4:	b538      	push	{r3, r4, r5, lr}
    17f6:	4604      	mov	r4, r0
    17f8:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    17fa:	8b83      	ldrh	r3, [r0, #28]

	if (res < 0) {
    17fc:	2a00      	cmp	r2, #0
    17fe:	db14      	blt.n	182a <process_complete+0x36>
    1800:	f003 0307 	and.w	r3, r3, #7
		/* Enter ERROR state and notify all clients. */
		*clients = mgr->clients;
		sys_slist_init(&mgr->clients);
		set_state(mgr, ONOFF_STATE_ERROR);
	} else if ((state == ONOFF_STATE_TO_ON)
		   || (state == ONOFF_STATE_RESETTING)) {
    1804:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1806:	2a01      	cmp	r2, #1
    1808:	d91b      	bls.n	1842 <process_complete+0x4e>
			set_state(mgr, ONOFF_STATE_OFF);
		}
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else if (state == ONOFF_STATE_TO_OFF) {
    180a:	2b04      	cmp	r3, #4
    180c:	d04f      	beq.n	18ae <process_complete+0xba>
		set_state(mgr, ONOFF_STATE_OFF);
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else {
		__ASSERT_NO_MSG(false);
    180e:	4c2e      	ldr	r4, [pc, #184]	; (18c8 <process_complete+0xd4>)
    1810:	f240 131b 	movw	r3, #283	; 0x11b
    1814:	4622      	mov	r2, r4
    1816:	492d      	ldr	r1, [pc, #180]	; (18cc <process_complete+0xd8>)
    1818:	482d      	ldr	r0, [pc, #180]	; (18d0 <process_complete+0xdc>)
    181a:	f009 fc26 	bl	b06a <printk>
    181e:	f240 111b 	movw	r1, #283	; 0x11b
    1822:	4620      	mov	r0, r4
    1824:	f009 fd7a 	bl	b31c <assert_post_action>
	}
}
    1828:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
    182a:	e9d0 0100 	ldrd	r0, r1, [r0]
    182e:	e885 0003 	stmia.w	r5, {r0, r1}
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    1832:	2300      	movs	r3, #0
    1834:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    1836:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    1838:	2101      	movs	r1, #1
    183a:	4620      	mov	r0, r4
    183c:	f009 fc31 	bl	b0a2 <set_state>
    1840:	e7f2      	b.n	1828 <process_complete+0x34>
		*clients = mgr->clients;
    1842:	e9d0 0100 	ldrd	r0, r1, [r0]
    1846:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
    184a:	2200      	movs	r2, #0
    184c:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    184e:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    1850:	2b06      	cmp	r3, #6
    1852:	d00f      	beq.n	1874 <process_complete+0x80>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
    1854:	2b05      	cmp	r3, #5
    1856:	d11c      	bne.n	1892 <process_complete+0x9e>
			set_state(mgr, ONOFF_STATE_OFF);
    1858:	2100      	movs	r1, #0
    185a:	4620      	mov	r0, r4
    185c:	f009 fc21 	bl	b0a2 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    1860:	4620      	mov	r0, r4
    1862:	f009 fc45 	bl	b0f0 <process_recheck>
    1866:	2800      	cmp	r0, #0
    1868:	d0de      	beq.n	1828 <process_complete+0x34>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    186a:	8ba3      	ldrh	r3, [r4, #28]
    186c:	f043 0320 	orr.w	r3, r3, #32
    1870:	83a3      	strh	r3, [r4, #28]
    1872:	e7d9      	b.n	1828 <process_complete+0x34>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1874:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1876:	b13b      	cbz	r3, 1888 <process_complete+0x94>
				mgr->refs += 1U;
    1878:	8be2      	ldrh	r2, [r4, #30]
    187a:	3201      	adds	r2, #1
    187c:	83e2      	strh	r2, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    187e:	2b00      	cmp	r3, #0
    1880:	d0f9      	beq.n	1876 <process_complete+0x82>
	return node->next;
    1882:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1884:	2b00      	cmp	r3, #0
    1886:	d1f6      	bne.n	1876 <process_complete+0x82>
			set_state(mgr, ONOFF_STATE_ON);
    1888:	2102      	movs	r1, #2
    188a:	4620      	mov	r0, r4
    188c:	f009 fc09 	bl	b0a2 <set_state>
    1890:	e7e6      	b.n	1860 <process_complete+0x6c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
    1892:	4d0d      	ldr	r5, [pc, #52]	; (18c8 <process_complete+0xd4>)
    1894:	f240 1309 	movw	r3, #265	; 0x109
    1898:	462a      	mov	r2, r5
    189a:	490e      	ldr	r1, [pc, #56]	; (18d4 <process_complete+0xe0>)
    189c:	480c      	ldr	r0, [pc, #48]	; (18d0 <process_complete+0xdc>)
    189e:	f009 fbe4 	bl	b06a <printk>
    18a2:	f240 1109 	movw	r1, #265	; 0x109
    18a6:	4628      	mov	r0, r5
    18a8:	f009 fd38 	bl	b31c <assert_post_action>
    18ac:	e7d4      	b.n	1858 <process_complete+0x64>
		set_state(mgr, ONOFF_STATE_OFF);
    18ae:	2100      	movs	r1, #0
    18b0:	f009 fbf7 	bl	b0a2 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    18b4:	4620      	mov	r0, r4
    18b6:	f009 fc1b 	bl	b0f0 <process_recheck>
    18ba:	2800      	cmp	r0, #0
    18bc:	d0b4      	beq.n	1828 <process_complete+0x34>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    18be:	8ba3      	ldrh	r3, [r4, #28]
    18c0:	f043 0320 	orr.w	r3, r3, #32
    18c4:	83a3      	strh	r3, [r4, #28]
    18c6:	e7af      	b.n	1828 <process_complete+0x34>
    18c8:	0000c48c 	.word	0x0000c48c
    18cc:	0000c3e8 	.word	0x0000c3e8
    18d0:	0000c46c 	.word	0x0000c46c
    18d4:	0000c4b0 	.word	0x0000c4b0

000018d8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    18d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    18dc:	b083      	sub	sp, #12
    18de:	4604      	mov	r4, r0
    18e0:	4616      	mov	r6, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    18e2:	8b83      	ldrh	r3, [r0, #28]
    18e4:	f003 0707 	and.w	r7, r3, #7
	int res = 0;
	bool processing = ((mgr->flags & ONOFF_FLAG_PROCESSING) != 0);
    18e8:	f003 0808 	and.w	r8, r3, #8

	__ASSERT_NO_MSG(evt != EVT_NOP);
    18ec:	460d      	mov	r5, r1
    18ee:	b131      	cbz	r1, 18fe <process_event+0x26>

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    18f0:	f1b8 0f00 	cmp.w	r8, #0
    18f4:	d112      	bne.n	191c <process_event+0x44>
	list->head = NULL;
    18f6:	2300      	movs	r3, #0
    18f8:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
    18fa:	9301      	str	r3, [sp, #4]
}
    18fc:	e0aa      	b.n	1a54 <process_event+0x17c>
	__ASSERT_NO_MSG(evt != EVT_NOP);
    18fe:	f8df 930c 	ldr.w	r9, [pc, #780]	; 1c0c <process_event+0x334>
    1902:	f240 1333 	movw	r3, #307	; 0x133
    1906:	464a      	mov	r2, r9
    1908:	49be      	ldr	r1, [pc, #760]	; (1c04 <process_event+0x32c>)
    190a:	48bf      	ldr	r0, [pc, #764]	; (1c08 <process_event+0x330>)
    190c:	f009 fbad 	bl	b06a <printk>
    1910:	f240 1133 	movw	r1, #307	; 0x133
    1914:	4648      	mov	r0, r9
    1916:	f009 fd01 	bl	b31c <assert_post_action>
    191a:	e7e9      	b.n	18f0 <process_event+0x18>
		if (evt == EVT_COMPLETE) {
    191c:	2d01      	cmp	r5, #1
    191e:	d013      	beq.n	1948 <process_event+0x70>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
    1920:	2d02      	cmp	r5, #2
    1922:	d116      	bne.n	1952 <process_event+0x7a>

			mgr->flags |= ONOFF_FLAG_RECHECK;
    1924:	8ba3      	ldrh	r3, [r4, #28]
    1926:	f043 0320 	orr.w	r3, r3, #32
    192a:	83a3      	strh	r3, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    192c:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    192e:	4620      	mov	r0, r4
    1930:	f006 f868 	bl	7a04 <z_spin_unlock_valid>
    1934:	2800      	cmp	r0, #0
    1936:	f000 81a3 	beq.w	1c80 <process_event+0x3a8>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    193a:	f386 8811 	msr	BASEPRI, r6
    193e:	f3bf 8f6f 	isb	sy
}
    1942:	b003      	add	sp, #12
    1944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1948:	8ba3      	ldrh	r3, [r4, #28]
    194a:	f043 0310 	orr.w	r3, r3, #16
    194e:	83a3      	strh	r3, [r4, #28]
    1950:	e7ec      	b.n	192c <process_event+0x54>
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
    1952:	4dae      	ldr	r5, [pc, #696]	; (1c0c <process_event+0x334>)
    1954:	f44f 739e 	mov.w	r3, #316	; 0x13c
    1958:	462a      	mov	r2, r5
    195a:	49ad      	ldr	r1, [pc, #692]	; (1c10 <process_event+0x338>)
    195c:	48aa      	ldr	r0, [pc, #680]	; (1c08 <process_event+0x330>)
    195e:	f009 fb84 	bl	b06a <printk>
    1962:	f44f 719e 	mov.w	r1, #316	; 0x13c
    1966:	4628      	mov	r0, r5
    1968:	f009 fcd8 	bl	b31c <assert_post_action>
    196c:	e7da      	b.n	1924 <process_event+0x4c>
			evt = process_recheck(mgr);
    196e:	4620      	mov	r0, r4
    1970:	f009 fbbe 	bl	b0f0 <process_recheck>
    1974:	4605      	mov	r5, r0
    1976:	e06f      	b.n	1a58 <process_event+0x180>
			res = mgr->last_res;
    1978:	f8d4 9018 	ldr.w	r9, [r4, #24]
			process_complete(mgr, &clients, res);
    197c:	464a      	mov	r2, r9
    197e:	4669      	mov	r1, sp
    1980:	4620      	mov	r0, r4
    1982:	f7ff ff37 	bl	17f4 <process_complete>
		onoff_transition_fn transit = NULL;
    1986:	2500      	movs	r5, #0
    1988:	e011      	b.n	19ae <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    198a:	2f00      	cmp	r7, #0
    198c:	f040 8081 	bne.w	1a92 <process_event+0x1ba>
	return list->head;
    1990:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    1992:	2b00      	cmp	r3, #0
    1994:	f000 808b 	beq.w	1aae <process_event+0x1d6>
			transit = mgr->transitions->start;
    1998:	6923      	ldr	r3, [r4, #16]
    199a:	681d      	ldr	r5, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    199c:	2d00      	cmp	r5, #0
    199e:	f000 8094 	beq.w	1aca <process_event+0x1f2>
			set_state(mgr, ONOFF_STATE_TO_ON);
    19a2:	2106      	movs	r1, #6
    19a4:	4620      	mov	r0, r4
    19a6:	f009 fb7c 	bl	b0a2 <set_state>
		res = 0;
    19aa:	f04f 0900 	mov.w	r9, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    19ae:	8ba3      	ldrh	r3, [r4, #28]
    19b0:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    19b4:	45b8      	cmp	r8, r7
    19b6:	f000 810b 	beq.w	1bd0 <process_event+0x2f8>
    19ba:	68a2      	ldr	r2, [r4, #8]
    19bc:	2a00      	cmp	r2, #0
    19be:	f000 8109 	beq.w	1bd4 <process_event+0x2fc>
    19c2:	2201      	movs	r2, #1
		if (do_monitors
    19c4:	4617      	mov	r7, r2
    19c6:	b91a      	cbnz	r2, 19d0 <process_event+0xf8>
    19c8:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
    19ca:	2a00      	cmp	r2, #0
    19cc:	f000 8104 	beq.w	1bd8 <process_event+0x300>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    19d0:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    19d4:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
    19d6:	f104 0a14 	add.w	sl, r4, #20
    19da:	4650      	mov	r0, sl
    19dc:	f006 f812 	bl	7a04 <z_spin_unlock_valid>
    19e0:	2800      	cmp	r0, #0
    19e2:	f000 80fd 	beq.w	1be0 <process_event+0x308>
    19e6:	f386 8811 	msr	BASEPRI, r6
    19ea:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    19ee:	2f00      	cmp	r7, #0
    19f0:	f040 8126 	bne.w	1c40 <process_event+0x368>
    19f4:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
    19f6:	b12b      	cbz	r3, 1a04 <process_event+0x12c>
				notify_all(mgr, &clients, state, res);
    19f8:	464b      	mov	r3, r9
    19fa:	4642      	mov	r2, r8
    19fc:	4669      	mov	r1, sp
    19fe:	4620      	mov	r0, r4
    1a00:	f009 fbb8 	bl	b174 <notify_all>
			if (transit != NULL) {
    1a04:	b115      	cbz	r5, 1a0c <process_event+0x134>
				transit(mgr, transition_complete);
    1a06:	4983      	ldr	r1, [pc, #524]	; (1c14 <process_event+0x33c>)
    1a08:	4620      	mov	r0, r4
    1a0a:	47a8      	blx	r5
	__asm__ volatile(
    1a0c:	f04f 0320 	mov.w	r3, #32
    1a10:	f3ef 8611 	mrs	r6, BASEPRI
    1a14:	f383 8812 	msr	BASEPRI_MAX, r3
    1a18:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1a1c:	4650      	mov	r0, sl
    1a1e:	f005 ffe1 	bl	79e4 <z_spin_lock_valid>
    1a22:	2800      	cmp	r0, #0
    1a24:	f000 8112 	beq.w	1c4c <process_event+0x374>
	z_spin_lock_set_owner(l);
    1a28:	4650      	mov	r0, sl
    1a2a:	f005 fffb 	bl	7a24 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1a2e:	8ba3      	ldrh	r3, [r4, #28]
    1a30:	f023 0308 	bic.w	r3, r3, #8
    1a34:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1a36:	8ba3      	ldrh	r3, [r4, #28]
    1a38:	f013 0f10 	tst.w	r3, #16
    1a3c:	f000 8116 	beq.w	1c6c <process_event+0x394>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1a40:	f023 0310 	bic.w	r3, r3, #16
    1a44:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    1a46:	2501      	movs	r5, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    1a48:	8ba7      	ldrh	r7, [r4, #28]
    1a4a:	f007 0707 	and.w	r7, r7, #7
	} while (evt != EVT_NOP);
    1a4e:	2d00      	cmp	r5, #0
    1a50:	f43f af6c 	beq.w	192c <process_event+0x54>
		if (evt == EVT_RECHECK) {
    1a54:	2d02      	cmp	r5, #2
    1a56:	d08a      	beq.n	196e <process_event+0x96>
		if (evt == EVT_NOP) {
    1a58:	2d00      	cmp	r5, #0
    1a5a:	f43f af67 	beq.w	192c <process_event+0x54>
		if (evt == EVT_COMPLETE) {
    1a5e:	2d01      	cmp	r5, #1
    1a60:	d08a      	beq.n	1978 <process_event+0xa0>
		} else if (evt == EVT_START) {
    1a62:	2d03      	cmp	r5, #3
    1a64:	d091      	beq.n	198a <process_event+0xb2>
		} else if (evt == EVT_STOP) {
    1a66:	2d04      	cmp	r5, #4
    1a68:	d03e      	beq.n	1ae8 <process_event+0x210>
		} else if (evt == EVT_RESET) {
    1a6a:	2d05      	cmp	r5, #5
    1a6c:	f040 80a0 	bne.w	1bb0 <process_event+0x2d8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    1a70:	2f01      	cmp	r7, #1
    1a72:	d172      	bne.n	1b5a <process_event+0x282>
    1a74:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    1a76:	2b00      	cmp	r3, #0
    1a78:	d07d      	beq.n	1b76 <process_event+0x29e>
			transit = mgr->transitions->reset;
    1a7a:	6923      	ldr	r3, [r4, #16]
    1a7c:	689d      	ldr	r5, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    1a7e:	2d00      	cmp	r5, #0
    1a80:	f000 8087 	beq.w	1b92 <process_event+0x2ba>
			set_state(mgr, ONOFF_STATE_RESETTING);
    1a84:	2105      	movs	r1, #5
    1a86:	4620      	mov	r0, r4
    1a88:	f009 fb0b 	bl	b0a2 <set_state>
		res = 0;
    1a8c:	f04f 0900 	mov.w	r9, #0
    1a90:	e78d      	b.n	19ae <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    1a92:	4d5e      	ldr	r5, [pc, #376]	; (1c0c <process_event+0x334>)
    1a94:	f44f 73ab 	mov.w	r3, #342	; 0x156
    1a98:	462a      	mov	r2, r5
    1a9a:	495f      	ldr	r1, [pc, #380]	; (1c18 <process_event+0x340>)
    1a9c:	485a      	ldr	r0, [pc, #360]	; (1c08 <process_event+0x330>)
    1a9e:	f009 fae4 	bl	b06a <printk>
    1aa2:	f44f 71ab 	mov.w	r1, #342	; 0x156
    1aa6:	4628      	mov	r0, r5
    1aa8:	f009 fc38 	bl	b31c <assert_post_action>
    1aac:	e770      	b.n	1990 <process_event+0xb8>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    1aae:	4d57      	ldr	r5, [pc, #348]	; (1c0c <process_event+0x334>)
    1ab0:	f240 1357 	movw	r3, #343	; 0x157
    1ab4:	462a      	mov	r2, r5
    1ab6:	4959      	ldr	r1, [pc, #356]	; (1c1c <process_event+0x344>)
    1ab8:	4853      	ldr	r0, [pc, #332]	; (1c08 <process_event+0x330>)
    1aba:	f009 fad6 	bl	b06a <printk>
    1abe:	f240 1157 	movw	r1, #343	; 0x157
    1ac2:	4628      	mov	r0, r5
    1ac4:	f009 fc2a 	bl	b31c <assert_post_action>
    1ac8:	e766      	b.n	1998 <process_event+0xc0>
			__ASSERT_NO_MSG(transit != NULL);
    1aca:	f8df 8140 	ldr.w	r8, [pc, #320]	; 1c0c <process_event+0x334>
    1ace:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    1ad2:	4642      	mov	r2, r8
    1ad4:	4952      	ldr	r1, [pc, #328]	; (1c20 <process_event+0x348>)
    1ad6:	484c      	ldr	r0, [pc, #304]	; (1c08 <process_event+0x330>)
    1ad8:	f009 fac7 	bl	b06a <printk>
    1adc:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    1ae0:	4640      	mov	r0, r8
    1ae2:	f009 fc1b 	bl	b31c <assert_post_action>
    1ae6:	e75c      	b.n	19a2 <process_event+0xca>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    1ae8:	2f02      	cmp	r7, #2
    1aea:	d10b      	bne.n	1b04 <process_event+0x22c>
			__ASSERT_NO_MSG(mgr->refs == 0);
    1aec:	8be3      	ldrh	r3, [r4, #30]
    1aee:	b9bb      	cbnz	r3, 1b20 <process_event+0x248>
			transit = mgr->transitions->stop;
    1af0:	6923      	ldr	r3, [r4, #16]
    1af2:	685d      	ldr	r5, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    1af4:	b315      	cbz	r5, 1b3c <process_event+0x264>
			set_state(mgr, ONOFF_STATE_TO_OFF);
    1af6:	2104      	movs	r1, #4
    1af8:	4620      	mov	r0, r4
    1afa:	f009 fad2 	bl	b0a2 <set_state>
		res = 0;
    1afe:	f04f 0900 	mov.w	r9, #0
    1b02:	e754      	b.n	19ae <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    1b04:	4d41      	ldr	r5, [pc, #260]	; (1c0c <process_event+0x334>)
    1b06:	f240 135d 	movw	r3, #349	; 0x15d
    1b0a:	462a      	mov	r2, r5
    1b0c:	4945      	ldr	r1, [pc, #276]	; (1c24 <process_event+0x34c>)
    1b0e:	483e      	ldr	r0, [pc, #248]	; (1c08 <process_event+0x330>)
    1b10:	f009 faab 	bl	b06a <printk>
    1b14:	f240 115d 	movw	r1, #349	; 0x15d
    1b18:	4628      	mov	r0, r5
    1b1a:	f009 fbff 	bl	b31c <assert_post_action>
    1b1e:	e7e5      	b.n	1aec <process_event+0x214>
			__ASSERT_NO_MSG(mgr->refs == 0);
    1b20:	4d3a      	ldr	r5, [pc, #232]	; (1c0c <process_event+0x334>)
    1b22:	f44f 73af 	mov.w	r3, #350	; 0x15e
    1b26:	462a      	mov	r2, r5
    1b28:	493f      	ldr	r1, [pc, #252]	; (1c28 <process_event+0x350>)
    1b2a:	4837      	ldr	r0, [pc, #220]	; (1c08 <process_event+0x330>)
    1b2c:	f009 fa9d 	bl	b06a <printk>
    1b30:	f44f 71af 	mov.w	r1, #350	; 0x15e
    1b34:	4628      	mov	r0, r5
    1b36:	f009 fbf1 	bl	b31c <assert_post_action>
    1b3a:	e7d9      	b.n	1af0 <process_event+0x218>
			__ASSERT_NO_MSG(transit != NULL);
    1b3c:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 1c0c <process_event+0x334>
    1b40:	f240 1361 	movw	r3, #353	; 0x161
    1b44:	4642      	mov	r2, r8
    1b46:	4936      	ldr	r1, [pc, #216]	; (1c20 <process_event+0x348>)
    1b48:	482f      	ldr	r0, [pc, #188]	; (1c08 <process_event+0x330>)
    1b4a:	f009 fa8e 	bl	b06a <printk>
    1b4e:	f240 1161 	movw	r1, #353	; 0x161
    1b52:	4640      	mov	r0, r8
    1b54:	f009 fbe2 	bl	b31c <assert_post_action>
    1b58:	e7cd      	b.n	1af6 <process_event+0x21e>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    1b5a:	4d2c      	ldr	r5, [pc, #176]	; (1c0c <process_event+0x334>)
    1b5c:	f44f 73b2 	mov.w	r3, #356	; 0x164
    1b60:	462a      	mov	r2, r5
    1b62:	4932      	ldr	r1, [pc, #200]	; (1c2c <process_event+0x354>)
    1b64:	4828      	ldr	r0, [pc, #160]	; (1c08 <process_event+0x330>)
    1b66:	f009 fa80 	bl	b06a <printk>
    1b6a:	f44f 71b2 	mov.w	r1, #356	; 0x164
    1b6e:	4628      	mov	r0, r5
    1b70:	f009 fbd4 	bl	b31c <assert_post_action>
    1b74:	e77e      	b.n	1a74 <process_event+0x19c>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    1b76:	4d25      	ldr	r5, [pc, #148]	; (1c0c <process_event+0x334>)
    1b78:	f240 1365 	movw	r3, #357	; 0x165
    1b7c:	462a      	mov	r2, r5
    1b7e:	4927      	ldr	r1, [pc, #156]	; (1c1c <process_event+0x344>)
    1b80:	4821      	ldr	r0, [pc, #132]	; (1c08 <process_event+0x330>)
    1b82:	f009 fa72 	bl	b06a <printk>
    1b86:	f240 1165 	movw	r1, #357	; 0x165
    1b8a:	4628      	mov	r0, r5
    1b8c:	f009 fbc6 	bl	b31c <assert_post_action>
    1b90:	e773      	b.n	1a7a <process_event+0x1a2>
			__ASSERT_NO_MSG(transit != NULL);
    1b92:	f8df 8078 	ldr.w	r8, [pc, #120]	; 1c0c <process_event+0x334>
    1b96:	f44f 73b4 	mov.w	r3, #360	; 0x168
    1b9a:	4642      	mov	r2, r8
    1b9c:	4920      	ldr	r1, [pc, #128]	; (1c20 <process_event+0x348>)
    1b9e:	481a      	ldr	r0, [pc, #104]	; (1c08 <process_event+0x330>)
    1ba0:	f009 fa63 	bl	b06a <printk>
    1ba4:	f44f 71b4 	mov.w	r1, #360	; 0x168
    1ba8:	4640      	mov	r0, r8
    1baa:	f009 fbb7 	bl	b31c <assert_post_action>
    1bae:	e769      	b.n	1a84 <process_event+0x1ac>
			__ASSERT_NO_MSG(false);
    1bb0:	4d16      	ldr	r5, [pc, #88]	; (1c0c <process_event+0x334>)
    1bb2:	f240 136b 	movw	r3, #363	; 0x16b
    1bb6:	462a      	mov	r2, r5
    1bb8:	491d      	ldr	r1, [pc, #116]	; (1c30 <process_event+0x358>)
    1bba:	4813      	ldr	r0, [pc, #76]	; (1c08 <process_event+0x330>)
    1bbc:	f009 fa55 	bl	b06a <printk>
    1bc0:	f240 116b 	movw	r1, #363	; 0x16b
    1bc4:	4628      	mov	r0, r5
    1bc6:	f009 fba9 	bl	b31c <assert_post_action>
		onoff_transition_fn transit = NULL;
    1bca:	2500      	movs	r5, #0
		res = 0;
    1bcc:	46a9      	mov	r9, r5
    1bce:	e6ee      	b.n	19ae <process_event+0xd6>
				   && !sys_slist_is_empty(&mgr->monitors);
    1bd0:	2200      	movs	r2, #0
    1bd2:	e6f7      	b.n	19c4 <process_event+0xec>
    1bd4:	2200      	movs	r2, #0
    1bd6:	e6f5      	b.n	19c4 <process_event+0xec>
		    || (transit != NULL)) {
    1bd8:	2d00      	cmp	r5, #0
    1bda:	f47f aef9 	bne.w	19d0 <process_event+0xf8>
    1bde:	e72a      	b.n	1a36 <process_event+0x15e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1be0:	f8df b058 	ldr.w	fp, [pc, #88]	; 1c3c <process_event+0x364>
    1be4:	23ac      	movs	r3, #172	; 0xac
    1be6:	465a      	mov	r2, fp
    1be8:	4912      	ldr	r1, [pc, #72]	; (1c34 <process_event+0x35c>)
    1bea:	4807      	ldr	r0, [pc, #28]	; (1c08 <process_event+0x330>)
    1bec:	f009 fa3d 	bl	b06a <printk>
    1bf0:	4651      	mov	r1, sl
    1bf2:	4811      	ldr	r0, [pc, #68]	; (1c38 <process_event+0x360>)
    1bf4:	f009 fa39 	bl	b06a <printk>
    1bf8:	21ac      	movs	r1, #172	; 0xac
    1bfa:	4658      	mov	r0, fp
    1bfc:	f009 fb8e 	bl	b31c <assert_post_action>
    1c00:	e6f1      	b.n	19e6 <process_event+0x10e>
    1c02:	bf00      	nop
    1c04:	0000c4d8 	.word	0x0000c4d8
    1c08:	0000c46c 	.word	0x0000c46c
    1c0c:	0000c48c 	.word	0x0000c48c
    1c10:	0000c4e8 	.word	0x0000c4e8
    1c14:	00001cb9 	.word	0x00001cb9
    1c18:	0000c4fc 	.word	0x0000c4fc
    1c1c:	0000c508 	.word	0x0000c508
    1c20:	0000c52c 	.word	0x0000c52c
    1c24:	0000c544 	.word	0x0000c544
    1c28:	0000c55c 	.word	0x0000c55c
    1c2c:	0000c56c 	.word	0x0000c56c
    1c30:	0000c3e8 	.word	0x0000c3e8
    1c34:	0000c5ac 	.word	0x0000c5ac
    1c38:	0000c5c4 	.word	0x0000c5c4
    1c3c:	0000c584 	.word	0x0000c584
				notify_monitors(mgr, state, res);
    1c40:	464a      	mov	r2, r9
    1c42:	4641      	mov	r1, r8
    1c44:	4620      	mov	r0, r4
    1c46:	f009 fa34 	bl	b0b2 <notify_monitors>
    1c4a:	e6d3      	b.n	19f4 <process_event+0x11c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1c4c:	4d14      	ldr	r5, [pc, #80]	; (1ca0 <process_event+0x3c8>)
    1c4e:	2381      	movs	r3, #129	; 0x81
    1c50:	462a      	mov	r2, r5
    1c52:	4914      	ldr	r1, [pc, #80]	; (1ca4 <process_event+0x3cc>)
    1c54:	4814      	ldr	r0, [pc, #80]	; (1ca8 <process_event+0x3d0>)
    1c56:	f009 fa08 	bl	b06a <printk>
    1c5a:	4651      	mov	r1, sl
    1c5c:	4813      	ldr	r0, [pc, #76]	; (1cac <process_event+0x3d4>)
    1c5e:	f009 fa04 	bl	b06a <printk>
    1c62:	2181      	movs	r1, #129	; 0x81
    1c64:	4628      	mov	r0, r5
    1c66:	f009 fb59 	bl	b31c <assert_post_action>
    1c6a:	e6dd      	b.n	1a28 <process_event+0x150>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1c6c:	f013 0f20 	tst.w	r3, #32
    1c70:	d004      	beq.n	1c7c <process_event+0x3a4>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1c72:	f023 0320 	bic.w	r3, r3, #32
    1c76:	83a3      	strh	r3, [r4, #28]
			evt = EVT_RECHECK;
    1c78:	2502      	movs	r5, #2
    1c7a:	e6e5      	b.n	1a48 <process_event+0x170>
		evt = EVT_NOP;
    1c7c:	2500      	movs	r5, #0
    1c7e:	e6e3      	b.n	1a48 <process_event+0x170>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1c80:	4d07      	ldr	r5, [pc, #28]	; (1ca0 <process_event+0x3c8>)
    1c82:	23ac      	movs	r3, #172	; 0xac
    1c84:	462a      	mov	r2, r5
    1c86:	490a      	ldr	r1, [pc, #40]	; (1cb0 <process_event+0x3d8>)
    1c88:	4807      	ldr	r0, [pc, #28]	; (1ca8 <process_event+0x3d0>)
    1c8a:	f009 f9ee 	bl	b06a <printk>
    1c8e:	4621      	mov	r1, r4
    1c90:	4808      	ldr	r0, [pc, #32]	; (1cb4 <process_event+0x3dc>)
    1c92:	f009 f9ea 	bl	b06a <printk>
    1c96:	21ac      	movs	r1, #172	; 0xac
    1c98:	4628      	mov	r0, r5
    1c9a:	f009 fb3f 	bl	b31c <assert_post_action>
    1c9e:	e64c      	b.n	193a <process_event+0x62>
    1ca0:	0000c584 	.word	0x0000c584
    1ca4:	0000c5dc 	.word	0x0000c5dc
    1ca8:	0000c46c 	.word	0x0000c46c
    1cac:	0000c5f4 	.word	0x0000c5f4
    1cb0:	0000c5ac 	.word	0x0000c5ac
    1cb4:	0000c5c4 	.word	0x0000c5c4

00001cb8 <transition_complete>:
{
    1cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1cbc:	4604      	mov	r4, r0
    1cbe:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    1cc0:	f100 0614 	add.w	r6, r0, #20
    1cc4:	f04f 0320 	mov.w	r3, #32
    1cc8:	f3ef 8711 	mrs	r7, BASEPRI
    1ccc:	f383 8812 	msr	BASEPRI_MAX, r3
    1cd0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1cd4:	4630      	mov	r0, r6
    1cd6:	f005 fe85 	bl	79e4 <z_spin_lock_valid>
    1cda:	b150      	cbz	r0, 1cf2 <transition_complete+0x3a>
	z_spin_lock_set_owner(l);
    1cdc:	4630      	mov	r0, r6
    1cde:	f005 fea1 	bl	7a24 <z_spin_lock_set_owner>
	mgr->last_res = res;
    1ce2:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    1ce4:	463a      	mov	r2, r7
    1ce6:	2101      	movs	r1, #1
    1ce8:	4620      	mov	r0, r4
    1cea:	f7ff fdf5 	bl	18d8 <process_event>
}
    1cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1cf2:	f8df 802c 	ldr.w	r8, [pc, #44]	; 1d20 <transition_complete+0x68>
    1cf6:	2381      	movs	r3, #129	; 0x81
    1cf8:	4642      	mov	r2, r8
    1cfa:	4906      	ldr	r1, [pc, #24]	; (1d14 <transition_complete+0x5c>)
    1cfc:	4806      	ldr	r0, [pc, #24]	; (1d18 <transition_complete+0x60>)
    1cfe:	f009 f9b4 	bl	b06a <printk>
    1d02:	4631      	mov	r1, r6
    1d04:	4805      	ldr	r0, [pc, #20]	; (1d1c <transition_complete+0x64>)
    1d06:	f009 f9b0 	bl	b06a <printk>
    1d0a:	2181      	movs	r1, #129	; 0x81
    1d0c:	4640      	mov	r0, r8
    1d0e:	f009 fb05 	bl	b31c <assert_post_action>
    1d12:	e7e3      	b.n	1cdc <transition_complete+0x24>
    1d14:	0000c5dc 	.word	0x0000c5dc
    1d18:	0000c46c 	.word	0x0000c46c
    1d1c:	0000c5f4 	.word	0x0000c5f4
    1d20:	0000c584 	.word	0x0000c584

00001d24 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    1d24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d28:	4604      	mov	r4, r0
    1d2a:	4688      	mov	r8, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    1d2c:	f009 f9f9 	bl	b122 <validate_args>

	if (rv < 0) {
    1d30:	1e06      	subs	r6, r0, #0
    1d32:	db58      	blt.n	1de6 <onoff_request+0xc2>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    1d34:	f104 0714 	add.w	r7, r4, #20
    1d38:	f04f 0320 	mov.w	r3, #32
    1d3c:	f3ef 8911 	mrs	r9, BASEPRI
    1d40:	f383 8812 	msr	BASEPRI_MAX, r3
    1d44:	f3bf 8f6f 	isb	sy
    1d48:	4638      	mov	r0, r7
    1d4a:	f005 fe4b 	bl	79e4 <z_spin_lock_valid>
    1d4e:	b1e8      	cbz	r0, 1d8c <onoff_request+0x68>
	z_spin_lock_set_owner(l);
    1d50:	4638      	mov	r0, r7
    1d52:	f005 fe67 	bl	7a24 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1d56:	8ba5      	ldrh	r5, [r4, #28]
    1d58:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    1d5c:	8be3      	ldrh	r3, [r4, #30]
    1d5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1d62:	4293      	cmp	r3, r2
    1d64:	d056      	beq.n	1e14 <onoff_request+0xf0>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    1d66:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
    1d68:	2d02      	cmp	r5, #2
    1d6a:	d01f      	beq.n	1dac <onoff_request+0x88>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    1d6c:	b32d      	cbz	r5, 1dba <onoff_request+0x96>
		   || (state == ONOFF_STATE_TO_OFF)
    1d6e:	2d04      	cmp	r5, #4
    1d70:	d023      	beq.n	1dba <onoff_request+0x96>
		   || (state == ONOFF_STATE_TO_ON)) {
    1d72:	2d06      	cmp	r5, #6
    1d74:	d021      	beq.n	1dba <onoff_request+0x96>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
    1d76:	2d05      	cmp	r5, #5
    1d78:	d053      	beq.n	1e22 <onoff_request+0xfe>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    1d7a:	2d01      	cmp	r5, #1
    1d7c:	d136      	bne.n	1dec <onoff_request+0xc8>
		rv = -EIO;
    1d7e:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    1d82:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    1d86:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    1d88:	4652      	mov	r2, sl
    1d8a:	e01c      	b.n	1dc6 <onoff_request+0xa2>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1d8c:	4d3c      	ldr	r5, [pc, #240]	; (1e80 <onoff_request+0x15c>)
    1d8e:	2381      	movs	r3, #129	; 0x81
    1d90:	462a      	mov	r2, r5
    1d92:	493c      	ldr	r1, [pc, #240]	; (1e84 <onoff_request+0x160>)
    1d94:	483c      	ldr	r0, [pc, #240]	; (1e88 <onoff_request+0x164>)
    1d96:	f009 f968 	bl	b06a <printk>
    1d9a:	4639      	mov	r1, r7
    1d9c:	483b      	ldr	r0, [pc, #236]	; (1e8c <onoff_request+0x168>)
    1d9e:	f009 f964 	bl	b06a <printk>
    1da2:	2181      	movs	r1, #129	; 0x81
    1da4:	4628      	mov	r0, r5
    1da6:	f009 fab9 	bl	b31c <assert_post_action>
    1daa:	e7d1      	b.n	1d50 <onoff_request+0x2c>
		mgr->refs += 1U;
    1dac:	3301      	adds	r3, #1
    1dae:	83e3      	strh	r3, [r4, #30]
		notify = true;
    1db0:	f04f 0a01 	mov.w	sl, #1
	bool start = false;             /* trigger a start transition */
    1db4:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
    1db6:	461a      	mov	r2, r3
    1db8:	e005      	b.n	1dc6 <onoff_request+0xa2>
		start = (state == ONOFF_STATE_OFF);
    1dba:	fab5 f385 	clz	r3, r5
    1dbe:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
    1dc0:	f04f 0a00 	mov.w	sl, #0
		add_client = true;
    1dc4:	2201      	movs	r2, #1
	}

out:
	if (add_client) {
    1dc6:	b142      	cbz	r2, 1dda <onoff_request+0xb6>
	parent->next = child;
    1dc8:	2200      	movs	r2, #0
    1dca:	f8c8 2000 	str.w	r2, [r8]
	return list->tail;
    1dce:	6862      	ldr	r2, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    1dd0:	b372      	cbz	r2, 1e30 <onoff_request+0x10c>
	parent->next = child;
    1dd2:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
    1dd6:	f8c4 8004 	str.w	r8, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    1dda:	b373      	cbz	r3, 1e3a <onoff_request+0x116>
		process_event(mgr, EVT_RECHECK, key);
    1ddc:	464a      	mov	r2, r9
    1dde:	2102      	movs	r1, #2
    1de0:	4620      	mov	r0, r4
    1de2:	f7ff fd79 	bl	18d8 <process_event>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    1de6:	4630      	mov	r0, r6
    1de8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    1dec:	4e28      	ldr	r6, [pc, #160]	; (1e90 <onoff_request+0x16c>)
    1dee:	f240 13c9 	movw	r3, #457	; 0x1c9
    1df2:	4632      	mov	r2, r6
    1df4:	4927      	ldr	r1, [pc, #156]	; (1e94 <onoff_request+0x170>)
    1df6:	4824      	ldr	r0, [pc, #144]	; (1e88 <onoff_request+0x164>)
    1df8:	f009 f937 	bl	b06a <printk>
    1dfc:	f240 11c9 	movw	r1, #457	; 0x1c9
    1e00:	4630      	mov	r0, r6
    1e02:	f009 fa8b 	bl	b31c <assert_post_action>
		rv = -EIO;
    1e06:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    1e0a:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    1e0e:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    1e10:	4652      	mov	r2, sl
    1e12:	e7d8      	b.n	1dc6 <onoff_request+0xa2>
		rv = -EAGAIN;
    1e14:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
    1e18:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    1e1c:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    1e1e:	4652      	mov	r2, sl
    1e20:	e7d1      	b.n	1dc6 <onoff_request+0xa2>
		rv = -ENOTSUP;
    1e22:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
    1e26:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    1e2a:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    1e2c:	4652      	mov	r2, sl
    1e2e:	e7ca      	b.n	1dc6 <onoff_request+0xa2>
    1e30:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    1e34:	f8c4 8000 	str.w	r8, [r4]
}
    1e38:	e7cf      	b.n	1dda <onoff_request+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1e3a:	4638      	mov	r0, r7
    1e3c:	f005 fde2 	bl	7a04 <z_spin_unlock_valid>
    1e40:	b168      	cbz	r0, 1e5e <onoff_request+0x13a>
	__asm__ volatile(
    1e42:	f389 8811 	msr	BASEPRI, r9
    1e46:	f3bf 8f6f 	isb	sy
		if (notify) {
    1e4a:	f1ba 0f00 	cmp.w	sl, #0
    1e4e:	d0ca      	beq.n	1de6 <onoff_request+0xc2>
			notify_one(mgr, cli, state, 0);
    1e50:	2300      	movs	r3, #0
    1e52:	462a      	mov	r2, r5
    1e54:	4641      	mov	r1, r8
    1e56:	4620      	mov	r0, r4
    1e58:	f009 f979 	bl	b14e <notify_one>
    1e5c:	e7c3      	b.n	1de6 <onoff_request+0xc2>
    1e5e:	f8df b020 	ldr.w	fp, [pc, #32]	; 1e80 <onoff_request+0x15c>
    1e62:	23ac      	movs	r3, #172	; 0xac
    1e64:	465a      	mov	r2, fp
    1e66:	490c      	ldr	r1, [pc, #48]	; (1e98 <onoff_request+0x174>)
    1e68:	4807      	ldr	r0, [pc, #28]	; (1e88 <onoff_request+0x164>)
    1e6a:	f009 f8fe 	bl	b06a <printk>
    1e6e:	4639      	mov	r1, r7
    1e70:	480a      	ldr	r0, [pc, #40]	; (1e9c <onoff_request+0x178>)
    1e72:	f009 f8fa 	bl	b06a <printk>
    1e76:	21ac      	movs	r1, #172	; 0xac
    1e78:	4658      	mov	r0, fp
    1e7a:	f009 fa4f 	bl	b31c <assert_post_action>
    1e7e:	e7e0      	b.n	1e42 <onoff_request+0x11e>
    1e80:	0000c584 	.word	0x0000c584
    1e84:	0000c5dc 	.word	0x0000c5dc
    1e88:	0000c46c 	.word	0x0000c46c
    1e8c:	0000c5f4 	.word	0x0000c5f4
    1e90:	0000c48c 	.word	0x0000c48c
    1e94:	0000c56c 	.word	0x0000c56c
    1e98:	0000c5ac 	.word	0x0000c5ac
    1e9c:	0000c5c4 	.word	0x0000c5c4

00001ea0 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    1ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ea4:	b093      	sub	sp, #76	; 0x4c
    1ea6:	4606      	mov	r6, r0
    1ea8:	460d      	mov	r5, r1
    1eaa:	4692      	mov	sl, r2
    1eac:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    1eae:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    1eb0:	f89a 0000 	ldrb.w	r0, [sl]
    1eb4:	2800      	cmp	r0, #0
    1eb6:	f000 84d6 	beq.w	2866 <cbvprintf+0x9c6>
		if (*fp != '%') {
    1eba:	2825      	cmp	r0, #37	; 0x25
    1ebc:	d008      	beq.n	1ed0 <cbvprintf+0x30>
			OUTC(*fp++);
    1ebe:	f10a 0a01 	add.w	sl, sl, #1
    1ec2:	4629      	mov	r1, r5
    1ec4:	47b0      	blx	r6
    1ec6:	2800      	cmp	r0, #0
    1ec8:	f2c0 84ce 	blt.w	2868 <cbvprintf+0x9c8>
    1ecc:	3401      	adds	r4, #1
			continue;
    1ece:	e7ef      	b.n	1eb0 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    1ed0:	2300      	movs	r3, #0
    1ed2:	9306      	str	r3, [sp, #24]
    1ed4:	9307      	str	r3, [sp, #28]
    1ed6:	930b      	str	r3, [sp, #44]	; 0x2c
	*conv = (struct conversion) {
    1ed8:	9308      	str	r3, [sp, #32]
    1eda:	9309      	str	r3, [sp, #36]	; 0x24
    1edc:	930a      	str	r3, [sp, #40]	; 0x28
	++sp;
    1ede:	f10a 0801 	add.w	r8, sl, #1
	if (*sp == '%') {
    1ee2:	f89a 3001 	ldrb.w	r3, [sl, #1]
    1ee6:	2b25      	cmp	r3, #37	; 0x25
    1ee8:	d001      	beq.n	1eee <cbvprintf+0x4e>
	bool loop = true;
    1eea:	2701      	movs	r7, #1
    1eec:	e02c      	b.n	1f48 <cbvprintf+0xa8>
		conv->specifier = *sp++;
    1eee:	f10a 0802 	add.w	r8, sl, #2
    1ef2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		return sp;
    1ef6:	e1a8      	b.n	224a <cbvprintf+0x3aa>
			conv->flag_dash = true;
    1ef8:	f89d 3020 	ldrb.w	r3, [sp, #32]
    1efc:	f043 0304 	orr.w	r3, r3, #4
    1f00:	f88d 3020 	strb.w	r3, [sp, #32]
		if (loop) {
    1f04:	b1ff      	cbz	r7, 1f46 <cbvprintf+0xa6>
			++sp;
    1f06:	f108 0801 	add.w	r8, r8, #1
    1f0a:	e01c      	b.n	1f46 <cbvprintf+0xa6>
			conv->flag_plus = true;
    1f0c:	f89d 3020 	ldrb.w	r3, [sp, #32]
    1f10:	f043 0308 	orr.w	r3, r3, #8
    1f14:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    1f18:	e7f4      	b.n	1f04 <cbvprintf+0x64>
			conv->flag_space = true;
    1f1a:	f89d 3020 	ldrb.w	r3, [sp, #32]
    1f1e:	f043 0310 	orr.w	r3, r3, #16
    1f22:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    1f26:	e7ed      	b.n	1f04 <cbvprintf+0x64>
			conv->flag_hash = true;
    1f28:	f89d 3020 	ldrb.w	r3, [sp, #32]
    1f2c:	f043 0320 	orr.w	r3, r3, #32
    1f30:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    1f34:	e7e6      	b.n	1f04 <cbvprintf+0x64>
			conv->flag_zero = true;
    1f36:	f89d 3020 	ldrb.w	r3, [sp, #32]
    1f3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1f3e:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    1f42:	e7df      	b.n	1f04 <cbvprintf+0x64>
		switch (*sp) {
    1f44:	2700      	movs	r7, #0
	} while (loop);
    1f46:	b34f      	cbz	r7, 1f9c <cbvprintf+0xfc>
		switch (*sp) {
    1f48:	f898 3000 	ldrb.w	r3, [r8]
    1f4c:	3b20      	subs	r3, #32
    1f4e:	2b10      	cmp	r3, #16
    1f50:	d8f8      	bhi.n	1f44 <cbvprintf+0xa4>
    1f52:	a201      	add	r2, pc, #4	; (adr r2, 1f58 <cbvprintf+0xb8>)
    1f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1f58:	00001f1b 	.word	0x00001f1b
    1f5c:	00001f45 	.word	0x00001f45
    1f60:	00001f45 	.word	0x00001f45
    1f64:	00001f29 	.word	0x00001f29
    1f68:	00001f45 	.word	0x00001f45
    1f6c:	00001f45 	.word	0x00001f45
    1f70:	00001f45 	.word	0x00001f45
    1f74:	00001f45 	.word	0x00001f45
    1f78:	00001f45 	.word	0x00001f45
    1f7c:	00001f45 	.word	0x00001f45
    1f80:	00001f45 	.word	0x00001f45
    1f84:	00001f0d 	.word	0x00001f0d
    1f88:	00001f45 	.word	0x00001f45
    1f8c:	00001ef9 	.word	0x00001ef9
    1f90:	00001f45 	.word	0x00001f45
    1f94:	00001f45 	.word	0x00001f45
    1f98:	00001f37 	.word	0x00001f37
	if (conv->flag_zero && conv->flag_dash) {
    1f9c:	f89d 3020 	ldrb.w	r3, [sp, #32]
    1fa0:	f003 0344 	and.w	r3, r3, #68	; 0x44
    1fa4:	2b44      	cmp	r3, #68	; 0x44
    1fa6:	d06d      	beq.n	2084 <cbvprintf+0x1e4>
	sp = extract_width(conv, sp);
    1fa8:	f8cd 8014 	str.w	r8, [sp, #20]
	conv->width_present = true;
    1fac:	f89d 3020 	ldrb.w	r3, [sp, #32]
    1fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1fb4:	f88d 3020 	strb.w	r3, [sp, #32]
	if (*sp == '*') {
    1fb8:	f898 3000 	ldrb.w	r3, [r8]
    1fbc:	2b2a      	cmp	r3, #42	; 0x2a
    1fbe:	d068      	beq.n	2092 <cbvprintf+0x1f2>
	size_t width = extract_decimal(&sp);
    1fc0:	a805      	add	r0, sp, #20
    1fc2:	f009 f914 	bl	b1ee <extract_decimal>
	if (sp != wp) {
    1fc6:	9b05      	ldr	r3, [sp, #20]
    1fc8:	4598      	cmp	r8, r3
    1fca:	d012      	beq.n	1ff2 <cbvprintf+0x152>
		conv->width_present = true;
    1fcc:	f89d 3020 	ldrb.w	r3, [sp, #32]
    1fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1fd4:	f88d 3020 	strb.w	r3, [sp, #32]
		conv->width_value = width;
    1fd8:	9009      	str	r0, [sp, #36]	; 0x24
		conv->unsupported |= ((conv->width_value < 0)
    1fda:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    1fde:	2800      	cmp	r0, #0
    1fe0:	db60      	blt.n	20a4 <cbvprintf+0x204>
    1fe2:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    1fe4:	4313      	orrs	r3, r2
    1fe6:	f89d 2020 	ldrb.w	r2, [sp, #32]
    1fea:	f363 0241 	bfi	r2, r3, #1, #1
    1fee:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
    1ff2:	9b05      	ldr	r3, [sp, #20]
	sp = extract_prec(conv, sp);
    1ff4:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
    1ff6:	781b      	ldrb	r3, [r3, #0]
    1ff8:	2b2e      	cmp	r3, #46	; 0x2e
    1ffa:	bf14      	ite	ne
    1ffc:	2300      	movne	r3, #0
    1ffe:	2301      	moveq	r3, #1
    2000:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    2004:	f363 0241 	bfi	r2, r3, #1, #1
    2008:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	if (!conv->prec_present) {
    200c:	2b00      	cmp	r3, #0
    200e:	d04b      	beq.n	20a8 <cbvprintf+0x208>
	++sp;
    2010:	9b05      	ldr	r3, [sp, #20]
    2012:	1c5a      	adds	r2, r3, #1
    2014:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
    2016:	785b      	ldrb	r3, [r3, #1]
    2018:	2b2a      	cmp	r3, #42	; 0x2a
    201a:	d048      	beq.n	20ae <cbvprintf+0x20e>
	size_t prec = extract_decimal(&sp);
    201c:	a805      	add	r0, sp, #20
    201e:	f009 f8e6 	bl	b1ee <extract_decimal>
	conv->prec_value = prec;
    2022:	900a      	str	r0, [sp, #40]	; 0x28
	conv->unsupported |= ((conv->prec_value < 0)
    2024:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2028:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    202c:	2800      	cmp	r0, #0
    202e:	db47      	blt.n	20c0 <cbvprintf+0x220>
    2030:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    2032:	4313      	orrs	r3, r2
    2034:	f89d 2020 	ldrb.w	r2, [sp, #32]
    2038:	f363 0241 	bfi	r2, r3, #1, #1
    203c:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
    2040:	f8dd 8014 	ldr.w	r8, [sp, #20]
	switch (*sp) {
    2044:	f898 3000 	ldrb.w	r3, [r8]
    2048:	3b4c      	subs	r3, #76	; 0x4c
    204a:	2b2e      	cmp	r3, #46	; 0x2e
    204c:	f200 80dc 	bhi.w	2208 <cbvprintf+0x368>
    2050:	e8df f003 	tbb	[pc, r3]
    2054:	dadadaca 	.word	0xdadadaca
    2058:	dadadada 	.word	0xdadadada
    205c:	dadadada 	.word	0xdadadada
    2060:	dadadada 	.word	0xdadadada
    2064:	dadadada 	.word	0xdadadada
    2068:	dadadada 	.word	0xdadadada
    206c:	dadadada 	.word	0xdadadada
    2070:	da6ada38 	.word	0xda6ada38
    2074:	dadada51 	.word	0xdadada51
    2078:	dadadada 	.word	0xdadadada
    207c:	dadadac0 	.word	0xdadadac0
    2080:	dada      	.short	0xdada
    2082:	b6          	.byte	0xb6
    2083:	00          	.byte	0x00
		conv->flag_zero = false;
    2084:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2088:	f36f 1386 	bfc	r3, #6, #1
    208c:	f88d 3020 	strb.w	r3, [sp, #32]
    2090:	e78a      	b.n	1fa8 <cbvprintf+0x108>
		conv->width_star = true;
    2092:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2096:	f043 0301 	orr.w	r3, r3, #1
    209a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
    209e:	4643      	mov	r3, r8
    20a0:	3301      	adds	r3, #1
    20a2:	e7a7      	b.n	1ff4 <cbvprintf+0x154>
				      || (width != (size_t)conv->width_value));
    20a4:	2201      	movs	r2, #1
    20a6:	e79d      	b.n	1fe4 <cbvprintf+0x144>
		return sp;
    20a8:	f8dd 8014 	ldr.w	r8, [sp, #20]
    20ac:	e7ca      	b.n	2044 <cbvprintf+0x1a4>
		conv->prec_star = true;
    20ae:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    20b2:	f043 0304 	orr.w	r3, r3, #4
    20b6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
    20ba:	f102 0801 	add.w	r8, r2, #1
    20be:	e7c1      	b.n	2044 <cbvprintf+0x1a4>
			      || (prec != (size_t)conv->prec_value));
    20c0:	2201      	movs	r2, #1
    20c2:	e7b6      	b.n	2032 <cbvprintf+0x192>
		if (*++sp == 'h') {
    20c4:	f108 0201 	add.w	r2, r8, #1
    20c8:	f898 3001 	ldrb.w	r3, [r8, #1]
    20cc:	2b68      	cmp	r3, #104	; 0x68
    20ce:	d008      	beq.n	20e2 <cbvprintf+0x242>
			conv->length_mod = LENGTH_H;
    20d0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    20d4:	2102      	movs	r1, #2
    20d6:	f361 03c6 	bfi	r3, r1, #3, #4
    20da:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'h') {
    20de:	4690      	mov	r8, r2
    20e0:	e02b      	b.n	213a <cbvprintf+0x29a>
			conv->length_mod = LENGTH_HH;
    20e2:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    20e6:	2201      	movs	r2, #1
    20e8:	f362 03c6 	bfi	r3, r2, #3, #4
    20ec:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
    20f0:	f108 0802 	add.w	r8, r8, #2
    20f4:	e021      	b.n	213a <cbvprintf+0x29a>
		if (*++sp == 'l') {
    20f6:	f108 0201 	add.w	r2, r8, #1
    20fa:	f898 3001 	ldrb.w	r3, [r8, #1]
    20fe:	2b6c      	cmp	r3, #108	; 0x6c
    2100:	d008      	beq.n	2114 <cbvprintf+0x274>
			conv->length_mod = LENGTH_L;
    2102:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2106:	2103      	movs	r1, #3
    2108:	f361 03c6 	bfi	r3, r1, #3, #4
    210c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'l') {
    2110:	4690      	mov	r8, r2
    2112:	e012      	b.n	213a <cbvprintf+0x29a>
			conv->length_mod = LENGTH_LL;
    2114:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2118:	2204      	movs	r2, #4
    211a:	f362 03c6 	bfi	r3, r2, #3, #4
    211e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
    2122:	f108 0802 	add.w	r8, r8, #2
    2126:	e008      	b.n	213a <cbvprintf+0x29a>
		conv->length_mod = LENGTH_J;
    2128:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    212c:	2205      	movs	r2, #5
    212e:	f362 03c6 	bfi	r3, r2, #3, #4
    2132:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    2136:	f108 0801 	add.w	r8, r8, #1
	conv->specifier = *sp++;
    213a:	f818 3b01 	ldrb.w	r3, [r8], #1
    213e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	switch (conv->specifier) {
    2142:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    2146:	2a37      	cmp	r2, #55	; 0x37
    2148:	f200 8150 	bhi.w	23ec <cbvprintf+0x54c>
    214c:	e8df f012 	tbh	[pc, r2, lsl #1]
    2150:	014e0126 	.word	0x014e0126
    2154:	014e014e 	.word	0x014e014e
    2158:	01260126 	.word	0x01260126
    215c:	014e0126 	.word	0x014e0126
    2160:	014e014e 	.word	0x014e014e
    2164:	014e014e 	.word	0x014e014e
    2168:	014e014e 	.word	0x014e014e
    216c:	014e014e 	.word	0x014e014e
    2170:	014e014e 	.word	0x014e014e
    2174:	014e014e 	.word	0x014e014e
    2178:	014e014e 	.word	0x014e014e
    217c:	0113014e 	.word	0x0113014e
    2180:	014e014e 	.word	0x014e014e
    2184:	014e014e 	.word	0x014e014e
    2188:	014e014e 	.word	0x014e014e
    218c:	014e014e 	.word	0x014e014e
    2190:	014e0126 	.word	0x014e0126
    2194:	00630113 	.word	0x00630113
    2198:	01260126 	.word	0x01260126
    219c:	014e0126 	.word	0x014e0126
    21a0:	014e0063 	.word	0x014e0063
    21a4:	014e014e 	.word	0x014e014e
    21a8:	012f014e 	.word	0x012f014e
    21ac:	013f0113 	.word	0x013f0113
    21b0:	014e014e 	.word	0x014e014e
    21b4:	014e013f 	.word	0x014e013f
    21b8:	014e0113 	.word	0x014e0113
    21bc:	0113014e 	.word	0x0113014e
		conv->length_mod = LENGTH_Z;
    21c0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    21c4:	2206      	movs	r2, #6
    21c6:	f362 03c6 	bfi	r3, r2, #3, #4
    21ca:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    21ce:	f108 0801 	add.w	r8, r8, #1
		break;
    21d2:	e7b2      	b.n	213a <cbvprintf+0x29a>
		conv->length_mod = LENGTH_T;
    21d4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    21d8:	2207      	movs	r2, #7
    21da:	f362 03c6 	bfi	r3, r2, #3, #4
    21de:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    21e2:	f108 0801 	add.w	r8, r8, #1
		break;
    21e6:	e7a8      	b.n	213a <cbvprintf+0x29a>
		conv->length_mod = LENGTH_UPPER_L;
    21e8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    21ec:	2208      	movs	r2, #8
    21ee:	f362 03c6 	bfi	r3, r2, #3, #4
    21f2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    21f6:	f108 0801 	add.w	r8, r8, #1
		conv->unsupported = true;
    21fa:	f89d 3020 	ldrb.w	r3, [sp, #32]
    21fe:	f043 0302 	orr.w	r3, r3, #2
    2202:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
    2206:	e798      	b.n	213a <cbvprintf+0x29a>
		conv->length_mod = LENGTH_NONE;
    2208:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    220c:	f36f 03c6 	bfc	r3, #3, #4
    2210:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		break;
    2214:	e791      	b.n	213a <cbvprintf+0x29a>
		conv->specifier_cat = SPECIFIER_SINT;
    2216:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    221a:	2101      	movs	r1, #1
    221c:	f361 0202 	bfi	r2, r1, #0, #3
    2220:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
    2224:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    2228:	f002 0278 	and.w	r2, r2, #120	; 0x78
    222c:	2a40      	cmp	r2, #64	; 0x40
    222e:	f000 80aa 	beq.w	2386 <cbvprintf+0x4e6>
		if (conv->specifier == 'c') {
    2232:	2b63      	cmp	r3, #99	; 0x63
    2234:	f000 80ae 	beq.w	2394 <cbvprintf+0x4f4>
	conv->unsupported |= unsupported;
    2238:	f89d 3020 	ldrb.w	r3, [sp, #32]
    223c:	f3c3 0240 	ubfx	r2, r3, #1, #1
    2240:	4317      	orrs	r7, r2
    2242:	f367 0341 	bfi	r3, r7, #1, #1
    2246:	f88d 3020 	strb.w	r3, [sp, #32]
		fp = extract_conversion(conv, sp);

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    224a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    224e:	f013 0f01 	tst.w	r3, #1
    2252:	f000 80da 	beq.w	240a <cbvprintf+0x56a>
			width = va_arg(ap, int);
    2256:	9b03      	ldr	r3, [sp, #12]
    2258:	1d1a      	adds	r2, r3, #4
    225a:	9203      	str	r2, [sp, #12]
    225c:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    225e:	2f00      	cmp	r7, #0
    2260:	f2c0 80cb 	blt.w	23fa <cbvprintf+0x55a>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    2264:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2268:	f013 0f04 	tst.w	r3, #4
    226c:	f000 80df 	beq.w	242e <cbvprintf+0x58e>
			int arg = va_arg(ap, int);
    2270:	9b03      	ldr	r3, [sp, #12]
    2272:	1d1a      	adds	r2, r3, #4
    2274:	9203      	str	r2, [sp, #12]
    2276:	f8d3 b000 	ldr.w	fp, [r3]

			if (arg < 0) {
    227a:	f1bb 0f00 	cmp.w	fp, #0
    227e:	f2c0 80cd 	blt.w	241c <cbvprintf+0x57c>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    2282:	2300      	movs	r3, #0
    2284:	9309      	str	r3, [sp, #36]	; 0x24
		conv->pad0_pre_exp = 0;
    2286:	930a      	str	r3, [sp, #40]	; 0x28
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    2288:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    228c:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    2290:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
    2294:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    2298:	2b01      	cmp	r3, #1
    229a:	f000 80d1 	beq.w	2440 <cbvprintf+0x5a0>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    229e:	2b02      	cmp	r3, #2
    22a0:	f000 8116 	beq.w	24d0 <cbvprintf+0x630>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    22a4:	2b04      	cmp	r3, #4
    22a6:	f000 8167 	beq.w	2578 <cbvprintf+0x6d8>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    22aa:	2b03      	cmp	r3, #3
    22ac:	f000 817e 	beq.w	25ac <cbvprintf+0x70c>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    22b0:	f89d 9020 	ldrb.w	r9, [sp, #32]
    22b4:	f019 0303 	ands.w	r3, r9, #3
    22b8:	9302      	str	r3, [sp, #8]
    22ba:	f040 817d 	bne.w	25b8 <cbvprintf+0x718>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    22be:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    22c2:	3b25      	subs	r3, #37	; 0x25
    22c4:	2b53      	cmp	r3, #83	; 0x53
    22c6:	f200 8233 	bhi.w	2730 <cbvprintf+0x890>
    22ca:	e8df f013 	tbh	[pc, r3, lsl #1]
    22ce:	0181      	.short	0x0181
    22d0:	02310231 	.word	0x02310231
    22d4:	02310231 	.word	0x02310231
    22d8:	02310231 	.word	0x02310231
    22dc:	02310231 	.word	0x02310231
    22e0:	02310231 	.word	0x02310231
    22e4:	02310231 	.word	0x02310231
    22e8:	02310231 	.word	0x02310231
    22ec:	02310231 	.word	0x02310231
    22f0:	02310231 	.word	0x02310231
    22f4:	02310231 	.word	0x02310231
    22f8:	02310231 	.word	0x02310231
    22fc:	02310231 	.word	0x02310231
    2300:	02310231 	.word	0x02310231
    2304:	02310231 	.word	0x02310231
    2308:	02310231 	.word	0x02310231
    230c:	02310231 	.word	0x02310231
    2310:	02310231 	.word	0x02310231
    2314:	02310231 	.word	0x02310231
    2318:	02310231 	.word	0x02310231
    231c:	02310231 	.word	0x02310231
    2320:	02310231 	.word	0x02310231
    2324:	02310231 	.word	0x02310231
    2328:	02310231 	.word	0x02310231
    232c:	02310231 	.word	0x02310231
    2330:	02310231 	.word	0x02310231
    2334:	023101c7 	.word	0x023101c7
    2338:	02310231 	.word	0x02310231
    233c:	02310231 	.word	0x02310231
    2340:	02310231 	.word	0x02310231
    2344:	02310231 	.word	0x02310231
    2348:	01a10231 	.word	0x01a10231
    234c:	023101ab 	.word	0x023101ab
    2350:	02310231 	.word	0x02310231
    2354:	01ab0231 	.word	0x01ab0231
    2358:	02310231 	.word	0x02310231
    235c:	02310231 	.word	0x02310231
    2360:	01c70208 	.word	0x01c70208
    2364:	023101ea 	.word	0x023101ea
    2368:	018f0231 	.word	0x018f0231
    236c:	01c70231 	.word	0x01c70231
    2370:	02310231 	.word	0x02310231
    2374:	01c7      	.short	0x01c7
		conv->specifier_cat = SPECIFIER_UINT;
    2376:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    237a:	2102      	movs	r1, #2
    237c:	f361 0202 	bfi	r2, r1, #0, #3
    2380:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
    2384:	e74e      	b.n	2224 <cbvprintf+0x384>
			conv->invalid = true;
    2386:	f89d 1020 	ldrb.w	r1, [sp, #32]
    238a:	f041 0101 	orr.w	r1, r1, #1
    238e:	f88d 1020 	strb.w	r1, [sp, #32]
    2392:	e74e      	b.n	2232 <cbvprintf+0x392>
			unsupported = (conv->length_mod != LENGTH_NONE);
    2394:	1e17      	subs	r7, r2, #0
    2396:	bf18      	it	ne
    2398:	2701      	movne	r7, #1
    239a:	e74d      	b.n	2238 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_FP;
    239c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    23a0:	2204      	movs	r2, #4
    23a2:	f362 0302 	bfi	r3, r2, #0, #3
    23a6:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			unsupported = true;
    23aa:	2701      	movs	r7, #1
			break;
    23ac:	e744      	b.n	2238 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
    23ae:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    23b2:	2203      	movs	r2, #3
    23b4:	f362 0302 	bfi	r3, r2, #0, #3
    23b8:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
    23bc:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    23c0:	f003 0378 	and.w	r3, r3, #120	; 0x78
    23c4:	2b40      	cmp	r3, #64	; 0x40
    23c6:	f47f af37 	bne.w	2238 <cbvprintf+0x398>
			unsupported = true;
    23ca:	2701      	movs	r7, #1
    23cc:	e734      	b.n	2238 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
    23ce:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    23d2:	2203      	movs	r2, #3
    23d4:	f362 0302 	bfi	r3, r2, #0, #3
    23d8:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod != LENGTH_NONE) {
    23dc:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    23e0:	f013 0f78 	tst.w	r3, #120	; 0x78
    23e4:	f43f af28 	beq.w	2238 <cbvprintf+0x398>
			unsupported = true;
    23e8:	2701      	movs	r7, #1
    23ea:	e725      	b.n	2238 <cbvprintf+0x398>
		conv->invalid = true;
    23ec:	f89d 3020 	ldrb.w	r3, [sp, #32]
    23f0:	f043 0301 	orr.w	r3, r3, #1
    23f4:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
    23f8:	e71e      	b.n	2238 <cbvprintf+0x398>
				conv->flag_dash = true;
    23fa:	f89d 3020 	ldrb.w	r3, [sp, #32]
    23fe:	f043 0304 	orr.w	r3, r3, #4
    2402:	f88d 3020 	strb.w	r3, [sp, #32]
				width = -width;
    2406:	427f      	negs	r7, r7
    2408:	e72c      	b.n	2264 <cbvprintf+0x3c4>
		} else if (conv->width_present) {
    240a:	f99d 3020 	ldrsb.w	r3, [sp, #32]
    240e:	2b00      	cmp	r3, #0
    2410:	db02      	blt.n	2418 <cbvprintf+0x578>
		int width = -1;
    2412:	f04f 37ff 	mov.w	r7, #4294967295
    2416:	e725      	b.n	2264 <cbvprintf+0x3c4>
			width = conv->width_value;
    2418:	9f09      	ldr	r7, [sp, #36]	; 0x24
    241a:	e723      	b.n	2264 <cbvprintf+0x3c4>
				conv->prec_present = false;
    241c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2420:	f36f 0341 	bfc	r3, #1, #1
    2424:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		int precision = -1;
    2428:	f04f 3bff 	mov.w	fp, #4294967295
    242c:	e729      	b.n	2282 <cbvprintf+0x3e2>
		} else if (conv->prec_present) {
    242e:	f013 0f02 	tst.w	r3, #2
    2432:	d002      	beq.n	243a <cbvprintf+0x59a>
			precision = conv->prec_value;
    2434:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    2438:	e723      	b.n	2282 <cbvprintf+0x3e2>
		int precision = -1;
    243a:	f04f 3bff 	mov.w	fp, #4294967295
    243e:	e720      	b.n	2282 <cbvprintf+0x3e2>
			switch (length_mod) {
    2440:	1ecb      	subs	r3, r1, #3
    2442:	2b04      	cmp	r3, #4
    2444:	d804      	bhi.n	2450 <cbvprintf+0x5b0>
    2446:	e8df f003 	tbb	[pc, r3]
    244a:	1d0b      	.short	0x1d0b
    244c:	3529      	.short	0x3529
    244e:	35          	.byte	0x35
    244f:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    2450:	9b03      	ldr	r3, [sp, #12]
    2452:	1d1a      	adds	r2, r3, #4
    2454:	9203      	str	r2, [sp, #12]
    2456:	681a      	ldr	r2, [r3, #0]
    2458:	17d3      	asrs	r3, r2, #31
    245a:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    245e:	e006      	b.n	246e <cbvprintf+0x5ce>
					value->sint = va_arg(ap, long);
    2460:	9b03      	ldr	r3, [sp, #12]
    2462:	1d1a      	adds	r2, r3, #4
    2464:	9203      	str	r2, [sp, #12]
    2466:	681a      	ldr	r2, [r3, #0]
    2468:	17d3      	asrs	r3, r2, #31
    246a:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
    246e:	2901      	cmp	r1, #1
    2470:	d028      	beq.n	24c4 <cbvprintf+0x624>
			} else if (length_mod == LENGTH_H) {
    2472:	2902      	cmp	r1, #2
    2474:	f47f af1c 	bne.w	22b0 <cbvprintf+0x410>
				value->sint = (short)value->sint;
    2478:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    247c:	17d3      	asrs	r3, r2, #31
    247e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    2482:	e715      	b.n	22b0 <cbvprintf+0x410>
					(sint_value_type)va_arg(ap, long long);
    2484:	9b03      	ldr	r3, [sp, #12]
    2486:	3307      	adds	r3, #7
    2488:	f023 0307 	bic.w	r3, r3, #7
    248c:	f103 0208 	add.w	r2, r3, #8
    2490:	9203      	str	r2, [sp, #12]
    2492:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    2496:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    249a:	e7e8      	b.n	246e <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, intmax_t);
    249c:	9b03      	ldr	r3, [sp, #12]
    249e:	3307      	adds	r3, #7
    24a0:	f023 0307 	bic.w	r3, r3, #7
    24a4:	f103 0208 	add.w	r2, r3, #8
    24a8:	9203      	str	r2, [sp, #12]
    24aa:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    24ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    24b2:	e7dc      	b.n	246e <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    24b4:	9b03      	ldr	r3, [sp, #12]
    24b6:	1d1a      	adds	r2, r3, #4
    24b8:	9203      	str	r2, [sp, #12]
    24ba:	681a      	ldr	r2, [r3, #0]
    24bc:	17d3      	asrs	r3, r2, #31
				value->sint =
    24be:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    24c2:	e7d4      	b.n	246e <cbvprintf+0x5ce>
				value->sint = (char)value->sint;
    24c4:	f89d 3018 	ldrb.w	r3, [sp, #24]
    24c8:	9306      	str	r3, [sp, #24]
    24ca:	2300      	movs	r3, #0
    24cc:	9307      	str	r3, [sp, #28]
    24ce:	e6ef      	b.n	22b0 <cbvprintf+0x410>
			switch (length_mod) {
    24d0:	1ecb      	subs	r3, r1, #3
    24d2:	2b04      	cmp	r3, #4
    24d4:	d804      	bhi.n	24e0 <cbvprintf+0x640>
    24d6:	e8df f003 	tbb	[pc, r3]
    24da:	1f0b      	.short	0x1f0b
    24dc:	4135      	.short	0x4135
    24de:	41          	.byte	0x41
    24df:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    24e0:	9b03      	ldr	r3, [sp, #12]
    24e2:	1d1a      	adds	r2, r3, #4
    24e4:	9203      	str	r2, [sp, #12]
    24e6:	681b      	ldr	r3, [r3, #0]
    24e8:	9306      	str	r3, [sp, #24]
    24ea:	2300      	movs	r3, #0
    24ec:	9307      	str	r3, [sp, #28]
				break;
    24ee:	e01e      	b.n	252e <cbvprintf+0x68e>
				    && (conv->specifier == 'c')) {
    24f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				if ((!WCHAR_IS_SIGNED)
    24f4:	2b63      	cmp	r3, #99	; 0x63
    24f6:	d007      	beq.n	2508 <cbvprintf+0x668>
					value->uint = va_arg(ap, unsigned long);
    24f8:	9b03      	ldr	r3, [sp, #12]
    24fa:	1d1a      	adds	r2, r3, #4
    24fc:	9203      	str	r2, [sp, #12]
    24fe:	681b      	ldr	r3, [r3, #0]
    2500:	9306      	str	r3, [sp, #24]
    2502:	2300      	movs	r3, #0
    2504:	9307      	str	r3, [sp, #28]
    2506:	e012      	b.n	252e <cbvprintf+0x68e>
					value->uint = (wchar_t)va_arg(ap,
    2508:	9b03      	ldr	r3, [sp, #12]
    250a:	1d1a      	adds	r2, r3, #4
    250c:	9203      	str	r2, [sp, #12]
    250e:	681b      	ldr	r3, [r3, #0]
    2510:	9306      	str	r3, [sp, #24]
    2512:	2300      	movs	r3, #0
    2514:	9307      	str	r3, [sp, #28]
    2516:	e00a      	b.n	252e <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap,
    2518:	9b03      	ldr	r3, [sp, #12]
    251a:	3307      	adds	r3, #7
    251c:	f023 0307 	bic.w	r3, r3, #7
    2520:	f103 0208 	add.w	r2, r3, #8
    2524:	9203      	str	r2, [sp, #12]
    2526:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    252a:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
    252e:	2901      	cmp	r1, #1
    2530:	d01c      	beq.n	256c <cbvprintf+0x6cc>
			} else if (length_mod == LENGTH_H) {
    2532:	2902      	cmp	r1, #2
    2534:	f47f aebc 	bne.w	22b0 <cbvprintf+0x410>
				value->uint = (unsigned short)value->uint;
    2538:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    253c:	9306      	str	r3, [sp, #24]
    253e:	2300      	movs	r3, #0
    2540:	9307      	str	r3, [sp, #28]
    2542:	e6b5      	b.n	22b0 <cbvprintf+0x410>
					(uint_value_type)va_arg(ap,
    2544:	9b03      	ldr	r3, [sp, #12]
    2546:	3307      	adds	r3, #7
    2548:	f023 0307 	bic.w	r3, r3, #7
    254c:	f103 0208 	add.w	r2, r3, #8
    2550:	9203      	str	r2, [sp, #12]
    2552:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    2556:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    255a:	e7e8      	b.n	252e <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap, size_t);
    255c:	9b03      	ldr	r3, [sp, #12]
    255e:	1d1a      	adds	r2, r3, #4
    2560:	9203      	str	r2, [sp, #12]
    2562:	681b      	ldr	r3, [r3, #0]
				value->uint =
    2564:	9306      	str	r3, [sp, #24]
    2566:	2300      	movs	r3, #0
    2568:	9307      	str	r3, [sp, #28]
				break;
    256a:	e7e0      	b.n	252e <cbvprintf+0x68e>
				value->uint = (unsigned char)value->uint;
    256c:	f89d 3018 	ldrb.w	r3, [sp, #24]
    2570:	9306      	str	r3, [sp, #24]
    2572:	2300      	movs	r3, #0
    2574:	9307      	str	r3, [sp, #28]
    2576:	e69b      	b.n	22b0 <cbvprintf+0x410>
			if (length_mod == LENGTH_UPPER_L) {
    2578:	2908      	cmp	r1, #8
    257a:	d00b      	beq.n	2594 <cbvprintf+0x6f4>
				value->dbl = va_arg(ap, double);
    257c:	9b03      	ldr	r3, [sp, #12]
    257e:	3307      	adds	r3, #7
    2580:	f023 0307 	bic.w	r3, r3, #7
    2584:	f103 0208 	add.w	r2, r3, #8
    2588:	9203      	str	r2, [sp, #12]
    258a:	e9d3 2300 	ldrd	r2, r3, [r3]
    258e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    2592:	e68d      	b.n	22b0 <cbvprintf+0x410>
				value->ldbl = va_arg(ap, long double);
    2594:	9b03      	ldr	r3, [sp, #12]
    2596:	3307      	adds	r3, #7
    2598:	f023 0307 	bic.w	r3, r3, #7
    259c:	f103 0208 	add.w	r2, r3, #8
    25a0:	9203      	str	r2, [sp, #12]
    25a2:	e9d3 2300 	ldrd	r2, r3, [r3]
    25a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    25aa:	e681      	b.n	22b0 <cbvprintf+0x410>
			value->ptr = va_arg(ap, void *);
    25ac:	9b03      	ldr	r3, [sp, #12]
    25ae:	1d1a      	adds	r2, r3, #4
    25b0:	9203      	str	r2, [sp, #12]
    25b2:	681b      	ldr	r3, [r3, #0]
    25b4:	9306      	str	r3, [sp, #24]
    25b6:	e67b      	b.n	22b0 <cbvprintf+0x410>
			OUTS(sp, fp);
    25b8:	4643      	mov	r3, r8
    25ba:	4652      	mov	r2, sl
    25bc:	4629      	mov	r1, r5
    25be:	4630      	mov	r0, r6
    25c0:	f008 fe92 	bl	b2e8 <outs>
    25c4:	2800      	cmp	r0, #0
    25c6:	f2c0 814f 	blt.w	2868 <cbvprintf+0x9c8>
    25ca:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    25cc:	46c2      	mov	sl, r8
			continue;
    25ce:	e46f      	b.n	1eb0 <cbvprintf+0x10>
		case '%':
			OUTC('%');
    25d0:	4629      	mov	r1, r5
    25d2:	2025      	movs	r0, #37	; 0x25
    25d4:	47b0      	blx	r6
    25d6:	2800      	cmp	r0, #0
    25d8:	f2c0 8146 	blt.w	2868 <cbvprintf+0x9c8>
    25dc:	3401      	adds	r4, #1
		char sign = 0;
    25de:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
    25e2:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
    25e6:	f04f 0a00 	mov.w	sl, #0
			break;
    25ea:	e0a7      	b.n	273c <cbvprintf+0x89c>
		case 's': {
			bps = (const char *)value->ptr;
    25ec:	f8dd a018 	ldr.w	sl, [sp, #24]

			size_t len;

			if (precision >= 0) {
    25f0:	f1bb 0f00 	cmp.w	fp, #0
    25f4:	db08      	blt.n	2608 <cbvprintf+0x768>
				len = strnlen(bps, precision);
    25f6:	4659      	mov	r1, fp
    25f8:	4650      	mov	r0, sl
    25fa:	f008 ff6c 	bl	b4d6 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    25fe:	eb0a 0b00 	add.w	fp, sl, r0
		char sign = 0;
    2602:	f8dd 9008 	ldr.w	r9, [sp, #8]
			precision = -1;

			break;
    2606:	e099      	b.n	273c <cbvprintf+0x89c>
				len = strlen(bps);
    2608:	4650      	mov	r0, sl
    260a:	f008 ff5c 	bl	b4c6 <strlen>
    260e:	e7f6      	b.n	25fe <cbvprintf+0x75e>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    2610:	9b06      	ldr	r3, [sp, #24]
    2612:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		char sign = 0;
    2616:	f8dd 9008 	ldr.w	r9, [sp, #8]
			bpe = buf + 1;
    261a:	f10d 0b31 	add.w	fp, sp, #49	; 0x31
			bps = buf;
    261e:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
			break;
    2622:	e08b      	b.n	273c <cbvprintf+0x89c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    2624:	f019 0f08 	tst.w	r9, #8
    2628:	d105      	bne.n	2636 <cbvprintf+0x796>
				sign = '+';
			} else if (conv->flag_space) {
    262a:	f019 0910 	ands.w	r9, r9, #16
    262e:	d004      	beq.n	263a <cbvprintf+0x79a>
				sign = ' ';
    2630:	f04f 0920 	mov.w	r9, #32
    2634:	e001      	b.n	263a <cbvprintf+0x79a>
				sign = '+';
    2636:	f04f 092b 	mov.w	r9, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    263a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
			if (sint < 0) {
    263e:	2a00      	cmp	r2, #0
    2640:	f173 0100 	sbcs.w	r1, r3, #0
    2644:	db02      	blt.n	264c <cbvprintf+0x7ac>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    2646:	e9cd 2306 	strd	r2, r3, [sp, #24]
    264a:	e009      	b.n	2660 <cbvprintf+0x7c0>
				value->uint = (uint_value_type)-sint;
    264c:	4252      	negs	r2, r2
    264e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    2652:	e9cd 2306 	strd	r2, r3, [sp, #24]
				sign = '-';
    2656:	f04f 092d 	mov.w	r9, #45	; 0x2d
    265a:	e001      	b.n	2660 <cbvprintf+0x7c0>
		switch (conv->specifier) {
    265c:	f8dd 9008 	ldr.w	r9, [sp, #8]
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    2660:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    2664:	9300      	str	r3, [sp, #0]
    2666:	ab0c      	add	r3, sp, #48	; 0x30
    2668:	aa08      	add	r2, sp, #32
    266a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    266e:	f008 fdd1 	bl	b214 <encode_uint>
    2672:	4682      	mov	sl, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    2674:	f1bb 0f00 	cmp.w	fp, #0
    2678:	f2c0 8090 	blt.w	279c <cbvprintf+0x8fc>
				size_t len = bpe - bps;
    267c:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    2680:	eba3 030a 	sub.w	r3, r3, sl

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    2684:	f89d 2020 	ldrb.w	r2, [sp, #32]
    2688:	f36f 1286 	bfc	r2, #6, #1
    268c:	f88d 2020 	strb.w	r2, [sp, #32]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    2690:	459b      	cmp	fp, r3
    2692:	f240 8086 	bls.w	27a2 <cbvprintf+0x902>
					conv->pad0_value = precision - (int)len;
    2696:	ebab 0303 	sub.w	r3, fp, r3
    269a:	9309      	str	r3, [sp, #36]	; 0x24
		const char *bpe = buf + sizeof(buf);
    269c:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    26a0:	e04c      	b.n	273c <cbvprintf+0x89c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    26a2:	9806      	ldr	r0, [sp, #24]
    26a4:	b930      	cbnz	r0, 26b4 <cbvprintf+0x814>
		char sign = 0;
    26a6:	f8dd 9008 	ldr.w	r9, [sp, #8]

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    26aa:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 2870 <cbvprintf+0x9d0>
			bps = "(nil)";
    26ae:	f1ab 0a05 	sub.w	sl, fp, #5
    26b2:	e043      	b.n	273c <cbvprintf+0x89c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    26b4:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    26b8:	9300      	str	r3, [sp, #0]
    26ba:	ab0c      	add	r3, sp, #48	; 0x30
    26bc:	aa08      	add	r2, sp, #32
    26be:	2100      	movs	r1, #0
    26c0:	f008 fda8 	bl	b214 <encode_uint>
    26c4:	4682      	mov	sl, r0
				conv->altform_0c = true;
    26c6:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    26ca:	f043 0310 	orr.w	r3, r3, #16
    26ce:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				conv->specifier = 'x';
    26d2:	2378      	movs	r3, #120	; 0x78
    26d4:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		char sign = 0;
    26d8:	f8dd 9008 	ldr.w	r9, [sp, #8]
				goto prec_int_pad0;
    26dc:	e7ca      	b.n	2674 <cbvprintf+0x7d4>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    26de:	9a06      	ldr	r2, [sp, #24]
	switch ((enum length_mod_enum)conv->length_mod) {
    26e0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    26e4:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    26e8:	2b07      	cmp	r3, #7
    26ea:	d806      	bhi.n	26fa <cbvprintf+0x85a>
    26ec:	e8df f003 	tbb	[pc, r3]
    26f0:	100e0c04 	.word	0x100e0c04
    26f4:	1e1c1712 	.word	0x1e1c1712
		*(int *)dp = count;
    26f8:	6014      	str	r4, [r2, #0]
		char sign = 0;
    26fa:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
    26fe:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
    2702:	f04f 0a00 	mov.w	sl, #0
}
    2706:	e019      	b.n	273c <cbvprintf+0x89c>
		*(signed char *)dp = (signed char)count;
    2708:	7014      	strb	r4, [r2, #0]
		break;
    270a:	e7f6      	b.n	26fa <cbvprintf+0x85a>
		*(short *)dp = (short)count;
    270c:	8014      	strh	r4, [r2, #0]
		break;
    270e:	e7f4      	b.n	26fa <cbvprintf+0x85a>
		*(long *)dp = (long)count;
    2710:	6014      	str	r4, [r2, #0]
		break;
    2712:	e7f2      	b.n	26fa <cbvprintf+0x85a>
		*(long long *)dp = (long long)count;
    2714:	4620      	mov	r0, r4
    2716:	17e1      	asrs	r1, r4, #31
    2718:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    271c:	e7ed      	b.n	26fa <cbvprintf+0x85a>
		*(intmax_t *)dp = (intmax_t)count;
    271e:	4620      	mov	r0, r4
    2720:	17e1      	asrs	r1, r4, #31
    2722:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    2726:	e7e8      	b.n	26fa <cbvprintf+0x85a>
		*(size_t *)dp = (size_t)count;
    2728:	6014      	str	r4, [r2, #0]
		break;
    272a:	e7e6      	b.n	26fa <cbvprintf+0x85a>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    272c:	6014      	str	r4, [r2, #0]
		break;
    272e:	e7e4      	b.n	26fa <cbvprintf+0x85a>
		switch (conv->specifier) {
    2730:	f8dd 9008 	ldr.w	r9, [sp, #8]
    2734:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    2738:	f04f 0a00 	mov.w	sl, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    273c:	f1ba 0f00 	cmp.w	sl, #0
    2740:	f000 808e 	beq.w	2860 <cbvprintf+0x9c0>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    2744:	ebab 020a 	sub.w	r2, fp, sl
		int pad_len = 0;

		if (sign != 0) {
    2748:	f1b9 0f00 	cmp.w	r9, #0
    274c:	d000      	beq.n	2750 <cbvprintf+0x8b0>
			nj_len += 1U;
    274e:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
    2750:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
    2754:	f011 0f10 	tst.w	r1, #16
    2758:	d026      	beq.n	27a8 <cbvprintf+0x908>
			nj_len += 2U;
    275a:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    275c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    275e:	4413      	add	r3, r2
		if (conv->pad_fp) {
    2760:	f011 0f40 	tst.w	r1, #64	; 0x40
    2764:	d001      	beq.n	276a <cbvprintf+0x8ca>
			nj_len += conv->pad0_pre_exp;
    2766:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2768:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    276a:	2f00      	cmp	r7, #0
    276c:	dd32      	ble.n	27d4 <cbvprintf+0x934>
			width -= (int)nj_len;
    276e:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    2770:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2774:	f013 0f04 	tst.w	r3, #4
    2778:	d12c      	bne.n	27d4 <cbvprintf+0x934>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    277a:	f013 0f40 	tst.w	r3, #64	; 0x40
    277e:	d018      	beq.n	27b2 <cbvprintf+0x912>
					if (sign != 0) {
    2780:	f1b9 0f00 	cmp.w	r9, #0
    2784:	d018      	beq.n	27b8 <cbvprintf+0x918>
						OUTC(sign);
    2786:	4629      	mov	r1, r5
    2788:	4648      	mov	r0, r9
    278a:	47b0      	blx	r6
    278c:	2800      	cmp	r0, #0
    278e:	db6b      	blt.n	2868 <cbvprintf+0x9c8>
    2790:	3401      	adds	r4, #1
						sign = 0;
    2792:	f8dd 9008 	ldr.w	r9, [sp, #8]
					}
					pad = '0';
    2796:	2330      	movs	r3, #48	; 0x30
    2798:	9302      	str	r3, [sp, #8]
    279a:	e00f      	b.n	27bc <cbvprintf+0x91c>
		const char *bpe = buf + sizeof(buf);
    279c:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    27a0:	e7cc      	b.n	273c <cbvprintf+0x89c>
    27a2:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    27a6:	e7c9      	b.n	273c <cbvprintf+0x89c>
		} else if (conv->altform_0) {
    27a8:	f011 0f08 	tst.w	r1, #8
    27ac:	d0d6      	beq.n	275c <cbvprintf+0x8bc>
			nj_len += 1U;
    27ae:	3201      	adds	r2, #1
    27b0:	e7d4      	b.n	275c <cbvprintf+0x8bc>
				char pad = ' ';
    27b2:	2320      	movs	r3, #32
    27b4:	9302      	str	r3, [sp, #8]
    27b6:	e001      	b.n	27bc <cbvprintf+0x91c>
					pad = '0';
    27b8:	2330      	movs	r3, #48	; 0x30
    27ba:	9302      	str	r3, [sp, #8]
    27bc:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    27be:	1e5f      	subs	r7, r3, #1
    27c0:	2b00      	cmp	r3, #0
    27c2:	dd07      	ble.n	27d4 <cbvprintf+0x934>
					OUTC(pad);
    27c4:	4629      	mov	r1, r5
    27c6:	9802      	ldr	r0, [sp, #8]
    27c8:	47b0      	blx	r6
    27ca:	2800      	cmp	r0, #0
    27cc:	db4c      	blt.n	2868 <cbvprintf+0x9c8>
    27ce:	3401      	adds	r4, #1
				while (width-- > 0) {
    27d0:	463b      	mov	r3, r7
    27d2:	e7f4      	b.n	27be <cbvprintf+0x91e>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    27d4:	f1b9 0f00 	cmp.w	r9, #0
    27d8:	d005      	beq.n	27e6 <cbvprintf+0x946>
			OUTC(sign);
    27da:	4629      	mov	r1, r5
    27dc:	4648      	mov	r0, r9
    27de:	47b0      	blx	r6
    27e0:	2800      	cmp	r0, #0
    27e2:	db41      	blt.n	2868 <cbvprintf+0x9c8>
    27e4:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    27e6:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    27ea:	f3c3 1200 	ubfx	r2, r3, #4, #1
    27ee:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    27f2:	4313      	orrs	r3, r2
    27f4:	d005      	beq.n	2802 <cbvprintf+0x962>
				OUTC('0');
    27f6:	4629      	mov	r1, r5
    27f8:	2030      	movs	r0, #48	; 0x30
    27fa:	47b0      	blx	r6
    27fc:	2800      	cmp	r0, #0
    27fe:	db33      	blt.n	2868 <cbvprintf+0x9c8>
    2800:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    2802:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    2806:	f013 0f10 	tst.w	r3, #16
    280a:	d006      	beq.n	281a <cbvprintf+0x97a>
				OUTC(conv->specifier);
    280c:	4629      	mov	r1, r5
    280e:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    2812:	47b0      	blx	r6
    2814:	2800      	cmp	r0, #0
    2816:	db27      	blt.n	2868 <cbvprintf+0x9c8>
    2818:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    281a:	9b09      	ldr	r3, [sp, #36]	; 0x24
			while (pad_len-- > 0) {
    281c:	f103 39ff 	add.w	r9, r3, #4294967295
    2820:	2b00      	cmp	r3, #0
    2822:	dd07      	ble.n	2834 <cbvprintf+0x994>
				OUTC('0');
    2824:	4629      	mov	r1, r5
    2826:	2030      	movs	r0, #48	; 0x30
    2828:	47b0      	blx	r6
    282a:	2800      	cmp	r0, #0
    282c:	db1c      	blt.n	2868 <cbvprintf+0x9c8>
    282e:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    2830:	464b      	mov	r3, r9
    2832:	e7f3      	b.n	281c <cbvprintf+0x97c>
			}

			OUTS(bps, bpe);
    2834:	465b      	mov	r3, fp
    2836:	4652      	mov	r2, sl
    2838:	4629      	mov	r1, r5
    283a:	4630      	mov	r0, r6
    283c:	f008 fd54 	bl	b2e8 <outs>
    2840:	2800      	cmp	r0, #0
    2842:	db11      	blt.n	2868 <cbvprintf+0x9c8>
    2844:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    2846:	2f00      	cmp	r7, #0
    2848:	dd07      	ble.n	285a <cbvprintf+0x9ba>
			OUTC(' ');
    284a:	4629      	mov	r1, r5
    284c:	2020      	movs	r0, #32
    284e:	47b0      	blx	r6
    2850:	2800      	cmp	r0, #0
    2852:	db09      	blt.n	2868 <cbvprintf+0x9c8>
    2854:	3401      	adds	r4, #1
			--width;
    2856:	3f01      	subs	r7, #1
    2858:	e7f5      	b.n	2846 <cbvprintf+0x9a6>
		fp = extract_conversion(conv, sp);
    285a:	46c2      	mov	sl, r8
    285c:	f7ff bb28 	b.w	1eb0 <cbvprintf+0x10>
    2860:	46c2      	mov	sl, r8
    2862:	f7ff bb25 	b.w	1eb0 <cbvprintf+0x10>
		}
	}

	return count;
    2866:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    2868:	b013      	add	sp, #76	; 0x4c
    286a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    286e:	bf00      	nop
    2870:	0000c611 	.word	0x0000c611

00002874 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    2874:	b508      	push	{r3, lr}
	__asm__ volatile(
    2876:	f04f 0220 	mov.w	r2, #32
    287a:	f3ef 8311 	mrs	r3, BASEPRI
    287e:	f382 8812 	msr	BASEPRI_MAX, r2
    2882:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    2886:	f000 ff47 	bl	3718 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    288a:	4803      	ldr	r0, [pc, #12]	; (2898 <sys_reboot+0x24>)
    288c:	f008 fbed 	bl	b06a <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    2890:	f000 fa74 	bl	2d7c <arch_cpu_idle>
    2894:	e7fc      	b.n	2890 <sys_reboot+0x1c>
    2896:	bf00      	nop
    2898:	0000c614 	.word	0x0000c614

0000289c <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
    289c:	b570      	push	{r4, r5, r6, lr}
    289e:	b084      	sub	sp, #16
	uint8_t id = _current_cpu->id;
    28a0:	4b42      	ldr	r3, [pc, #264]	; (29ac <pm_system_resume+0x110>)
    28a2:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    28a4:	f004 031f 	and.w	r3, r4, #31
    28a8:	2201      	movs	r2, #1
    28aa:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    28ac:	0961      	lsrs	r1, r4, #5
    28ae:	4b40      	ldr	r3, [pc, #256]	; (29b0 <pm_system_resume+0x114>)
    28b0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    28b4:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    28b6:	f3bf 8f5b 	dmb	ish
    28ba:	e853 1f00 	ldrex	r1, [r3]
    28be:	ea01 0500 	and.w	r5, r1, r0
    28c2:	e843 5600 	strex	r6, r5, [r3]
    28c6:	2e00      	cmp	r6, #0
    28c8:	d1f7      	bne.n	28ba <pm_system_resume+0x1e>
    28ca:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    28ce:	420a      	tst	r2, r1
    28d0:	d05a      	beq.n	2988 <pm_system_resume+0xec>
		exit_pos_ops(z_power_states[id]);
    28d2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    28d6:	4a37      	ldr	r2, [pc, #220]	; (29b4 <pm_system_resume+0x118>)
    28d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    28dc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    28e0:	ab04      	add	r3, sp, #16
    28e2:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    28e6:	4b34      	ldr	r3, [pc, #208]	; (29b8 <pm_system_resume+0x11c>)
    28e8:	b19b      	cbz	r3, 2912 <pm_system_resume+0x76>
		pm_power_state_exit_post_ops(info);
    28ea:	f008 fe5f 	bl	b5ac <pm_power_state_exit_post_ops>
    28ee:	f04f 0320 	mov.w	r3, #32
    28f2:	f3ef 8611 	mrs	r6, BASEPRI
    28f6:	f383 8812 	msr	BASEPRI_MAX, r3
    28fa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    28fe:	482f      	ldr	r0, [pc, #188]	; (29bc <pm_system_resume+0x120>)
    2900:	f005 f870 	bl	79e4 <z_spin_lock_valid>
    2904:	b158      	cbz	r0, 291e <pm_system_resume+0x82>
	z_spin_lock_set_owner(l);
    2906:	482d      	ldr	r0, [pc, #180]	; (29bc <pm_system_resume+0x120>)
    2908:	f005 f88c 	bl	7a24 <z_spin_lock_set_owner>
	return list->head;
    290c:	4b2c      	ldr	r3, [pc, #176]	; (29c0 <pm_system_resume+0x124>)
    290e:	681d      	ldr	r5, [r3, #0]
    2910:	e01a      	b.n	2948 <pm_system_resume+0xac>
	__asm__ volatile(
    2912:	2300      	movs	r3, #0
    2914:	f383 8811 	msr	BASEPRI, r3
    2918:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    291c:	e7e7      	b.n	28ee <pm_system_resume+0x52>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    291e:	4d29      	ldr	r5, [pc, #164]	; (29c4 <pm_system_resume+0x128>)
    2920:	2381      	movs	r3, #129	; 0x81
    2922:	462a      	mov	r2, r5
    2924:	4928      	ldr	r1, [pc, #160]	; (29c8 <pm_system_resume+0x12c>)
    2926:	4829      	ldr	r0, [pc, #164]	; (29cc <pm_system_resume+0x130>)
    2928:	f008 fb9f 	bl	b06a <printk>
    292c:	4923      	ldr	r1, [pc, #140]	; (29bc <pm_system_resume+0x120>)
    292e:	4828      	ldr	r0, [pc, #160]	; (29d0 <pm_system_resume+0x134>)
    2930:	f008 fb9b 	bl	b06a <printk>
    2934:	2181      	movs	r1, #129	; 0x81
    2936:	4628      	mov	r0, r5
    2938:	f008 fcf0 	bl	b31c <assert_post_action>
    293c:	e7e3      	b.n	2906 <pm_system_resume+0x6a>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    293e:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    2940:	b10d      	cbz	r5, 2946 <pm_system_resume+0xaa>
	return node->next;
    2942:	682b      	ldr	r3, [r5, #0]
    2944:	b16b      	cbz	r3, 2962 <pm_system_resume+0xc6>
{
    2946:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    2948:	b15d      	cbz	r5, 2962 <pm_system_resume+0xc6>
			callback = notifier->state_exit;
    294a:	68aa      	ldr	r2, [r5, #8]
		if (callback) {
    294c:	2a00      	cmp	r2, #0
    294e:	d0f6      	beq.n	293e <pm_system_resume+0xa2>
			callback(z_power_states[_current_cpu->id].state);
    2950:	4b16      	ldr	r3, [pc, #88]	; (29ac <pm_system_resume+0x110>)
    2952:	7d1b      	ldrb	r3, [r3, #20]
    2954:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2958:	4916      	ldr	r1, [pc, #88]	; (29b4 <pm_system_resume+0x118>)
    295a:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    295e:	4790      	blx	r2
    2960:	e7ed      	b.n	293e <pm_system_resume+0xa2>
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
    2962:	4635      	mov	r5, r6
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2964:	4815      	ldr	r0, [pc, #84]	; (29bc <pm_system_resume+0x120>)
    2966:	f005 f84d 	bl	7a04 <z_spin_unlock_valid>
    296a:	b178      	cbz	r0, 298c <pm_system_resume+0xf0>
	__asm__ volatile(
    296c:	f385 8811 	msr	BASEPRI, r5
    2970:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    2974:	4a0f      	ldr	r2, [pc, #60]	; (29b4 <pm_system_resume+0x118>)
    2976:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    297a:	00a1      	lsls	r1, r4, #2
    297c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
    2980:	2300      	movs	r3, #0
    2982:	5053      	str	r3, [r2, r1]
    2984:	6063      	str	r3, [r4, #4]
    2986:	60a3      	str	r3, [r4, #8]
			0, 0};
	}
}
    2988:	b004      	add	sp, #16
    298a:	bd70      	pop	{r4, r5, r6, pc}
    298c:	4e0d      	ldr	r6, [pc, #52]	; (29c4 <pm_system_resume+0x128>)
    298e:	23ac      	movs	r3, #172	; 0xac
    2990:	4632      	mov	r2, r6
    2992:	4910      	ldr	r1, [pc, #64]	; (29d4 <pm_system_resume+0x138>)
    2994:	480d      	ldr	r0, [pc, #52]	; (29cc <pm_system_resume+0x130>)
    2996:	f008 fb68 	bl	b06a <printk>
    299a:	4908      	ldr	r1, [pc, #32]	; (29bc <pm_system_resume+0x120>)
    299c:	480e      	ldr	r0, [pc, #56]	; (29d8 <pm_system_resume+0x13c>)
    299e:	f008 fb64 	bl	b06a <printk>
    29a2:	21ac      	movs	r1, #172	; 0xac
    29a4:	4630      	mov	r0, r6
    29a6:	f008 fcb9 	bl	b31c <assert_post_action>
    29aa:	e7df      	b.n	296c <pm_system_resume+0xd0>
    29ac:	2000121c 	.word	0x2000121c
    29b0:	20000768 	.word	0x20000768
    29b4:	2000076c 	.word	0x2000076c
    29b8:	0000b5ad 	.word	0x0000b5ad
    29bc:	2000075c 	.word	0x2000075c
    29c0:	20000760 	.word	0x20000760
    29c4:	0000c584 	.word	0x0000c584
    29c8:	0000c5dc 	.word	0x0000c5dc
    29cc:	0000c46c 	.word	0x0000c46c
    29d0:	0000c5f4 	.word	0x0000c5f4
    29d4:	0000c5ac 	.word	0x0000c5ac
    29d8:	0000c5c4 	.word	0x0000c5c4

000029dc <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    29dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    29de:	b089      	sub	sp, #36	; 0x24
    29e0:	4605      	mov	r5, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
    29e2:	4b6b      	ldr	r3, [pc, #428]	; (2b90 <pm_system_suspend+0x1b4>)
    29e4:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    29e6:	f004 031f 	and.w	r3, r4, #31
    29ea:	2201      	movs	r2, #1
    29ec:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    29ee:	0961      	lsrs	r1, r4, #5
    29f0:	4b68      	ldr	r3, [pc, #416]	; (2b94 <pm_system_suspend+0x1b8>)
    29f2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    29f6:	f3bf 8f5b 	dmb	ish
    29fa:	e853 1f00 	ldrex	r1, [r3]
    29fe:	ea41 0002 	orr.w	r0, r1, r2
    2a02:	e843 0600 	strex	r6, r0, [r3]
    2a06:	2e00      	cmp	r6, #0
    2a08:	d1f7      	bne.n	29fa <pm_system_suspend+0x1e>
    2a0a:	f3bf 8f5b 	dmb	ish

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
    2a0e:	420a      	tst	r2, r1
    2a10:	d01e      	beq.n	2a50 <pm_system_suspend+0x74>
		z_power_states[id] = pm_policy_next_state(id, ticks);
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
    2a12:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    2a16:	4a60      	ldr	r2, [pc, #384]	; (2b98 <pm_system_suspend+0x1bc>)
    2a18:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    2a1c:	2b00      	cmp	r3, #0
    2a1e:	f000 80b5 	beq.w	2b8c <pm_system_suspend+0x1b0>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    2a22:	f1b5 3fff 	cmp.w	r5, #4294967295
    2a26:	d123      	bne.n	2a70 <pm_system_suspend+0x94>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    2a28:	f005 fe46 	bl	86b8 <k_sched_lock>
	__asm__ volatile(
    2a2c:	f04f 0320 	mov.w	r3, #32
    2a30:	f3ef 8611 	mrs	r6, BASEPRI
    2a34:	f383 8812 	msr	BASEPRI_MAX, r3
    2a38:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2a3c:	4857      	ldr	r0, [pc, #348]	; (2b9c <pm_system_suspend+0x1c0>)
    2a3e:	f004 ffd1 	bl	79e4 <z_spin_lock_valid>
    2a42:	b358      	cbz	r0, 2a9c <pm_system_suspend+0xc0>
	z_spin_lock_set_owner(l);
    2a44:	4855      	ldr	r0, [pc, #340]	; (2b9c <pm_system_suspend+0x1c0>)
    2a46:	f004 ffed 	bl	7a24 <z_spin_lock_set_owner>
	return list->head;
    2a4a:	4b55      	ldr	r3, [pc, #340]	; (2ba0 <pm_system_suspend+0x1c4>)
    2a4c:	681d      	ldr	r5, [r3, #0]
    2a4e:	e03a      	b.n	2ac6 <pm_system_suspend+0xea>
		z_power_states[id] = pm_policy_next_state(id, ticks);
    2a50:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    2a54:	4b50      	ldr	r3, [pc, #320]	; (2b98 <pm_system_suspend+0x1bc>)
    2a56:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    2a5a:	466f      	mov	r7, sp
    2a5c:	462a      	mov	r2, r5
    2a5e:	4621      	mov	r1, r4
    2a60:	4638      	mov	r0, r7
    2a62:	f008 fc63 	bl	b32c <pm_policy_next_state>
    2a66:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
    2a6a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    2a6e:	e7d0      	b.n	2a12 <pm_system_suspend+0x36>
		     k_us_to_ticks_ceil32(
    2a70:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    2a74:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2a78:	689b      	ldr	r3, [r3, #8]
			return (uint32_t)((t * to_hz + off) / from_hz);
    2a7a:	0c59      	lsrs	r1, r3, #17
    2a7c:	03d8      	lsls	r0, r3, #15
    2a7e:	4e49      	ldr	r6, [pc, #292]	; (2ba4 <pm_system_suspend+0x1c8>)
    2a80:	4a49      	ldr	r2, [pc, #292]	; (2ba8 <pm_system_suspend+0x1cc>)
    2a82:	2300      	movs	r3, #0
    2a84:	1980      	adds	r0, r0, r6
    2a86:	f04f 0600 	mov.w	r6, #0
    2a8a:	eb46 0101 	adc.w	r1, r6, r1
    2a8e:	f7fe fa6f 	bl	f70 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    2a92:	2101      	movs	r1, #1
    2a94:	1a28      	subs	r0, r5, r0
    2a96:	f007 fa8b 	bl	9fb0 <z_set_timeout_expiry>
    2a9a:	e7c5      	b.n	2a28 <pm_system_suspend+0x4c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2a9c:	4d43      	ldr	r5, [pc, #268]	; (2bac <pm_system_suspend+0x1d0>)
    2a9e:	2381      	movs	r3, #129	; 0x81
    2aa0:	462a      	mov	r2, r5
    2aa2:	4943      	ldr	r1, [pc, #268]	; (2bb0 <pm_system_suspend+0x1d4>)
    2aa4:	4843      	ldr	r0, [pc, #268]	; (2bb4 <pm_system_suspend+0x1d8>)
    2aa6:	f008 fae0 	bl	b06a <printk>
    2aaa:	493c      	ldr	r1, [pc, #240]	; (2b9c <pm_system_suspend+0x1c0>)
    2aac:	4842      	ldr	r0, [pc, #264]	; (2bb8 <pm_system_suspend+0x1dc>)
    2aae:	f008 fadc 	bl	b06a <printk>
    2ab2:	2181      	movs	r1, #129	; 0x81
    2ab4:	4628      	mov	r0, r5
    2ab6:	f008 fc31 	bl	b31c <assert_post_action>
    2aba:	e7c3      	b.n	2a44 <pm_system_suspend+0x68>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    2abc:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    2abe:	b10d      	cbz	r5, 2ac4 <pm_system_suspend+0xe8>
	return node->next;
    2ac0:	682b      	ldr	r3, [r5, #0]
    2ac2:	b16b      	cbz	r3, 2ae0 <pm_system_suspend+0x104>
{
    2ac4:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    2ac6:	b15d      	cbz	r5, 2ae0 <pm_system_suspend+0x104>
			callback = notifier->state_entry;
    2ac8:	686a      	ldr	r2, [r5, #4]
		if (callback) {
    2aca:	2a00      	cmp	r2, #0
    2acc:	d0f6      	beq.n	2abc <pm_system_suspend+0xe0>
			callback(z_power_states[_current_cpu->id].state);
    2ace:	4b30      	ldr	r3, [pc, #192]	; (2b90 <pm_system_suspend+0x1b4>)
    2ad0:	7d1b      	ldrb	r3, [r3, #20]
    2ad2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2ad6:	4930      	ldr	r1, [pc, #192]	; (2b98 <pm_system_suspend+0x1bc>)
    2ad8:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    2adc:	4790      	blx	r2
    2ade:	e7ed      	b.n	2abc <pm_system_suspend+0xe0>
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
    2ae0:	4635      	mov	r5, r6
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2ae2:	482e      	ldr	r0, [pc, #184]	; (2b9c <pm_system_suspend+0x1c0>)
    2ae4:	f004 ff8e 	bl	7a04 <z_spin_unlock_valid>
    2ae8:	2800      	cmp	r0, #0
    2aea:	d03f      	beq.n	2b6c <pm_system_suspend+0x190>
	__asm__ volatile(
    2aec:	f385 8811 	msr	BASEPRI, r5
    2af0:	f3bf 8f6f 	isb	sy
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    2af4:	f004 031f 	and.w	r3, r4, #31
    2af8:	2101      	movs	r1, #1
    2afa:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    2afc:	0963      	lsrs	r3, r4, #5
    2afe:	4a2f      	ldr	r2, [pc, #188]	; (2bbc <pm_system_suspend+0x1e0>)
    2b00:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2b04:	f3bf 8f5b 	dmb	ish
    2b08:	e853 2f00 	ldrex	r2, [r3]
    2b0c:	430a      	orrs	r2, r1
    2b0e:	e843 2000 	strex	r0, r2, [r3]
    2b12:	2800      	cmp	r0, #0
    2b14:	d1f8      	bne.n	2b08 <pm_system_suspend+0x12c>
    2b16:	f3bf 8f5b 	dmb	ish
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
    2b1a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    2b1e:	4a1e      	ldr	r2, [pc, #120]	; (2b98 <pm_system_suspend+0x1bc>)
    2b20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2b24:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    2b28:	ab08      	add	r3, sp, #32
    2b2a:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    2b2e:	4b24      	ldr	r3, [pc, #144]	; (2bc0 <pm_system_suspend+0x1e4>)
    2b30:	b10b      	cbz	r3, 2b36 <pm_system_suspend+0x15a>
		pm_power_state_set(info);
    2b32:	f008 fd28 	bl	b586 <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
    2b36:	f7ff feb1 	bl	289c <pm_system_resume>
	k_sched_unlock();
    2b3a:	f006 fb83 	bl	9244 <k_sched_unlock>
	bool ret = true;
    2b3e:	2001      	movs	r0, #1
	atomic_val_t mask = ATOMIC_MASK(bit);
    2b40:	f004 021f 	and.w	r2, r4, #31
    2b44:	2301      	movs	r3, #1
    2b46:	4093      	lsls	r3, r2
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2b48:	0964      	lsrs	r4, r4, #5
    2b4a:	4a12      	ldr	r2, [pc, #72]	; (2b94 <pm_system_suspend+0x1b8>)
    2b4c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
    2b50:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2b52:	f3bf 8f5b 	dmb	ish
    2b56:	e854 2f00 	ldrex	r2, [r4]
    2b5a:	401a      	ands	r2, r3
    2b5c:	e844 2100 	strex	r1, r2, [r4]
    2b60:	2900      	cmp	r1, #0
    2b62:	d1f8      	bne.n	2b56 <pm_system_suspend+0x17a>
    2b64:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
    2b68:	b009      	add	sp, #36	; 0x24
    2b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b6c:	4e0f      	ldr	r6, [pc, #60]	; (2bac <pm_system_suspend+0x1d0>)
    2b6e:	23ac      	movs	r3, #172	; 0xac
    2b70:	4632      	mov	r2, r6
    2b72:	4914      	ldr	r1, [pc, #80]	; (2bc4 <pm_system_suspend+0x1e8>)
    2b74:	480f      	ldr	r0, [pc, #60]	; (2bb4 <pm_system_suspend+0x1d8>)
    2b76:	f008 fa78 	bl	b06a <printk>
    2b7a:	4908      	ldr	r1, [pc, #32]	; (2b9c <pm_system_suspend+0x1c0>)
    2b7c:	4812      	ldr	r0, [pc, #72]	; (2bc8 <pm_system_suspend+0x1ec>)
    2b7e:	f008 fa74 	bl	b06a <printk>
    2b82:	21ac      	movs	r1, #172	; 0xac
    2b84:	4630      	mov	r0, r6
    2b86:	f008 fbc9 	bl	b31c <assert_post_action>
    2b8a:	e7af      	b.n	2aec <pm_system_suspend+0x110>
		ret = false;
    2b8c:	2000      	movs	r0, #0
    2b8e:	e7d7      	b.n	2b40 <pm_system_suspend+0x164>
    2b90:	2000121c 	.word	0x2000121c
    2b94:	20000778 	.word	0x20000778
    2b98:	2000076c 	.word	0x2000076c
    2b9c:	2000075c 	.word	0x2000075c
    2ba0:	20000760 	.word	0x20000760
    2ba4:	000f423f 	.word	0x000f423f
    2ba8:	000f4240 	.word	0x000f4240
    2bac:	0000c584 	.word	0x0000c584
    2bb0:	0000c5dc 	.word	0x0000c5dc
    2bb4:	0000c46c 	.word	0x0000c46c
    2bb8:	0000c5f4 	.word	0x0000c5f4
    2bbc:	20000768 	.word	0x20000768
    2bc0:	0000b587 	.word	0x0000b587
    2bc4:	0000c5ac 	.word	0x0000c5ac
    2bc8:	0000c5c4 	.word	0x0000c5c4

00002bcc <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    2bcc:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    2bce:	4802      	ldr	r0, [pc, #8]	; (2bd8 <nrf_cc3xx_platform_abort_init+0xc>)
    2bd0:	f008 f880 	bl	acd4 <nrf_cc3xx_platform_set_abort>
}
    2bd4:	bd08      	pop	{r3, pc}
    2bd6:	bf00      	nop
    2bd8:	0000c640 	.word	0x0000c640

00002bdc <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    2bdc:	b1d0      	cbz	r0, 2c14 <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2bde:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    2be0:	6842      	ldr	r2, [r0, #4]
    2be2:	2a04      	cmp	r2, #4
    2be4:	d005      	beq.n	2bf2 <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2be6:	b1d2      	cbz	r2, 2c1e <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    2be8:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    2bea:	f005 fa57 	bl	809c <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    2bee:	2000      	movs	r0, #0
    }
}
    2bf0:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    2bf2:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2bf4:	2200      	movs	r2, #0
    2bf6:	f3bf 8f5b 	dmb	ish
    2bfa:	e853 1f00 	ldrex	r1, [r3]
    2bfe:	2901      	cmp	r1, #1
    2c00:	d103      	bne.n	2c0a <mutex_unlock_platform+0x2e>
    2c02:	e843 2000 	strex	r0, r2, [r3]
    2c06:	2800      	cmp	r0, #0
    2c08:	d1f7      	bne.n	2bfa <mutex_unlock_platform+0x1e>
    2c0a:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2c0e:	d104      	bne.n	2c1a <mutex_unlock_platform+0x3e>
    2c10:	4610      	mov	r0, r2
    2c12:	e7ed      	b.n	2bf0 <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2c14:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    2c18:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2c1a:	4802      	ldr	r0, [pc, #8]	; (2c24 <mutex_unlock_platform+0x48>)
    2c1c:	e7e8      	b.n	2bf0 <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2c1e:	4802      	ldr	r0, [pc, #8]	; (2c28 <mutex_unlock_platform+0x4c>)
    2c20:	e7e6      	b.n	2bf0 <mutex_unlock_platform+0x14>
    2c22:	bf00      	nop
    2c24:	ffff8fe9 	.word	0xffff8fe9
    2c28:	ffff8fea 	.word	0xffff8fea

00002c2c <mutex_lock_platform>:
    if(mutex == NULL) {
    2c2c:	b320      	cbz	r0, 2c78 <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2c2e:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    2c30:	6842      	ldr	r2, [r0, #4]
    2c32:	2a04      	cmp	r2, #4
    2c34:	d002      	beq.n	2c3c <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2c36:	b992      	cbnz	r2, 2c5e <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2c38:	4811      	ldr	r0, [pc, #68]	; (2c80 <mutex_lock_platform+0x54>)
    2c3a:	e00f      	b.n	2c5c <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    2c3c:	6803      	ldr	r3, [r0, #0]
    2c3e:	2201      	movs	r2, #1
    2c40:	f3bf 8f5b 	dmb	ish
    2c44:	e853 1f00 	ldrex	r1, [r3]
    2c48:	2900      	cmp	r1, #0
    2c4a:	d103      	bne.n	2c54 <mutex_lock_platform+0x28>
    2c4c:	e843 2000 	strex	r0, r2, [r3]
    2c50:	2800      	cmp	r0, #0
    2c52:	d1f7      	bne.n	2c44 <mutex_lock_platform+0x18>
    2c54:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2c58:	d10c      	bne.n	2c74 <mutex_lock_platform+0x48>
    2c5a:	2000      	movs	r0, #0
}
    2c5c:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
    2c5e:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    2c60:	f04f 32ff 	mov.w	r2, #4294967295
    2c64:	f04f 33ff 	mov.w	r3, #4294967295
    2c68:	f005 f8f8 	bl	7e5c <z_impl_k_mutex_lock>
        if (ret == 0) {
    2c6c:	2800      	cmp	r0, #0
    2c6e:	d0f5      	beq.n	2c5c <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    2c70:	4804      	ldr	r0, [pc, #16]	; (2c84 <mutex_lock_platform+0x58>)
    2c72:	e7f3      	b.n	2c5c <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2c74:	4803      	ldr	r0, [pc, #12]	; (2c84 <mutex_lock_platform+0x58>)
    2c76:	e7f1      	b.n	2c5c <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2c78:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    2c7c:	4770      	bx	lr
    2c7e:	bf00      	nop
    2c80:	ffff8fea 	.word	0xffff8fea
    2c84:	ffff8fe9 	.word	0xffff8fe9

00002c88 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2c88:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    2c8a:	4604      	mov	r4, r0
    2c8c:	b188      	cbz	r0, 2cb2 <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    2c8e:	6863      	ldr	r3, [r4, #4]
    2c90:	2b04      	cmp	r3, #4
    2c92:	d00d      	beq.n	2cb0 <mutex_free_platform+0x28>
    2c94:	2b08      	cmp	r3, #8
    2c96:	d00b      	beq.n	2cb0 <mutex_free_platform+0x28>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2c98:	b153      	cbz	r3, 2cb0 <mutex_free_platform+0x28>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    2c9a:	f013 0f02 	tst.w	r3, #2
    2c9e:	d00d      	beq.n	2cbc <mutex_free_platform+0x34>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    2ca0:	4621      	mov	r1, r4
    2ca2:	4809      	ldr	r0, [pc, #36]	; (2cc8 <mutex_free_platform+0x40>)
    2ca4:	f004 fe12 	bl	78cc <k_mem_slab_free>
        mutex->mutex = NULL;
    2ca8:	2300      	movs	r3, #0
    2caa:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    2cac:	2300      	movs	r3, #0
    2cae:	6063      	str	r3, [r4, #4]
}
    2cb0:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    2cb2:	4b06      	ldr	r3, [pc, #24]	; (2ccc <mutex_free_platform+0x44>)
    2cb4:	685b      	ldr	r3, [r3, #4]
    2cb6:	4806      	ldr	r0, [pc, #24]	; (2cd0 <mutex_free_platform+0x48>)
    2cb8:	4798      	blx	r3
    2cba:	e7e8      	b.n	2c8e <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2cbc:	2214      	movs	r2, #20
    2cbe:	2100      	movs	r1, #0
    2cc0:	6820      	ldr	r0, [r4, #0]
    2cc2:	f008 fc40 	bl	b546 <memset>
    2cc6:	e7f1      	b.n	2cac <mutex_free_platform+0x24>
    2cc8:	2000077c 	.word	0x2000077c
    2ccc:	2000018c 	.word	0x2000018c
    2cd0:	0000c648 	.word	0x0000c648

00002cd4 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2cd4:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    2cd6:	4604      	mov	r4, r0
    2cd8:	b178      	cbz	r0, 2cfa <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    2cda:	6863      	ldr	r3, [r4, #4]
    2cdc:	2b04      	cmp	r3, #4
    2cde:	d00b      	beq.n	2cf8 <mutex_init_platform+0x24>
    2ce0:	2b08      	cmp	r3, #8
    2ce2:	d009      	beq.n	2cf8 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    2ce4:	b90b      	cbnz	r3, 2cea <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    2ce6:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    2ce8:	b163      	cbz	r3, 2d04 <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    2cea:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    2cec:	f009 f89c 	bl	be28 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    2cf0:	6863      	ldr	r3, [r4, #4]
    2cf2:	f043 0301 	orr.w	r3, r3, #1
    2cf6:	6063      	str	r3, [r4, #4]
}
    2cf8:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    2cfa:	4b0f      	ldr	r3, [pc, #60]	; (2d38 <mutex_init_platform+0x64>)
    2cfc:	685b      	ldr	r3, [r3, #4]
    2cfe:	480f      	ldr	r0, [pc, #60]	; (2d3c <mutex_init_platform+0x68>)
    2d00:	4798      	blx	r3
    2d02:	e7ea      	b.n	2cda <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    2d04:	f04f 32ff 	mov.w	r2, #4294967295
    2d08:	f04f 33ff 	mov.w	r3, #4294967295
    2d0c:	4621      	mov	r1, r4
    2d0e:	480c      	ldr	r0, [pc, #48]	; (2d40 <mutex_init_platform+0x6c>)
    2d10:	f004 fd68 	bl	77e4 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    2d14:	b908      	cbnz	r0, 2d1a <mutex_init_platform+0x46>
    2d16:	6823      	ldr	r3, [r4, #0]
    2d18:	b91b      	cbnz	r3, 2d22 <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    2d1a:	4b07      	ldr	r3, [pc, #28]	; (2d38 <mutex_init_platform+0x64>)
    2d1c:	685b      	ldr	r3, [r3, #4]
    2d1e:	4809      	ldr	r0, [pc, #36]	; (2d44 <mutex_init_platform+0x70>)
    2d20:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2d22:	2214      	movs	r2, #20
    2d24:	2100      	movs	r1, #0
    2d26:	6820      	ldr	r0, [r4, #0]
    2d28:	f008 fc0d 	bl	b546 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    2d2c:	6863      	ldr	r3, [r4, #4]
    2d2e:	f043 0302 	orr.w	r3, r3, #2
    2d32:	6063      	str	r3, [r4, #4]
    2d34:	e7d9      	b.n	2cea <mutex_init_platform+0x16>
    2d36:	bf00      	nop
    2d38:	2000018c 	.word	0x2000018c
    2d3c:	0000c648 	.word	0x0000c648
    2d40:	2000077c 	.word	0x2000077c
    2d44:	0000c670 	.word	0x0000c670

00002d48 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    2d48:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    2d4a:	2340      	movs	r3, #64	; 0x40
    2d4c:	2214      	movs	r2, #20
    2d4e:	4904      	ldr	r1, [pc, #16]	; (2d60 <nrf_cc3xx_platform_mutex_init+0x18>)
    2d50:	4804      	ldr	r0, [pc, #16]	; (2d64 <nrf_cc3xx_platform_mutex_init+0x1c>)
    2d52:	f009 f817 	bl	bd84 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    2d56:	4904      	ldr	r1, [pc, #16]	; (2d68 <nrf_cc3xx_platform_mutex_init+0x20>)
    2d58:	4804      	ldr	r0, [pc, #16]	; (2d6c <nrf_cc3xx_platform_mutex_init+0x24>)
    2d5a:	f008 f81d 	bl	ad98 <nrf_cc3xx_platform_set_mutexes>
}
    2d5e:	bd08      	pop	{r3, pc}
    2d60:	2000079c 	.word	0x2000079c
    2d64:	2000077c 	.word	0x2000077c
    2d68:	0000c6b0 	.word	0x0000c6b0
    2d6c:	0000c6a0 	.word	0x0000c6a0

00002d70 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    2d70:	4901      	ldr	r1, [pc, #4]	; (2d78 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    2d72:	2210      	movs	r2, #16
	str	r2, [r1]
    2d74:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    2d76:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2d78:	e000ed10 	.word	0xe000ed10

00002d7c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2d7c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    2d7e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    2d80:	f380 8811 	msr	BASEPRI, r0
	isb
    2d84:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    2d88:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    2d8c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    2d8e:	b662      	cpsie	i
	isb
    2d90:	f3bf 8f6f 	isb	sy

	bx	lr
    2d94:	4770      	bx	lr
    2d96:	bf00      	nop

00002d98 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    2d98:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    2d9a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    2d9c:	f381 8811 	msr	BASEPRI, r1

	wfe
    2da0:	bf20      	wfe

	msr	BASEPRI, r0
    2da2:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    2da6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    2da8:	4770      	bx	lr
    2daa:	bf00      	nop

00002dac <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2dac:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2dae:	2b00      	cmp	r3, #0
    2db0:	db08      	blt.n	2dc4 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2db2:	f000 001f 	and.w	r0, r0, #31
    2db6:	095b      	lsrs	r3, r3, #5
    2db8:	2201      	movs	r2, #1
    2dba:	fa02 f000 	lsl.w	r0, r2, r0
    2dbe:	4a02      	ldr	r2, [pc, #8]	; (2dc8 <arch_irq_enable+0x1c>)
    2dc0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    2dc4:	4770      	bx	lr
    2dc6:	bf00      	nop
    2dc8:	e000e100 	.word	0xe000e100

00002dcc <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    2dcc:	0942      	lsrs	r2, r0, #5
    2dce:	4b05      	ldr	r3, [pc, #20]	; (2de4 <arch_irq_is_enabled+0x18>)
    2dd0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2dd4:	f000 001f 	and.w	r0, r0, #31
    2dd8:	2301      	movs	r3, #1
    2dda:	fa03 f000 	lsl.w	r0, r3, r0
}
    2dde:	4010      	ands	r0, r2
    2de0:	4770      	bx	lr
    2de2:	bf00      	nop
    2de4:	e000e100 	.word	0xe000e100

00002de8 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    2de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2dea:	4605      	mov	r5, r0
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    2dec:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    2dee:	2c07      	cmp	r4, #7
    2df0:	d80b      	bhi.n	2e0a <z_arm_irq_priority_set+0x22>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2df2:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2df4:	2b00      	cmp	r3, #0
    2df6:	db1b      	blt.n	2e30 <z_arm_irq_priority_set+0x48>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2df8:	0164      	lsls	r4, r4, #5
    2dfa:	b2e4      	uxtb	r4, r4
    2dfc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2e00:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    2e04:	f883 4300 	strb.w	r4, [r3, #768]	; 0x300
}
    2e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2e0a:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    2e0c:	4f0c      	ldr	r7, [pc, #48]	; (2e40 <z_arm_irq_priority_set+0x58>)
    2e0e:	2359      	movs	r3, #89	; 0x59
    2e10:	463a      	mov	r2, r7
    2e12:	490c      	ldr	r1, [pc, #48]	; (2e44 <z_arm_irq_priority_set+0x5c>)
    2e14:	480c      	ldr	r0, [pc, #48]	; (2e48 <z_arm_irq_priority_set+0x60>)
    2e16:	f008 f928 	bl	b06a <printk>
    2e1a:	2307      	movs	r3, #7
    2e1c:	462a      	mov	r2, r5
    2e1e:	4631      	mov	r1, r6
    2e20:	480a      	ldr	r0, [pc, #40]	; (2e4c <z_arm_irq_priority_set+0x64>)
    2e22:	f008 f922 	bl	b06a <printk>
    2e26:	2159      	movs	r1, #89	; 0x59
    2e28:	4638      	mov	r0, r7
    2e2a:	f008 fa77 	bl	b31c <assert_post_action>
    2e2e:	e7e0      	b.n	2df2 <z_arm_irq_priority_set+0xa>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2e30:	f005 050f 	and.w	r5, r5, #15
    2e34:	0164      	lsls	r4, r4, #5
    2e36:	b2e4      	uxtb	r4, r4
    2e38:	4b05      	ldr	r3, [pc, #20]	; (2e50 <z_arm_irq_priority_set+0x68>)
    2e3a:	555c      	strb	r4, [r3, r5]
}
    2e3c:	e7e4      	b.n	2e08 <z_arm_irq_priority_set+0x20>
    2e3e:	bf00      	nop
    2e40:	0000c6c4 	.word	0x0000c6c4
    2e44:	0000c6fc 	.word	0x0000c6fc
    2e48:	0000c46c 	.word	0x0000c46c
    2e4c:	0000c718 	.word	0x0000c718
    2e50:	e000ed14 	.word	0xe000ed14

00002e54 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2e54:	bf30      	wfi
    b z_SysNmiOnReset
    2e56:	f7ff bffd 	b.w	2e54 <z_SysNmiOnReset>
    2e5a:	bf00      	nop

00002e5c <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    2e5c:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2e5e:	4b0b      	ldr	r3, [pc, #44]	; (2e8c <z_arm_prep_c+0x30>)
    2e60:	4a0b      	ldr	r2, [pc, #44]	; (2e90 <z_arm_prep_c+0x34>)
    2e62:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    2e66:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2e68:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2e6c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2e70:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2e74:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2e78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2e7c:	f004 fc36 	bl	76ec <z_bss_zero>
	z_data_copy();
    2e80:	f006 fe8c 	bl	9b9c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2e84:	f000 fa74 	bl	3370 <z_arm_interrupt_init>
	z_cstart();
    2e88:	f004 fc3c 	bl	7704 <z_cstart>
    2e8c:	e000ed00 	.word	0xe000ed00
    2e90:	00000000 	.word	0x00000000

00002e94 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2e94:	4a0a      	ldr	r2, [pc, #40]	; (2ec0 <arch_swap+0x2c>)
    2e96:	6893      	ldr	r3, [r2, #8]
    2e98:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	_current->arch.swap_return_value = _k_neg_eagain;
    2e9c:	4909      	ldr	r1, [pc, #36]	; (2ec4 <arch_swap+0x30>)
    2e9e:	6809      	ldr	r1, [r1, #0]
    2ea0:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2ea4:	4908      	ldr	r1, [pc, #32]	; (2ec8 <arch_swap+0x34>)
    2ea6:	684b      	ldr	r3, [r1, #4]
    2ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2eac:	604b      	str	r3, [r1, #4]
    2eae:	2300      	movs	r3, #0
    2eb0:	f383 8811 	msr	BASEPRI, r3
    2eb4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2eb8:	6893      	ldr	r3, [r2, #8]
}
    2eba:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
    2ebe:	4770      	bx	lr
    2ec0:	2000121c 	.word	0x2000121c
    2ec4:	0000d040 	.word	0x0000d040
    2ec8:	e000ed00 	.word	0xe000ed00

00002ecc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2ecc:	4913      	ldr	r1, [pc, #76]	; (2f1c <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    2ece:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2ed0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    2ed4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    2ed6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    2eda:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2ede:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    2ee0:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2ee4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2ee8:	4f0d      	ldr	r7, [pc, #52]	; (2f20 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2eea:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    2eee:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    2ef0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    2ef2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2ef4:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
    2ef8:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2efa:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2efe:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    2f02:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    2f04:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    2f06:	f000 fad5 	bl	34b4 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    2f0a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    2f0e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    2f12:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2f16:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    2f1a:	4770      	bx	lr
    ldr r1, =_kernel
    2f1c:	2000121c 	.word	0x2000121c
    ldr v4, =_SCS_ICSR
    2f20:	e000ed04 	.word	0xe000ed04

00002f24 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    2f24:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2f28:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2f2a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2f2e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    2f32:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2f34:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2f38:	2902      	cmp	r1, #2
    beq _oops
    2f3a:	d0ff      	beq.n	2f3c <_oops>

00002f3c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2f3c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    2f3e:	f008 fa02 	bl	b346 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    2f42:	bd01      	pop	{r0, pc}

00002f44 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    2f44:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    2f46:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    2f4a:	490d      	ldr	r1, [pc, #52]	; (2f80 <arch_new_thread+0x3c>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    2f4c:	f021 0101 	bic.w	r1, r1, #1
    2f50:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    2f54:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    2f58:	9b01      	ldr	r3, [sp, #4]
    2f5a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    2f5e:	9b02      	ldr	r3, [sp, #8]
    2f60:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    2f64:	9b03      	ldr	r3, [sp, #12]
    2f66:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    2f6a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2f6e:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    2f72:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    2f74:	2300      	movs	r3, #0
    2f76:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    2f7a:	bc10      	pop	{r4}
    2f7c:	4770      	bx	lr
    2f7e:	bf00      	nop
    2f80:	0000b1db 	.word	0x0000b1db

00002f84 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    2f84:	4b16      	ldr	r3, [pc, #88]	; (2fe0 <z_check_thread_stack_fail+0x5c>)
    2f86:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
    2f88:	b1da      	cbz	r2, 2fc2 <z_check_thread_stack_fail+0x3e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    2f8a:	f110 0f16 	cmn.w	r0, #22
    2f8e:	d01a      	beq.n	2fc6 <z_check_thread_stack_fail+0x42>
{
    2f90:	b410      	push	{r4}
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    2f92:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
    2f96:	f1a3 0420 	sub.w	r4, r3, #32
    2f9a:	4284      	cmp	r4, r0
    2f9c:	d805      	bhi.n	2faa <z_check_thread_stack_fail+0x26>
    2f9e:	4283      	cmp	r3, r0
    2fa0:	d908      	bls.n	2fb4 <z_check_thread_stack_fail+0x30>
    2fa2:	428b      	cmp	r3, r1
    2fa4:	d808      	bhi.n	2fb8 <z_check_thread_stack_fail+0x34>
    2fa6:	2100      	movs	r1, #0
    2fa8:	e000      	b.n	2fac <z_check_thread_stack_fail+0x28>
    2faa:	2100      	movs	r1, #0
    2fac:	b931      	cbnz	r1, 2fbc <z_check_thread_stack_fail+0x38>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    2fae:	2000      	movs	r0, #0
}
    2fb0:	bc10      	pop	{r4}
    2fb2:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    2fb4:	2100      	movs	r1, #0
    2fb6:	e7f9      	b.n	2fac <z_check_thread_stack_fail+0x28>
    2fb8:	2101      	movs	r1, #1
    2fba:	e7f7      	b.n	2fac <z_check_thread_stack_fail+0x28>
		return thread->stack_info.start;
    2fbc:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    2fc0:	e7f6      	b.n	2fb0 <z_check_thread_stack_fail+0x2c>
		return 0;
    2fc2:	2000      	movs	r0, #0
    2fc4:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    2fc6:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
    2fca:	428b      	cmp	r3, r1
    2fcc:	bf94      	ite	ls
    2fce:	2100      	movls	r1, #0
    2fd0:	2101      	movhi	r1, #1
    2fd2:	b909      	cbnz	r1, 2fd8 <z_check_thread_stack_fail+0x54>
	return 0;
    2fd4:	2000      	movs	r0, #0
}
    2fd6:	4770      	bx	lr
		return thread->stack_info.start;
    2fd8:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    2fdc:	4770      	bx	lr
    2fde:	bf00      	nop
    2fe0:	2000121c 	.word	0x2000121c

00002fe4 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    2fe4:	b508      	push	{r3, lr}
    2fe6:	460d      	mov	r5, r1
    2fe8:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    2fea:	4b08      	ldr	r3, [pc, #32]	; (300c <arch_switch_to_main_thread+0x28>)
    2fec:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    2fee:	f000 fa61 	bl	34b4 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    2ff2:	4620      	mov	r0, r4
    2ff4:	f385 8809 	msr	PSP, r5
    2ff8:	2100      	movs	r1, #0
    2ffa:	b663      	cpsie	if
    2ffc:	f381 8811 	msr	BASEPRI, r1
    3000:	f3bf 8f6f 	isb	sy
    3004:	2200      	movs	r2, #0
    3006:	2300      	movs	r3, #0
    3008:	f008 f8e7 	bl	b1da <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    300c:	2000121c 	.word	0x2000121c

00003010 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    3010:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    3012:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    3014:	4a0b      	ldr	r2, [pc, #44]	; (3044 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    3016:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    3018:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    301a:	bf1e      	ittt	ne
	movne	r1, #0
    301c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    301e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    3020:	f008 fee6 	blne	bdf0 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    3024:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    3026:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    302a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    302e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    3032:	4905      	ldr	r1, [pc, #20]	; (3048 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    3034:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    3036:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    3038:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    303a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    303e:	4903      	ldr	r1, [pc, #12]	; (304c <_isr_wrapper+0x3c>)
	bx r1
    3040:	4708      	bx	r1
    3042:	0000      	.short	0x0000
	ldr r2, =_kernel
    3044:	2000121c 	.word	0x2000121c
	ldr r1, =_sw_isr_table
    3048:	0000c0f8 	.word	0x0000c0f8
	ldr r1, =z_arm_int_exit
    304c:	00003051 	.word	0x00003051

00003050 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    3050:	4b04      	ldr	r3, [pc, #16]	; (3064 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    3052:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    3054:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    3056:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    3058:	d003      	beq.n	3062 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    305a:	4903      	ldr	r1, [pc, #12]	; (3068 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    305c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    3060:	600a      	str	r2, [r1, #0]

00003062 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    3062:	4770      	bx	lr
	ldr r3, =_kernel
    3064:	2000121c 	.word	0x2000121c
	ldr r1, =_SCS_ICSR
    3068:	e000ed04 	.word	0xe000ed04

0000306c <bus_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    306c:	b510      	push	{r4, lr}
    306e:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    3070:	4b12      	ldr	r3, [pc, #72]	; (30bc <bus_fault+0x50>)
    3072:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    3074:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    3076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3078:	f413 7f00 	tst.w	r3, #512	; 0x200
    307c:	d00b      	beq.n	3096 <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    307e:	4b0f      	ldr	r3, [pc, #60]	; (30bc <bus_fault+0x50>)
    3080:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    3082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3084:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    3088:	d005      	beq.n	3096 <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    308a:	b121      	cbz	r1, 3096 <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    308c:	4a0b      	ldr	r2, [pc, #44]	; (30bc <bus_fault+0x50>)
    308e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3090:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    3094:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    3096:	4b09      	ldr	r3, [pc, #36]	; (30bc <bus_fault+0x50>)
    3098:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    309a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    309c:	f413 7f80 	tst.w	r3, #256	; 0x100
    30a0:	d101      	bne.n	30a6 <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    30a2:	4b06      	ldr	r3, [pc, #24]	; (30bc <bus_fault+0x50>)
    30a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    30a6:	4a05      	ldr	r2, [pc, #20]	; (30bc <bus_fault+0x50>)
    30a8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    30aa:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    30ae:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    30b0:	2101      	movs	r1, #1
    30b2:	f008 f95a 	bl	b36a <memory_fault_recoverable>
    30b6:	7020      	strb	r0, [r4, #0]

	return reason;
}
    30b8:	2000      	movs	r0, #0
    30ba:	bd10      	pop	{r4, pc}
    30bc:	e000ed00 	.word	0xe000ed00

000030c0 <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    30c0:	4b07      	ldr	r3, [pc, #28]	; (30e0 <usage_fault+0x20>)
    30c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    30c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    30c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    30c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    30ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    30cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    30ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    30d0:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    30d4:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    30d8:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    30da:	2000      	movs	r0, #0
    30dc:	4770      	bx	lr
    30de:	bf00      	nop
    30e0:	e000ed00 	.word	0xe000ed00

000030e4 <mem_manage_fault>:
{
    30e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    30e6:	4605      	mov	r5, r0
    30e8:	4616      	mov	r6, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    30ea:	4b2b      	ldr	r3, [pc, #172]	; (3198 <mem_manage_fault+0xb4>)
    30ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    30ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    30f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    30f2:	f013 0f02 	tst.w	r3, #2
    30f6:	d00c      	beq.n	3112 <mem_manage_fault+0x2e>
		uint32_t temp = SCB->MMFAR;
    30f8:	4b27      	ldr	r3, [pc, #156]	; (3198 <mem_manage_fault+0xb4>)
    30fa:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    30fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    30fe:	f013 0f80 	tst.w	r3, #128	; 0x80
    3102:	d025      	beq.n	3150 <mem_manage_fault+0x6c>
			if (from_hard_fault != 0) {
    3104:	b139      	cbz	r1, 3116 <mem_manage_fault+0x32>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    3106:	4a24      	ldr	r2, [pc, #144]	; (3198 <mem_manage_fault+0xb4>)
    3108:	6a93      	ldr	r3, [r2, #40]	; 0x28
    310a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    310e:	6293      	str	r3, [r2, #40]	; 0x28
    3110:	e001      	b.n	3116 <mem_manage_fault+0x32>
	uint32_t mmfar = -EINVAL;
    3112:	f06f 0015 	mvn.w	r0, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    3116:	4b20      	ldr	r3, [pc, #128]	; (3198 <mem_manage_fault+0xb4>)
    3118:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    311a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    311c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    311e:	f013 0f10 	tst.w	r3, #16
    3122:	d104      	bne.n	312e <mem_manage_fault+0x4a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    3124:	4b1c      	ldr	r3, [pc, #112]	; (3198 <mem_manage_fault+0xb4>)
    3126:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3128:	f014 0402 	ands.w	r4, r4, #2
    312c:	d004      	beq.n	3138 <mem_manage_fault+0x54>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    312e:	4b1a      	ldr	r3, [pc, #104]	; (3198 <mem_manage_fault+0xb4>)
    3130:	685c      	ldr	r4, [r3, #4]
    3132:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    3136:	d10e      	bne.n	3156 <mem_manage_fault+0x72>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    3138:	4a17      	ldr	r2, [pc, #92]	; (3198 <mem_manage_fault+0xb4>)
    313a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    313c:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    3140:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3142:	2101      	movs	r1, #1
    3144:	4628      	mov	r0, r5
    3146:	f008 f910 	bl	b36a <memory_fault_recoverable>
    314a:	7030      	strb	r0, [r6, #0]
}
    314c:	4620      	mov	r0, r4
    314e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t mmfar = -EINVAL;
    3150:	f06f 0015 	mvn.w	r0, #21
    3154:	e7df      	b.n	3116 <mem_manage_fault+0x32>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    3156:	4629      	mov	r1, r5
    3158:	f7ff ff14 	bl	2f84 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    315c:	4607      	mov	r7, r0
    315e:	b9b0      	cbnz	r0, 318e <mem_manage_fault+0xaa>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    3160:	4b0d      	ldr	r3, [pc, #52]	; (3198 <mem_manage_fault+0xb4>)
    3162:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    3164:	f014 0410 	ands.w	r4, r4, #16
    3168:	d0e6      	beq.n	3138 <mem_manage_fault+0x54>
    316a:	4c0c      	ldr	r4, [pc, #48]	; (319c <mem_manage_fault+0xb8>)
    316c:	f240 1349 	movw	r3, #329	; 0x149
    3170:	4622      	mov	r2, r4
    3172:	490b      	ldr	r1, [pc, #44]	; (31a0 <mem_manage_fault+0xbc>)
    3174:	480b      	ldr	r0, [pc, #44]	; (31a4 <mem_manage_fault+0xc0>)
    3176:	f007 ff78 	bl	b06a <printk>
    317a:	480b      	ldr	r0, [pc, #44]	; (31a8 <mem_manage_fault+0xc4>)
    317c:	f007 ff75 	bl	b06a <printk>
    3180:	f240 1149 	movw	r1, #329	; 0x149
    3184:	4620      	mov	r0, r4
    3186:	f008 f8c9 	bl	b31c <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    318a:	463c      	mov	r4, r7
    318c:	e7d4      	b.n	3138 <mem_manage_fault+0x54>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    318e:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    3192:	2402      	movs	r4, #2
    3194:	e7d0      	b.n	3138 <mem_manage_fault+0x54>
    3196:	bf00      	nop
    3198:	e000ed00 	.word	0xe000ed00
    319c:	0000c758 	.word	0x0000c758
    31a0:	0000c794 	.word	0x0000c794
    31a4:	0000c46c 	.word	0x0000c46c
    31a8:	0000c7e0 	.word	0x0000c7e0

000031ac <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    31ac:	b538      	push	{r3, r4, r5, lr}
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    31ae:	2300      	movs	r3, #0
    31b0:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    31b2:	4b2c      	ldr	r3, [pc, #176]	; (3264 <hard_fault+0xb8>)
    31b4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    31b6:	f014 0402 	ands.w	r4, r4, #2
    31ba:	d150      	bne.n	325e <hard_fault+0xb2>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    31bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    31be:	2b00      	cmp	r3, #0
    31c0:	db4e      	blt.n	3260 <hard_fault+0xb4>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    31c2:	4b28      	ldr	r3, [pc, #160]	; (3264 <hard_fault+0xb8>)
    31c4:	6add      	ldr	r5, [r3, #44]	; 0x2c
    31c6:	f015 4580 	ands.w	r5, r5, #1073741824	; 0x40000000
    31ca:	d036      	beq.n	323a <hard_fault+0x8e>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    31cc:	6983      	ldr	r3, [r0, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    31ce:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    31d2:	f64d 7302 	movw	r3, #57090	; 0xdf02
    31d6:	429a      	cmp	r2, r3
    31d8:	d010      	beq.n	31fc <hard_fault+0x50>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
		} else if (SCB_MMFSR != 0) {
    31da:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    31de:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    31e2:	781b      	ldrb	r3, [r3, #0]
    31e4:	b963      	cbnz	r3, 3200 <hard_fault+0x54>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if (SCB_BFSR != 0) {
    31e6:	4b20      	ldr	r3, [pc, #128]	; (3268 <hard_fault+0xbc>)
    31e8:	781b      	ldrb	r3, [r3, #0]
    31ea:	b97b      	cbnz	r3, 320c <hard_fault+0x60>
			reason = bus_fault(esf, 1, recoverable);
		} else if (SCB_UFSR != 0) {
    31ec:	4b1f      	ldr	r3, [pc, #124]	; (326c <hard_fault+0xc0>)
    31ee:	881b      	ldrh	r3, [r3, #0]
    31f0:	b29b      	uxth	r3, r3
    31f2:	b18b      	cbz	r3, 3218 <hard_fault+0x6c>
			reason = usage_fault(esf);
    31f4:	f7ff ff64 	bl	30c0 <usage_fault>
    31f8:	4604      	mov	r4, r0
    31fa:	e031      	b.n	3260 <hard_fault+0xb4>
			reason = esf->basic.r0;
    31fc:	6804      	ldr	r4, [r0, #0]
    31fe:	e02f      	b.n	3260 <hard_fault+0xb4>
			reason = mem_manage_fault(esf, 1, recoverable);
    3200:	460a      	mov	r2, r1
    3202:	2101      	movs	r1, #1
    3204:	f7ff ff6e 	bl	30e4 <mem_manage_fault>
    3208:	4604      	mov	r4, r0
    320a:	e029      	b.n	3260 <hard_fault+0xb4>
			reason = bus_fault(esf, 1, recoverable);
    320c:	460a      	mov	r2, r1
    320e:	2101      	movs	r1, #1
    3210:	f7ff ff2c 	bl	306c <bus_fault>
    3214:	4604      	mov	r4, r0
    3216:	e023      	b.n	3260 <hard_fault+0xb4>
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
		} else if (SAU->SFSR != 0) {
			secure_fault(esf);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */
		} else {
			__ASSERT(0,
    3218:	4d15      	ldr	r5, [pc, #84]	; (3270 <hard_fault+0xc4>)
    321a:	f240 23c3 	movw	r3, #707	; 0x2c3
    321e:	462a      	mov	r2, r5
    3220:	4914      	ldr	r1, [pc, #80]	; (3274 <hard_fault+0xc8>)
    3222:	4815      	ldr	r0, [pc, #84]	; (3278 <hard_fault+0xcc>)
    3224:	f007 ff21 	bl	b06a <printk>
    3228:	4814      	ldr	r0, [pc, #80]	; (327c <hard_fault+0xd0>)
    322a:	f007 ff1e 	bl	b06a <printk>
    322e:	f240 21c3 	movw	r1, #707	; 0x2c3
    3232:	4628      	mov	r0, r5
    3234:	f008 f872 	bl	b31c <assert_post_action>
    3238:	e012      	b.n	3260 <hard_fault+0xb4>
			"Fault escalation without FSR info");
		}
	} else {
		__ASSERT(0,
    323a:	4c0d      	ldr	r4, [pc, #52]	; (3270 <hard_fault+0xc4>)
    323c:	f240 23c7 	movw	r3, #711	; 0x2c7
    3240:	4622      	mov	r2, r4
    3242:	490c      	ldr	r1, [pc, #48]	; (3274 <hard_fault+0xc8>)
    3244:	480c      	ldr	r0, [pc, #48]	; (3278 <hard_fault+0xcc>)
    3246:	f007 ff10 	bl	b06a <printk>
    324a:	480d      	ldr	r0, [pc, #52]	; (3280 <hard_fault+0xd4>)
    324c:	f007 ff0d 	bl	b06a <printk>
    3250:	f240 21c7 	movw	r1, #711	; 0x2c7
    3254:	4620      	mov	r0, r4
    3256:	f008 f861 	bl	b31c <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    325a:	462c      	mov	r4, r5
    325c:	e000      	b.n	3260 <hard_fault+0xb4>
    325e:	2400      	movs	r4, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    3260:	4620      	mov	r0, r4
    3262:	bd38      	pop	{r3, r4, r5, pc}
    3264:	e000ed00 	.word	0xe000ed00
    3268:	e000ed29 	.word	0xe000ed29
    326c:	e000ed2a 	.word	0xe000ed2a
    3270:	0000c758 	.word	0x0000c758
    3274:	0000c3e8 	.word	0x0000c3e8
    3278:	0000c46c 	.word	0x0000c46c
    327c:	0000c804 	.word	0x0000c804
    3280:	0000c828 	.word	0x0000c828

00003284 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    3284:	b5f0      	push	{r4, r5, r6, r7, lr}
    3286:	b08b      	sub	sp, #44	; 0x2c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3288:	4b2b      	ldr	r3, [pc, #172]	; (3338 <z_arm_fault+0xb4>)
    328a:	685d      	ldr	r5, [r3, #4]
    328c:	f3c5 0508 	ubfx	r5, r5, #0, #9
    3290:	2300      	movs	r3, #0
    3292:	f383 8811 	msr	BASEPRI, r3
    3296:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    329a:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    329e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    32a2:	d10d      	bne.n	32c0 <z_arm_fault+0x3c>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    32a4:	f002 030c 	and.w	r3, r2, #12
    32a8:	2b08      	cmp	r3, #8
    32aa:	d027      	beq.n	32fc <z_arm_fault+0x78>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    32ac:	f012 0f08 	tst.w	r2, #8
    32b0:	d003      	beq.n	32ba <z_arm_fault+0x36>
			ptr_esf =  (z_arch_esf_t *)psp;
    32b2:	460c      	mov	r4, r1
	*nested_exc = false;
    32b4:	2600      	movs	r6, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    32b6:	b9ac      	cbnz	r4, 32e4 <z_arm_fault+0x60>
    32b8:	e004      	b.n	32c4 <z_arm_fault+0x40>
			ptr_esf = (z_arch_esf_t *)msp;
    32ba:	4604      	mov	r4, r0
			*nested_exc = true;
    32bc:	2601      	movs	r6, #1
    32be:	e7fa      	b.n	32b6 <z_arm_fault+0x32>
	*nested_exc = false;
    32c0:	2600      	movs	r6, #0
		return NULL;
    32c2:	4634      	mov	r4, r6
	__ASSERT(esf != NULL,
    32c4:	4f1d      	ldr	r7, [pc, #116]	; (333c <z_arm_fault+0xb8>)
    32c6:	f240 33f2 	movw	r3, #1010	; 0x3f2
    32ca:	463a      	mov	r2, r7
    32cc:	491c      	ldr	r1, [pc, #112]	; (3340 <z_arm_fault+0xbc>)
    32ce:	481d      	ldr	r0, [pc, #116]	; (3344 <z_arm_fault+0xc0>)
    32d0:	f007 fecb 	bl	b06a <printk>
    32d4:	481c      	ldr	r0, [pc, #112]	; (3348 <z_arm_fault+0xc4>)
    32d6:	f007 fec8 	bl	b06a <printk>
    32da:	f240 31f2 	movw	r1, #1010	; 0x3f2
    32de:	4638      	mov	r0, r7
    32e0:	f008 f81c 	bl	b31c <assert_post_action>

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    32e4:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    32e8:	4629      	mov	r1, r5
    32ea:	4620      	mov	r0, r4
    32ec:	f008 f842 	bl	b374 <fault_handle>
    32f0:	4605      	mov	r5, r0
	if (recoverable) {
    32f2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    32f6:	b123      	cbz	r3, 3302 <z_arm_fault+0x7e>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    32f8:	b00b      	add	sp, #44	; 0x2c
    32fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*nested_exc = false;
    32fc:	2600      	movs	r6, #0
		return NULL;
    32fe:	4634      	mov	r4, r6
    3300:	e7e0      	b.n	32c4 <z_arm_fault+0x40>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    3302:	2220      	movs	r2, #32
    3304:	4621      	mov	r1, r4
    3306:	a801      	add	r0, sp, #4
    3308:	f008 f8f9 	bl	b4fe <memcpy>
	if (nested_exc) {
    330c:	b14e      	cbz	r6, 3322 <z_arm_fault+0x9e>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    330e:	9b08      	ldr	r3, [sp, #32]
    3310:	f3c3 0208 	ubfx	r2, r3, #0, #9
    3314:	b95a      	cbnz	r2, 332e <z_arm_fault+0xaa>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    3316:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    331a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    331e:	9308      	str	r3, [sp, #32]
    3320:	e005      	b.n	332e <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3322:	9b08      	ldr	r3, [sp, #32]
    3324:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    3328:	f023 0301 	bic.w	r3, r3, #1
    332c:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    332e:	a901      	add	r1, sp, #4
    3330:	4628      	mov	r0, r5
    3332:	f008 f804 	bl	b33e <z_arm_fatal_error>
    3336:	e7df      	b.n	32f8 <z_arm_fault+0x74>
    3338:	e000ed00 	.word	0xe000ed00
    333c:	0000c758 	.word	0x0000c758
    3340:	0000c858 	.word	0x0000c858
    3344:	0000c46c 	.word	0x0000c46c
    3348:	0000c86c 	.word	0x0000c86c

0000334c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    334c:	4a02      	ldr	r2, [pc, #8]	; (3358 <z_arm_fault_init+0xc>)
    334e:	6953      	ldr	r3, [r2, #20]
    3350:	f043 0310 	orr.w	r3, r3, #16
    3354:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    3356:	4770      	bx	lr
    3358:	e000ed00 	.word	0xe000ed00

0000335c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    335c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    3360:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    3364:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    3366:	4672      	mov	r2, lr
	bl z_arm_fault
    3368:	f7ff ff8c 	bl	3284 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    336c:	bd01      	pop	{r0, pc}
    336e:	bf00      	nop

00003370 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    3370:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    3372:	e006      	b.n	3382 <z_arm_interrupt_init+0x12>
    3374:	f002 010f 	and.w	r1, r2, #15
    3378:	4b09      	ldr	r3, [pc, #36]	; (33a0 <z_arm_interrupt_init+0x30>)
    337a:	440b      	add	r3, r1
    337c:	2120      	movs	r1, #32
    337e:	7619      	strb	r1, [r3, #24]
    3380:	3201      	adds	r2, #1
    3382:	2a2f      	cmp	r2, #47	; 0x2f
    3384:	dc0a      	bgt.n	339c <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    3386:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    3388:	2b00      	cmp	r3, #0
    338a:	dbf3      	blt.n	3374 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    338c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    3390:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    3394:	2120      	movs	r1, #32
    3396:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    339a:	e7f1      	b.n	3380 <z_arm_interrupt_init+0x10>
	}
}
    339c:	4770      	bx	lr
    339e:	bf00      	nop
    33a0:	e000ecfc 	.word	0xe000ecfc

000033a4 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    33a4:	2000      	movs	r0, #0
    msr CONTROL, r0
    33a6:	f380 8814 	msr	CONTROL, r0
    isb
    33aa:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    33ae:	f008 fe0d 	bl	bfcc <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    33b2:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    33b4:	490d      	ldr	r1, [pc, #52]	; (33ec <__start+0x48>)
    str r0, [r1]
    33b6:	6008      	str	r0, [r1, #0]
    dsb
    33b8:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    33bc:	480c      	ldr	r0, [pc, #48]	; (33f0 <__start+0x4c>)
    msr msp, r0
    33be:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    33c2:	f000 f829 	bl	3418 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    33c6:	2020      	movs	r0, #32
    msr BASEPRI, r0
    33c8:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    33cc:	4809      	ldr	r0, [pc, #36]	; (33f4 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    33ce:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    33d2:	1840      	adds	r0, r0, r1
    msr PSP, r0
    33d4:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    33d8:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    33dc:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    33de:	4308      	orrs	r0, r1
    msr CONTROL, r0
    33e0:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    33e4:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    33e8:	f7ff fd38 	bl	2e5c <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    33ec:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    33f0:	200024c0 	.word	0x200024c0
    ldr r0, =z_interrupt_stacks
    33f4:	20002640 	.word	0x20002640

000033f8 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    33f8:	4b06      	ldr	r3, [pc, #24]	; (3414 <z_arm_clear_arm_mpu_config+0x1c>)
    33fa:	6818      	ldr	r0, [r3, #0]
	int num_regions =
    33fc:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    3400:	2300      	movs	r3, #0
    3402:	4283      	cmp	r3, r0
    3404:	da05      	bge.n	3412 <z_arm_clear_arm_mpu_config+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    3406:	4a03      	ldr	r2, [pc, #12]	; (3414 <z_arm_clear_arm_mpu_config+0x1c>)
    3408:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    340a:	2100      	movs	r1, #0
    340c:	6111      	str	r1, [r2, #16]
    340e:	3301      	adds	r3, #1
    3410:	e7f7      	b.n	3402 <z_arm_clear_arm_mpu_config+0xa>
		ARM_MPU_ClrRegion(i);
	}
}
    3412:	4770      	bx	lr
    3414:	e000ed90 	.word	0xe000ed90

00003418 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    3418:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    341a:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    341c:	2400      	movs	r4, #0
    341e:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    3422:	f7ff ffe9 	bl	33f8 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    3426:	4623      	mov	r3, r4
    3428:	e008      	b.n	343c <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    342a:	f103 0120 	add.w	r1, r3, #32
    342e:	4a0e      	ldr	r2, [pc, #56]	; (3468 <z_arm_init_arch_hw_at_boot+0x50>)
    3430:	f04f 30ff 	mov.w	r0, #4294967295
    3434:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    3438:	3301      	adds	r3, #1
    343a:	b2db      	uxtb	r3, r3
    343c:	2b07      	cmp	r3, #7
    343e:	d9f4      	bls.n	342a <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    3440:	2300      	movs	r3, #0
    3442:	e008      	b.n	3456 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    3444:	f103 0160 	add.w	r1, r3, #96	; 0x60
    3448:	4a07      	ldr	r2, [pc, #28]	; (3468 <z_arm_init_arch_hw_at_boot+0x50>)
    344a:	f04f 30ff 	mov.w	r0, #4294967295
    344e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    3452:	3301      	adds	r3, #1
    3454:	b2db      	uxtb	r3, r3
    3456:	2b07      	cmp	r3, #7
    3458:	d9f4      	bls.n	3444 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    345a:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    345c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3460:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    3464:	bd10      	pop	{r4, pc}
    3466:	bf00      	nop
    3468:	e000e100 	.word	0xe000e100

0000346c <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    346c:	b508      	push	{r3, lr}
	if (_current == thread) {
    346e:	4b08      	ldr	r3, [pc, #32]	; (3490 <z_impl_k_thread_abort+0x24>)
    3470:	689b      	ldr	r3, [r3, #8]
    3472:	4283      	cmp	r3, r0
    3474:	d002      	beq.n	347c <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
    3476:	f006 fa69 	bl	994c <z_thread_abort>
}
    347a:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    347c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    3480:	2b00      	cmp	r3, #0
    3482:	d0f8      	beq.n	3476 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3484:	4a03      	ldr	r2, [pc, #12]	; (3494 <z_impl_k_thread_abort+0x28>)
    3486:	6853      	ldr	r3, [r2, #4]
    3488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    348c:	6053      	str	r3, [r2, #4]
    348e:	e7f2      	b.n	3476 <z_impl_k_thread_abort+0xa>
    3490:	2000121c 	.word	0x2000121c
    3494:	e000ed00 	.word	0xe000ed00

00003498 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    3498:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    349a:	4b03      	ldr	r3, [pc, #12]	; (34a8 <z_arm_configure_static_mpu_regions+0x10>)
    349c:	4a03      	ldr	r2, [pc, #12]	; (34ac <z_arm_configure_static_mpu_regions+0x14>)
    349e:	2101      	movs	r1, #1
    34a0:	4803      	ldr	r0, [pc, #12]	; (34b0 <z_arm_configure_static_mpu_regions+0x18>)
    34a2:	f000 f85d 	bl	3560 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    34a6:	bd08      	pop	{r3, pc}
    34a8:	20040000 	.word	0x20040000
    34ac:	20000000 	.word	0x20000000
    34b0:	0000c8ac 	.word	0x0000c8ac

000034b4 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    34b4:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    34b6:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
    34ba:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    34bc:	4804      	ldr	r0, [pc, #16]	; (34d0 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    34be:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    34c0:	2320      	movs	r3, #32
    34c2:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    34c4:	4b03      	ldr	r3, [pc, #12]	; (34d4 <z_arm_configure_dynamic_mpu_regions+0x20>)
    34c6:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    34c8:	2101      	movs	r1, #1
    34ca:	f000 f86b 	bl	35a4 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
    34ce:	bd08      	pop	{r3, pc}
    34d0:	20000c9c 	.word	0x20000c9c
    34d4:	150b0000 	.word	0x150b0000

000034d8 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    34d8:	4a06      	ldr	r2, [pc, #24]	; (34f4 <region_init+0x1c>)
    34da:	6090      	str	r0, [r2, #8]

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    34dc:	680b      	ldr	r3, [r1, #0]
    34de:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    34e2:	4303      	orrs	r3, r0
    34e4:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    34e8:	60d3      	str	r3, [r2, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    34ea:	688b      	ldr	r3, [r1, #8]
    34ec:	f043 0301 	orr.w	r3, r3, #1
    34f0:	6113      	str	r3, [r2, #16]
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    34f2:	4770      	bx	lr
    34f4:	e000ed90 	.word	0xe000ed90

000034f8 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    34f8:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    34fa:	4c03      	ldr	r4, [pc, #12]	; (3508 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    34fc:	2301      	movs	r3, #1
    34fe:	7822      	ldrb	r2, [r4, #0]
    3500:	f007 ff96 	bl	b430 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    3504:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    3506:	bd10      	pop	{r4, pc}
    3508:	20001298 	.word	0x20001298

0000350c <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    350c:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    350e:	2300      	movs	r3, #0
    3510:	4a08      	ldr	r2, [pc, #32]	; (3534 <mpu_configure_dynamic_mpu_regions+0x28>)
    3512:	7812      	ldrb	r2, [r2, #0]
    3514:	f007 ff8c 	bl	b430 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    3518:	f110 0f16 	cmn.w	r0, #22
    351c:	d008      	beq.n	3530 <mpu_configure_dynamic_mpu_regions+0x24>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    351e:	4603      	mov	r3, r0
    3520:	2b07      	cmp	r3, #7
    3522:	dc05      	bgt.n	3530 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    3524:	4a04      	ldr	r2, [pc, #16]	; (3538 <mpu_configure_dynamic_mpu_regions+0x2c>)
    3526:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    3528:	2100      	movs	r1, #0
    352a:	6111      	str	r1, [r2, #16]
    352c:	3301      	adds	r3, #1
    352e:	e7f7      	b.n	3520 <mpu_configure_dynamic_mpu_regions+0x14>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    3530:	bd08      	pop	{r3, pc}
    3532:	bf00      	nop
    3534:	20001298 	.word	0x20001298
    3538:	e000ed90 	.word	0xe000ed90

0000353c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    353c:	4b03      	ldr	r3, [pc, #12]	; (354c <arm_core_mpu_enable+0x10>)
    353e:	2205      	movs	r2, #5
    3540:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    3542:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3546:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    354a:	4770      	bx	lr
    354c:	e000ed90 	.word	0xe000ed90

00003550 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    3550:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    3554:	4b01      	ldr	r3, [pc, #4]	; (355c <arm_core_mpu_disable+0xc>)
    3556:	2200      	movs	r2, #0
    3558:	605a      	str	r2, [r3, #4]
}
    355a:	4770      	bx	lr
    355c:	e000ed90 	.word	0xe000ed90

00003560 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    3560:	b538      	push	{r3, r4, r5, lr}
    3562:	460c      	mov	r4, r1
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    3564:	f7ff ffc8 	bl	34f8 <mpu_configure_static_mpu_regions>
    3568:	f110 0f16 	cmn.w	r0, #22
    356c:	d000      	beq.n	3570 <arm_core_mpu_configure_static_mpu_regions+0x10>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    356e:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    3570:	4d08      	ldr	r5, [pc, #32]	; (3594 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    3572:	f240 1311 	movw	r3, #273	; 0x111
    3576:	462a      	mov	r2, r5
    3578:	4907      	ldr	r1, [pc, #28]	; (3598 <arm_core_mpu_configure_static_mpu_regions+0x38>)
    357a:	4808      	ldr	r0, [pc, #32]	; (359c <arm_core_mpu_configure_static_mpu_regions+0x3c>)
    357c:	f007 fd75 	bl	b06a <printk>
    3580:	4621      	mov	r1, r4
    3582:	4807      	ldr	r0, [pc, #28]	; (35a0 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    3584:	f007 fd71 	bl	b06a <printk>
    3588:	f240 1111 	movw	r1, #273	; 0x111
    358c:	4628      	mov	r0, r5
    358e:	f007 fec5 	bl	b31c <assert_post_action>
}
    3592:	e7ec      	b.n	356e <arm_core_mpu_configure_static_mpu_regions+0xe>
    3594:	0000c8b8 	.word	0x0000c8b8
    3598:	0000c3e8 	.word	0x0000c3e8
    359c:	0000c46c 	.word	0x0000c46c
    35a0:	0000c8f0 	.word	0x0000c8f0

000035a4 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    35a4:	b538      	push	{r3, r4, r5, lr}
    35a6:	460c      	mov	r4, r1
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    35a8:	f7ff ffb0 	bl	350c <mpu_configure_dynamic_mpu_regions>
    35ac:	f110 0f16 	cmn.w	r0, #22
    35b0:	d000      	beq.n	35b4 <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    35b2:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    35b4:	4d08      	ldr	r5, [pc, #32]	; (35d8 <arm_core_mpu_configure_dynamic_mpu_regions+0x34>)
    35b6:	f44f 7398 	mov.w	r3, #304	; 0x130
    35ba:	462a      	mov	r2, r5
    35bc:	4907      	ldr	r1, [pc, #28]	; (35dc <arm_core_mpu_configure_dynamic_mpu_regions+0x38>)
    35be:	4808      	ldr	r0, [pc, #32]	; (35e0 <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>)
    35c0:	f007 fd53 	bl	b06a <printk>
    35c4:	4621      	mov	r1, r4
    35c6:	4807      	ldr	r0, [pc, #28]	; (35e4 <arm_core_mpu_configure_dynamic_mpu_regions+0x40>)
    35c8:	f007 fd4f 	bl	b06a <printk>
    35cc:	f44f 7198 	mov.w	r1, #304	; 0x130
    35d0:	4628      	mov	r0, r5
    35d2:	f007 fea3 	bl	b31c <assert_post_action>
}
    35d6:	e7ec      	b.n	35b2 <arm_core_mpu_configure_dynamic_mpu_regions+0xe>
    35d8:	0000c8b8 	.word	0x0000c8b8
    35dc:	0000c3e8 	.word	0x0000c3e8
    35e0:	0000c46c 	.word	0x0000c46c
    35e4:	0000c91c 	.word	0x0000c91c

000035e8 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    35e8:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    35ea:	4b23      	ldr	r3, [pc, #140]	; (3678 <z_arm_mpu_init+0x90>)
    35ec:	681d      	ldr	r5, [r3, #0]
    35ee:	2d08      	cmp	r5, #8
    35f0:	d803      	bhi.n	35fa <z_arm_mpu_init+0x12>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    35f2:	f7ff ffad 	bl	3550 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    35f6:	2400      	movs	r4, #0
    35f8:	e01e      	b.n	3638 <z_arm_mpu_init+0x50>
		__ASSERT(0,
    35fa:	4c20      	ldr	r4, [pc, #128]	; (367c <z_arm_mpu_init+0x94>)
    35fc:	f44f 73a4 	mov.w	r3, #328	; 0x148
    3600:	4622      	mov	r2, r4
    3602:	491f      	ldr	r1, [pc, #124]	; (3680 <z_arm_mpu_init+0x98>)
    3604:	481f      	ldr	r0, [pc, #124]	; (3684 <z_arm_mpu_init+0x9c>)
    3606:	f007 fd30 	bl	b06a <printk>
    360a:	2208      	movs	r2, #8
    360c:	4629      	mov	r1, r5
    360e:	481e      	ldr	r0, [pc, #120]	; (3688 <z_arm_mpu_init+0xa0>)
    3610:	f007 fd2b 	bl	b06a <printk>
    3614:	f44f 71a4 	mov.w	r1, #328	; 0x148
    3618:	4620      	mov	r0, r4
    361a:	f007 fe7f 	bl	b31c <assert_post_action>
		return -1;
    361e:	f04f 30ff 	mov.w	r0, #4294967295
    3622:	e016      	b.n	3652 <z_arm_mpu_init+0x6a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    3624:	4b14      	ldr	r3, [pc, #80]	; (3678 <z_arm_mpu_init+0x90>)
    3626:	6859      	ldr	r1, [r3, #4]
    3628:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    362c:	0093      	lsls	r3, r2, #2
    362e:	4419      	add	r1, r3
    3630:	4620      	mov	r0, r4
    3632:	f7ff ff51 	bl	34d8 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3636:	3401      	adds	r4, #1
    3638:	42a5      	cmp	r5, r4
    363a:	d8f3      	bhi.n	3624 <z_arm_mpu_init+0x3c>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    363c:	4b13      	ldr	r3, [pc, #76]	; (368c <z_arm_mpu_init+0xa4>)
    363e:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    3640:	f7ff ff7c 	bl	353c <arm_core_mpu_enable>

	/* Sanity check for number of regions in Cortex-M0+, M3, and M4. */
#if defined(CONFIG_CPU_CORTEX_M0PLUS) || \
	defined(CONFIG_CPU_CORTEX_M3) || \
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
    3644:	4b12      	ldr	r3, [pc, #72]	; (3690 <z_arm_mpu_init+0xa8>)
    3646:	681b      	ldr	r3, [r3, #0]
    3648:	f3c3 2307 	ubfx	r3, r3, #8, #8
    364c:	2b08      	cmp	r3, #8
    364e:	d101      	bne.n	3654 <z_arm_mpu_init+0x6c>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    3650:	2000      	movs	r0, #0
}
    3652:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(
    3654:	4c09      	ldr	r4, [pc, #36]	; (367c <z_arm_mpu_init+0x94>)
    3656:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    365a:	4622      	mov	r2, r4
    365c:	490d      	ldr	r1, [pc, #52]	; (3694 <z_arm_mpu_init+0xac>)
    365e:	4809      	ldr	r0, [pc, #36]	; (3684 <z_arm_mpu_init+0x9c>)
    3660:	f007 fd03 	bl	b06a <printk>
    3664:	480c      	ldr	r0, [pc, #48]	; (3698 <z_arm_mpu_init+0xb0>)
    3666:	f007 fd00 	bl	b06a <printk>
    366a:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    366e:	4620      	mov	r0, r4
    3670:	f007 fe54 	bl	b31c <assert_post_action>
	return 0;
    3674:	2000      	movs	r0, #0
    3676:	e7ec      	b.n	3652 <z_arm_mpu_init+0x6a>
    3678:	0000ca04 	.word	0x0000ca04
    367c:	0000c8b8 	.word	0x0000c8b8
    3680:	0000c3e8 	.word	0x0000c3e8
    3684:	0000c46c 	.word	0x0000c46c
    3688:	0000c94c 	.word	0x0000c94c
    368c:	20001298 	.word	0x20001298
    3690:	e000ed90 	.word	0xe000ed90
    3694:	0000c980 	.word	0x0000c980
    3698:	0000c9d0 	.word	0x0000c9d0

0000369c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    369c:	4b01      	ldr	r3, [pc, #4]	; (36a4 <__stdout_hook_install+0x8>)
    369e:	6018      	str	r0, [r3, #0]
}
    36a0:	4770      	bx	lr
    36a2:	bf00      	nop
    36a4:	200000d4 	.word	0x200000d4

000036a8 <nrf52_errata_197>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    36a8:	4b06      	ldr	r3, [pc, #24]	; (36c4 <nrf52_errata_197+0x1c>)
    36aa:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    36ac:	4a06      	ldr	r2, [pc, #24]	; (36c8 <nrf52_errata_197+0x20>)
    36ae:	6812      	ldr	r2, [r2, #0]
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    36b0:	2b08      	cmp	r3, #8
    36b2:	d001      	beq.n	36b8 <nrf52_errata_197+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    36b4:	2000      	movs	r0, #0
    36b6:	4770      	bx	lr
                switch(var2)
    36b8:	2a02      	cmp	r2, #2
    36ba:	d001      	beq.n	36c0 <nrf52_errata_197+0x18>
                        return false;
    36bc:	2000      	movs	r0, #0
    36be:	4770      	bx	lr
                        return true;
    36c0:	2001      	movs	r0, #1
    #endif
}
    36c2:	4770      	bx	lr
    36c4:	10000130 	.word	0x10000130
    36c8:	10000134 	.word	0x10000134

000036cc <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    36cc:	b510      	push	{r4, lr}
	__asm__ volatile(
    36ce:	f04f 0320 	mov.w	r3, #32
    36d2:	f3ef 8411 	mrs	r4, BASEPRI
    36d6:	f383 8812 	msr	BASEPRI_MAX, r3
    36da:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    36de:	2301      	movs	r3, #1
    36e0:	4a0b      	ldr	r2, [pc, #44]	; (3710 <nordicsemi_nrf52_init+0x44>)
    36e2:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    36e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    36ea:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    36ee:	f7ff ffdb 	bl	36a8 <nrf52_errata_197>
    36f2:	b110      	cbz	r0, 36fa <nordicsemi_nrf52_init+0x2e>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    36f4:	4b07      	ldr	r3, [pc, #28]	; (3714 <nordicsemi_nrf52_init+0x48>)
    36f6:	2201      	movs	r2, #1
    36f8:	601a      	str	r2, [r3, #0]
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    36fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    36fe:	2201      	movs	r2, #1
    3700:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    3704:	f384 8811 	msr	BASEPRI, r4
    3708:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    370c:	2000      	movs	r0, #0
    370e:	bd10      	pop	{r4, pc}
    3710:	4001e000 	.word	0x4001e000
    3714:	40000638 	.word	0x40000638

00003718 <sys_arch_reboot>:
    *p_gpregret = val;
    3718:	b2c0      	uxtb	r0, r0
    371a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    371e:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    3722:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3726:	4905      	ldr	r1, [pc, #20]	; (373c <sys_arch_reboot+0x24>)
    3728:	68ca      	ldr	r2, [r1, #12]
    372a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    372e:	4b04      	ldr	r3, [pc, #16]	; (3740 <sys_arch_reboot+0x28>)
    3730:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    3732:	60cb      	str	r3, [r1, #12]
    3734:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    3738:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    373a:	e7fd      	b.n	3738 <sys_arch_reboot+0x20>
    373c:	e000ed00 	.word	0xe000ed00
    3740:	05fa0004 	.word	0x05fa0004

00003744 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    3744:	b130      	cbz	r0, 3754 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    3746:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    3748:	0180      	lsls	r0, r0, #6
    374a:	4b03      	ldr	r3, [pc, #12]	; (3758 <arch_busy_wait+0x14>)
    374c:	f043 0301 	orr.w	r3, r3, #1
    3750:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    3752:	bd08      	pop	{r3, pc}
    3754:	4770      	bx	lr
    3756:	bf00      	nop
    3758:	0000c2f0 	.word	0x0000c2f0

0000375c <adc_nrfx_channel_setup>:


/* Implementation of the ADC driver API function: adc_channel_setup. */
static int adc_nrfx_channel_setup(const struct device *dev,
				  const struct adc_channel_cfg *channel_cfg)
{
    375c:	b430      	push	{r4, r5}
    375e:	b082      	sub	sp, #8
	nrf_saadc_channel_config_t config = {
    3760:	2300      	movs	r3, #0
    3762:	9300      	str	r3, [sp, #0]
    3764:	f8cd 3003 	str.w	r3, [sp, #3]
		.resistor_p = NRF_SAADC_RESISTOR_DISABLED,
		.resistor_n = NRF_SAADC_RESISTOR_DISABLED,
		.burst      = NRF_SAADC_BURST_DISABLED,
	};
	uint8_t channel_id = channel_cfg->channel_id;
    3768:	790a      	ldrb	r2, [r1, #4]
    376a:	f002 021f 	and.w	r2, r2, #31

	if (channel_id >= SAADC_CH_NUM) {
    376e:	2a07      	cmp	r2, #7
    3770:	f200 80b4 	bhi.w	38dc <adc_nrfx_channel_setup+0x180>
		return -EINVAL;
	}

	switch (channel_cfg->gain) {
    3774:	780b      	ldrb	r3, [r1, #0]
    3776:	2b09      	cmp	r3, #9
    3778:	f200 80b3 	bhi.w	38e2 <adc_nrfx_channel_setup+0x186>
    377c:	e8df f003 	tbb	[pc, r3]
    3780:	423e3a05 	.word	0x423e3a05
    3784:	4e4ab146 	.word	0x4e4ab146
    3788:	52b1      	.short	0x52b1
	case ADC_GAIN_1_6:
		config.gain = NRF_SAADC_GAIN1_6;
    378a:	2300      	movs	r3, #0
    378c:	f88d 3002 	strb.w	r3, [sp, #2]
	default:
		LOG_ERR("Selected ADC gain is not valid");
		return -EINVAL;
	}

	switch (channel_cfg->reference) {
    3790:	784b      	ldrb	r3, [r1, #1]
    3792:	2b03      	cmp	r3, #3
    3794:	d04a      	beq.n	382c <adc_nrfx_channel_setup+0xd0>
    3796:	2b04      	cmp	r3, #4
    3798:	f040 80a6 	bne.w	38e8 <adc_nrfx_channel_setup+0x18c>
	case ADC_REF_INTERNAL:
		config.reference = NRF_SAADC_REFERENCE_INTERNAL;
    379c:	2300      	movs	r3, #0
    379e:	f88d 3003 	strb.w	r3, [sp, #3]
	default:
		LOG_ERR("Selected ADC reference is not valid");
		return -EINVAL;
	}

	switch (channel_cfg->acquisition_time) {
    37a2:	884b      	ldrh	r3, [r1, #2]
    37a4:	2b00      	cmp	r3, #0
    37a6:	f000 8089 	beq.w	38bc <adc_nrfx_channel_setup+0x160>
    37aa:	f244 0028 	movw	r0, #16424	; 0x4028
    37ae:	4283      	cmp	r3, r0
    37b0:	f200 809d 	bhi.w	38ee <adc_nrfx_channel_setup+0x192>
    37b4:	f244 0003 	movw	r0, #16387	; 0x4003
    37b8:	4283      	cmp	r3, r0
    37ba:	f0c0 809b 	bcc.w	38f4 <adc_nrfx_channel_setup+0x198>
    37be:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    37c2:	3b03      	subs	r3, #3
    37c4:	2b25      	cmp	r3, #37	; 0x25
    37c6:	f200 8098 	bhi.w	38fa <adc_nrfx_channel_setup+0x19e>
    37ca:	e8df f003 	tbb	[pc, r3]
    37ce:	9633      	.short	0x9633
    37d0:	96969673 	.word	0x96969673
    37d4:	96967796 	.word	0x96967796
    37d8:	967b9696 	.word	0x967b9696
    37dc:	7f969696 	.word	0x7f969696
    37e0:	96969696 	.word	0x96969696
    37e4:	96969696 	.word	0x96969696
    37e8:	96969696 	.word	0x96969696
    37ec:	96969696 	.word	0x96969696
    37f0:	83969696 	.word	0x83969696
		config.gain = NRF_SAADC_GAIN1_5;
    37f4:	2301      	movs	r3, #1
    37f6:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    37fa:	e7c9      	b.n	3790 <adc_nrfx_channel_setup+0x34>
		config.gain = NRF_SAADC_GAIN1_4;
    37fc:	2302      	movs	r3, #2
    37fe:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    3802:	e7c5      	b.n	3790 <adc_nrfx_channel_setup+0x34>
		config.gain = NRF_SAADC_GAIN1_3;
    3804:	2303      	movs	r3, #3
    3806:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    380a:	e7c1      	b.n	3790 <adc_nrfx_channel_setup+0x34>
		config.gain = NRF_SAADC_GAIN1_2;
    380c:	2304      	movs	r3, #4
    380e:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    3812:	e7bd      	b.n	3790 <adc_nrfx_channel_setup+0x34>
		config.gain = NRF_SAADC_GAIN1;
    3814:	2305      	movs	r3, #5
    3816:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    381a:	e7b9      	b.n	3790 <adc_nrfx_channel_setup+0x34>
		config.gain = NRF_SAADC_GAIN2;
    381c:	2306      	movs	r3, #6
    381e:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    3822:	e7b5      	b.n	3790 <adc_nrfx_channel_setup+0x34>
		config.gain = NRF_SAADC_GAIN4;
    3824:	2307      	movs	r3, #7
    3826:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    382a:	e7b1      	b.n	3790 <adc_nrfx_channel_setup+0x34>
		config.reference = NRF_SAADC_REFERENCE_VDD4;
    382c:	2301      	movs	r3, #1
    382e:	f88d 3003 	strb.w	r3, [sp, #3]
		break;
    3832:	e7b6      	b.n	37a2 <adc_nrfx_channel_setup+0x46>
	case ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 3):
		config.acq_time = NRF_SAADC_ACQTIME_3US;
    3834:	2300      	movs	r3, #0
    3836:	f88d 3004 	strb.w	r3, [sp, #4]
	default:
		LOG_ERR("Selected ADC acquisition time is not valid");
		return -EINVAL;
	}

	config.mode = (channel_cfg->differential ?
    383a:	790c      	ldrb	r4, [r1, #4]
NRF_STATIC_INLINE void nrf_saadc_channel_init(NRF_SAADC_Type *                   p_reg,
                                              uint8_t                            channel,
                                              nrf_saadc_channel_config_t const * config)
{
    p_reg->CH[channel].CONFIG =
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
    383c:	f89d 3000 	ldrb.w	r3, [sp]
    3840:	f003 0303 	and.w	r3, r3, #3
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
    3844:	f89d 0001 	ldrb.w	r0, [sp, #1]
    3848:	0100      	lsls	r0, r0, #4
    384a:	f000 0030 	and.w	r0, r0, #48	; 0x30
    384e:	4303      	orrs	r3, r0
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
    3850:	f89d 0002 	ldrb.w	r0, [sp, #2]
    3854:	0200      	lsls	r0, r0, #8
    3856:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
    385a:	4303      	orrs	r3, r0
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
    385c:	f89d 0003 	ldrb.w	r0, [sp, #3]
    3860:	0300      	lsls	r0, r0, #12
    3862:	f400 5080 	and.w	r0, r0, #4096	; 0x1000
    3866:	4303      	orrs	r3, r0
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
    3868:	f89d 0004 	ldrb.w	r0, [sp, #4]
    386c:	0400      	lsls	r0, r0, #16
    386e:	f400 20e0 	and.w	r0, r0, #458752	; 0x70000
    3872:	4303      	orrs	r3, r0
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    3874:	f3c4 1440 	ubfx	r4, r4, #5, #1
    3878:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
            | ((config->burst      << SAADC_CH_CONFIG_BURST_Pos)  & SAADC_CH_CONFIG_BURST_Msk);
    387c:	f89d 0006 	ldrb.w	r0, [sp, #6]
    3880:	0600      	lsls	r0, r0, #24
    3882:	f000 7080 	and.w	r0, r0, #16777216	; 0x1000000
    3886:	4303      	orrs	r3, r0
    p_reg->CH[channel].CONFIG =
    3888:	4c1d      	ldr	r4, [pc, #116]	; (3900 <adc_nrfx_channel_setup+0x1a4>)
    388a:	eb04 1002 	add.w	r0, r4, r2, lsl #4
    388e:	f8c0 3518 	str.w	r3, [r0, #1304]	; 0x518

	nrf_saadc_channel_init(NRF_SAADC, channel_id, &config);
	nrf_saadc_channel_input_set(NRF_SAADC,
				    channel_id,
				    NRF_SAADC_INPUT_DISABLED,
				    channel_cfg->input_negative);
    3892:	7988      	ldrb	r0, [r1, #6]
    p_reg->CH[channel].PSELN = pseln;
    3894:	f102 0351 	add.w	r3, r2, #81	; 0x51
    3898:	011d      	lsls	r5, r3, #4
    389a:	eb04 1303 	add.w	r3, r4, r3, lsl #4
    389e:	6058      	str	r0, [r3, #4]
    p_reg->CH[channel].PSELP = pselp;
    38a0:	2000      	movs	r0, #0
    38a2:	5160      	str	r0, [r4, r5]

	/* Store the positive input selection in a dedicated array,
	 * to get it later when the channel is selected for a sampling
	 * and to mark the channel as configured (ready to be selected).
	 */
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
    38a4:	7949      	ldrb	r1, [r1, #5]
    38a6:	4b17      	ldr	r3, [pc, #92]	; (3904 <adc_nrfx_channel_setup+0x1a8>)
    38a8:	441a      	add	r2, r3
    38aa:	f882 10a8 	strb.w	r1, [r2, #168]	; 0xa8

	return 0;
}
    38ae:	b002      	add	sp, #8
    38b0:	bc30      	pop	{r4, r5}
    38b2:	4770      	bx	lr
		config.acq_time = NRF_SAADC_ACQTIME_5US;
    38b4:	2301      	movs	r3, #1
    38b6:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    38ba:	e7be      	b.n	383a <adc_nrfx_channel_setup+0xde>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
    38bc:	2302      	movs	r3, #2
    38be:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    38c2:	e7ba      	b.n	383a <adc_nrfx_channel_setup+0xde>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
    38c4:	2303      	movs	r3, #3
    38c6:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    38ca:	e7b6      	b.n	383a <adc_nrfx_channel_setup+0xde>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
    38cc:	2304      	movs	r3, #4
    38ce:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    38d2:	e7b2      	b.n	383a <adc_nrfx_channel_setup+0xde>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
    38d4:	2305      	movs	r3, #5
    38d6:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    38da:	e7ae      	b.n	383a <adc_nrfx_channel_setup+0xde>
		return -EINVAL;
    38dc:	f06f 0015 	mvn.w	r0, #21
    38e0:	e7e5      	b.n	38ae <adc_nrfx_channel_setup+0x152>
	switch (channel_cfg->gain) {
    38e2:	f06f 0015 	mvn.w	r0, #21
    38e6:	e7e2      	b.n	38ae <adc_nrfx_channel_setup+0x152>
	switch (channel_cfg->reference) {
    38e8:	f06f 0015 	mvn.w	r0, #21
    38ec:	e7df      	b.n	38ae <adc_nrfx_channel_setup+0x152>
	switch (channel_cfg->acquisition_time) {
    38ee:	f06f 0015 	mvn.w	r0, #21
    38f2:	e7dc      	b.n	38ae <adc_nrfx_channel_setup+0x152>
    38f4:	f06f 0015 	mvn.w	r0, #21
    38f8:	e7d9      	b.n	38ae <adc_nrfx_channel_setup+0x152>
    38fa:	f06f 0015 	mvn.w	r0, #21
    38fe:	e7d6      	b.n	38ae <adc_nrfx_channel_setup+0x152>
    3900:	40007000 	.word	0x40007000
    3904:	20000000 	.word	0x20000000

00003908 <adc_context_start_sampling>:
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
    3908:	4b07      	ldr	r3, [pc, #28]	; (3928 <adc_context_start_sampling+0x20>)
    390a:	2201      	movs	r2, #1
    390c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
    3910:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
    3914:	b113      	cbz	r3, 391c <adc_context_start_sampling+0x14>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3916:	4b05      	ldr	r3, [pc, #20]	; (392c <adc_context_start_sampling+0x24>)
    3918:	601a      	str	r2, [r3, #0]
}
    391a:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    391c:	2301      	movs	r3, #1
    391e:	4a02      	ldr	r2, [pc, #8]	; (3928 <adc_context_start_sampling+0x20>)
    3920:	6013      	str	r3, [r2, #0]
    3922:	3204      	adds	r2, #4
    3924:	6013      	str	r3, [r2, #0]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
    3926:	4770      	bx	lr
    3928:	40007000 	.word	0x40007000
    392c:	4000700c 	.word	0x4000700c

00003930 <adc_context_update_buffer_pointer>:
static void adc_context_update_buffer_pointer(struct adc_context *ctx,
					      bool repeat)
{
	ARG_UNUSED(ctx);

	if (!repeat) {
    3930:	b949      	cbnz	r1, 3946 <adc_context_update_buffer_pointer+0x16>
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
    3932:	4b05      	ldr	r3, [pc, #20]	; (3948 <adc_context_update_buffer_pointer+0x18>)
    3934:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
    3938:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
		nrf_saadc_buffer_pointer_set(
			NRF_SAADC,
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
    393c:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
    393e:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    3942:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			nrf_saadc_amount_get(NRF_SAADC));
	}
}
    3946:	4770      	bx	lr
    3948:	40007000 	.word	0x40007000

0000394c <set_resolution>:

static int set_resolution(const struct adc_sequence *sequence)
{
	nrf_saadc_resolution_t nrf_resolution;

	switch (sequence->resolution) {
    394c:	7c03      	ldrb	r3, [r0, #16]
    394e:	3b08      	subs	r3, #8
    3950:	2b06      	cmp	r3, #6
    3952:	d811      	bhi.n	3978 <set_resolution+0x2c>
    3954:	e8df f003 	tbb	[pc, r3]
    3958:	100e1004 	.word	0x100e1004
    395c:	1006      	.short	0x1006
    395e:	0c          	.byte	0x0c
    395f:	00          	.byte	0x00
    3960:	2200      	movs	r2, #0
    3962:	e000      	b.n	3966 <set_resolution+0x1a>
		break;
	case 10:
		nrf_resolution = NRF_SAADC_RESOLUTION_10BIT;
		break;
	case 12:
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
    3964:	2202      	movs	r2, #2
    p_reg->RESOLUTION = resolution;
    3966:	4b06      	ldr	r3, [pc, #24]	; (3980 <set_resolution+0x34>)
    3968:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
			    sequence->resolution);
		return -EINVAL;
	}

	nrf_saadc_resolution_set(NRF_SAADC, nrf_resolution);
	return 0;
    396c:	2000      	movs	r0, #0
    396e:	4770      	bx	lr
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
    3970:	2203      	movs	r2, #3
		break;
    3972:	e7f8      	b.n	3966 <set_resolution+0x1a>
		nrf_resolution = NRF_SAADC_RESOLUTION_10BIT;
    3974:	2201      	movs	r2, #1
    3976:	e7f6      	b.n	3966 <set_resolution+0x1a>
	switch (sequence->resolution) {
    3978:	f06f 0015 	mvn.w	r0, #21
}
    397c:	4770      	bx	lr
    397e:	bf00      	nop
    3980:	40007000 	.word	0x40007000

00003984 <set_oversampling>:
static int set_oversampling(const struct adc_sequence *sequence,
			    uint8_t active_channels)
{
	nrf_saadc_oversample_t nrf_oversampling;

	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    3984:	2901      	cmp	r1, #1
    3986:	d901      	bls.n	398c <set_oversampling+0x8>
    3988:	7c43      	ldrb	r3, [r0, #17]
    398a:	b973      	cbnz	r3, 39aa <set_oversampling+0x26>
		LOG_ERR(
			"Oversampling is supported for single channel only");
		return -EINVAL;
	}

	switch (sequence->oversampling) {
    398c:	7c43      	ldrb	r3, [r0, #17]
    398e:	2b08      	cmp	r3, #8
    3990:	d80e      	bhi.n	39b0 <set_oversampling+0x2c>
    3992:	e8df f003 	tbb	[pc, r3]
    3996:	0505      	.short	0x0505
    3998:	05050505 	.word	0x05050505
    399c:	0505      	.short	0x0505
    399e:	05          	.byte	0x05
    399f:	00          	.byte	0x00
    p_reg->OVERSAMPLE = oversample;
    39a0:	4a05      	ldr	r2, [pc, #20]	; (39b8 <set_oversampling+0x34>)
    39a2:	f8c2 35f4 	str.w	r3, [r2, #1524]	; 0x5f4
			    sequence->oversampling);
		return -EINVAL;
	}

	nrf_saadc_oversample_set(NRF_SAADC, nrf_oversampling);
	return 0;
    39a6:	2000      	movs	r0, #0
    39a8:	4770      	bx	lr
		return -EINVAL;
    39aa:	f06f 0015 	mvn.w	r0, #21
    39ae:	4770      	bx	lr
	switch (sequence->oversampling) {
    39b0:	f06f 0015 	mvn.w	r0, #21
}
    39b4:	4770      	bx	lr
    39b6:	bf00      	nop
    39b8:	40007000 	.word	0x40007000

000039bc <start_read>:
	return 0;
}

static int start_read(const struct device *dev,
		      const struct adc_sequence *sequence)
{
    39bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    39be:	b083      	sub	sp, #12
	int error;
	uint32_t selected_channels = sequence->channels;
    39c0:	684e      	ldr	r6, [r1, #4]
	uint8_t channel_id;

	/* Signal an error if channel selection is invalid (no channels or
	 * a non-existing one is selected).
	 */
	if (!selected_channels ||
    39c2:	2e00      	cmp	r6, #0
    39c4:	f000 80a3 	beq.w	3b0e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x76>
    39c8:	460d      	mov	r5, r1
    39ca:	f036 03ff 	bics.w	r3, r6, #255	; 0xff
    39ce:	f040 80a1 	bne.w	3b14 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x7c>
	active_channels = 0U;

	/* Enable only the channels selected for the pointed sequence.
	 * Disable all the rest.
	 */
	channel_id = 0U;
    39d2:	2300      	movs	r3, #0
	active_channels = 0U;
    39d4:	461c      	mov	r4, r3
    39d6:	e009      	b.n	39ec <start_read+0x30>
    p_reg->CH[channel].PSELP = pselp;
    39d8:	f103 0251 	add.w	r2, r3, #81	; 0x51
    39dc:	0112      	lsls	r2, r2, #4
    39de:	4950      	ldr	r1, [pc, #320]	; (3b20 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x88>)
    39e0:	2000      	movs	r0, #0
    39e2:	5088      	str	r0, [r1, r2]
			nrf_saadc_channel_pos_input_set(
				NRF_SAADC,
				channel_id,
				NRF_SAADC_INPUT_DISABLED);
		}
	} while (++channel_id < SAADC_CH_NUM);
    39e4:	3301      	adds	r3, #1
    39e6:	b2db      	uxtb	r3, r3
    39e8:	2b07      	cmp	r3, #7
    39ea:	d825      	bhi.n	3a38 <start_read+0x7c>
		if (selected_channels & BIT(channel_id)) {
    39ec:	461a      	mov	r2, r3
    39ee:	fa26 f103 	lsr.w	r1, r6, r3
    39f2:	f011 0f01 	tst.w	r1, #1
    39f6:	d0ef      	beq.n	39d8 <start_read+0x1c>
			if (m_data.positive_inputs[channel_id] == 0U) {
    39f8:	494a      	ldr	r1, [pc, #296]	; (3b24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8c>)
    39fa:	4419      	add	r1, r3
    39fc:	f891 10a8 	ldrb.w	r1, [r1, #168]	; 0xa8
    3a00:	2900      	cmp	r1, #0
    3a02:	f000 808a 	beq.w	3b1a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x82>
				(sequence->oversampling != 0U ?
    3a06:	7c68      	ldrb	r0, [r5, #17]
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
    3a08:	1e01      	subs	r1, r0, #0
    3a0a:	bf18      	it	ne
    3a0c:	2101      	movne	r1, #1

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
    3a0e:	4f44      	ldr	r7, [pc, #272]	; (3b20 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x88>)
    3a10:	eb07 1c03 	add.w	ip, r7, r3, lsl #4
    3a14:	f8dc 0518 	ldr.w	r0, [ip, #1304]	; 0x518
    3a18:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
    3a1c:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    3a20:	f8cc 0518 	str.w	r0, [ip, #1304]	; 0x518
				m_data.positive_inputs[channel_id]);
    3a24:	493f      	ldr	r1, [pc, #252]	; (3b24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8c>)
    3a26:	4419      	add	r1, r3
    3a28:	f891 10a8 	ldrb.w	r1, [r1, #168]	; 0xa8
    p_reg->CH[channel].PSELP = pselp;
    3a2c:	3251      	adds	r2, #81	; 0x51
    3a2e:	0112      	lsls	r2, r2, #4
    3a30:	50b9      	str	r1, [r7, r2]
			++active_channels;
    3a32:	3401      	adds	r4, #1
    3a34:	b2e4      	uxtb	r4, r4
    3a36:	e7d5      	b.n	39e4 <start_read+0x28>

	error = set_resolution(sequence);
    3a38:	4628      	mov	r0, r5
    3a3a:	f7ff ff87 	bl	394c <set_resolution>
	if (error) {
    3a3e:	4606      	mov	r6, r0
    3a40:	b110      	cbz	r0, 3a48 <start_read+0x8c>

	adc_context_start_read(&m_data.ctx, sequence);

	error = adc_context_wait_for_completion(&m_data.ctx);
	return error;
}
    3a42:	4630      	mov	r0, r6
    3a44:	b003      	add	sp, #12
    3a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
	error = set_oversampling(sequence, active_channels);
    3a48:	4621      	mov	r1, r4
    3a4a:	4628      	mov	r0, r5
    3a4c:	f7ff ff9a 	bl	3984 <set_oversampling>
	if (error) {
    3a50:	4606      	mov	r6, r0
    3a52:	2800      	cmp	r0, #0
    3a54:	d1f5      	bne.n	3a42 <start_read+0x86>
	error = check_buffer_size(sequence, active_channels);
    3a56:	4621      	mov	r1, r4
    3a58:	4628      	mov	r0, r5
    3a5a:	f007 fdb2 	bl	b5c2 <check_buffer_size>
	if (error) {
    3a5e:	4606      	mov	r6, r0
    3a60:	2800      	cmp	r0, #0
    3a62:	d1ee      	bne.n	3a42 <start_read+0x86>
			      (nrf_saadc_value_t *)sequence->buffer,
    3a64:	68aa      	ldr	r2, [r5, #8]
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    3a66:	4b2e      	ldr	r3, [pc, #184]	; (3b20 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x88>)
    3a68:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
    p_reg->RESULT.MAXCNT = size;
    3a6c:	f8c3 4630 	str.w	r4, [r3, #1584]	; 0x630
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
    3a70:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 3b24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8c>
    3a74:	f10c 047c 	add.w	r4, ip, #124	; 0x7c
    3a78:	462f      	mov	r7, r5
    3a7a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    3a7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3a7e:	683b      	ldr	r3, [r7, #0]
    3a80:	6023      	str	r3, [r4, #0]
	ctx->status = 0;
    3a82:	2300      	movs	r3, #0
    3a84:	f8cc 3070 	str.w	r3, [ip, #112]	; 0x70

	if (sequence->options) {
    3a88:	682b      	ldr	r3, [r5, #0]
    3a8a:	b153      	cbz	r3, 3aa2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa>
		ctx->options = *sequence->options;
    3a8c:	f10c 0490 	add.w	r4, ip, #144	; 0x90
    3a90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3a92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
    3a96:	f8cc 407c 	str.w	r4, [ip, #124]	; 0x7c
		ctx->sampling_index = 0U;
    3a9a:	2300      	movs	r3, #0
    3a9c:	f8ac 30a0 	strh.w	r3, [ip, #160]	; 0xa0

		if (ctx->options.interval_us != 0U) {
    3aa0:	b990      	cbnz	r0, 3ac8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x30>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
    3aa2:	4820      	ldr	r0, [pc, #128]	; (3b24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8c>)
    3aa4:	f7ff ff30 	bl	3908 <adc_context_start_sampling>
	if (ctx->asynchronous) {
    3aa8:	4b1e      	ldr	r3, [pc, #120]	; (3b24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8c>)
    3aaa:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    3aae:	2b00      	cmp	r3, #0
    3ab0:	d1c7      	bne.n	3a42 <start_read+0x86>
	return z_impl_k_sem_take(sem, timeout);
    3ab2:	4c1c      	ldr	r4, [pc, #112]	; (3b24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8c>)
    3ab4:	f04f 32ff 	mov.w	r2, #4294967295
    3ab8:	f04f 33ff 	mov.w	r3, #4294967295
    3abc:	f104 0058 	add.w	r0, r4, #88	; 0x58
    3ac0:	f004 fc08 	bl	82d4 <z_impl_k_sem_take>
	return ctx->status;
    3ac4:	6f26      	ldr	r6, [r4, #112]	; 0x70
	return error;
    3ac6:	e7bc      	b.n	3a42 <start_read+0x86>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3ac8:	4664      	mov	r4, ip
    3aca:	2200      	movs	r2, #0
    3acc:	f3bf 8f5b 	dmb	ish
    3ad0:	e854 3f00 	ldrex	r3, [r4]
    3ad4:	e844 2100 	strex	r1, r2, [r4]
    3ad8:	2900      	cmp	r1, #0
    3ada:	d1f9      	bne.n	3ad0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x38>
    3adc:	f3bf 8f5b 	dmb	ish
	k_timer_start(&ctx->timer, K_NO_WAIT, K_USEC(ctx->options.interval_us));
    3ae0:	4617      	mov	r7, r2
    3ae2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
			return (t * to_hz + off) / from_hz;
    3ae6:	0c59      	lsrs	r1, r3, #17
    3ae8:	03d8      	lsls	r0, r3, #15
    3aea:	f8df c040 	ldr.w	ip, [pc, #64]	; 3b2c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x94>
    3aee:	4a0e      	ldr	r2, [pc, #56]	; (3b28 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x90>)
    3af0:	2300      	movs	r3, #0
    3af2:	eb10 000c 	adds.w	r0, r0, ip
    3af6:	4179      	adcs	r1, r7
    3af8:	f7fd fa3a 	bl	f70 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
    3afc:	9000      	str	r0, [sp, #0]
    3afe:	9101      	str	r1, [sp, #4]
    3b00:	463a      	mov	r2, r7
    3b02:	463b      	mov	r3, r7
    3b04:	f104 0008 	add.w	r0, r4, #8
    3b08:	f006 fca2 	bl	a450 <z_impl_k_timer_start>
}
    3b0c:	e7cc      	b.n	3aa8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10>
		return -EINVAL;
    3b0e:	f06f 0615 	mvn.w	r6, #21
    3b12:	e796      	b.n	3a42 <start_read+0x86>
    3b14:	f06f 0615 	mvn.w	r6, #21
    3b18:	e793      	b.n	3a42 <start_read+0x86>
				return -EINVAL;
    3b1a:	f06f 0615 	mvn.w	r6, #21
    3b1e:	e790      	b.n	3a42 <start_read+0x86>
    3b20:	40007000 	.word	0x40007000
    3b24:	20000000 	.word	0x20000000
    3b28:	000f4240 	.word	0x000f4240
    3b2c:	000f423f 	.word	0x000f423f

00003b30 <adc_nrfx_read_async>:
#ifdef CONFIG_ADC_ASYNC
/* Implementation of the ADC driver API function: adc_read_async. */
static int adc_nrfx_read_async(const struct device *dev,
			       const struct adc_sequence *sequence,
			       struct k_poll_signal *async)
{
    3b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b32:	4605      	mov	r5, r0
    3b34:	460e      	mov	r6, r1
    3b36:	4617      	mov	r7, r2
	return z_impl_k_sem_take(sem, timeout);
    3b38:	4c0d      	ldr	r4, [pc, #52]	; (3b70 <adc_nrfx_read_async+0x40>)
    3b3a:	f04f 32ff 	mov.w	r2, #4294967295
    3b3e:	f04f 33ff 	mov.w	r3, #4294967295
    3b42:	f104 0040 	add.w	r0, r4, #64	; 0x40
    3b46:	f004 fbc5 	bl	82d4 <z_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
    3b4a:	2301      	movs	r3, #1
    3b4c:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
	ctx->signal = signal;
    3b50:	6767      	str	r7, [r4, #116]	; 0x74
	int error;

	adc_context_lock(&m_data.ctx, true, async);
	error = start_read(dev, sequence);
    3b52:	4631      	mov	r1, r6
    3b54:	4628      	mov	r0, r5
    3b56:	f7ff ff31 	bl	39bc <start_read>
    3b5a:	4605      	mov	r5, r0
	if (ctx->asynchronous && (status == 0)) {
    3b5c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    3b60:	b103      	cbz	r3, 3b64 <adc_nrfx_read_async+0x34>
    3b62:	b110      	cbz	r0, 3b6a <adc_nrfx_read_async+0x3a>
	z_impl_k_sem_give(sem);
    3b64:	4803      	ldr	r0, [pc, #12]	; (3b74 <adc_nrfx_read_async+0x44>)
    3b66:	f004 fb6d 	bl	8244 <z_impl_k_sem_give>
	adc_context_release(&m_data.ctx, error);

	return error;
}
    3b6a:	4628      	mov	r0, r5
    3b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3b6e:	bf00      	nop
    3b70:	20000000 	.word	0x20000000
    3b74:	20000040 	.word	0x20000040

00003b78 <init_saadc>:
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
    3b78:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3b7a:	4b0e      	ldr	r3, [pc, #56]	; (3bb4 <init_saadc+0x3c>)
    3b7c:	2400      	movs	r4, #0
    3b7e:	601c      	str	r4, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    3b80:	681b      	ldr	r3, [r3, #0]
    3b82:	4b0d      	ldr	r3, [pc, #52]	; (3bb8 <init_saadc+0x40>)
    3b84:	601c      	str	r4, [r3, #0]
    3b86:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3b88:	4b0c      	ldr	r3, [pc, #48]	; (3bbc <init_saadc+0x44>)
    3b8a:	2212      	movs	r2, #18
    3b8c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
    3b90:	2007      	movs	r0, #7
    3b92:	f7ff f90b 	bl	2dac <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3b96:	4622      	mov	r2, r4
    3b98:	2101      	movs	r1, #1
    3b9a:	2007      	movs	r0, #7
    3b9c:	f7ff f924 	bl	2de8 <z_arm_irq_priority_set>
	return sem->count;
    3ba0:	4b07      	ldr	r3, [pc, #28]	; (3bc0 <init_saadc+0x48>)
    3ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	if (!k_sem_count_get(&ctx->lock)) {
    3ba4:	b10b      	cbz	r3, 3baa <init_saadc+0x32>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
    3ba6:	2000      	movs	r0, #0
    3ba8:	bd10      	pop	{r4, pc}
    3baa:	4806      	ldr	r0, [pc, #24]	; (3bc4 <init_saadc+0x4c>)
    3bac:	f004 fb4a 	bl	8244 <z_impl_k_sem_give>
}
    3bb0:	e7f9      	b.n	3ba6 <init_saadc+0x2e>
    3bb2:	bf00      	nop
    3bb4:	40007104 	.word	0x40007104
    3bb8:	40007110 	.word	0x40007110
    3bbc:	40007000 	.word	0x40007000
    3bc0:	20000000 	.word	0x20000000
    3bc4:	20000040 	.word	0x20000040

00003bc8 <saadc_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3bc8:	4b3e      	ldr	r3, [pc, #248]	; (3cc4 <saadc_irq_handler+0xfc>)
    3bca:	681b      	ldr	r3, [r3, #0]
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
    3bcc:	b97b      	cbnz	r3, 3bee <saadc_irq_handler+0x26>
    3bce:	4b3e      	ldr	r3, [pc, #248]	; (3cc8 <saadc_irq_handler+0x100>)
    3bd0:	681b      	ldr	r3, [r3, #0]
	} else if (nrf_saadc_event_check(NRF_SAADC,
    3bd2:	2b00      	cmp	r3, #0
    3bd4:	d074      	beq.n	3cc0 <saadc_irq_handler+0xf8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3bd6:	4b3c      	ldr	r3, [pc, #240]	; (3cc8 <saadc_irq_handler+0x100>)
    3bd8:	2200      	movs	r2, #0
    3bda:	601a      	str	r2, [r3, #0]
    3bdc:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3bde:	2301      	movs	r3, #1
    3be0:	4a3a      	ldr	r2, [pc, #232]	; (3ccc <saadc_irq_handler+0x104>)
    3be2:	6013      	str	r3, [r2, #0]
    3be4:	3a08      	subs	r2, #8
    3be6:	6013      	str	r3, [r2, #0]
    3be8:	3204      	adds	r2, #4
    3bea:	6013      	str	r3, [r2, #0]
}
    3bec:	4770      	bx	lr
{
    3bee:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3bf0:	4a34      	ldr	r2, [pc, #208]	; (3cc4 <saadc_irq_handler+0xfc>)
    3bf2:	2300      	movs	r3, #0
    3bf4:	6013      	str	r3, [r2, #0]
    3bf6:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3bf8:	4a34      	ldr	r2, [pc, #208]	; (3ccc <saadc_irq_handler+0x104>)
    3bfa:	2101      	movs	r1, #1
    3bfc:	6011      	str	r1, [r2, #0]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
    3bfe:	3a08      	subs	r2, #8
    3c00:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
    3c04:	4b32      	ldr	r3, [pc, #200]	; (3cd0 <saadc_irq_handler+0x108>)
    3c06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    3c08:	b323      	cbz	r3, 3c54 <saadc_irq_handler+0x8c>
		adc_sequence_callback callback = ctx->options.callback;
    3c0a:	4b31      	ldr	r3, [pc, #196]	; (3cd0 <saadc_irq_handler+0x108>)
    3c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
    3c10:	b143      	cbz	r3, 3c24 <saadc_irq_handler+0x5c>
			action = callback(dev,
    3c12:	492f      	ldr	r1, [pc, #188]	; (3cd0 <saadc_irq_handler+0x108>)
    3c14:	f8b1 20a0 	ldrh.w	r2, [r1, #160]	; 0xa0
    3c18:	317c      	adds	r1, #124	; 0x7c
    3c1a:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
    3c1c:	2801      	cmp	r0, #1
    3c1e:	d00f      	beq.n	3c40 <saadc_irq_handler+0x78>
    3c20:	2802      	cmp	r0, #2
    3c22:	d010      	beq.n	3c46 <saadc_irq_handler+0x7e>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
    3c24:	4a2a      	ldr	r2, [pc, #168]	; (3cd0 <saadc_irq_handler+0x108>)
    3c26:	f8b2 30a0 	ldrh.w	r3, [r2, #160]	; 0xa0
			    ctx->options.extra_samplings) {
    3c2a:	f8b2 209c 	ldrh.w	r2, [r2, #156]	; 0x9c
			if (ctx->sampling_index <
    3c2e:	4293      	cmp	r3, r2
    3c30:	d218      	bcs.n	3c64 <saadc_irq_handler+0x9c>
				++ctx->sampling_index;
    3c32:	3301      	adds	r3, #1
    3c34:	4a26      	ldr	r2, [pc, #152]	; (3cd0 <saadc_irq_handler+0x108>)
    3c36:	f8a2 30a0 	strh.w	r3, [r2, #160]	; 0xa0
		bool repeat = false;
    3c3a:	2100      	movs	r1, #0
		bool finish = false;
    3c3c:	460b      	mov	r3, r1
    3c3e:	e004      	b.n	3c4a <saadc_irq_handler+0x82>
		switch (action) {
    3c40:	2101      	movs	r1, #1
    3c42:	2300      	movs	r3, #0
    3c44:	e001      	b.n	3c4a <saadc_irq_handler+0x82>
		bool repeat = false;
    3c46:	2100      	movs	r1, #0
			finish = true;
    3c48:	2301      	movs	r3, #1
			} else {
				finish = true;
			}
		}

		if (!finish) {
    3c4a:	b173      	cbz	r3, 3c6a <saadc_irq_handler+0xa2>
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
    3c4c:	4b20      	ldr	r3, [pc, #128]	; (3cd0 <saadc_irq_handler+0x108>)
    3c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    3c52:	bb3b      	cbnz	r3, 3ca4 <saadc_irq_handler+0xdc>
	if (ctx->asynchronous) {
    3c54:	4b1e      	ldr	r3, [pc, #120]	; (3cd0 <saadc_irq_handler+0x108>)
    3c56:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    3c5a:	bb3b      	cbnz	r3, 3cac <saadc_irq_handler+0xe4>
	z_impl_k_sem_give(sem);
    3c5c:	481d      	ldr	r0, [pc, #116]	; (3cd4 <saadc_irq_handler+0x10c>)
    3c5e:	f004 faf1 	bl	8244 <z_impl_k_sem_give>
}
    3c62:	bd10      	pop	{r4, pc}
		bool repeat = false;
    3c64:	2100      	movs	r1, #0
				finish = true;
    3c66:	2301      	movs	r3, #1
    3c68:	e7ef      	b.n	3c4a <saadc_irq_handler+0x82>
			adc_context_update_buffer_pointer(ctx, repeat);
    3c6a:	4c19      	ldr	r4, [pc, #100]	; (3cd0 <saadc_irq_handler+0x108>)
    3c6c:	4620      	mov	r0, r4
    3c6e:	f7ff fe5f 	bl	3930 <adc_context_update_buffer_pointer>
			if (ctx->options.interval_us == 0U) {
    3c72:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    3c76:	b91b      	cbnz	r3, 3c80 <saadc_irq_handler+0xb8>
				adc_context_start_sampling(ctx);
    3c78:	4620      	mov	r0, r4
    3c7a:	f7ff fe45 	bl	3908 <adc_context_start_sampling>
    3c7e:	e7f0      	b.n	3c62 <saadc_irq_handler+0x9a>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    3c80:	4b13      	ldr	r3, [pc, #76]	; (3cd0 <saadc_irq_handler+0x108>)
    3c82:	f3bf 8f5b 	dmb	ish
    3c86:	e853 2f00 	ldrex	r2, [r3]
    3c8a:	1e51      	subs	r1, r2, #1
    3c8c:	e843 1000 	strex	r0, r1, [r3]
    3c90:	2800      	cmp	r0, #0
    3c92:	d1f8      	bne.n	3c86 <saadc_irq_handler+0xbe>
    3c94:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
    3c98:	2a01      	cmp	r2, #1
    3c9a:	dde2      	ble.n	3c62 <saadc_irq_handler+0x9a>
				adc_context_start_sampling(ctx);
    3c9c:	4618      	mov	r0, r3
    3c9e:	f7ff fe33 	bl	3908 <adc_context_start_sampling>
			return;
    3ca2:	e7de      	b.n	3c62 <saadc_irq_handler+0x9a>
	z_impl_k_timer_stop(timer);
    3ca4:	480c      	ldr	r0, [pc, #48]	; (3cd8 <saadc_irq_handler+0x110>)
    3ca6:	f008 f92a 	bl	befe <z_impl_k_timer_stop>
}
    3caa:	e7d3      	b.n	3c54 <saadc_irq_handler+0x8c>
		if (ctx->signal) {
    3cac:	4b08      	ldr	r3, [pc, #32]	; (3cd0 <saadc_irq_handler+0x108>)
    3cae:	6f58      	ldr	r0, [r3, #116]	; 0x74
    3cb0:	b110      	cbz	r0, 3cb8 <saadc_irq_handler+0xf0>
	return z_impl_k_poll_signal_raise(sig, result);
    3cb2:	2100      	movs	r1, #0
    3cb4:	f006 fc8c 	bl	a5d0 <z_impl_k_poll_signal_raise>
	z_impl_k_sem_give(sem);
    3cb8:	4808      	ldr	r0, [pc, #32]	; (3cdc <saadc_irq_handler+0x114>)
    3cba:	f004 fac3 	bl	8244 <z_impl_k_sem_give>
		return;
    3cbe:	e7d0      	b.n	3c62 <saadc_irq_handler+0x9a>
    3cc0:	4770      	bx	lr
    3cc2:	bf00      	nop
    3cc4:	40007104 	.word	0x40007104
    3cc8:	40007110 	.word	0x40007110
    3ccc:	40007008 	.word	0x40007008
    3cd0:	20000000 	.word	0x20000000
    3cd4:	20000058 	.word	0x20000058
    3cd8:	20000008 	.word	0x20000008
    3cdc:	20000040 	.word	0x20000040

00003ce0 <adc_nrfx_read>:
{
    3ce0:	b570      	push	{r4, r5, r6, lr}
    3ce2:	4605      	mov	r5, r0
    3ce4:	460e      	mov	r6, r1
	return z_impl_k_sem_take(sem, timeout);
    3ce6:	4c0d      	ldr	r4, [pc, #52]	; (3d1c <adc_nrfx_read+0x3c>)
    3ce8:	f04f 32ff 	mov.w	r2, #4294967295
    3cec:	f04f 33ff 	mov.w	r3, #4294967295
    3cf0:	f104 0040 	add.w	r0, r4, #64	; 0x40
    3cf4:	f004 faee 	bl	82d4 <z_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
    3cf8:	2300      	movs	r3, #0
    3cfa:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
	ctx->signal = signal;
    3cfe:	6763      	str	r3, [r4, #116]	; 0x74
	error = start_read(dev, sequence);
    3d00:	4631      	mov	r1, r6
    3d02:	4628      	mov	r0, r5
    3d04:	f7ff fe5a 	bl	39bc <start_read>
    3d08:	4605      	mov	r5, r0
	if (ctx->asynchronous && (status == 0)) {
    3d0a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    3d0e:	b103      	cbz	r3, 3d12 <adc_nrfx_read+0x32>
    3d10:	b110      	cbz	r0, 3d18 <adc_nrfx_read+0x38>
	z_impl_k_sem_give(sem);
    3d12:	4803      	ldr	r0, [pc, #12]	; (3d20 <adc_nrfx_read+0x40>)
    3d14:	f004 fa96 	bl	8244 <z_impl_k_sem_give>
}
    3d18:	4628      	mov	r0, r5
    3d1a:	bd70      	pop	{r4, r5, r6, pc}
    3d1c:	20000000 	.word	0x20000000
    3d20:	20000040 	.word	0x20000040

00003d24 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    3d24:	4800      	ldr	r0, [pc, #0]	; (3d28 <get_hf_flags+0x4>)
    3d26:	4770      	bx	lr
    3d28:	20000d00 	.word	0x20000d00

00003d2c <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    3d2c:	4b01      	ldr	r3, [pc, #4]	; (3d34 <get_subsys+0x8>)
    3d2e:	1ac0      	subs	r0, r0, r3

	return (clock_control_subsys_t)offset;
}
    3d30:	1140      	asrs	r0, r0, #5
    3d32:	4770      	bx	lr
    3d34:	20000cb8 	.word	0x20000cb8

00003d38 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3d38:	b530      	push	{r4, r5, lr}
    3d3a:	b083      	sub	sp, #12
    3d3c:	4605      	mov	r5, r0
    3d3e:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3d40:	f7ff fff4 	bl	3d2c <get_subsys>
    3d44:	4601      	mov	r1, r0
    3d46:	2340      	movs	r3, #64	; 0x40
    3d48:	9300      	str	r3, [sp, #0]
    3d4a:	4623      	mov	r3, r4
    3d4c:	4a05      	ldr	r2, [pc, #20]	; (3d64 <onoff_start+0x2c>)
    3d4e:	4806      	ldr	r0, [pc, #24]	; (3d68 <onoff_start+0x30>)
    3d50:	f007 fcc7 	bl	b6e2 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    3d54:	1e01      	subs	r1, r0, #0
    3d56:	db01      	blt.n	3d5c <onoff_start+0x24>
		notify(mgr, err);
	}
}
    3d58:	b003      	add	sp, #12
    3d5a:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    3d5c:	4628      	mov	r0, r5
    3d5e:	47a0      	blx	r4
}
    3d60:	e7fa      	b.n	3d58 <onoff_start+0x20>
    3d62:	bf00      	nop
    3d64:	0000b72b 	.word	0x0000b72b
    3d68:	0000c050 	.word	0x0000c050

00003d6c <generic_hfclk_stop>:
{
    3d6c:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3d6e:	4b0a      	ldr	r3, [pc, #40]	; (3d98 <generic_hfclk_stop+0x2c>)
    3d70:	f3bf 8f5b 	dmb	ish
    3d74:	e853 2f00 	ldrex	r2, [r3]
    3d78:	f022 0102 	bic.w	r1, r2, #2
    3d7c:	e843 1000 	strex	r0, r1, [r3]
    3d80:	2800      	cmp	r0, #0
    3d82:	d1f7      	bne.n	3d74 <generic_hfclk_stop+0x8>
    3d84:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    3d88:	f012 0f01 	tst.w	r2, #1
    3d8c:	d000      	beq.n	3d90 <generic_hfclk_stop+0x24>
}
    3d8e:	bd08      	pop	{r3, pc}
	hfclk_stop();
    3d90:	f007 fcdd 	bl	b74e <hfclk_stop>
    3d94:	e7fb      	b.n	3d8e <generic_hfclk_stop+0x22>
    3d96:	bf00      	nop
    3d98:	20000d10 	.word	0x20000d10

00003d9c <generic_hfclk_start>:
{
    3d9c:	b510      	push	{r4, lr}
	__asm__ volatile(
    3d9e:	f04f 0320 	mov.w	r3, #32
    3da2:	f3ef 8411 	mrs	r4, BASEPRI
    3da6:	f383 8812 	msr	BASEPRI_MAX, r3
    3daa:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    3dae:	4a13      	ldr	r2, [pc, #76]	; (3dfc <generic_hfclk_start+0x60>)
    3db0:	6813      	ldr	r3, [r2, #0]
    3db2:	f043 0302 	orr.w	r3, r3, #2
    3db6:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    3db8:	f013 0f01 	tst.w	r3, #1
    3dbc:	d108      	bne.n	3dd0 <generic_hfclk_start+0x34>
	bool already_started = false;
    3dbe:	2300      	movs	r3, #0
	__asm__ volatile(
    3dc0:	f384 8811 	msr	BASEPRI, r4
    3dc4:	f3bf 8f6f 	isb	sy
	if (already_started) {
    3dc8:	b99b      	cbnz	r3, 3df2 <generic_hfclk_start+0x56>
	hfclk_start();
    3dca:	f007 fcb6 	bl	b73a <hfclk_start>
}
    3dce:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3dd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3dd4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3dd8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    3ddc:	f012 0f01 	tst.w	r2, #1
    3de0:	d101      	bne.n	3de6 <generic_hfclk_start+0x4a>
	bool already_started = false;
    3de2:	2300      	movs	r3, #0
    3de4:	e7ec      	b.n	3dc0 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    3de6:	f7ff ff9d 	bl	3d24 <get_hf_flags>
    3dea:	f007 fc55 	bl	b698 <set_on_state>
			already_started = true;
    3dee:	2301      	movs	r3, #1
    3df0:	e7e6      	b.n	3dc0 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    3df2:	2100      	movs	r1, #0
    3df4:	4802      	ldr	r0, [pc, #8]	; (3e00 <generic_hfclk_start+0x64>)
    3df6:	f007 fc62 	bl	b6be <clkstarted_handle>
		return;
    3dfa:	e7e8      	b.n	3dce <generic_hfclk_start+0x32>
    3dfc:	20000d10 	.word	0x20000d10
    3e00:	0000c050 	.word	0x0000c050

00003e04 <get_status>:
{
    3e04:	b570      	push	{r4, r5, r6, lr}
    3e06:	4605      	mov	r5, r0
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    3e08:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3e0a:	2c01      	cmp	r4, #1
    3e0c:	d807      	bhi.n	3e1e <get_status+0x1a>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    3e0e:	4621      	mov	r1, r4
    3e10:	4628      	mov	r0, r5
    3e12:	f007 fbf9 	bl	b608 <get_sub_data>
    3e16:	6880      	ldr	r0, [r0, #8]
}
    3e18:	f000 0007 	and.w	r0, r0, #7
    3e1c:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3e1e:	4e06      	ldr	r6, [pc, #24]	; (3e38 <get_status+0x34>)
    3e20:	2379      	movs	r3, #121	; 0x79
    3e22:	4632      	mov	r2, r6
    3e24:	4905      	ldr	r1, [pc, #20]	; (3e3c <get_status+0x38>)
    3e26:	4806      	ldr	r0, [pc, #24]	; (3e40 <get_status+0x3c>)
    3e28:	f007 f91f 	bl	b06a <printk>
    3e2c:	2179      	movs	r1, #121	; 0x79
    3e2e:	4630      	mov	r0, r6
    3e30:	f007 fa74 	bl	b31c <assert_post_action>
    3e34:	e7eb      	b.n	3e0e <get_status+0xa>
    3e36:	bf00      	nop
    3e38:	0000ca34 	.word	0x0000ca34
    3e3c:	0000ca74 	.word	0x0000ca74
    3e40:	0000c46c 	.word	0x0000c46c

00003e44 <stop>:
{
    3e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3e48:	4607      	mov	r7, r0
    3e4a:	4616      	mov	r6, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    3e4c:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    3e4e:	4621      	mov	r1, r4
    3e50:	f007 fbda 	bl	b608 <get_sub_data>
    3e54:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3e56:	2c01      	cmp	r4, #1
    3e58:	d80f      	bhi.n	3e7a <stop+0x36>
	err = set_off_state(&subdata->flags, ctx);
    3e5a:	4631      	mov	r1, r6
    3e5c:	f105 0008 	add.w	r0, r5, #8
    3e60:	f007 fbe1 	bl	b626 <set_off_state>
	if (err < 0) {
    3e64:	2800      	cmp	r0, #0
    3e66:	db06      	blt.n	3e76 <stop+0x32>
	get_sub_config(dev, type)->stop();
    3e68:	4621      	mov	r1, r4
    3e6a:	4638      	mov	r0, r7
    3e6c:	f007 fbd3 	bl	b616 <get_sub_config>
    3e70:	6843      	ldr	r3, [r0, #4]
    3e72:	4798      	blx	r3
	return 0;
    3e74:	2000      	movs	r0, #0
}
    3e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3e7a:	f8df 8024 	ldr.w	r8, [pc, #36]	; 3ea0 <stop+0x5c>
    3e7e:	f240 134d 	movw	r3, #333	; 0x14d
    3e82:	4642      	mov	r2, r8
    3e84:	4904      	ldr	r1, [pc, #16]	; (3e98 <stop+0x54>)
    3e86:	4805      	ldr	r0, [pc, #20]	; (3e9c <stop+0x58>)
    3e88:	f007 f8ef 	bl	b06a <printk>
    3e8c:	f240 114d 	movw	r1, #333	; 0x14d
    3e90:	4640      	mov	r0, r8
    3e92:	f007 fa43 	bl	b31c <assert_post_action>
    3e96:	e7e0      	b.n	3e5a <stop+0x16>
    3e98:	0000ca74 	.word	0x0000ca74
    3e9c:	0000c46c 	.word	0x0000c46c
    3ea0:	0000ca34 	.word	0x0000ca34

00003ea4 <onoff_stop>:
{
    3ea4:	b538      	push	{r3, r4, r5, lr}
    3ea6:	4605      	mov	r5, r0
    3ea8:	460c      	mov	r4, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    3eaa:	f7ff ff3f 	bl	3d2c <get_subsys>
    3eae:	4601      	mov	r1, r0
    3eb0:	2240      	movs	r2, #64	; 0x40
    3eb2:	4803      	ldr	r0, [pc, #12]	; (3ec0 <onoff_stop+0x1c>)
    3eb4:	f7ff ffc6 	bl	3e44 <stop>
    3eb8:	4601      	mov	r1, r0
	notify(mgr, res);
    3eba:	4628      	mov	r0, r5
    3ebc:	47a0      	blx	r4
}
    3ebe:	bd38      	pop	{r3, r4, r5, pc}
    3ec0:	0000c050 	.word	0x0000c050

00003ec4 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    3ec4:	b510      	push	{r4, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    3ec6:	2801      	cmp	r0, #1
    3ec8:	d01d      	beq.n	3f06 <clock_event_handler+0x42>
    3eca:	2803      	cmp	r0, #3
    3ecc:	d020      	beq.n	3f10 <clock_event_handler+0x4c>
    3ece:	b168      	cbz	r0, 3eec <clock_event_handler+0x28>
			/* Should not happen when calibration is disabled. */
			__ASSERT_NO_MSG(false);
		}
		break;
	default:
		__ASSERT_NO_MSG(0);
    3ed0:	4c16      	ldr	r4, [pc, #88]	; (3f2c <clock_event_handler+0x68>)
    3ed2:	f240 2362 	movw	r3, #610	; 0x262
    3ed6:	4622      	mov	r2, r4
    3ed8:	4915      	ldr	r1, [pc, #84]	; (3f30 <clock_event_handler+0x6c>)
    3eda:	4816      	ldr	r0, [pc, #88]	; (3f34 <clock_event_handler+0x70>)
    3edc:	f007 f8c5 	bl	b06a <printk>
    3ee0:	f240 2162 	movw	r1, #610	; 0x262
    3ee4:	4620      	mov	r0, r4
    3ee6:	f007 fa19 	bl	b31c <assert_post_action>
		break;
	}
}
    3eea:	e010      	b.n	3f0e <clock_event_handler+0x4a>
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    3eec:	2100      	movs	r1, #0
    3eee:	4812      	ldr	r0, [pc, #72]	; (3f38 <clock_event_handler+0x74>)
    3ef0:	f007 fb8a 	bl	b608 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    3ef4:	6883      	ldr	r3, [r0, #8]
    3ef6:	f013 0f07 	tst.w	r3, #7
    3efa:	d108      	bne.n	3f0e <clock_event_handler+0x4a>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    3efc:	2100      	movs	r1, #0
    3efe:	480e      	ldr	r0, [pc, #56]	; (3f38 <clock_event_handler+0x74>)
    3f00:	f007 fbdd 	bl	b6be <clkstarted_handle>
    3f04:	e003      	b.n	3f0e <clock_event_handler+0x4a>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    3f06:	2101      	movs	r1, #1
    3f08:	480b      	ldr	r0, [pc, #44]	; (3f38 <clock_event_handler+0x74>)
    3f0a:	f007 fbd8 	bl	b6be <clkstarted_handle>
}
    3f0e:	bd10      	pop	{r4, pc}
			__ASSERT_NO_MSG(false);
    3f10:	4c06      	ldr	r4, [pc, #24]	; (3f2c <clock_event_handler+0x68>)
    3f12:	f240 235e 	movw	r3, #606	; 0x25e
    3f16:	4622      	mov	r2, r4
    3f18:	4905      	ldr	r1, [pc, #20]	; (3f30 <clock_event_handler+0x6c>)
    3f1a:	4806      	ldr	r0, [pc, #24]	; (3f34 <clock_event_handler+0x70>)
    3f1c:	f007 f8a5 	bl	b06a <printk>
    3f20:	f240 215e 	movw	r1, #606	; 0x25e
    3f24:	4620      	mov	r0, r4
    3f26:	f007 f9f9 	bl	b31c <assert_post_action>
		break;
    3f2a:	e7f0      	b.n	3f0e <clock_event_handler+0x4a>
    3f2c:	0000ca34 	.word	0x0000ca34
    3f30:	0000c3e8 	.word	0x0000c3e8
    3f34:	0000c46c 	.word	0x0000c46c
    3f38:	0000c050 	.word	0x0000c050

00003f3c <api_blocking_start>:
{
    3f3c:	b500      	push	{lr}
    3f3e:	b087      	sub	sp, #28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3f40:	f8cd d000 	str.w	sp, [sp]
    3f44:	f8cd d004 	str.w	sp, [sp, #4]
    3f48:	2300      	movs	r3, #0
    3f4a:	9302      	str	r3, [sp, #8]
    3f4c:	2301      	movs	r3, #1
    3f4e:	9303      	str	r3, [sp, #12]
    3f50:	ab04      	add	r3, sp, #16
    3f52:	9304      	str	r3, [sp, #16]
    3f54:	9305      	str	r3, [sp, #20]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3f56:	466b      	mov	r3, sp
    3f58:	4a06      	ldr	r2, [pc, #24]	; (3f74 <api_blocking_start+0x38>)
    3f5a:	f007 fbde 	bl	b71a <api_start>
	if (err < 0) {
    3f5e:	2800      	cmp	r0, #0
    3f60:	db05      	blt.n	3f6e <api_blocking_start+0x32>
	return z_impl_k_sem_take(sem, timeout);
    3f62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3f66:	2300      	movs	r3, #0
    3f68:	4668      	mov	r0, sp
    3f6a:	f004 f9b3 	bl	82d4 <z_impl_k_sem_take>
}
    3f6e:	b007      	add	sp, #28
    3f70:	f85d fb04 	ldr.w	pc, [sp], #4
    3f74:	0000b76d 	.word	0x0000b76d

00003f78 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    3f78:	b570      	push	{r4, r5, r6, lr}
    3f7a:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3f7c:	2200      	movs	r2, #0
    3f7e:	2101      	movs	r1, #1
    3f80:	4610      	mov	r0, r2
    3f82:	f7fe ff31 	bl	2de8 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    3f86:	2000      	movs	r0, #0
    3f88:	f7fe ff10 	bl	2dac <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    3f8c:	4811      	ldr	r0, [pc, #68]	; (3fd4 <clk_init+0x5c>)
    3f8e:	f001 fcf3 	bl	5978 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    3f92:	4b11      	ldr	r3, [pc, #68]	; (3fd8 <clk_init+0x60>)
    3f94:	4298      	cmp	r0, r3
    3f96:	d11a      	bne.n	3fce <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    3f98:	f001 fd16 	bl	59c8 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    3f9c:	2400      	movs	r4, #0
    3f9e:	e003      	b.n	3fa8 <clk_init+0x30>
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3fa0:	2301      	movs	r3, #1
    3fa2:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    3fa4:	441c      	add	r4, r3
    3fa6:	b2e4      	uxtb	r4, r4
	for (enum clock_control_nrf_type i = 0;
    3fa8:	2c01      	cmp	r4, #1
    3faa:	d80e      	bhi.n	3fca <clk_init+0x52>
						get_sub_data(dev, i);
    3fac:	4621      	mov	r1, r4
    3fae:	4630      	mov	r0, r6
    3fb0:	f007 fb2a 	bl	b608 <get_sub_data>
    3fb4:	4605      	mov	r5, r0
		err = onoff_manager_init(get_onoff_manager(dev, i),
    3fb6:	4621      	mov	r1, r4
    3fb8:	4630      	mov	r0, r6
    3fba:	f007 fb30 	bl	b61e <get_onoff_manager>
    3fbe:	4907      	ldr	r1, [pc, #28]	; (3fdc <clk_init+0x64>)
    3fc0:	f007 f8ef 	bl	b1a2 <onoff_manager_init>
		if (err < 0) {
    3fc4:	2800      	cmp	r0, #0
    3fc6:	daeb      	bge.n	3fa0 <clk_init+0x28>
    3fc8:	e000      	b.n	3fcc <clk_init+0x54>
	}

	return 0;
    3fca:	2000      	movs	r0, #0
}
    3fcc:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    3fce:	f06f 0004 	mvn.w	r0, #4
    3fd2:	e7fb      	b.n	3fcc <clk_init+0x54>
    3fd4:	00003ec5 	.word	0x00003ec5
    3fd8:	0bad0000 	.word	0x0bad0000
    3fdc:	0000cad4 	.word	0x0000cad4

00003fe0 <lfclk_spinwait>:
{
    3fe0:	b570      	push	{r4, r5, r6, lr}
    3fe2:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    3fe4:	2801      	cmp	r0, #1
    3fe6:	d107      	bne.n	3ff8 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    3fe8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3fec:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    3ff0:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    3ff4:	2b01      	cmp	r3, #1
    3ff6:	d058      	beq.n	40aa <lfclk_spinwait+0xca>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3ff8:	f007 fee5 	bl	bdc6 <k_is_in_isr>
    3ffc:	b928      	cbnz	r0, 400a <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
    3ffe:	4b2e      	ldr	r3, [pc, #184]	; (40b8 <lfclk_spinwait+0xd8>)
    4000:	781b      	ldrb	r3, [r3, #0]
    4002:	2b00      	cmp	r3, #0
    4004:	d041      	beq.n	408a <lfclk_spinwait+0xaa>
    4006:	2300      	movs	r3, #0
    4008:	e000      	b.n	400c <lfclk_spinwait+0x2c>
    400a:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    400c:	461c      	mov	r4, r3
    400e:	2b00      	cmp	r3, #0
    4010:	d03d      	beq.n	408e <lfclk_spinwait+0xae>
	__asm__ volatile(
    4012:	f04f 0320 	mov.w	r3, #32
    4016:	f3ef 8611 	mrs	r6, BASEPRI
    401a:	f383 8812 	msr	BASEPRI_MAX, r3
    401e:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    4022:	b924      	cbnz	r4, 402e <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
    4024:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4028:	2202      	movs	r2, #2
    402a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    402e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4032:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4036:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    403a:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    403e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    4042:	d12b      	bne.n	409c <lfclk_spinwait+0xbc>
    return false;
    4044:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    4046:	b11a      	cbz	r2, 4050 <lfclk_spinwait+0x70>
    4048:	2b01      	cmp	r3, #1
    404a:	d029      	beq.n	40a0 <lfclk_spinwait+0xc0>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    404c:	2d01      	cmp	r5, #1
    404e:	d027      	beq.n	40a0 <lfclk_spinwait+0xc0>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    4050:	b1fc      	cbz	r4, 4092 <lfclk_spinwait+0xb2>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    4052:	4630      	mov	r0, r6
    4054:	f7fe fea0 	bl	2d98 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    4058:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    405c:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    4060:	2b00      	cmp	r3, #0
    4062:	d1e4      	bne.n	402e <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4064:	4b15      	ldr	r3, [pc, #84]	; (40bc <lfclk_spinwait+0xdc>)
    4066:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    4068:	2b00      	cmp	r3, #0
    406a:	d0e0      	beq.n	402e <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    406c:	4b13      	ldr	r3, [pc, #76]	; (40bc <lfclk_spinwait+0xdc>)
    406e:	2200      	movs	r2, #0
    4070:	601a      	str	r2, [r3, #0]
    4072:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    4074:	2301      	movs	r3, #1
    4076:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    407a:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    407e:	4a10      	ldr	r2, [pc, #64]	; (40c0 <lfclk_spinwait+0xe0>)
    4080:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4084:	4a0f      	ldr	r2, [pc, #60]	; (40c4 <lfclk_spinwait+0xe4>)
    4086:	6013      	str	r3, [r2, #0]
}
    4088:	e7d1      	b.n	402e <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    408a:	2301      	movs	r3, #1
    408c:	e7be      	b.n	400c <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
    408e:	2600      	movs	r6, #0
    4090:	e7c7      	b.n	4022 <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
    4092:	2021      	movs	r0, #33	; 0x21
    4094:	2100      	movs	r1, #0
    4096:	f005 fbf7 	bl	9888 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    409a:	e7dd      	b.n	4058 <lfclk_spinwait+0x78>
                return true;
    409c:	2201      	movs	r2, #1
    409e:	e7d2      	b.n	4046 <lfclk_spinwait+0x66>
	if (isr_mode) {
    40a0:	b124      	cbz	r4, 40ac <lfclk_spinwait+0xcc>
	__asm__ volatile(
    40a2:	f386 8811 	msr	BASEPRI, r6
    40a6:	f3bf 8f6f 	isb	sy
}
    40aa:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    40ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    40b0:	2202      	movs	r2, #2
    40b2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    40b6:	e7f8      	b.n	40aa <lfclk_spinwait+0xca>
    40b8:	20001299 	.word	0x20001299
    40bc:	40000104 	.word	0x40000104
    40c0:	e000e100 	.word	0xe000e100
    40c4:	40000008 	.word	0x40000008

000040c8 <z_nrf_clock_control_lf_on>:
{
    40c8:	b538      	push	{r3, r4, r5, lr}
    40ca:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    40cc:	4b1f      	ldr	r3, [pc, #124]	; (414c <z_nrf_clock_control_lf_on+0x84>)
    40ce:	2101      	movs	r1, #1
    40d0:	f3bf 8f5b 	dmb	ish
    40d4:	e853 2f00 	ldrex	r2, [r3]
    40d8:	e843 1000 	strex	r0, r1, [r3]
    40dc:	2800      	cmp	r0, #0
    40de:	d1f9      	bne.n	40d4 <z_nrf_clock_control_lf_on+0xc>
    40e0:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    40e4:	b142      	cbz	r2, 40f8 <z_nrf_clock_control_lf_on+0x30>
	switch (start_mode) {
    40e6:	b134      	cbz	r4, 40f6 <z_nrf_clock_control_lf_on+0x2e>
    40e8:	1e63      	subs	r3, r4, #1
    40ea:	b2db      	uxtb	r3, r3
    40ec:	2b01      	cmp	r3, #1
    40ee:	d81e      	bhi.n	412e <z_nrf_clock_control_lf_on+0x66>
		lfclk_spinwait(start_mode);
    40f0:	4620      	mov	r0, r4
    40f2:	f7ff ff75 	bl	3fe0 <lfclk_spinwait>
}
    40f6:	bd38      	pop	{r3, r4, r5, pc}
				get_onoff_manager(CLOCK_DEVICE,
    40f8:	4815      	ldr	r0, [pc, #84]	; (4150 <z_nrf_clock_control_lf_on+0x88>)
    40fa:	f007 fa90 	bl	b61e <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    40fe:	4915      	ldr	r1, [pc, #84]	; (4154 <z_nrf_clock_control_lf_on+0x8c>)
    4100:	2300      	movs	r3, #0
    4102:	604b      	str	r3, [r1, #4]
    4104:	60cb      	str	r3, [r1, #12]
    4106:	2301      	movs	r3, #1
    4108:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    410a:	f7fd fe0b 	bl	1d24 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    410e:	2800      	cmp	r0, #0
    4110:	dae9      	bge.n	40e6 <z_nrf_clock_control_lf_on+0x1e>
    4112:	4d11      	ldr	r5, [pc, #68]	; (4158 <z_nrf_clock_control_lf_on+0x90>)
    4114:	f44f 7308 	mov.w	r3, #544	; 0x220
    4118:	462a      	mov	r2, r5
    411a:	4910      	ldr	r1, [pc, #64]	; (415c <z_nrf_clock_control_lf_on+0x94>)
    411c:	4810      	ldr	r0, [pc, #64]	; (4160 <z_nrf_clock_control_lf_on+0x98>)
    411e:	f006 ffa4 	bl	b06a <printk>
    4122:	f44f 7108 	mov.w	r1, #544	; 0x220
    4126:	4628      	mov	r0, r5
    4128:	f007 f8f8 	bl	b31c <assert_post_action>
    412c:	e7db      	b.n	40e6 <z_nrf_clock_control_lf_on+0x1e>
		__ASSERT_NO_MSG(false);
    412e:	4c0a      	ldr	r4, [pc, #40]	; (4158 <z_nrf_clock_control_lf_on+0x90>)
    4130:	f240 2332 	movw	r3, #562	; 0x232
    4134:	4622      	mov	r2, r4
    4136:	490b      	ldr	r1, [pc, #44]	; (4164 <z_nrf_clock_control_lf_on+0x9c>)
    4138:	4809      	ldr	r0, [pc, #36]	; (4160 <z_nrf_clock_control_lf_on+0x98>)
    413a:	f006 ff96 	bl	b06a <printk>
    413e:	f240 2132 	movw	r1, #562	; 0x232
    4142:	4620      	mov	r0, r4
    4144:	f007 f8ea 	bl	b31c <assert_post_action>
    4148:	e7d5      	b.n	40f6 <z_nrf_clock_control_lf_on+0x2e>
    414a:	bf00      	nop
    414c:	20000d14 	.word	0x20000d14
    4150:	0000c050 	.word	0x0000c050
    4154:	20000ca8 	.word	0x20000ca8
    4158:	0000ca34 	.word	0x0000ca34
    415c:	0000ca98 	.word	0x0000ca98
    4160:	0000c46c 	.word	0x0000c46c
    4164:	0000c3e8 	.word	0x0000c3e8

00004168 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    4168:	b510      	push	{r4, lr}
    416a:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    416c:	280a      	cmp	r0, #10
    416e:	d007      	beq.n	4180 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    4170:	4b07      	ldr	r3, [pc, #28]	; (4190 <console_out+0x28>)
    4172:	6818      	ldr	r0, [r3, #0]
    4174:	b2e1      	uxtb	r1, r4
				      unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api =
    4176:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    4178:	685b      	ldr	r3, [r3, #4]
    417a:	4798      	blx	r3

	return c;
}
    417c:	4620      	mov	r0, r4
    417e:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    4180:	4b03      	ldr	r3, [pc, #12]	; (4190 <console_out+0x28>)
    4182:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    4184:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    4186:	685b      	ldr	r3, [r3, #4]
    4188:	210d      	movs	r1, #13
    418a:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    418c:	e7f0      	b.n	4170 <console_out+0x8>
    418e:	bf00      	nop
    4190:	20000d18 	.word	0x20000d18

00004194 <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
    4194:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    4196:	4c04      	ldr	r4, [pc, #16]	; (41a8 <uart_console_hook_install+0x14>)
    4198:	4620      	mov	r0, r4
    419a:	f7ff fa7f 	bl	369c <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    419e:	4620      	mov	r0, r4
    41a0:	f7fd fafc 	bl	179c <__printk_hook_install>
#endif
}
    41a4:	bd10      	pop	{r4, pc}
    41a6:	bf00      	nop
    41a8:	00004169 	.word	0x00004169

000041ac <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    41ac:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    41ae:	4806      	ldr	r0, [pc, #24]	; (41c8 <uart_console_init+0x1c>)
    41b0:	4b06      	ldr	r3, [pc, #24]	; (41cc <uart_console_init+0x20>)
    41b2:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    41b4:	f007 fdc2 	bl	bd3c <z_device_ready>
    41b8:	b118      	cbz	r0, 41c2 <uart_console_init+0x16>
	if (!device_is_ready(uart_console_dev)) {
		return -ENODEV;
	}

	uart_console_hook_install();
    41ba:	f7ff ffeb 	bl	4194 <uart_console_hook_install>

	return 0;
    41be:	2000      	movs	r0, #0
}
    41c0:	bd08      	pop	{r3, pc}
		return -ENODEV;
    41c2:	f06f 0012 	mvn.w	r0, #18
    41c6:	e7fb      	b.n	41c0 <uart_console_init+0x14>
    41c8:	0000c0b0 	.word	0x0000c0b0
    41cc:	20000d18 	.word	0x20000d18

000041d0 <get_drive>:

static int get_drive(gpio_flags_t flags, nrf_gpio_pin_drive_t *drive)
{
	int err = 0;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    41d0:	4b1f      	ldr	r3, [pc, #124]	; (4250 <get_drive+0x80>)
    41d2:	4003      	ands	r3, r0
    41d4:	4a1f      	ldr	r2, [pc, #124]	; (4254 <get_drive+0x84>)
    41d6:	4293      	cmp	r3, r2
    41d8:	d032      	beq.n	4240 <get_drive+0x70>
    41da:	d816      	bhi.n	420a <get_drive+0x3a>
    41dc:	2b06      	cmp	r3, #6
    41de:	d02b      	beq.n	4238 <get_drive+0x68>
    41e0:	d906      	bls.n	41f0 <get_drive+0x20>
    41e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    41e6:	d10d      	bne.n	4204 <get_drive+0x34>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		*drive = NRF_GPIO_PIN_H0S1;
    41e8:	2301      	movs	r3, #1
    41ea:	700b      	strb	r3, [r1, #0]
	int err = 0;
    41ec:	2000      	movs	r0, #0
		break;
    41ee:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    41f0:	b1fb      	cbz	r3, 4232 <get_drive+0x62>
    41f2:	2b02      	cmp	r3, #2
    41f4:	d103      	bne.n	41fe <get_drive+0x2e>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0S1;
    41f6:	2304      	movs	r3, #4
    41f8:	700b      	strb	r3, [r1, #0]
	int err = 0;
    41fa:	2000      	movs	r0, #0
		break;
    41fc:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    41fe:	f06f 0015 	mvn.w	r0, #21
    4202:	4770      	bx	lr
    4204:	f06f 0015 	mvn.w	r0, #21
    4208:	4770      	bx	lr
    420a:	4a13      	ldr	r2, [pc, #76]	; (4258 <get_drive+0x88>)
    420c:	4293      	cmp	r3, r2
    420e:	d01b      	beq.n	4248 <get_drive+0x78>
    4210:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    4214:	d103      	bne.n	421e <get_drive+0x4e>
		*drive = NRF_GPIO_PIN_H0H1;
    4216:	2303      	movs	r3, #3
    4218:	700b      	strb	r3, [r1, #0]
	int err = 0;
    421a:	2000      	movs	r0, #0
		break;
    421c:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    421e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    4222:	d103      	bne.n	422c <get_drive+0x5c>
		*drive = NRF_GPIO_PIN_S0H1;
    4224:	2302      	movs	r3, #2
    4226:	700b      	strb	r3, [r1, #0]
	int err = 0;
    4228:	2000      	movs	r0, #0
		break;
    422a:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    422c:	f06f 0015 	mvn.w	r0, #21
    4230:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    4232:	2000      	movs	r0, #0
    4234:	7008      	strb	r0, [r1, #0]
		break;
    4236:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    4238:	2306      	movs	r3, #6
    423a:	700b      	strb	r3, [r1, #0]
	int err = 0;
    423c:	2000      	movs	r0, #0
		break;
    423e:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    4240:	2307      	movs	r3, #7
    4242:	700b      	strb	r3, [r1, #0]
	int err = 0;
    4244:	2000      	movs	r0, #0
		break;
    4246:	4770      	bx	lr
	case GPIO_DS_ALT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0H1;
    4248:	2305      	movs	r3, #5
    424a:	700b      	strb	r3, [r1, #0]
	int err = 0;
    424c:	2000      	movs	r0, #0
		err = -EINVAL;
		break;
	}

	return err;
}
    424e:	4770      	bx	lr
    4250:	00f00006 	.word	0x00f00006
    4254:	00100006 	.word	0x00100006
    4258:	00400002 	.word	0x00400002

0000425c <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    425c:	b128      	cbz	r0, 426a <get_dev+0xe>
    425e:	2801      	cmp	r0, #1
    4260:	d101      	bne.n	4266 <get_dev+0xa>
    4262:	4803      	ldr	r0, [pc, #12]	; (4270 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    4264:	4770      	bx	lr
	const struct device *dev = NULL;
    4266:	2000      	movs	r0, #0
    4268:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    426a:	4802      	ldr	r0, [pc, #8]	; (4274 <get_dev+0x18>)
    426c:	4770      	bx	lr
    426e:	bf00      	nop
    4270:	0000c068 	.word	0x0000c068
    4274:	0000c080 	.word	0x0000c080

00004278 <gpio_nrfx_manage_callback>:
{
    4278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    427c:	4615      	mov	r5, r2
	return port->data;
    427e:	6906      	ldr	r6, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    4280:	1d37      	adds	r7, r6, #4
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    4282:	460c      	mov	r4, r1
    4284:	b139      	cbz	r1, 4296 <gpio_nrfx_manage_callback+0x1e>
	__ASSERT(callback->handler, "No callback handler!");
    4286:	6863      	ldr	r3, [r4, #4]
    4288:	b1ab      	cbz	r3, 42b6 <gpio_nrfx_manage_callback+0x3e>
	return list->head;
    428a:	6873      	ldr	r3, [r6, #4]

	if (!sys_slist_is_empty(callbacks)) {
    428c:	2b00      	cmp	r3, #0
    428e:	d03b      	beq.n	4308 <gpio_nrfx_manage_callback+0x90>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    4290:	4621      	mov	r1, r4
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4292:	2200      	movs	r2, #0
    4294:	e02a      	b.n	42ec <gpio_nrfx_manage_callback+0x74>
	__ASSERT(callback, "No callback!");
    4296:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 4340 <gpio_nrfx_manage_callback+0xc8>
    429a:	2324      	movs	r3, #36	; 0x24
    429c:	4642      	mov	r2, r8
    429e:	4923      	ldr	r1, [pc, #140]	; (432c <gpio_nrfx_manage_callback+0xb4>)
    42a0:	4823      	ldr	r0, [pc, #140]	; (4330 <gpio_nrfx_manage_callback+0xb8>)
    42a2:	f006 fee2 	bl	b06a <printk>
    42a6:	4823      	ldr	r0, [pc, #140]	; (4334 <gpio_nrfx_manage_callback+0xbc>)
    42a8:	f006 fedf 	bl	b06a <printk>
    42ac:	2124      	movs	r1, #36	; 0x24
    42ae:	4640      	mov	r0, r8
    42b0:	f007 f834 	bl	b31c <assert_post_action>
    42b4:	e7e7      	b.n	4286 <gpio_nrfx_manage_callback+0xe>
	__ASSERT(callback->handler, "No callback handler!");
    42b6:	f8df 8088 	ldr.w	r8, [pc, #136]	; 4340 <gpio_nrfx_manage_callback+0xc8>
    42ba:	2325      	movs	r3, #37	; 0x25
    42bc:	4642      	mov	r2, r8
    42be:	491e      	ldr	r1, [pc, #120]	; (4338 <gpio_nrfx_manage_callback+0xc0>)
    42c0:	481b      	ldr	r0, [pc, #108]	; (4330 <gpio_nrfx_manage_callback+0xb8>)
    42c2:	f006 fed2 	bl	b06a <printk>
    42c6:	481d      	ldr	r0, [pc, #116]	; (433c <gpio_nrfx_manage_callback+0xc4>)
    42c8:	f006 fecf 	bl	b06a <printk>
    42cc:	2125      	movs	r1, #37	; 0x25
    42ce:	4640      	mov	r0, r8
    42d0:	f007 f824 	bl	b31c <assert_post_action>
    42d4:	e7d9      	b.n	428a <gpio_nrfx_manage_callback+0x12>
	return node->next;
    42d6:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    42d8:	6073      	str	r3, [r6, #4]
	return list->tail;
    42da:	687a      	ldr	r2, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
    42dc:	4294      	cmp	r4, r2
    42de:	d10f      	bne.n	4300 <gpio_nrfx_manage_callback+0x88>
	list->tail = node;
    42e0:	607b      	str	r3, [r7, #4]
}
    42e2:	e00d      	b.n	4300 <gpio_nrfx_manage_callback+0x88>
	list->tail = node;
    42e4:	607a      	str	r2, [r7, #4]
}
    42e6:	e00b      	b.n	4300 <gpio_nrfx_manage_callback+0x88>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    42e8:	461a      	mov	r2, r3
    42ea:	681b      	ldr	r3, [r3, #0]
    42ec:	b15b      	cbz	r3, 4306 <gpio_nrfx_manage_callback+0x8e>
    42ee:	4299      	cmp	r1, r3
    42f0:	d1fa      	bne.n	42e8 <gpio_nrfx_manage_callback+0x70>
Z_GENLIST_REMOVE(slist, snode)
    42f2:	2a00      	cmp	r2, #0
    42f4:	d0ef      	beq.n	42d6 <gpio_nrfx_manage_callback+0x5e>
	return node->next;
    42f6:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    42f8:	6013      	str	r3, [r2, #0]
	return list->tail;
    42fa:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
    42fc:	429c      	cmp	r4, r3
    42fe:	d0f1      	beq.n	42e4 <gpio_nrfx_manage_callback+0x6c>
	parent->next = child;
    4300:	2300      	movs	r3, #0
    4302:	6023      	str	r3, [r4, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4304:	e000      	b.n	4308 <gpio_nrfx_manage_callback+0x90>
			if (!set) {
    4306:	b155      	cbz	r5, 431e <gpio_nrfx_manage_callback+0xa6>
				return -EINVAL;
			}
		}
	}

	if (set) {
    4308:	b165      	cbz	r5, 4324 <gpio_nrfx_manage_callback+0xac>
	return list->head;
    430a:	6873      	ldr	r3, [r6, #4]
	parent->next = child;
    430c:	6023      	str	r3, [r4, #0]
	list->head = node;
    430e:	6074      	str	r4, [r6, #4]
	return list->tail;
    4310:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_PREPEND(slist, snode)
    4312:	b10b      	cbz	r3, 4318 <gpio_nrfx_manage_callback+0xa0>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    4314:	2000      	movs	r0, #0
    4316:	e006      	b.n	4326 <gpio_nrfx_manage_callback+0xae>
	list->tail = node;
    4318:	607c      	str	r4, [r7, #4]
    431a:	2000      	movs	r0, #0
}
    431c:	e003      	b.n	4326 <gpio_nrfx_manage_callback+0xae>
				return -EINVAL;
    431e:	f06f 0015 	mvn.w	r0, #21
    4322:	e000      	b.n	4326 <gpio_nrfx_manage_callback+0xae>
	return 0;
    4324:	2000      	movs	r0, #0
}
    4326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    432a:	bf00      	nop
    432c:	0000cb10 	.word	0x0000cb10
    4330:	0000c46c 	.word	0x0000c46c
    4334:	0000cb1c 	.word	0x0000cb1c
    4338:	0000cb2c 	.word	0x0000cb2c
    433c:	0000cb40 	.word	0x0000cb40
    4340:	0000cae0 	.word	0x0000cae0

00004344 <nrfx_gpio_handler>:

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
    4344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    4348:	f000 041f 	and.w	r4, r0, #31
	uint32_t pin = abs_pin;
	uint32_t port_id = nrf_gpio_pin_port_number_extract(&pin);
	const struct device *port = get_dev(port_id);
    434c:	0940      	lsrs	r0, r0, #5
    434e:	f7ff ff85 	bl	425c <get_dev>

	/* If given port is handled directly by nrfx driver it might not be enabled in DT. */
	if (port == NULL) {
    4352:	b380      	cbz	r0, 43b6 <nrfx_gpio_handler+0x72>
    4354:	4607      	mov	r7, r0
	return port->data;
    4356:	6903      	ldr	r3, [r0, #16]
	}

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
    4358:	2601      	movs	r6, #1
    435a:	40a6      	lsls	r6, r4
	return list->head;
    435c:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    435e:	b11c      	cbz	r4, 4368 <nrfx_gpio_handler+0x24>
    4360:	4625      	mov	r5, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    4362:	b17c      	cbz	r4, 4384 <nrfx_gpio_handler+0x40>
	return node->next;
    4364:	6825      	ldr	r5, [r4, #0]
    4366:	e00d      	b.n	4384 <nrfx_gpio_handler+0x40>
    4368:	4625      	mov	r5, r4
    436a:	e00b      	b.n	4384 <nrfx_gpio_handler+0x40>
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    436c:	6863      	ldr	r3, [r4, #4]
    436e:	68a2      	ldr	r2, [r4, #8]
    4370:	4032      	ands	r2, r6
    4372:	4621      	mov	r1, r4
    4374:	4638      	mov	r0, r7
    4376:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    4378:	b1dd      	cbz	r5, 43b2 <nrfx_gpio_handler+0x6e>
    437a:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    437c:	b105      	cbz	r5, 4380 <nrfx_gpio_handler+0x3c>
	return node->next;
    437e:	682b      	ldr	r3, [r5, #0]
    4380:	462c      	mov	r4, r5
    4382:	461d      	mov	r5, r3
    4384:	b1bc      	cbz	r4, 43b6 <nrfx_gpio_handler+0x72>
		if (cb->pin_mask & pins) {
    4386:	68a3      	ldr	r3, [r4, #8]
    4388:	421e      	tst	r6, r3
    438a:	d0f5      	beq.n	4378 <nrfx_gpio_handler+0x34>
			__ASSERT(cb->handler, "No callback handler!");
    438c:	6863      	ldr	r3, [r4, #4]
    438e:	2b00      	cmp	r3, #0
    4390:	d1ec      	bne.n	436c <nrfx_gpio_handler+0x28>
    4392:	f8df 8034 	ldr.w	r8, [pc, #52]	; 43c8 <nrfx_gpio_handler+0x84>
    4396:	2345      	movs	r3, #69	; 0x45
    4398:	4642      	mov	r2, r8
    439a:	4908      	ldr	r1, [pc, #32]	; (43bc <nrfx_gpio_handler+0x78>)
    439c:	4808      	ldr	r0, [pc, #32]	; (43c0 <nrfx_gpio_handler+0x7c>)
    439e:	f006 fe64 	bl	b06a <printk>
    43a2:	4808      	ldr	r0, [pc, #32]	; (43c4 <nrfx_gpio_handler+0x80>)
    43a4:	f006 fe61 	bl	b06a <printk>
    43a8:	2145      	movs	r1, #69	; 0x45
    43aa:	4640      	mov	r0, r8
    43ac:	f006 ffb6 	bl	b31c <assert_post_action>
    43b0:	e7dc      	b.n	436c <nrfx_gpio_handler+0x28>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    43b2:	462b      	mov	r3, r5
    43b4:	e7e4      	b.n	4380 <nrfx_gpio_handler+0x3c>
}
    43b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    43ba:	bf00      	nop
    43bc:	0000cb58 	.word	0x0000cb58
    43c0:	0000c46c 	.word	0x0000c46c
    43c4:	0000cb40 	.word	0x0000cb40
    43c8:	0000cae0 	.word	0x0000cae0

000043cc <gpio_nrfx_pin_interrupt_configure>:
{
    43cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    43ce:	b085      	sub	sp, #20
    43d0:	460e      	mov	r6, r1
    43d2:	4619      	mov	r1, r3
	return port->config;
    43d4:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    43d6:	7b1b      	ldrb	r3, [r3, #12]
    43d8:	f006 041f 	and.w	r4, r6, #31
    43dc:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    43e0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    43e4:	d022      	beq.n	442c <gpio_nrfx_pin_interrupt_configure+0x60>
    43e6:	4607      	mov	r7, r0
    43e8:	4615      	mov	r5, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    43ea:	2300      	movs	r3, #0
    43ec:	9302      	str	r3, [sp, #8]
    43ee:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
    43f0:	4610      	mov	r0, r2
    43f2:	f007 f9f3 	bl	b7dc <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    43f6:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
    43fa:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    43fc:	6899      	ldr	r1, [r3, #8]
    43fe:	40f1      	lsrs	r1, r6
    4400:	f011 0101 	ands.w	r1, r1, #1
    4404:	d102      	bne.n	440c <gpio_nrfx_pin_interrupt_configure+0x40>
    4406:	f5b5 3fa0 	cmp.w	r5, #81920	; 0x14000
    440a:	d014      	beq.n	4436 <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    440c:	2300      	movs	r3, #0
    440e:	aa02      	add	r2, sp, #8
    4410:	4619      	mov	r1, r3
    4412:	4620      	mov	r0, r4
    4414:	f001 ffe8 	bl	63e8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4418:	4b32      	ldr	r3, [pc, #200]	; (44e4 <gpio_nrfx_pin_interrupt_configure+0x118>)
    441a:	4298      	cmp	r0, r3
    441c:	d15f      	bne.n	44de <gpio_nrfx_pin_interrupt_configure+0x112>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    441e:	2101      	movs	r1, #1
    4420:	4620      	mov	r0, r4
    4422:	f002 fa43 	bl	68ac <nrfx_gpiote_trigger_enable>
	return 0;
    4426:	2000      	movs	r0, #0
}
    4428:	b005      	add	sp, #20
    442a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    442c:	4620      	mov	r0, r4
    442e:	f002 fb49 	bl	6ac4 <nrfx_gpiote_trigger_disable>
		return 0;
    4432:	2000      	movs	r0, #0
    4434:	e7f8      	b.n	4428 <gpio_nrfx_pin_interrupt_configure+0x5c>
    switch (port)
    4436:	0963      	lsrs	r3, r4, #5
    4438:	d01f      	beq.n	447a <gpio_nrfx_pin_interrupt_configure+0xae>
    443a:	2b01      	cmp	r3, #1
    443c:	d101      	bne.n	4442 <gpio_nrfx_pin_interrupt_configure+0x76>
            mask = P1_FEATURE_PINS_PRESENT;
    443e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    pin_number &= 0x1F;
    4442:	f004 031f 	and.w	r3, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4446:	40d9      	lsrs	r1, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4448:	f011 0f01 	tst.w	r1, #1
    444c:	d018      	beq.n	4480 <gpio_nrfx_pin_interrupt_configure+0xb4>
    *p_pin = pin_number & 0x1F;
    444e:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4452:	0963      	lsrs	r3, r4, #5
    4454:	d022      	beq.n	449c <gpio_nrfx_pin_interrupt_configure+0xd0>
    4456:	2b01      	cmp	r3, #1
    4458:	d023      	beq.n	44a2 <gpio_nrfx_pin_interrupt_configure+0xd6>
            NRFX_ASSERT(0);
    445a:	4e23      	ldr	r6, [pc, #140]	; (44e8 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    445c:	f240 232e 	movw	r3, #558	; 0x22e
    4460:	4632      	mov	r2, r6
    4462:	4922      	ldr	r1, [pc, #136]	; (44ec <gpio_nrfx_pin_interrupt_configure+0x120>)
    4464:	4822      	ldr	r0, [pc, #136]	; (44f0 <gpio_nrfx_pin_interrupt_configure+0x124>)
    4466:	f006 fe00 	bl	b06a <printk>
    446a:	f240 212e 	movw	r1, #558	; 0x22e
    446e:	4630      	mov	r0, r6
    4470:	f006 ff54 	bl	b31c <assert_post_action>
        case 0: return NRF_P0;
    4474:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4478:	e014      	b.n	44a4 <gpio_nrfx_pin_interrupt_configure+0xd8>
            mask = P0_FEATURE_PINS_PRESENT;
    447a:	f04f 31ff 	mov.w	r1, #4294967295
    447e:	e7e0      	b.n	4442 <gpio_nrfx_pin_interrupt_configure+0x76>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4480:	4d19      	ldr	r5, [pc, #100]	; (44e8 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    4482:	f240 2329 	movw	r3, #553	; 0x229
    4486:	462a      	mov	r2, r5
    4488:	491a      	ldr	r1, [pc, #104]	; (44f4 <gpio_nrfx_pin_interrupt_configure+0x128>)
    448a:	4819      	ldr	r0, [pc, #100]	; (44f0 <gpio_nrfx_pin_interrupt_configure+0x124>)
    448c:	f006 fded 	bl	b06a <printk>
    4490:	f240 2129 	movw	r1, #553	; 0x229
    4494:	4628      	mov	r0, r5
    4496:	f006 ff41 	bl	b31c <assert_post_action>
    449a:	e7d8      	b.n	444e <gpio_nrfx_pin_interrupt_configure+0x82>
        case 0: return NRF_P0;
    449c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    44a0:	e000      	b.n	44a4 <gpio_nrfx_pin_interrupt_configure+0xd8>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    44a2:	4b15      	ldr	r3, [pc, #84]	; (44f8 <gpio_nrfx_pin_interrupt_configure+0x12c>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    44a4:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    44a8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    44ac:	f013 0f01 	tst.w	r3, #1
    44b0:	d1ac      	bne.n	440c <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    44b2:	f10d 0107 	add.w	r1, sp, #7
    44b6:	4620      	mov	r0, r4
    44b8:	f002 f988 	bl	67cc <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    44bc:	4b0f      	ldr	r3, [pc, #60]	; (44fc <gpio_nrfx_pin_interrupt_configure+0x130>)
    44be:	4298      	cmp	r0, r3
    44c0:	d003      	beq.n	44ca <gpio_nrfx_pin_interrupt_configure+0xfe>
		trigger_config.p_in_channel = &ch;
    44c2:	f10d 0307 	add.w	r3, sp, #7
    44c6:	9303      	str	r3, [sp, #12]
    44c8:	e7a0      	b.n	440c <gpio_nrfx_pin_interrupt_configure+0x40>
			err = nrfx_gpiote_channel_alloc(&ch);
    44ca:	f10d 0007 	add.w	r0, sp, #7
    44ce:	f002 f9e5 	bl	689c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    44d2:	4b04      	ldr	r3, [pc, #16]	; (44e4 <gpio_nrfx_pin_interrupt_configure+0x118>)
    44d4:	4298      	cmp	r0, r3
    44d6:	d0f4      	beq.n	44c2 <gpio_nrfx_pin_interrupt_configure+0xf6>
				return -ENOMEM;
    44d8:	f06f 000b 	mvn.w	r0, #11
    44dc:	e7a4      	b.n	4428 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
    44de:	f06f 0004 	mvn.w	r0, #4
    44e2:	e7a1      	b.n	4428 <gpio_nrfx_pin_interrupt_configure+0x5c>
    44e4:	0bad0000 	.word	0x0bad0000
    44e8:	0000cb64 	.word	0x0000cb64
    44ec:	0000c3e8 	.word	0x0000c3e8
    44f0:	0000c46c 	.word	0x0000c46c
    44f4:	0000cb98 	.word	0x0000cb98
    44f8:	50000300 	.word	0x50000300
    44fc:	0bad0004 	.word	0x0bad0004

00004500 <pin_uninit>:
{
    4500:	b530      	push	{r4, r5, lr}
    4502:	b083      	sub	sp, #12
    4504:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
    4506:	f10d 0107 	add.w	r1, sp, #7
    450a:	f002 f95f 	bl	67cc <nrfx_gpiote_channel_get>
    450e:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
    4510:	4620      	mov	r0, r4
    4512:	f002 fb3f 	bl	6b94 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    4516:	4b0b      	ldr	r3, [pc, #44]	; (4544 <pin_uninit+0x44>)
    4518:	4298      	cmp	r0, r3
    451a:	d10f      	bne.n	453c <pin_uninit+0x3c>
	if (free_ch) {
    451c:	429d      	cmp	r5, r3
    451e:	d005      	beq.n	452c <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    4520:	4b08      	ldr	r3, [pc, #32]	; (4544 <pin_uninit+0x44>)
    4522:	4298      	cmp	r0, r3
    4524:	d107      	bne.n	4536 <pin_uninit+0x36>
    4526:	2000      	movs	r0, #0
}
    4528:	b003      	add	sp, #12
    452a:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
    452c:	f89d 0007 	ldrb.w	r0, [sp, #7]
    4530:	f002 f9ac 	bl	688c <nrfx_gpiote_channel_free>
    4534:	e7f4      	b.n	4520 <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    4536:	f06f 0004 	mvn.w	r0, #4
    453a:	e7f5      	b.n	4528 <pin_uninit+0x28>
		return -EIO;
    453c:	f06f 0004 	mvn.w	r0, #4
    4540:	e7f2      	b.n	4528 <pin_uninit+0x28>
    4542:	bf00      	nop
    4544:	0bad0000 	.word	0x0bad0000

00004548 <gpio_nrfx_pin_configure>:
{
    4548:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    454c:	b087      	sub	sp, #28
	return port->config;
    454e:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4552:	f898 300c 	ldrb.w	r3, [r8, #12]
    4556:	f001 051f 	and.w	r5, r1, #31
    455a:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    455e:	2a00      	cmp	r2, #0
    4560:	d044      	beq.n	45ec <gpio_nrfx_pin_configure+0xa4>
    4562:	460c      	mov	r4, r1
    4564:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    4566:	2600      	movs	r6, #0
    4568:	9603      	str	r6, [sp, #12]
    456a:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
    456c:	f10d 0117 	add.w	r1, sp, #23
    4570:	4620      	mov	r0, r4
    4572:	f002 f92b 	bl	67cc <nrfx_gpiote_channel_get>
    4576:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4578:	4633      	mov	r3, r6
    457a:	aa03      	add	r2, sp, #12
    457c:	4631      	mov	r1, r6
    457e:	4628      	mov	r0, r5
    4580:	f001 ff32 	bl	63e8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4584:	4b30      	ldr	r3, [pc, #192]	; (4648 <gpio_nrfx_pin_configure+0x100>)
    4586:	4298      	cmp	r0, r3
    4588:	d15b      	bne.n	4642 <gpio_nrfx_pin_configure+0xfa>
	if (free_ch) {
    458a:	4599      	cmp	r9, r3
    458c:	d036      	beq.n	45fc <gpio_nrfx_pin_configure+0xb4>
	if (flags & GPIO_OUTPUT) {
    458e:	f417 7f00 	tst.w	r7, #512	; 0x200
    4592:	d043      	beq.n	461c <gpio_nrfx_pin_configure+0xd4>
		int rv = get_drive(flags, &drive);
    4594:	f10d 0103 	add.w	r1, sp, #3
    4598:	4638      	mov	r0, r7
    459a:	f7ff fe19 	bl	41d0 <get_drive>
		if (rv != 0) {
    459e:	4606      	mov	r6, r0
    45a0:	bb40      	cbnz	r0, 45f4 <gpio_nrfx_pin_configure+0xac>
		nrfx_gpiote_output_config_t output_config = {
    45a2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    45a6:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    45aa:	f417 7f80 	tst.w	r7, #256	; 0x100
    45ae:	bf0c      	ite	eq
    45b0:	2301      	moveq	r3, #1
    45b2:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    45b4:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    45b8:	4638      	mov	r0, r7
    45ba:	f007 f8dc 	bl	b776 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    45be:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    45c2:	f417 6f00 	tst.w	r7, #2048	; 0x800
    45c6:	d01e      	beq.n	4606 <gpio_nrfx_pin_configure+0xbe>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    45c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
    45cc:	2101      	movs	r1, #1
    45ce:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
    45d2:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    45d6:	2200      	movs	r2, #0
    45d8:	a901      	add	r1, sp, #4
    45da:	4628      	mov	r0, r5
    45dc:	f001 fff6 	bl	65cc <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    45e0:	4b19      	ldr	r3, [pc, #100]	; (4648 <gpio_nrfx_pin_configure+0x100>)
    45e2:	4298      	cmp	r0, r3
    45e4:	d006      	beq.n	45f4 <gpio_nrfx_pin_configure+0xac>
    45e6:	f06f 0615 	mvn.w	r6, #21
    45ea:	e003      	b.n	45f4 <gpio_nrfx_pin_configure+0xac>
		return pin_uninit(abs_pin);
    45ec:	4628      	mov	r0, r5
    45ee:	f7ff ff87 	bl	4500 <pin_uninit>
    45f2:	4606      	mov	r6, r0
}
    45f4:	4630      	mov	r0, r6
    45f6:	b007      	add	sp, #28
    45f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
    45fc:	f89d 0017 	ldrb.w	r0, [sp, #23]
    4600:	f002 f944 	bl	688c <nrfx_gpiote_channel_free>
    4604:	e7c3      	b.n	458e <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    4606:	f417 6f80 	tst.w	r7, #1024	; 0x400
    460a:	d0e4      	beq.n	45d6 <gpio_nrfx_pin_configure+0x8e>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    460c:	f8d8 2004 	ldr.w	r2, [r8, #4]
    4610:	2301      	movs	r3, #1
    4612:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
    4616:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
}
    461a:	e7dc      	b.n	45d6 <gpio_nrfx_pin_configure+0x8e>
		.pull = get_pull(flags)
    461c:	4638      	mov	r0, r7
    461e:	f007 f8aa 	bl	b776 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    4622:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    4626:	2300      	movs	r3, #0
    4628:	461a      	mov	r2, r3
    462a:	a902      	add	r1, sp, #8
    462c:	4628      	mov	r0, r5
    462e:	f001 fedb 	bl	63e8 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    4632:	4b05      	ldr	r3, [pc, #20]	; (4648 <gpio_nrfx_pin_configure+0x100>)
    4634:	4298      	cmp	r0, r3
    4636:	d101      	bne.n	463c <gpio_nrfx_pin_configure+0xf4>
    4638:	2600      	movs	r6, #0
    463a:	e7db      	b.n	45f4 <gpio_nrfx_pin_configure+0xac>
    463c:	f06f 0615 	mvn.w	r6, #21
    4640:	e7d8      	b.n	45f4 <gpio_nrfx_pin_configure+0xac>
		return -EINVAL;
    4642:	f06f 0615 	mvn.w	r6, #21
    4646:	e7d5      	b.n	45f4 <gpio_nrfx_pin_configure+0xac>
    4648:	0bad0000 	.word	0x0bad0000

0000464c <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    464c:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    464e:	f002 f913 	bl	6878 <nrfx_gpiote_is_init>
    4652:	b108      	cbz	r0, 4658 <gpio_nrfx_init+0xc>
		return 0;
    4654:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    4656:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    4658:	f002 f8e4 	bl	6824 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    465c:	4b08      	ldr	r3, [pc, #32]	; (4680 <gpio_nrfx_init+0x34>)
    465e:	4298      	cmp	r0, r3
    4660:	d10a      	bne.n	4678 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    4662:	2100      	movs	r1, #0
    4664:	4807      	ldr	r0, [pc, #28]	; (4684 <gpio_nrfx_init+0x38>)
    4666:	f002 f8ab 	bl	67c0 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    466a:	2200      	movs	r2, #0
    466c:	2105      	movs	r1, #5
    466e:	2006      	movs	r0, #6
    4670:	f7fe fbba 	bl	2de8 <z_arm_irq_priority_set>
	return 0;
    4674:	2000      	movs	r0, #0
    4676:	e7ee      	b.n	4656 <gpio_nrfx_init+0xa>
		return -EIO;
    4678:	f06f 0004 	mvn.w	r0, #4
    467c:	e7eb      	b.n	4656 <gpio_nrfx_init+0xa>
    467e:	bf00      	nop
    4680:	0bad0000 	.word	0x0bad0000
    4684:	00004345 	.word	0x00004345

00004688 <pwm_nrfx_get_cycles_per_sec>:
{
	/* TODO: Since this function might be removed, we will always return
	 * 16MHz from this function and handle the conversion with prescaler,
	 * etc, in the pin set function. See issue #6958.
	 */
	*cycles = 16ul * 1000ul * 1000ul;
    4688:	4802      	ldr	r0, [pc, #8]	; (4694 <pwm_nrfx_get_cycles_per_sec+0xc>)
    468a:	2100      	movs	r1, #0
    468c:	e9c2 0100 	strd	r0, r1, [r2]

	return 0;
}
    4690:	2000      	movs	r0, #0
    4692:	4770      	bx	lr
    4694:	00f42400 	.word	0x00f42400

00004698 <pwm_period_check_and_set>:
{
    4698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
    469c:	2400      	movs	r4, #0
    469e:	e001      	b.n	46a4 <pwm_period_check_and_set+0xc>
    46a0:	3401      	adds	r4, #1
    46a2:	b2e4      	uxtb	r4, r4
    46a4:	2c03      	cmp	r4, #3
    46a6:	d80b      	bhi.n	46c0 <pwm_period_check_and_set+0x28>
		if (i != channel) {
    46a8:	4294      	cmp	r4, r2
    46aa:	d0f9      	beq.n	46a0 <pwm_period_check_and_set+0x8>
				data->current[i]
    46ac:	eb01 0544 	add.w	r5, r1, r4, lsl #1
    46b0:	88ad      	ldrh	r5, [r5, #4]
			uint16_t channel_pulse_cycle =
    46b2:	f3c5 050e 	ubfx	r5, r5, #0, #15
			if (channel_pulse_cycle > 0) {
    46b6:	2d00      	cmp	r5, #0
    46b8:	d0f2      	beq.n	46a0 <pwm_period_check_and_set+0x8>
				return -EINVAL;
    46ba:	f06f 0015 	mvn.w	r0, #21
    46be:	e00b      	b.n	46d8 <pwm_period_check_and_set+0x40>
	countertop = period_cycles;
    46c0:	461a      	mov	r2, r3
	prescaler = 0;
    46c2:	2400      	movs	r4, #0
		if (countertop <= PWM_COUNTERTOP_COUNTERTOP_Msk) {
    46c4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    46c8:	d308      	bcc.n	46dc <pwm_period_check_and_set+0x44>
		countertop >>= 1;
    46ca:	0852      	lsrs	r2, r2, #1
		++prescaler;
    46cc:	3401      	adds	r4, #1
    46ce:	b2e4      	uxtb	r4, r4
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
    46d0:	2c07      	cmp	r4, #7
    46d2:	d9f7      	bls.n	46c4 <pwm_period_check_and_set+0x2c>
	return -EINVAL;
    46d4:	f06f 0015 	mvn.w	r0, #21
}
    46d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			data->period_cycles = period_cycles;
    46dc:	600b      	str	r3, [r1, #0]
			data->prescaler     = prescaler;
    46de:	738c      	strb	r4, [r1, #14]
			data->countertop    = (uint16_t)countertop;
    46e0:	b295      	uxth	r5, r2
    46e2:	818d      	strh	r5, [r1, #12]
			nrf_pwm_configure(config->pwm.p_registers,
    46e4:	6806      	ldr	r6, [r0, #0]
    46e6:	7b87      	ldrb	r7, [r0, #14]
NRF_STATIC_INLINE void nrf_pwm_configure(NRF_PWM_Type * p_reg,
                                         nrf_pwm_clk_t  base_clock,
                                         nrf_pwm_mode_t mode,
                                         uint16_t       top_value)
{
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);
    46e8:	f415 4f00 	tst.w	r5, #32768	; 0x8000
    46ec:	d107      	bne.n	46fe <pwm_period_check_and_set+0x66>

    p_reg->PRESCALER  = base_clock;
    46ee:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
    p_reg->MODE       = mode;
    46f2:	f8c6 7504 	str.w	r7, [r6, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    46f6:	f8c6 5508 	str.w	r5, [r6, #1288]	; 0x508
			return 0;
    46fa:	2000      	movs	r0, #0
}
    46fc:	e7ec      	b.n	46d8 <pwm_period_check_and_set+0x40>
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);
    46fe:	f8df 8024 	ldr.w	r8, [pc, #36]	; 4724 <pwm_period_check_and_set+0x8c>
    4702:	f44f 7327 	mov.w	r3, #668	; 0x29c
    4706:	4642      	mov	r2, r8
    4708:	4904      	ldr	r1, [pc, #16]	; (471c <pwm_period_check_and_set+0x84>)
    470a:	4805      	ldr	r0, [pc, #20]	; (4720 <pwm_period_check_and_set+0x88>)
    470c:	f006 fcad 	bl	b06a <printk>
    4710:	f44f 7127 	mov.w	r1, #668	; 0x29c
    4714:	4640      	mov	r0, r8
    4716:	f006 fe01 	bl	b31c <assert_post_action>
    471a:	e7e8      	b.n	46ee <pwm_period_check_and_set+0x56>
    471c:	0000cc44 	.word	0x0000cc44
    4720:	0000c46c 	.word	0x0000c46c
    4724:	0000cc10 	.word	0x0000cc10

00004728 <pwm_nrfx_init>:
	.pin_set = pwm_nrfx_pin_set,
	.get_cycles_per_sec = pwm_nrfx_get_cycles_per_sec,
};

static int pwm_nrfx_init(const struct device *dev)
{
    4728:	b510      	push	{r4, lr}
    472a:	4603      	mov	r3, r0
	const struct pwm_nrfx_config *config = dev->config;
    472c:	6840      	ldr	r0, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;
    472e:	691c      	ldr	r4, [r3, #16]

	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
    4730:	2300      	movs	r3, #0
    4732:	e004      	b.n	473e <pwm_nrfx_init+0x16>
		bool inverted = config->initial_config.output_pins[i] & NRFX_PWM_PIN_INVERTED;
		uint16_t value = (inverted)?(PWM_NRFX_CH_VALUE_INVERTED):(PWM_NRFX_CH_VALUE_NORMAL);
    4734:	2100      	movs	r1, #0

		data->current[i] = value;
    4736:	eb04 0243 	add.w	r2, r4, r3, lsl #1
    473a:	8091      	strh	r1, [r2, #4]
	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
    473c:	3301      	adds	r3, #1
    473e:	2b03      	cmp	r3, #3
    4740:	d807      	bhi.n	4752 <pwm_nrfx_init+0x2a>
		bool inverted = config->initial_config.output_pins[i] & NRFX_PWM_PIN_INVERTED;
    4742:	18c2      	adds	r2, r0, r3
		uint16_t value = (inverted)?(PWM_NRFX_CH_VALUE_INVERTED):(PWM_NRFX_CH_VALUE_NORMAL);
    4744:	f992 2008 	ldrsb.w	r2, [r2, #8]
    4748:	2a00      	cmp	r2, #0
    474a:	dbf3      	blt.n	4734 <pwm_nrfx_init+0xc>
    474c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    4750:	e7f1      	b.n	4736 <pwm_nrfx_init+0xe>
	};

	nrfx_err_t result = nrfx_pwm_init(&config->pwm,
    4752:	2300      	movs	r3, #0
    4754:	461a      	mov	r2, r3
    4756:	f100 0108 	add.w	r1, r0, #8
    475a:	f002 fbc1 	bl	6ee0 <nrfx_pwm_init>
					  &config->initial_config,
					  NULL,
					  NULL);
	if (result != NRFX_SUCCESS) {
    475e:	4b04      	ldr	r3, [pc, #16]	; (4770 <pwm_nrfx_init+0x48>)
    4760:	4298      	cmp	r0, r3
    4762:	d101      	bne.n	4768 <pwm_nrfx_init+0x40>
		LOG_ERR("Failed to initialize device: %s", dev->name);
		return -EBUSY;
	}

	return 0;
    4764:	2000      	movs	r0, #0
}
    4766:	bd10      	pop	{r4, pc}
		return -EBUSY;
    4768:	f06f 000f 	mvn.w	r0, #15
    476c:	e7fb      	b.n	4766 <pwm_nrfx_init+0x3e>
    476e:	bf00      	nop
    4770:	0bad0000 	.word	0x0bad0000

00004774 <pwm_nrfx_pin_set>:
{
    4774:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4778:	4699      	mov	r9, r3
    477a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
	const struct pwm_nrfx_config *config = dev->config;
    477e:	6845      	ldr	r5, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;
    4780:	f8d0 8010 	ldr.w	r8, [r0, #16]
	if (flags) {
    4784:	2b00      	cmp	r3, #0
    4786:	f040 80fa 	bne.w	497e <pwm_nrfx_pin_set+0x20a>
    478a:	460e      	mov	r6, r1
    478c:	4617      	mov	r7, r2
	channel = pwm_channel_map(config->initial_config.output_pins, pwm);
    478e:	f105 0008 	add.w	r0, r5, #8
    4792:	f007 f839 	bl	b808 <pwm_channel_map>
    4796:	4604      	mov	r4, r0
	if (channel == NRF_PWM_CHANNEL_COUNT) {
    4798:	2804      	cmp	r0, #4
    479a:	f000 80f3 	beq.w	4984 <pwm_nrfx_pin_set+0x210>
	was_stopped = !pwm_channel_is_active(channel, data) &&
    479e:	4641      	mov	r1, r8
    47a0:	f007 f843 	bl	b82a <pwm_channel_is_active>
    47a4:	b938      	cbnz	r0, 47b6 <pwm_nrfx_pin_set+0x42>
		      !any_other_channel_is_active(channel, data);
    47a6:	4641      	mov	r1, r8
    47a8:	4620      	mov	r0, r4
    47aa:	f007 f84d 	bl	b848 <any_other_channel_is_active>
	was_stopped = !pwm_channel_is_active(channel, data) &&
    47ae:	bb60      	cbnz	r0, 480a <pwm_nrfx_pin_set+0x96>
    47b0:	f04f 0a01 	mov.w	sl, #1
    47b4:	e001      	b.n	47ba <pwm_nrfx_pin_set+0x46>
    47b6:	f04f 0a00 	mov.w	sl, #0
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
    47ba:	7bab      	ldrb	r3, [r5, #14]
    47bc:	2b01      	cmp	r3, #1
    47be:	d027      	beq.n	4810 <pwm_nrfx_pin_set+0x9c>
	if (period_cycles != 0 && period_cycles != data->period_cycles) {
    47c0:	b11f      	cbz	r7, 47ca <pwm_nrfx_pin_set+0x56>
    47c2:	f8d8 3000 	ldr.w	r3, [r8]
    47c6:	42bb      	cmp	r3, r7
    47c8:	d126      	bne.n	4818 <pwm_nrfx_pin_set+0xa4>
	pulse_cycles = MIN(pulse_cycles, period_cycles);
    47ca:	46bb      	mov	fp, r7
    47cc:	454f      	cmp	r7, r9
    47ce:	bf28      	it	cs
    47d0:	46cb      	movcs	fp, r9
		(data->current[channel] & PWM_NRFX_CH_POLARITY_MASK)
    47d2:	eb08 0144 	add.w	r1, r8, r4, lsl #1
    47d6:	888b      	ldrh	r3, [r1, #4]
    47d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
		| (pulse_cycles >> data->prescaler));
    47dc:	f898 200e 	ldrb.w	r2, [r8, #14]
    47e0:	fa2b f202 	lsr.w	r2, fp, r2
    47e4:	4313      	orrs	r3, r2
	data->current[channel] = (
    47e6:	808b      	strh	r3, [r1, #4]
	if (!pwm_channel_is_active(channel, data)) {
    47e8:	4641      	mov	r1, r8
    47ea:	4620      	mov	r0, r4
    47ec:	f007 f81d 	bl	b82a <pwm_channel_is_active>
    47f0:	2800      	cmp	r0, #0
    47f2:	f040 80b3 	bne.w	495c <pwm_nrfx_pin_set+0x1e8>
			config->initial_config.output_pins[channel]
    47f6:	192b      	adds	r3, r5, r4
    47f8:	f993 2008 	ldrsb.w	r2, [r3, #8]
			&& !channel_inverted_state;
    47fc:	f1bb 0f00 	cmp.w	fp, #0
    4800:	d115      	bne.n	482e <pwm_nrfx_pin_set+0xba>
    4802:	2a00      	cmp	r2, #0
    4804:	db11      	blt.n	482a <pwm_nrfx_pin_set+0xb6>
    4806:	2301      	movs	r3, #1
    4808:	e012      	b.n	4830 <pwm_nrfx_pin_set+0xbc>
	was_stopped = !pwm_channel_is_active(channel, data) &&
    480a:	f04f 0a00 	mov.w	sl, #0
    480e:	e7d4      	b.n	47ba <pwm_nrfx_pin_set+0x46>
		period_cycles /= 2;
    4810:	087f      	lsrs	r7, r7, #1
		pulse_cycles /= 2;
    4812:	ea4f 0959 	mov.w	r9, r9, lsr #1
    4816:	e7d3      	b.n	47c0 <pwm_nrfx_pin_set+0x4c>
		int ret = pwm_period_check_and_set(config, data, channel,
    4818:	463b      	mov	r3, r7
    481a:	4622      	mov	r2, r4
    481c:	4641      	mov	r1, r8
    481e:	4628      	mov	r0, r5
    4820:	f7ff ff3a 	bl	4698 <pwm_period_check_and_set>
		if (ret) {
    4824:	2800      	cmp	r0, #0
    4826:	d0d0      	beq.n	47ca <pwm_nrfx_pin_set+0x56>
    4828:	e052      	b.n	48d0 <pwm_nrfx_pin_set+0x15c>
			&& !channel_inverted_state;
    482a:	2300      	movs	r3, #0
    482c:	e000      	b.n	4830 <pwm_nrfx_pin_set+0xbc>
    482e:	2300      	movs	r3, #0
			&& channel_inverted_state;
    4830:	454f      	cmp	r7, r9
    4832:	d803      	bhi.n	483c <pwm_nrfx_pin_set+0xc8>
    4834:	2a00      	cmp	r2, #0
    4836:	db27      	blt.n	4888 <pwm_nrfx_pin_set+0x114>
    4838:	2200      	movs	r2, #0
    483a:	e000      	b.n	483e <pwm_nrfx_pin_set+0xca>
    483c:	2200      	movs	r2, #0
		if (pulse_0_and_not_inverted || pulse_100_and_inverted) {
    483e:	b90b      	cbnz	r3, 4844 <pwm_nrfx_pin_set+0xd0>
    4840:	2a00      	cmp	r2, #0
    4842:	d047      	beq.n	48d4 <pwm_nrfx_pin_set+0x160>
    switch (port)
    4844:	0973      	lsrs	r3, r6, #5
    4846:	d021      	beq.n	488c <pwm_nrfx_pin_set+0x118>
    4848:	2b01      	cmp	r3, #1
    484a:	d122      	bne.n	4892 <pwm_nrfx_pin_set+0x11e>
            mask = P1_FEATURE_PINS_PRESENT;
    484c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4850:	f006 021f 	and.w	r2, r6, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4854:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4856:	f013 0f01 	tst.w	r3, #1
    485a:	d01c      	beq.n	4896 <pwm_nrfx_pin_set+0x122>
    *p_pin = pin_number & 0x1F;
    485c:	f006 071f 	and.w	r7, r6, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4860:	0976      	lsrs	r6, r6, #5
    4862:	d026      	beq.n	48b2 <pwm_nrfx_pin_set+0x13e>
    4864:	2e01      	cmp	r6, #1
    4866:	d027      	beq.n	48b8 <pwm_nrfx_pin_set+0x144>
            NRFX_ASSERT(0);
    4868:	4e49      	ldr	r6, [pc, #292]	; (4990 <pwm_nrfx_pin_set+0x21c>)
    486a:	f240 232e 	movw	r3, #558	; 0x22e
    486e:	4632      	mov	r2, r6
    4870:	4948      	ldr	r1, [pc, #288]	; (4994 <pwm_nrfx_pin_set+0x220>)
    4872:	4849      	ldr	r0, [pc, #292]	; (4998 <pwm_nrfx_pin_set+0x224>)
    4874:	f006 fbf9 	bl	b06a <printk>
    4878:	f240 212e 	movw	r1, #558	; 0x22e
    487c:	4630      	mov	r0, r6
    487e:	f006 fd4d 	bl	b31c <assert_post_action>
        case 0: return NRF_P0;
    4882:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4886:	e018      	b.n	48ba <pwm_nrfx_pin_set+0x146>
			&& channel_inverted_state;
    4888:	2201      	movs	r2, #1
    488a:	e7d8      	b.n	483e <pwm_nrfx_pin_set+0xca>
            mask = P0_FEATURE_PINS_PRESENT;
    488c:	f04f 33ff 	mov.w	r3, #4294967295
    4890:	e7de      	b.n	4850 <pwm_nrfx_pin_set+0xdc>
    switch (port)
    4892:	2300      	movs	r3, #0
    4894:	e7dc      	b.n	4850 <pwm_nrfx_pin_set+0xdc>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4896:	4f3e      	ldr	r7, [pc, #248]	; (4990 <pwm_nrfx_pin_set+0x21c>)
    4898:	f240 2329 	movw	r3, #553	; 0x229
    489c:	463a      	mov	r2, r7
    489e:	493f      	ldr	r1, [pc, #252]	; (499c <pwm_nrfx_pin_set+0x228>)
    48a0:	483d      	ldr	r0, [pc, #244]	; (4998 <pwm_nrfx_pin_set+0x224>)
    48a2:	f006 fbe2 	bl	b06a <printk>
    48a6:	f240 2129 	movw	r1, #553	; 0x229
    48aa:	4638      	mov	r0, r7
    48ac:	f006 fd36 	bl	b31c <assert_post_action>
    48b0:	e7d4      	b.n	485c <pwm_nrfx_pin_set+0xe8>
        case 0: return NRF_P0;
    48b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    48b6:	e000      	b.n	48ba <pwm_nrfx_pin_set+0x146>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    48b8:	4a39      	ldr	r2, [pc, #228]	; (49a0 <pwm_nrfx_pin_set+0x22c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    48ba:	2301      	movs	r3, #1
    48bc:	40bb      	lsls	r3, r7
    p_reg->OUTCLR = clr_mask;
    48be:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
		if (!any_other_channel_is_active(channel, data)) {
    48c2:	4641      	mov	r1, r8
    48c4:	4620      	mov	r0, r4
    48c6:	f006 ffbf 	bl	b848 <any_other_channel_is_active>
    48ca:	2800      	cmp	r0, #0
    48cc:	d040      	beq.n	4950 <pwm_nrfx_pin_set+0x1dc>
	return 0;
    48ce:	2000      	movs	r0, #0
}
    48d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch (port)
    48d4:	0973      	lsrs	r3, r6, #5
    48d6:	d01f      	beq.n	4918 <pwm_nrfx_pin_set+0x1a4>
    48d8:	2b01      	cmp	r3, #1
    48da:	d120      	bne.n	491e <pwm_nrfx_pin_set+0x1aa>
            mask = P1_FEATURE_PINS_PRESENT;
    48dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    48e0:	f006 021f 	and.w	r2, r6, #31
    return (mask & (1UL << pin_number)) ? true : false;
    48e4:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    48e6:	f013 0f01 	tst.w	r3, #1
    48ea:	d01a      	beq.n	4922 <pwm_nrfx_pin_set+0x1ae>
    *p_pin = pin_number & 0x1F;
    48ec:	f006 071f 	and.w	r7, r6, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    48f0:	0976      	lsrs	r6, r6, #5
    48f2:	d024      	beq.n	493e <pwm_nrfx_pin_set+0x1ca>
    48f4:	2e01      	cmp	r6, #1
    48f6:	d025      	beq.n	4944 <pwm_nrfx_pin_set+0x1d0>
            NRFX_ASSERT(0);
    48f8:	4e25      	ldr	r6, [pc, #148]	; (4990 <pwm_nrfx_pin_set+0x21c>)
    48fa:	f240 232e 	movw	r3, #558	; 0x22e
    48fe:	4632      	mov	r2, r6
    4900:	4924      	ldr	r1, [pc, #144]	; (4994 <pwm_nrfx_pin_set+0x220>)
    4902:	4825      	ldr	r0, [pc, #148]	; (4998 <pwm_nrfx_pin_set+0x224>)
    4904:	f006 fbb1 	bl	b06a <printk>
    4908:	f240 212e 	movw	r1, #558	; 0x22e
    490c:	4630      	mov	r0, r6
    490e:	f006 fd05 	bl	b31c <assert_post_action>
        case 0: return NRF_P0;
    4912:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4916:	e016      	b.n	4946 <pwm_nrfx_pin_set+0x1d2>
            mask = P0_FEATURE_PINS_PRESENT;
    4918:	f04f 33ff 	mov.w	r3, #4294967295
    491c:	e7e0      	b.n	48e0 <pwm_nrfx_pin_set+0x16c>
    switch (port)
    491e:	2300      	movs	r3, #0
    4920:	e7de      	b.n	48e0 <pwm_nrfx_pin_set+0x16c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4922:	4f1b      	ldr	r7, [pc, #108]	; (4990 <pwm_nrfx_pin_set+0x21c>)
    4924:	f240 2329 	movw	r3, #553	; 0x229
    4928:	463a      	mov	r2, r7
    492a:	491c      	ldr	r1, [pc, #112]	; (499c <pwm_nrfx_pin_set+0x228>)
    492c:	481a      	ldr	r0, [pc, #104]	; (4998 <pwm_nrfx_pin_set+0x224>)
    492e:	f006 fb9c 	bl	b06a <printk>
    4932:	f240 2129 	movw	r1, #553	; 0x229
    4936:	4638      	mov	r0, r7
    4938:	f006 fcf0 	bl	b31c <assert_post_action>
    493c:	e7d6      	b.n	48ec <pwm_nrfx_pin_set+0x178>
        case 0: return NRF_P0;
    493e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4942:	e000      	b.n	4946 <pwm_nrfx_pin_set+0x1d2>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4944:	4a16      	ldr	r2, [pc, #88]	; (49a0 <pwm_nrfx_pin_set+0x22c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4946:	2301      	movs	r3, #1
    4948:	40bb      	lsls	r3, r7
    p_reg->OUTSET = set_mask;
    494a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    494e:	e7b8      	b.n	48c2 <pwm_nrfx_pin_set+0x14e>
			nrfx_pwm_stop(&config->pwm, false);
    4950:	2100      	movs	r1, #0
    4952:	4628      	mov	r0, r5
    4954:	f002 fd1c 	bl	7390 <nrfx_pwm_stop>
	return 0;
    4958:	2000      	movs	r0, #0
    495a:	e7b9      	b.n	48d0 <pwm_nrfx_pin_set+0x15c>
		if (was_stopped) {
    495c:	f1ba 0f00 	cmp.w	sl, #0
    4960:	d013      	beq.n	498a <pwm_nrfx_pin_set+0x216>
			while (!nrfx_pwm_is_stopped(&config->pwm)) {
    4962:	4628      	mov	r0, r5
    4964:	f002 fcdc 	bl	7320 <nrfx_pwm_is_stopped>
    4968:	2800      	cmp	r0, #0
    496a:	d0fa      	beq.n	4962 <pwm_nrfx_pin_set+0x1ee>
			nrfx_pwm_simple_playback(&config->pwm,
    496c:	2302      	movs	r3, #2
    496e:	2201      	movs	r2, #1
    4970:	f105 0118 	add.w	r1, r5, #24
    4974:	4628      	mov	r0, r5
    4976:	f002 fb49 	bl	700c <nrfx_pwm_simple_playback>
	return 0;
    497a:	2000      	movs	r0, #0
    497c:	e7a8      	b.n	48d0 <pwm_nrfx_pin_set+0x15c>
		return -ENOTSUP;
    497e:	f06f 0085 	mvn.w	r0, #133	; 0x85
    4982:	e7a5      	b.n	48d0 <pwm_nrfx_pin_set+0x15c>
		return -EINVAL;
    4984:	f06f 0015 	mvn.w	r0, #21
    4988:	e7a2      	b.n	48d0 <pwm_nrfx_pin_set+0x15c>
	return 0;
    498a:	2000      	movs	r0, #0
    498c:	e7a0      	b.n	48d0 <pwm_nrfx_pin_set+0x15c>
    498e:	bf00      	nop
    4990:	0000cb64 	.word	0x0000cb64
    4994:	0000c3e8 	.word	0x0000c3e8
    4998:	0000c46c 	.word	0x0000c46c
    499c:	0000cb98 	.word	0x0000cb98
    49a0:	50000300 	.word	0x50000300

000049a4 <baudrate_set>:
	return dev->data;
}

static inline const struct uarte_nrfx_config *get_dev_config(const struct device *dev)
{
	return dev->config;
    49a4:	6843      	ldr	r3, [r0, #4]

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = get_dev_config(dev);

	return config->uarte_regs;
    49a6:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    49a8:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    49ac:	d06f      	beq.n	4a8e <baudrate_set+0xea>
    49ae:	d83a      	bhi.n	4a26 <baudrate_set+0x82>
    49b0:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    49b4:	d06e      	beq.n	4a94 <baudrate_set+0xf0>
    49b6:	d90a      	bls.n	49ce <baudrate_set+0x2a>
    49b8:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    49bc:	d075      	beq.n	4aaa <baudrate_set+0x106>
    49be:	d924      	bls.n	4a0a <baudrate_set+0x66>
    49c0:	f647 2312 	movw	r3, #31250	; 0x7a12
    49c4:	4299      	cmp	r1, r3
    49c6:	d12b      	bne.n	4a20 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    49c8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    49cc:	e013      	b.n	49f6 <baudrate_set+0x52>
	switch (baudrate) {
    49ce:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    49d2:	d061      	beq.n	4a98 <baudrate_set+0xf4>
    49d4:	d907      	bls.n	49e6 <baudrate_set+0x42>
    49d6:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    49da:	d063      	beq.n	4aa4 <baudrate_set+0x100>
    49dc:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    49e0:	d110      	bne.n	4a04 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    49e2:	4b3c      	ldr	r3, [pc, #240]	; (4ad4 <baudrate_set+0x130>)
    49e4:	e007      	b.n	49f6 <baudrate_set+0x52>
	switch (baudrate) {
    49e6:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    49ea:	d058      	beq.n	4a9e <baudrate_set+0xfa>
    49ec:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    49f0:	d105      	bne.n	49fe <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    49f2:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    49f6:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    49fa:	2000      	movs	r0, #0
    49fc:	4770      	bx	lr
	switch (baudrate) {
    49fe:	f06f 0015 	mvn.w	r0, #21
    4a02:	4770      	bx	lr
    4a04:	f06f 0015 	mvn.w	r0, #21
    4a08:	4770      	bx	lr
    4a0a:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    4a0e:	d04e      	beq.n	4aae <baudrate_set+0x10a>
    4a10:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    4a14:	d101      	bne.n	4a1a <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    4a16:	4b30      	ldr	r3, [pc, #192]	; (4ad8 <baudrate_set+0x134>)
    4a18:	e7ed      	b.n	49f6 <baudrate_set+0x52>
	switch (baudrate) {
    4a1a:	f06f 0015 	mvn.w	r0, #21
    4a1e:	4770      	bx	lr
    4a20:	f06f 0015 	mvn.w	r0, #21
    4a24:	4770      	bx	lr
    4a26:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    4a2a:	d042      	beq.n	4ab2 <baudrate_set+0x10e>
    4a2c:	d909      	bls.n	4a42 <baudrate_set+0x9e>
    4a2e:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    4a32:	d046      	beq.n	4ac2 <baudrate_set+0x11e>
    4a34:	d91f      	bls.n	4a76 <baudrate_set+0xd2>
    4a36:	4b29      	ldr	r3, [pc, #164]	; (4adc <baudrate_set+0x138>)
    4a38:	4299      	cmp	r1, r3
    4a3a:	d148      	bne.n	4ace <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    4a3c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4a40:	e7d9      	b.n	49f6 <baudrate_set+0x52>
	switch (baudrate) {
    4a42:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    4a46:	d037      	beq.n	4ab8 <baudrate_set+0x114>
    4a48:	d905      	bls.n	4a56 <baudrate_set+0xb2>
    4a4a:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    4a4e:	d10f      	bne.n	4a70 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    4a50:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    4a54:	e7cf      	b.n	49f6 <baudrate_set+0x52>
	switch (baudrate) {
    4a56:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    4a5a:	4299      	cmp	r1, r3
    4a5c:	d02e      	beq.n	4abc <baudrate_set+0x118>
    4a5e:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    4a62:	d102      	bne.n	4a6a <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    4a64:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    4a68:	e7c5      	b.n	49f6 <baudrate_set+0x52>
	switch (baudrate) {
    4a6a:	f06f 0015 	mvn.w	r0, #21
    4a6e:	4770      	bx	lr
    4a70:	f06f 0015 	mvn.w	r0, #21
    4a74:	4770      	bx	lr
    4a76:	4b1a      	ldr	r3, [pc, #104]	; (4ae0 <baudrate_set+0x13c>)
    4a78:	4299      	cmp	r1, r3
    4a7a:	d025      	beq.n	4ac8 <baudrate_set+0x124>
    4a7c:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    4a80:	d102      	bne.n	4a88 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    4a82:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    4a86:	e7b6      	b.n	49f6 <baudrate_set+0x52>
	switch (baudrate) {
    4a88:	f06f 0015 	mvn.w	r0, #21
    4a8c:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    4a8e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    4a92:	e7b0      	b.n	49f6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    4a94:	4b13      	ldr	r3, [pc, #76]	; (4ae4 <baudrate_set+0x140>)
    4a96:	e7ae      	b.n	49f6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    4a98:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    4a9c:	e7ab      	b.n	49f6 <baudrate_set+0x52>
	switch (baudrate) {
    4a9e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    4aa2:	e7a8      	b.n	49f6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    4aa4:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    4aa8:	e7a5      	b.n	49f6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    4aaa:	4b0f      	ldr	r3, [pc, #60]	; (4ae8 <baudrate_set+0x144>)
    4aac:	e7a3      	b.n	49f6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    4aae:	4b0f      	ldr	r3, [pc, #60]	; (4aec <baudrate_set+0x148>)
    4ab0:	e7a1      	b.n	49f6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    4ab2:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    4ab6:	e79e      	b.n	49f6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    4ab8:	4b0d      	ldr	r3, [pc, #52]	; (4af0 <baudrate_set+0x14c>)
    4aba:	e79c      	b.n	49f6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    4abc:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    4ac0:	e799      	b.n	49f6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    4ac2:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    4ac6:	e796      	b.n	49f6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    4ac8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    4acc:	e793      	b.n	49f6 <baudrate_set+0x52>
	switch (baudrate) {
    4ace:	f06f 0015 	mvn.w	r0, #21
}
    4ad2:	4770      	bx	lr
    4ad4:	0013b000 	.word	0x0013b000
    4ad8:	004ea000 	.word	0x004ea000
    4adc:	000f4240 	.word	0x000f4240
    4ae0:	0003d090 	.word	0x0003d090
    4ae4:	00275000 	.word	0x00275000
    4ae8:	0075c000 	.word	0x0075c000
    4aec:	003af000 	.word	0x003af000
    4af0:	013a9000 	.word	0x013a9000

00004af4 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    4af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4af8:	4605      	mov	r5, r0
    4afa:	460f      	mov	r7, r1
	return dev->data;
    4afc:	f8d0 8010 	ldr.w	r8, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4b00:	f007 f961 	bl	bdc6 <k_is_in_isr>
    4b04:	b920      	cbnz	r0, 4b10 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
    4b06:	4b16      	ldr	r3, [pc, #88]	; (4b60 <uarte_nrfx_poll_out+0x6c>)
    4b08:	781b      	ldrb	r3, [r3, #0]
    4b0a:	b1ab      	cbz	r3, 4b38 <uarte_nrfx_poll_out+0x44>
    4b0c:	2300      	movs	r3, #0
    4b0e:	e000      	b.n	4b12 <uarte_nrfx_poll_out+0x1e>
    4b10:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
    4b12:	b19b      	cbz	r3, 4b3c <uarte_nrfx_poll_out+0x48>
	__asm__ volatile(
    4b14:	f04f 0320 	mov.w	r3, #32
    4b18:	f3ef 8411 	mrs	r4, BASEPRI
    4b1c:	f383 8812 	msr	BASEPRI_MAX, r3
    4b20:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
    4b24:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    4b26:	4628      	mov	r0, r5
    4b28:	f006 ff4a 	bl	b9c0 <is_tx_ready>
    4b2c:	b950      	cbnz	r0, 4b44 <uarte_nrfx_poll_out+0x50>
	__asm__ volatile(
    4b2e:	f384 8811 	msr	BASEPRI, r4
    4b32:	f3bf 8f6f 	isb	sy
}
    4b36:	e7ed      	b.n	4b14 <uarte_nrfx_poll_out+0x20>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4b38:	2301      	movs	r3, #1
    4b3a:	e7ea      	b.n	4b12 <uarte_nrfx_poll_out+0x1e>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    4b3c:	4628      	mov	r0, r5
    4b3e:	f006 ff8e 	bl	ba5e <wait_tx_ready>
    4b42:	4606      	mov	r6, r0
	}

	data->char_out = c;
    4b44:	4641      	mov	r1, r8
    4b46:	f801 7f10 	strb.w	r7, [r1, #16]!
	tx_start(dev, &data->char_out, 1);
    4b4a:	2201      	movs	r2, #1
    4b4c:	4628      	mov	r0, r5
    4b4e:	f006 ff51 	bl	b9f4 <tx_start>
	__asm__ volatile(
    4b52:	f386 8811 	msr	BASEPRI, r6
    4b56:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    4b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4b5e:	bf00      	nop
    4b60:	20001299 	.word	0x20001299

00004b64 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    4b64:	b538      	push	{r3, r4, r5, lr}
    4b66:	4604      	mov	r4, r0
    4b68:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    4b6a:	f101 0012 	add.w	r0, r1, #18
    4b6e:	f002 f89d 	bl	6cac <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    4b72:	4b0c      	ldr	r3, [pc, #48]	; (4ba4 <endtx_stoptx_ppi_init+0x40>)
    4b74:	4298      	cmp	r0, r3
    4b76:	d111      	bne.n	4b9c <endtx_stoptx_ppi_init+0x38>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    4b78:	7cab      	ldrb	r3, [r5, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    4b7a:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    4b7e:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    4b80:	4a09      	ldr	r2, [pc, #36]	; (4ba8 <endtx_stoptx_ppi_init+0x44>)
    4b82:	33a2      	adds	r3, #162	; 0xa2
    4b84:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    4b88:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    4b8c:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    4b8e:	7ca9      	ldrb	r1, [r5, #18]
    4b90:	2301      	movs	r3, #1
    4b92:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    4b94:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    4b98:	2000      	movs	r0, #0
}
    4b9a:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
    4b9c:	f06f 0004 	mvn.w	r0, #4
    4ba0:	e7fb      	b.n	4b9a <endtx_stoptx_ppi_init+0x36>
    4ba2:	bf00      	nop
    4ba4:	0bad0000 	.word	0x0bad0000
    4ba8:	4001f000 	.word	0x4001f000

00004bac <uarte_nrfx_pins_configure>:
{
    4bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return dev->config;
    4bae:	6844      	ldr	r4, [r0, #4]
	if (!sleep) {
    4bb0:	2900      	cmp	r1, #0
    4bb2:	f040 81ba 	bne.w	4f2a <uarte_nrfx_pins_configure+0x37e>
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    4bb6:	68e5      	ldr	r5, [r4, #12]
    4bb8:	f1b5 3fff 	cmp.w	r5, #4294967295
    4bbc:	d130      	bne.n	4c20 <uarte_nrfx_pins_configure+0x74>
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    4bbe:	6925      	ldr	r5, [r4, #16]
    4bc0:	f1b5 3fff 	cmp.w	r5, #4294967295
    4bc4:	f000 80c7 	beq.w	4d56 <uarte_nrfx_pins_configure+0x1aa>
					   (cfg->rx_pull_up ?
    4bc8:	7f23      	ldrb	r3, [r4, #28]
			nrf_gpio_cfg_input(cfg->rx_pin,
    4bca:	2b00      	cmp	r3, #0
    4bcc:	f000 80a5 	beq.w	4d1a <uarte_nrfx_pins_configure+0x16e>
    4bd0:	2603      	movs	r6, #3
    switch (port)
    4bd2:	096b      	lsrs	r3, r5, #5
    4bd4:	f000 80a3 	beq.w	4d1e <uarte_nrfx_pins_configure+0x172>
    4bd8:	2b01      	cmp	r3, #1
    4bda:	f040 80a3 	bne.w	4d24 <uarte_nrfx_pins_configure+0x178>
            mask = P1_FEATURE_PINS_PRESENT;
    4bde:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4be2:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4be6:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4be8:	f013 0f01 	tst.w	r3, #1
    4bec:	f000 809c 	beq.w	4d28 <uarte_nrfx_pins_configure+0x17c>
    *p_pin = pin_number & 0x1F;
    4bf0:	f005 071f 	and.w	r7, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4bf4:	096d      	lsrs	r5, r5, #5
    4bf6:	f000 80a5 	beq.w	4d44 <uarte_nrfx_pins_configure+0x198>
    4bfa:	2d01      	cmp	r5, #1
    4bfc:	f000 80a5 	beq.w	4d4a <uarte_nrfx_pins_configure+0x19e>
            NRFX_ASSERT(0);
    4c00:	4dba      	ldr	r5, [pc, #744]	; (4eec <uarte_nrfx_pins_configure+0x340>)
    4c02:	f240 232e 	movw	r3, #558	; 0x22e
    4c06:	462a      	mov	r2, r5
    4c08:	49b9      	ldr	r1, [pc, #740]	; (4ef0 <uarte_nrfx_pins_configure+0x344>)
    4c0a:	48ba      	ldr	r0, [pc, #744]	; (4ef4 <uarte_nrfx_pins_configure+0x348>)
    4c0c:	f006 fa2d 	bl	b06a <printk>
    4c10:	f240 212e 	movw	r1, #558	; 0x22e
    4c14:	4628      	mov	r0, r5
    4c16:	f006 fb81 	bl	b31c <assert_post_action>
        case 0: return NRF_P0;
    4c1a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4c1e:	e095      	b.n	4d4c <uarte_nrfx_pins_configure+0x1a0>
    switch (port)
    4c20:	096b      	lsrs	r3, r5, #5
    4c22:	d01f      	beq.n	4c64 <uarte_nrfx_pins_configure+0xb8>
    4c24:	2b01      	cmp	r3, #1
    4c26:	d120      	bne.n	4c6a <uarte_nrfx_pins_configure+0xbe>
            mask = P1_FEATURE_PINS_PRESENT;
    4c28:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4c2c:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4c30:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4c32:	f013 0f01 	tst.w	r3, #1
    4c36:	d01a      	beq.n	4c6e <uarte_nrfx_pins_configure+0xc2>
    *p_pin = pin_number & 0x1F;
    4c38:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4c3c:	096d      	lsrs	r5, r5, #5
    4c3e:	d024      	beq.n	4c8a <uarte_nrfx_pins_configure+0xde>
    4c40:	2d01      	cmp	r5, #1
    4c42:	d025      	beq.n	4c90 <uarte_nrfx_pins_configure+0xe4>
            NRFX_ASSERT(0);
    4c44:	4da9      	ldr	r5, [pc, #676]	; (4eec <uarte_nrfx_pins_configure+0x340>)
    4c46:	f240 232e 	movw	r3, #558	; 0x22e
    4c4a:	462a      	mov	r2, r5
    4c4c:	49a8      	ldr	r1, [pc, #672]	; (4ef0 <uarte_nrfx_pins_configure+0x344>)
    4c4e:	48a9      	ldr	r0, [pc, #676]	; (4ef4 <uarte_nrfx_pins_configure+0x348>)
    4c50:	f006 fa0b 	bl	b06a <printk>
    4c54:	f240 212e 	movw	r1, #558	; 0x22e
    4c58:	4628      	mov	r0, r5
    4c5a:	f006 fb5f 	bl	b31c <assert_post_action>
        case 0: return NRF_P0;
    4c5e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4c62:	e016      	b.n	4c92 <uarte_nrfx_pins_configure+0xe6>
            mask = P0_FEATURE_PINS_PRESENT;
    4c64:	f04f 33ff 	mov.w	r3, #4294967295
    4c68:	e7e0      	b.n	4c2c <uarte_nrfx_pins_configure+0x80>
    switch (port)
    4c6a:	2300      	movs	r3, #0
    4c6c:	e7de      	b.n	4c2c <uarte_nrfx_pins_configure+0x80>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4c6e:	4e9f      	ldr	r6, [pc, #636]	; (4eec <uarte_nrfx_pins_configure+0x340>)
    4c70:	f240 2329 	movw	r3, #553	; 0x229
    4c74:	4632      	mov	r2, r6
    4c76:	49a0      	ldr	r1, [pc, #640]	; (4ef8 <uarte_nrfx_pins_configure+0x34c>)
    4c78:	489e      	ldr	r0, [pc, #632]	; (4ef4 <uarte_nrfx_pins_configure+0x348>)
    4c7a:	f006 f9f6 	bl	b06a <printk>
    4c7e:	f240 2129 	movw	r1, #553	; 0x229
    4c82:	4630      	mov	r0, r6
    4c84:	f006 fb4a 	bl	b31c <assert_post_action>
    4c88:	e7d6      	b.n	4c38 <uarte_nrfx_pins_configure+0x8c>
        case 0: return NRF_P0;
    4c8a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4c8e:	e000      	b.n	4c92 <uarte_nrfx_pins_configure+0xe6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4c90:	4a9a      	ldr	r2, [pc, #616]	; (4efc <uarte_nrfx_pins_configure+0x350>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4c92:	2301      	movs	r3, #1
    4c94:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    4c96:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_gpio_cfg_output(cfg->tx_pin);
    4c9a:	68e5      	ldr	r5, [r4, #12]
    switch (port)
    4c9c:	096b      	lsrs	r3, r5, #5
    4c9e:	d01f      	beq.n	4ce0 <uarte_nrfx_pins_configure+0x134>
    4ca0:	2b01      	cmp	r3, #1
    4ca2:	d120      	bne.n	4ce6 <uarte_nrfx_pins_configure+0x13a>
            mask = P1_FEATURE_PINS_PRESENT;
    4ca4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4ca8:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4cac:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4cae:	f013 0f01 	tst.w	r3, #1
    4cb2:	d01a      	beq.n	4cea <uarte_nrfx_pins_configure+0x13e>
    *p_pin = pin_number & 0x1F;
    4cb4:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4cb8:	096d      	lsrs	r5, r5, #5
    4cba:	d024      	beq.n	4d06 <uarte_nrfx_pins_configure+0x15a>
    4cbc:	2d01      	cmp	r5, #1
    4cbe:	d025      	beq.n	4d0c <uarte_nrfx_pins_configure+0x160>
            NRFX_ASSERT(0);
    4cc0:	4d8a      	ldr	r5, [pc, #552]	; (4eec <uarte_nrfx_pins_configure+0x340>)
    4cc2:	f240 232e 	movw	r3, #558	; 0x22e
    4cc6:	462a      	mov	r2, r5
    4cc8:	4989      	ldr	r1, [pc, #548]	; (4ef0 <uarte_nrfx_pins_configure+0x344>)
    4cca:	488a      	ldr	r0, [pc, #552]	; (4ef4 <uarte_nrfx_pins_configure+0x348>)
    4ccc:	f006 f9cd 	bl	b06a <printk>
    4cd0:	f240 212e 	movw	r1, #558	; 0x22e
    4cd4:	4628      	mov	r0, r5
    4cd6:	f006 fb21 	bl	b31c <assert_post_action>
        case 0: return NRF_P0;
    4cda:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4cde:	e016      	b.n	4d0e <uarte_nrfx_pins_configure+0x162>
            mask = P0_FEATURE_PINS_PRESENT;
    4ce0:	f04f 33ff 	mov.w	r3, #4294967295
    4ce4:	e7e0      	b.n	4ca8 <uarte_nrfx_pins_configure+0xfc>
    switch (port)
    4ce6:	2300      	movs	r3, #0
    4ce8:	e7de      	b.n	4ca8 <uarte_nrfx_pins_configure+0xfc>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4cea:	4e80      	ldr	r6, [pc, #512]	; (4eec <uarte_nrfx_pins_configure+0x340>)
    4cec:	f240 2329 	movw	r3, #553	; 0x229
    4cf0:	4632      	mov	r2, r6
    4cf2:	4981      	ldr	r1, [pc, #516]	; (4ef8 <uarte_nrfx_pins_configure+0x34c>)
    4cf4:	487f      	ldr	r0, [pc, #508]	; (4ef4 <uarte_nrfx_pins_configure+0x348>)
    4cf6:	f006 f9b8 	bl	b06a <printk>
    4cfa:	f240 2129 	movw	r1, #553	; 0x229
    4cfe:	4630      	mov	r0, r6
    4d00:	f006 fb0c 	bl	b31c <assert_post_action>
    4d04:	e7d6      	b.n	4cb4 <uarte_nrfx_pins_configure+0x108>
        case 0: return NRF_P0;
    4d06:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4d0a:	e000      	b.n	4d0e <uarte_nrfx_pins_configure+0x162>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4d0c:	4b7b      	ldr	r3, [pc, #492]	; (4efc <uarte_nrfx_pins_configure+0x350>)
    reg->PIN_CNF[pin_number] = cnf;
    4d0e:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    4d12:	2203      	movs	r2, #3
    4d14:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
    4d18:	e751      	b.n	4bbe <uarte_nrfx_pins_configure+0x12>
			nrf_gpio_cfg_input(cfg->rx_pin,
    4d1a:	2600      	movs	r6, #0
    4d1c:	e759      	b.n	4bd2 <uarte_nrfx_pins_configure+0x26>
            mask = P0_FEATURE_PINS_PRESENT;
    4d1e:	f04f 33ff 	mov.w	r3, #4294967295
    4d22:	e75e      	b.n	4be2 <uarte_nrfx_pins_configure+0x36>
    switch (port)
    4d24:	2300      	movs	r3, #0
    4d26:	e75c      	b.n	4be2 <uarte_nrfx_pins_configure+0x36>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4d28:	4f70      	ldr	r7, [pc, #448]	; (4eec <uarte_nrfx_pins_configure+0x340>)
    4d2a:	f240 2329 	movw	r3, #553	; 0x229
    4d2e:	463a      	mov	r2, r7
    4d30:	4971      	ldr	r1, [pc, #452]	; (4ef8 <uarte_nrfx_pins_configure+0x34c>)
    4d32:	4870      	ldr	r0, [pc, #448]	; (4ef4 <uarte_nrfx_pins_configure+0x348>)
    4d34:	f006 f999 	bl	b06a <printk>
    4d38:	f240 2129 	movw	r1, #553	; 0x229
    4d3c:	4638      	mov	r0, r7
    4d3e:	f006 faed 	bl	b31c <assert_post_action>
    4d42:	e755      	b.n	4bf0 <uarte_nrfx_pins_configure+0x44>
        case 0: return NRF_P0;
    4d44:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4d48:	e000      	b.n	4d4c <uarte_nrfx_pins_configure+0x1a0>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4d4a:	4b6c      	ldr	r3, [pc, #432]	; (4efc <uarte_nrfx_pins_configure+0x350>)
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4d4c:	00b6      	lsls	r6, r6, #2
    reg->PIN_CNF[pin_number] = cnf;
    4d4e:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    4d52:	f843 6027 	str.w	r6, [r3, r7, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    4d56:	6965      	ldr	r5, [r4, #20]
    4d58:	f1b5 3fff 	cmp.w	r5, #4294967295
    4d5c:	d130      	bne.n	4dc0 <uarte_nrfx_pins_configure+0x214>
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    4d5e:	69a5      	ldr	r5, [r4, #24]
    4d60:	f1b5 3fff 	cmp.w	r5, #4294967295
    4d64:	f000 80d2 	beq.w	4f0c <uarte_nrfx_pins_configure+0x360>
					   (cfg->cts_pull_up ?
    4d68:	7f63      	ldrb	r3, [r4, #29]
			nrf_gpio_cfg_input(cfg->cts_pin,
    4d6a:	2b00      	cmp	r3, #0
    4d6c:	f000 80a5 	beq.w	4eba <uarte_nrfx_pins_configure+0x30e>
    4d70:	2703      	movs	r7, #3
    switch (port)
    4d72:	096b      	lsrs	r3, r5, #5
    4d74:	f000 80a3 	beq.w	4ebe <uarte_nrfx_pins_configure+0x312>
    4d78:	2b01      	cmp	r3, #1
    4d7a:	f040 80a3 	bne.w	4ec4 <uarte_nrfx_pins_configure+0x318>
            mask = P1_FEATURE_PINS_PRESENT;
    4d7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4d82:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4d86:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4d88:	f013 0f01 	tst.w	r3, #1
    4d8c:	f000 809c 	beq.w	4ec8 <uarte_nrfx_pins_configure+0x31c>
    *p_pin = pin_number & 0x1F;
    4d90:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4d94:	096d      	lsrs	r5, r5, #5
    4d96:	f000 80a5 	beq.w	4ee4 <uarte_nrfx_pins_configure+0x338>
    4d9a:	2d01      	cmp	r5, #1
    4d9c:	f000 80b0 	beq.w	4f00 <uarte_nrfx_pins_configure+0x354>
            NRFX_ASSERT(0);
    4da0:	4d52      	ldr	r5, [pc, #328]	; (4eec <uarte_nrfx_pins_configure+0x340>)
    4da2:	f240 232e 	movw	r3, #558	; 0x22e
    4da6:	462a      	mov	r2, r5
    4da8:	4951      	ldr	r1, [pc, #324]	; (4ef0 <uarte_nrfx_pins_configure+0x344>)
    4daa:	4852      	ldr	r0, [pc, #328]	; (4ef4 <uarte_nrfx_pins_configure+0x348>)
    4dac:	f006 f95d 	bl	b06a <printk>
    4db0:	f240 212e 	movw	r1, #558	; 0x22e
    4db4:	4628      	mov	r0, r5
    4db6:	f006 fab1 	bl	b31c <assert_post_action>
        case 0: return NRF_P0;
    4dba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4dbe:	e0a0      	b.n	4f02 <uarte_nrfx_pins_configure+0x356>
    switch (port)
    4dc0:	096b      	lsrs	r3, r5, #5
    4dc2:	d01f      	beq.n	4e04 <uarte_nrfx_pins_configure+0x258>
    4dc4:	2b01      	cmp	r3, #1
    4dc6:	d120      	bne.n	4e0a <uarte_nrfx_pins_configure+0x25e>
            mask = P1_FEATURE_PINS_PRESENT;
    4dc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4dcc:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4dd0:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4dd2:	f013 0f01 	tst.w	r3, #1
    4dd6:	d01a      	beq.n	4e0e <uarte_nrfx_pins_configure+0x262>
    *p_pin = pin_number & 0x1F;
    4dd8:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4ddc:	096d      	lsrs	r5, r5, #5
    4dde:	d024      	beq.n	4e2a <uarte_nrfx_pins_configure+0x27e>
    4de0:	2d01      	cmp	r5, #1
    4de2:	d025      	beq.n	4e30 <uarte_nrfx_pins_configure+0x284>
            NRFX_ASSERT(0);
    4de4:	4d41      	ldr	r5, [pc, #260]	; (4eec <uarte_nrfx_pins_configure+0x340>)
    4de6:	f240 232e 	movw	r3, #558	; 0x22e
    4dea:	462a      	mov	r2, r5
    4dec:	4940      	ldr	r1, [pc, #256]	; (4ef0 <uarte_nrfx_pins_configure+0x344>)
    4dee:	4841      	ldr	r0, [pc, #260]	; (4ef4 <uarte_nrfx_pins_configure+0x348>)
    4df0:	f006 f93b 	bl	b06a <printk>
    4df4:	f240 212e 	movw	r1, #558	; 0x22e
    4df8:	4628      	mov	r0, r5
    4dfa:	f006 fa8f 	bl	b31c <assert_post_action>
        case 0: return NRF_P0;
    4dfe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4e02:	e016      	b.n	4e32 <uarte_nrfx_pins_configure+0x286>
            mask = P0_FEATURE_PINS_PRESENT;
    4e04:	f04f 33ff 	mov.w	r3, #4294967295
    4e08:	e7e0      	b.n	4dcc <uarte_nrfx_pins_configure+0x220>
    switch (port)
    4e0a:	2300      	movs	r3, #0
    4e0c:	e7de      	b.n	4dcc <uarte_nrfx_pins_configure+0x220>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4e0e:	4e37      	ldr	r6, [pc, #220]	; (4eec <uarte_nrfx_pins_configure+0x340>)
    4e10:	f240 2329 	movw	r3, #553	; 0x229
    4e14:	4632      	mov	r2, r6
    4e16:	4938      	ldr	r1, [pc, #224]	; (4ef8 <uarte_nrfx_pins_configure+0x34c>)
    4e18:	4836      	ldr	r0, [pc, #216]	; (4ef4 <uarte_nrfx_pins_configure+0x348>)
    4e1a:	f006 f926 	bl	b06a <printk>
    4e1e:	f240 2129 	movw	r1, #553	; 0x229
    4e22:	4630      	mov	r0, r6
    4e24:	f006 fa7a 	bl	b31c <assert_post_action>
    4e28:	e7d6      	b.n	4dd8 <uarte_nrfx_pins_configure+0x22c>
        case 0: return NRF_P0;
    4e2a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4e2e:	e000      	b.n	4e32 <uarte_nrfx_pins_configure+0x286>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4e30:	4a32      	ldr	r2, [pc, #200]	; (4efc <uarte_nrfx_pins_configure+0x350>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4e32:	2301      	movs	r3, #1
    4e34:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    4e36:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_gpio_cfg_output(cfg->rts_pin);
    4e3a:	6965      	ldr	r5, [r4, #20]
    switch (port)
    4e3c:	096b      	lsrs	r3, r5, #5
    4e3e:	d01f      	beq.n	4e80 <uarte_nrfx_pins_configure+0x2d4>
    4e40:	2b01      	cmp	r3, #1
    4e42:	d120      	bne.n	4e86 <uarte_nrfx_pins_configure+0x2da>
            mask = P1_FEATURE_PINS_PRESENT;
    4e44:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4e48:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4e4c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4e4e:	f013 0f01 	tst.w	r3, #1
    4e52:	d01a      	beq.n	4e8a <uarte_nrfx_pins_configure+0x2de>
    *p_pin = pin_number & 0x1F;
    4e54:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4e58:	096d      	lsrs	r5, r5, #5
    4e5a:	d024      	beq.n	4ea6 <uarte_nrfx_pins_configure+0x2fa>
    4e5c:	2d01      	cmp	r5, #1
    4e5e:	d025      	beq.n	4eac <uarte_nrfx_pins_configure+0x300>
            NRFX_ASSERT(0);
    4e60:	4d22      	ldr	r5, [pc, #136]	; (4eec <uarte_nrfx_pins_configure+0x340>)
    4e62:	f240 232e 	movw	r3, #558	; 0x22e
    4e66:	462a      	mov	r2, r5
    4e68:	4921      	ldr	r1, [pc, #132]	; (4ef0 <uarte_nrfx_pins_configure+0x344>)
    4e6a:	4822      	ldr	r0, [pc, #136]	; (4ef4 <uarte_nrfx_pins_configure+0x348>)
    4e6c:	f006 f8fd 	bl	b06a <printk>
    4e70:	f240 212e 	movw	r1, #558	; 0x22e
    4e74:	4628      	mov	r0, r5
    4e76:	f006 fa51 	bl	b31c <assert_post_action>
        case 0: return NRF_P0;
    4e7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4e7e:	e016      	b.n	4eae <uarte_nrfx_pins_configure+0x302>
            mask = P0_FEATURE_PINS_PRESENT;
    4e80:	f04f 33ff 	mov.w	r3, #4294967295
    4e84:	e7e0      	b.n	4e48 <uarte_nrfx_pins_configure+0x29c>
    switch (port)
    4e86:	2300      	movs	r3, #0
    4e88:	e7de      	b.n	4e48 <uarte_nrfx_pins_configure+0x29c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4e8a:	4e18      	ldr	r6, [pc, #96]	; (4eec <uarte_nrfx_pins_configure+0x340>)
    4e8c:	f240 2329 	movw	r3, #553	; 0x229
    4e90:	4632      	mov	r2, r6
    4e92:	4919      	ldr	r1, [pc, #100]	; (4ef8 <uarte_nrfx_pins_configure+0x34c>)
    4e94:	4817      	ldr	r0, [pc, #92]	; (4ef4 <uarte_nrfx_pins_configure+0x348>)
    4e96:	f006 f8e8 	bl	b06a <printk>
    4e9a:	f240 2129 	movw	r1, #553	; 0x229
    4e9e:	4630      	mov	r0, r6
    4ea0:	f006 fa3c 	bl	b31c <assert_post_action>
    4ea4:	e7d6      	b.n	4e54 <uarte_nrfx_pins_configure+0x2a8>
        case 0: return NRF_P0;
    4ea6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4eaa:	e000      	b.n	4eae <uarte_nrfx_pins_configure+0x302>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4eac:	4b13      	ldr	r3, [pc, #76]	; (4efc <uarte_nrfx_pins_configure+0x350>)
    reg->PIN_CNF[pin_number] = cnf;
    4eae:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    4eb2:	2203      	movs	r2, #3
    4eb4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
    4eb8:	e751      	b.n	4d5e <uarte_nrfx_pins_configure+0x1b2>
			nrf_gpio_cfg_input(cfg->cts_pin,
    4eba:	2700      	movs	r7, #0
    4ebc:	e759      	b.n	4d72 <uarte_nrfx_pins_configure+0x1c6>
            mask = P0_FEATURE_PINS_PRESENT;
    4ebe:	f04f 33ff 	mov.w	r3, #4294967295
    4ec2:	e75e      	b.n	4d82 <uarte_nrfx_pins_configure+0x1d6>
    switch (port)
    4ec4:	2300      	movs	r3, #0
    4ec6:	e75c      	b.n	4d82 <uarte_nrfx_pins_configure+0x1d6>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4ec8:	4e08      	ldr	r6, [pc, #32]	; (4eec <uarte_nrfx_pins_configure+0x340>)
    4eca:	f240 2329 	movw	r3, #553	; 0x229
    4ece:	4632      	mov	r2, r6
    4ed0:	4909      	ldr	r1, [pc, #36]	; (4ef8 <uarte_nrfx_pins_configure+0x34c>)
    4ed2:	4808      	ldr	r0, [pc, #32]	; (4ef4 <uarte_nrfx_pins_configure+0x348>)
    4ed4:	f006 f8c9 	bl	b06a <printk>
    4ed8:	f240 2129 	movw	r1, #553	; 0x229
    4edc:	4630      	mov	r0, r6
    4ede:	f006 fa1d 	bl	b31c <assert_post_action>
    4ee2:	e755      	b.n	4d90 <uarte_nrfx_pins_configure+0x1e4>
        case 0: return NRF_P0;
    4ee4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4ee8:	e00b      	b.n	4f02 <uarte_nrfx_pins_configure+0x356>
    4eea:	bf00      	nop
    4eec:	0000cb64 	.word	0x0000cb64
    4ef0:	0000c3e8 	.word	0x0000c3e8
    4ef4:	0000c46c 	.word	0x0000c46c
    4ef8:	0000cb98 	.word	0x0000cb98
    4efc:	50000300 	.word	0x50000300
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4f00:	4a93      	ldr	r2, [pc, #588]	; (5150 <uarte_nrfx_pins_configure+0x5a4>)
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4f02:	00bf      	lsls	r7, r7, #2
    reg->PIN_CNF[pin_number] = cnf;
    4f04:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    4f08:	f842 7026 	str.w	r7, [r2, r6, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    4f0c:	6823      	ldr	r3, [r4, #0]
    4f0e:	68e1      	ldr	r1, [r4, #12]
    4f10:	6922      	ldr	r2, [r4, #16]
    p_reg->PSEL.TXD = pseltxd;
    4f12:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    4f16:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
    4f1a:	6823      	ldr	r3, [r4, #0]
    4f1c:	6961      	ldr	r1, [r4, #20]
    4f1e:	69a2      	ldr	r2, [r4, #24]
    p_reg->PSEL.RTS = pselrts;
    4f20:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    4f24:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    4f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    4f2a:	68e5      	ldr	r5, [r4, #12]
    4f2c:	f1b5 3fff 	cmp.w	r5, #4294967295
    4f30:	d133      	bne.n	4f9a <uarte_nrfx_pins_configure+0x3ee>
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    4f32:	6925      	ldr	r5, [r4, #16]
    4f34:	f1b5 3fff 	cmp.w	r5, #4294967295
    4f38:	d16e      	bne.n	5018 <uarte_nrfx_pins_configure+0x46c>
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    4f3a:	6965      	ldr	r5, [r4, #20]
    4f3c:	f1b5 3fff 	cmp.w	r5, #4294967295
    4f40:	f040 80a9 	bne.w	5096 <uarte_nrfx_pins_configure+0x4ea>
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    4f44:	69a5      	ldr	r5, [r4, #24]
    4f46:	f1b5 3fff 	cmp.w	r5, #4294967295
    4f4a:	d0df      	beq.n	4f0c <uarte_nrfx_pins_configure+0x360>
    switch (port)
    4f4c:	096b      	lsrs	r3, r5, #5
    4f4e:	f000 80e1 	beq.w	5114 <uarte_nrfx_pins_configure+0x568>
    4f52:	2b01      	cmp	r3, #1
    4f54:	f040 80e1 	bne.w	511a <uarte_nrfx_pins_configure+0x56e>
            mask = P1_FEATURE_PINS_PRESENT;
    4f58:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4f5c:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4f60:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4f62:	f013 0f01 	tst.w	r3, #1
    4f66:	f000 80da 	beq.w	511e <uarte_nrfx_pins_configure+0x572>
    *p_pin = pin_number & 0x1F;
    4f6a:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4f6e:	096d      	lsrs	r5, r5, #5
    4f70:	f000 80e3 	beq.w	513a <uarte_nrfx_pins_configure+0x58e>
    4f74:	2d01      	cmp	r5, #1
    4f76:	f000 80e3 	beq.w	5140 <uarte_nrfx_pins_configure+0x594>
            NRFX_ASSERT(0);
    4f7a:	4d76      	ldr	r5, [pc, #472]	; (5154 <uarte_nrfx_pins_configure+0x5a8>)
    4f7c:	f240 232e 	movw	r3, #558	; 0x22e
    4f80:	462a      	mov	r2, r5
    4f82:	4975      	ldr	r1, [pc, #468]	; (5158 <uarte_nrfx_pins_configure+0x5ac>)
    4f84:	4875      	ldr	r0, [pc, #468]	; (515c <uarte_nrfx_pins_configure+0x5b0>)
    4f86:	f006 f870 	bl	b06a <printk>
    4f8a:	f240 212e 	movw	r1, #558	; 0x22e
    4f8e:	4628      	mov	r0, r5
    4f90:	f006 f9c4 	bl	b31c <assert_post_action>
        case 0: return NRF_P0;
    4f94:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4f98:	e0d3      	b.n	5142 <uarte_nrfx_pins_configure+0x596>
    switch (port)
    4f9a:	096b      	lsrs	r3, r5, #5
    4f9c:	d01f      	beq.n	4fde <uarte_nrfx_pins_configure+0x432>
    4f9e:	2b01      	cmp	r3, #1
    4fa0:	d120      	bne.n	4fe4 <uarte_nrfx_pins_configure+0x438>
            mask = P1_FEATURE_PINS_PRESENT;
    4fa2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4fa6:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4faa:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4fac:	f013 0f01 	tst.w	r3, #1
    4fb0:	d01a      	beq.n	4fe8 <uarte_nrfx_pins_configure+0x43c>
    *p_pin = pin_number & 0x1F;
    4fb2:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4fb6:	096d      	lsrs	r5, r5, #5
    4fb8:	d024      	beq.n	5004 <uarte_nrfx_pins_configure+0x458>
    4fba:	2d01      	cmp	r5, #1
    4fbc:	d025      	beq.n	500a <uarte_nrfx_pins_configure+0x45e>
            NRFX_ASSERT(0);
    4fbe:	4d65      	ldr	r5, [pc, #404]	; (5154 <uarte_nrfx_pins_configure+0x5a8>)
    4fc0:	f240 232e 	movw	r3, #558	; 0x22e
    4fc4:	462a      	mov	r2, r5
    4fc6:	4964      	ldr	r1, [pc, #400]	; (5158 <uarte_nrfx_pins_configure+0x5ac>)
    4fc8:	4864      	ldr	r0, [pc, #400]	; (515c <uarte_nrfx_pins_configure+0x5b0>)
    4fca:	f006 f84e 	bl	b06a <printk>
    4fce:	f240 212e 	movw	r1, #558	; 0x22e
    4fd2:	4628      	mov	r0, r5
    4fd4:	f006 f9a2 	bl	b31c <assert_post_action>
        case 0: return NRF_P0;
    4fd8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4fdc:	e016      	b.n	500c <uarte_nrfx_pins_configure+0x460>
            mask = P0_FEATURE_PINS_PRESENT;
    4fde:	f04f 33ff 	mov.w	r3, #4294967295
    4fe2:	e7e0      	b.n	4fa6 <uarte_nrfx_pins_configure+0x3fa>
    switch (port)
    4fe4:	2300      	movs	r3, #0
    4fe6:	e7de      	b.n	4fa6 <uarte_nrfx_pins_configure+0x3fa>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4fe8:	4e5a      	ldr	r6, [pc, #360]	; (5154 <uarte_nrfx_pins_configure+0x5a8>)
    4fea:	f240 2329 	movw	r3, #553	; 0x229
    4fee:	4632      	mov	r2, r6
    4ff0:	495b      	ldr	r1, [pc, #364]	; (5160 <uarte_nrfx_pins_configure+0x5b4>)
    4ff2:	485a      	ldr	r0, [pc, #360]	; (515c <uarte_nrfx_pins_configure+0x5b0>)
    4ff4:	f006 f839 	bl	b06a <printk>
    4ff8:	f240 2129 	movw	r1, #553	; 0x229
    4ffc:	4630      	mov	r0, r6
    4ffe:	f006 f98d 	bl	b31c <assert_post_action>
    5002:	e7d6      	b.n	4fb2 <uarte_nrfx_pins_configure+0x406>
        case 0: return NRF_P0;
    5004:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5008:	e000      	b.n	500c <uarte_nrfx_pins_configure+0x460>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    500a:	4b51      	ldr	r3, [pc, #324]	; (5150 <uarte_nrfx_pins_configure+0x5a4>)
    reg->PIN_CNF[pin_number] = cnf;
    500c:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    5010:	2202      	movs	r2, #2
    5012:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
    5016:	e78c      	b.n	4f32 <uarte_nrfx_pins_configure+0x386>
    switch (port)
    5018:	096b      	lsrs	r3, r5, #5
    501a:	d01f      	beq.n	505c <uarte_nrfx_pins_configure+0x4b0>
    501c:	2b01      	cmp	r3, #1
    501e:	d120      	bne.n	5062 <uarte_nrfx_pins_configure+0x4b6>
            mask = P1_FEATURE_PINS_PRESENT;
    5020:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    5024:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5028:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    502a:	f013 0f01 	tst.w	r3, #1
    502e:	d01a      	beq.n	5066 <uarte_nrfx_pins_configure+0x4ba>
    *p_pin = pin_number & 0x1F;
    5030:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5034:	096d      	lsrs	r5, r5, #5
    5036:	d024      	beq.n	5082 <uarte_nrfx_pins_configure+0x4d6>
    5038:	2d01      	cmp	r5, #1
    503a:	d025      	beq.n	5088 <uarte_nrfx_pins_configure+0x4dc>
            NRFX_ASSERT(0);
    503c:	4d45      	ldr	r5, [pc, #276]	; (5154 <uarte_nrfx_pins_configure+0x5a8>)
    503e:	f240 232e 	movw	r3, #558	; 0x22e
    5042:	462a      	mov	r2, r5
    5044:	4944      	ldr	r1, [pc, #272]	; (5158 <uarte_nrfx_pins_configure+0x5ac>)
    5046:	4845      	ldr	r0, [pc, #276]	; (515c <uarte_nrfx_pins_configure+0x5b0>)
    5048:	f006 f80f 	bl	b06a <printk>
    504c:	f240 212e 	movw	r1, #558	; 0x22e
    5050:	4628      	mov	r0, r5
    5052:	f006 f963 	bl	b31c <assert_post_action>
        case 0: return NRF_P0;
    5056:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    505a:	e016      	b.n	508a <uarte_nrfx_pins_configure+0x4de>
            mask = P0_FEATURE_PINS_PRESENT;
    505c:	f04f 33ff 	mov.w	r3, #4294967295
    5060:	e7e0      	b.n	5024 <uarte_nrfx_pins_configure+0x478>
    switch (port)
    5062:	2300      	movs	r3, #0
    5064:	e7de      	b.n	5024 <uarte_nrfx_pins_configure+0x478>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5066:	4e3b      	ldr	r6, [pc, #236]	; (5154 <uarte_nrfx_pins_configure+0x5a8>)
    5068:	f240 2329 	movw	r3, #553	; 0x229
    506c:	4632      	mov	r2, r6
    506e:	493c      	ldr	r1, [pc, #240]	; (5160 <uarte_nrfx_pins_configure+0x5b4>)
    5070:	483a      	ldr	r0, [pc, #232]	; (515c <uarte_nrfx_pins_configure+0x5b0>)
    5072:	f005 fffa 	bl	b06a <printk>
    5076:	f240 2129 	movw	r1, #553	; 0x229
    507a:	4630      	mov	r0, r6
    507c:	f006 f94e 	bl	b31c <assert_post_action>
    5080:	e7d6      	b.n	5030 <uarte_nrfx_pins_configure+0x484>
        case 0: return NRF_P0;
    5082:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5086:	e000      	b.n	508a <uarte_nrfx_pins_configure+0x4de>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5088:	4b31      	ldr	r3, [pc, #196]	; (5150 <uarte_nrfx_pins_configure+0x5a4>)
    reg->PIN_CNF[pin_number] = cnf;
    508a:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    508e:	2202      	movs	r2, #2
    5090:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
    5094:	e751      	b.n	4f3a <uarte_nrfx_pins_configure+0x38e>
    switch (port)
    5096:	096b      	lsrs	r3, r5, #5
    5098:	d01f      	beq.n	50da <uarte_nrfx_pins_configure+0x52e>
    509a:	2b01      	cmp	r3, #1
    509c:	d120      	bne.n	50e0 <uarte_nrfx_pins_configure+0x534>
            mask = P1_FEATURE_PINS_PRESENT;
    509e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    50a2:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    50a6:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    50a8:	f013 0f01 	tst.w	r3, #1
    50ac:	d01a      	beq.n	50e4 <uarte_nrfx_pins_configure+0x538>
    *p_pin = pin_number & 0x1F;
    50ae:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    50b2:	096d      	lsrs	r5, r5, #5
    50b4:	d024      	beq.n	5100 <uarte_nrfx_pins_configure+0x554>
    50b6:	2d01      	cmp	r5, #1
    50b8:	d025      	beq.n	5106 <uarte_nrfx_pins_configure+0x55a>
            NRFX_ASSERT(0);
    50ba:	4d26      	ldr	r5, [pc, #152]	; (5154 <uarte_nrfx_pins_configure+0x5a8>)
    50bc:	f240 232e 	movw	r3, #558	; 0x22e
    50c0:	462a      	mov	r2, r5
    50c2:	4925      	ldr	r1, [pc, #148]	; (5158 <uarte_nrfx_pins_configure+0x5ac>)
    50c4:	4825      	ldr	r0, [pc, #148]	; (515c <uarte_nrfx_pins_configure+0x5b0>)
    50c6:	f005 ffd0 	bl	b06a <printk>
    50ca:	f240 212e 	movw	r1, #558	; 0x22e
    50ce:	4628      	mov	r0, r5
    50d0:	f006 f924 	bl	b31c <assert_post_action>
        case 0: return NRF_P0;
    50d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    50d8:	e016      	b.n	5108 <uarte_nrfx_pins_configure+0x55c>
            mask = P0_FEATURE_PINS_PRESENT;
    50da:	f04f 33ff 	mov.w	r3, #4294967295
    50de:	e7e0      	b.n	50a2 <uarte_nrfx_pins_configure+0x4f6>
    switch (port)
    50e0:	2300      	movs	r3, #0
    50e2:	e7de      	b.n	50a2 <uarte_nrfx_pins_configure+0x4f6>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    50e4:	4e1b      	ldr	r6, [pc, #108]	; (5154 <uarte_nrfx_pins_configure+0x5a8>)
    50e6:	f240 2329 	movw	r3, #553	; 0x229
    50ea:	4632      	mov	r2, r6
    50ec:	491c      	ldr	r1, [pc, #112]	; (5160 <uarte_nrfx_pins_configure+0x5b4>)
    50ee:	481b      	ldr	r0, [pc, #108]	; (515c <uarte_nrfx_pins_configure+0x5b0>)
    50f0:	f005 ffbb 	bl	b06a <printk>
    50f4:	f240 2129 	movw	r1, #553	; 0x229
    50f8:	4630      	mov	r0, r6
    50fa:	f006 f90f 	bl	b31c <assert_post_action>
    50fe:	e7d6      	b.n	50ae <uarte_nrfx_pins_configure+0x502>
        case 0: return NRF_P0;
    5100:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5104:	e000      	b.n	5108 <uarte_nrfx_pins_configure+0x55c>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5106:	4b12      	ldr	r3, [pc, #72]	; (5150 <uarte_nrfx_pins_configure+0x5a4>)
    reg->PIN_CNF[pin_number] = cnf;
    5108:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    510c:	2202      	movs	r2, #2
    510e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
    5112:	e717      	b.n	4f44 <uarte_nrfx_pins_configure+0x398>
            mask = P0_FEATURE_PINS_PRESENT;
    5114:	f04f 33ff 	mov.w	r3, #4294967295
    5118:	e720      	b.n	4f5c <uarte_nrfx_pins_configure+0x3b0>
    switch (port)
    511a:	2300      	movs	r3, #0
    511c:	e71e      	b.n	4f5c <uarte_nrfx_pins_configure+0x3b0>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    511e:	4e0d      	ldr	r6, [pc, #52]	; (5154 <uarte_nrfx_pins_configure+0x5a8>)
    5120:	f240 2329 	movw	r3, #553	; 0x229
    5124:	4632      	mov	r2, r6
    5126:	490e      	ldr	r1, [pc, #56]	; (5160 <uarte_nrfx_pins_configure+0x5b4>)
    5128:	480c      	ldr	r0, [pc, #48]	; (515c <uarte_nrfx_pins_configure+0x5b0>)
    512a:	f005 ff9e 	bl	b06a <printk>
    512e:	f240 2129 	movw	r1, #553	; 0x229
    5132:	4630      	mov	r0, r6
    5134:	f006 f8f2 	bl	b31c <assert_post_action>
    5138:	e717      	b.n	4f6a <uarte_nrfx_pins_configure+0x3be>
        case 0: return NRF_P0;
    513a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    513e:	e000      	b.n	5142 <uarte_nrfx_pins_configure+0x596>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5140:	4b03      	ldr	r3, [pc, #12]	; (5150 <uarte_nrfx_pins_configure+0x5a4>)
    reg->PIN_CNF[pin_number] = cnf;
    5142:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    5146:	2202      	movs	r2, #2
    5148:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
    514c:	e6de      	b.n	4f0c <uarte_nrfx_pins_configure+0x360>
    514e:	bf00      	nop
    5150:	50000300 	.word	0x50000300
    5154:	0000cb64 	.word	0x0000cb64
    5158:	0000c3e8 	.word	0x0000c3e8
    515c:	0000c46c 	.word	0x0000c46c
    5160:	0000cb98 	.word	0x0000cb98

00005164 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    5164:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    5168:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    516c:	4b01      	ldr	r3, [pc, #4]	; (5174 <set_comparator+0x10>)
    516e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    5172:	4770      	bx	lr
    5174:	40011000 	.word	0x40011000

00005178 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    5178:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    517c:	4b01      	ldr	r3, [pc, #4]	; (5184 <get_comparator+0xc>)
    517e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    5182:	4770      	bx	lr
    5184:	40011000 	.word	0x40011000

00005188 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5188:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    518c:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    518e:	4a02      	ldr	r2, [pc, #8]	; (5198 <event_enable+0x10>)
    5190:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    5194:	4770      	bx	lr
    5196:	bf00      	nop
    5198:	40011000 	.word	0x40011000

0000519c <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    519c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    51a0:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    51a2:	4a02      	ldr	r2, [pc, #8]	; (51ac <event_disable+0x10>)
    51a4:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    51a8:	4770      	bx	lr
    51aa:	bf00      	nop
    51ac:	40011000 	.word	0x40011000

000051b0 <counter>:
     return p_reg->COUNTER;
    51b0:	4b01      	ldr	r3, [pc, #4]	; (51b8 <counter+0x8>)
    51b2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    51b6:	4770      	bx	lr
    51b8:	40011000 	.word	0x40011000

000051bc <compare_int_lock>:
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
    51bc:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    51be:	2301      	movs	r3, #1
    51c0:	4083      	lsls	r3, r0
    51c2:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    51c4:	4a10      	ldr	r2, [pc, #64]	; (5208 <compare_int_lock+0x4c>)
    51c6:	f3bf 8f5b 	dmb	ish
    51ca:	e852 1f00 	ldrex	r1, [r2]
    51ce:	ea01 0c04 	and.w	ip, r1, r4
    51d2:	e842 ce00 	strex	lr, ip, [r2]
    51d6:	f1be 0f00 	cmp.w	lr, #0
    51da:	d1f6      	bne.n	51ca <compare_int_lock+0xe>
    51dc:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    51e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    51e4:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    51e8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    51ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    51f0:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    51f4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    51f8:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    51fc:	420b      	tst	r3, r1
}
    51fe:	bf14      	ite	ne
    5200:	2001      	movne	r0, #1
    5202:	2000      	moveq	r0, #0
    5204:	bd10      	pop	{r4, pc}
    5206:	bf00      	nop
    5208:	20000d48 	.word	0x20000d48

0000520c <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    520c:	b570      	push	{r4, r5, r6, lr}
    520e:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    5210:	f006 fcc8 	bl	bba4 <full_int_lock>
    5214:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    5216:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    521a:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    521c:	4a17      	ldr	r2, [pc, #92]	; (527c <channel_processing_check_and_clear+0x70>)
    521e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    5222:	4213      	tst	r3, r2
    5224:	d105      	bne.n	5232 <channel_processing_check_and_clear+0x26>
	bool result = false;
    5226:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    5228:	4628      	mov	r0, r5
    522a:	f006 fcc4 	bl	bbb6 <full_int_unlock>

	return result;
}
    522e:	4630      	mov	r0, r6
    5230:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    5232:	2301      	movs	r3, #1
    5234:	40a3      	lsls	r3, r4
    5236:	43db      	mvns	r3, r3
    5238:	4a11      	ldr	r2, [pc, #68]	; (5280 <channel_processing_check_and_clear+0x74>)
    523a:	f3bf 8f5b 	dmb	ish
    523e:	e852 1f00 	ldrex	r1, [r2]
    5242:	ea01 0003 	and.w	r0, r1, r3
    5246:	e842 0600 	strex	r6, r0, [r2]
    524a:	2e00      	cmp	r6, #0
    524c:	d1f7      	bne.n	523e <channel_processing_check_and_clear+0x32>
    524e:	f3bf 8f5b 	dmb	ish
    5252:	b959      	cbnz	r1, 526c <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    5254:	f104 0350 	add.w	r3, r4, #80	; 0x50
    5258:	009b      	lsls	r3, r3, #2
    525a:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    525c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5260:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    5264:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    5266:	b113      	cbz	r3, 526e <channel_processing_check_and_clear+0x62>
    5268:	2301      	movs	r3, #1
    526a:	e000      	b.n	526e <channel_processing_check_and_clear+0x62>
    526c:	2301      	movs	r3, #1
		if (result) {
    526e:	461e      	mov	r6, r3
    5270:	2b00      	cmp	r3, #0
    5272:	d0d9      	beq.n	5228 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    5274:	4620      	mov	r0, r4
    5276:	f006 fc86 	bl	bb86 <event_clear>
    527a:	e7d5      	b.n	5228 <channel_processing_check_and_clear+0x1c>
    527c:	40011000 	.word	0x40011000
    5280:	20000d44 	.word	0x20000d44

00005284 <compare_int_unlock>:
	if (key) {
    5284:	b901      	cbnz	r1, 5288 <compare_int_unlock+0x4>
}
    5286:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    5288:	2301      	movs	r3, #1
    528a:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    528c:	4a11      	ldr	r2, [pc, #68]	; (52d4 <compare_int_unlock+0x50>)
    528e:	f3bf 8f5b 	dmb	ish
    5292:	e852 1f00 	ldrex	r1, [r2]
    5296:	4319      	orrs	r1, r3
    5298:	e842 1c00 	strex	ip, r1, [r2]
    529c:	f1bc 0f00 	cmp.w	ip, #0
    52a0:	d1f7      	bne.n	5292 <compare_int_unlock+0xe>
    52a2:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    52a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    52aa:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    52ac:	4a0a      	ldr	r2, [pc, #40]	; (52d8 <compare_int_unlock+0x54>)
    52ae:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    52b2:	f3bf 8f5b 	dmb	ish
    52b6:	4b09      	ldr	r3, [pc, #36]	; (52dc <compare_int_unlock+0x58>)
    52b8:	681b      	ldr	r3, [r3, #0]
    52ba:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    52be:	fa23 f000 	lsr.w	r0, r3, r0
    52c2:	f010 0f01 	tst.w	r0, #1
    52c6:	d0de      	beq.n	5286 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    52c8:	4b05      	ldr	r3, [pc, #20]	; (52e0 <compare_int_unlock+0x5c>)
    52ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    52ce:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    52d2:	e7d8      	b.n	5286 <compare_int_unlock+0x2>
    52d4:	20000d48 	.word	0x20000d48
    52d8:	40011000 	.word	0x40011000
    52dc:	20000d44 	.word	0x20000d44
    52e0:	e000e100 	.word	0xe000e100

000052e4 <sys_clock_timeout_handler>:
{
    52e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    52e6:	4607      	mov	r7, r0
    52e8:	4614      	mov	r4, r2
    52ea:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    52ec:	4610      	mov	r0, r2
    52ee:	4619      	mov	r1, r3
    52f0:	f006 fc55 	bl	bb9e <absolute_time_to_cc>
    52f4:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    52f6:	4b15      	ldr	r3, [pc, #84]	; (534c <sys_clock_timeout_handler+0x68>)
    52f8:	681a      	ldr	r2, [r3, #0]
    52fa:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    52fc:	601c      	str	r4, [r3, #0]
    52fe:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    5300:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    5304:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    5308:	d308      	bcc.n	531c <sys_clock_timeout_handler+0x38>
	return false;
    530a:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    530c:	f004 feb6 	bl	a07c <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    5310:	4638      	mov	r0, r7
    5312:	f7ff ff31 	bl	5178 <get_comparator>
    5316:	42a8      	cmp	r0, r5
    5318:	d00c      	beq.n	5334 <sys_clock_timeout_handler+0x50>
}
    531a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    531c:	4b0c      	ldr	r3, [pc, #48]	; (5350 <sys_clock_timeout_handler+0x6c>)
    531e:	6819      	ldr	r1, [r3, #0]
    5320:	0a0b      	lsrs	r3, r1, #8
    5322:	060a      	lsls	r2, r1, #24
    5324:	1952      	adds	r2, r2, r5
    5326:	f143 0300 	adc.w	r3, r3, #0
    532a:	490a      	ldr	r1, [pc, #40]	; (5354 <sys_clock_timeout_handler+0x70>)
    532c:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    5330:	2401      	movs	r4, #1
    5332:	e7eb      	b.n	530c <sys_clock_timeout_handler+0x28>
		if (!anchor_updated) {
    5334:	b11c      	cbz	r4, 533e <sys_clock_timeout_handler+0x5a>
		event_enable(chan);
    5336:	4638      	mov	r0, r7
    5338:	f7ff ff26 	bl	5188 <event_enable>
}
    533c:	e7ed      	b.n	531a <sys_clock_timeout_handler+0x36>
			set_comparator(chan, COUNTER_HALF_SPAN);
    533e:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    5342:	4638      	mov	r0, r7
    5344:	f7ff ff0e 	bl	5164 <set_comparator>
    5348:	e7f5      	b.n	5336 <sys_clock_timeout_handler+0x52>
    534a:	bf00      	nop
    534c:	20000498 	.word	0x20000498
    5350:	20000d4c 	.word	0x20000d4c
    5354:	20000480 	.word	0x20000480

00005358 <z_nrf_rtc_timer_read>:
{
    5358:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    535a:	4b0d      	ldr	r3, [pc, #52]	; (5390 <z_nrf_rtc_timer_read+0x38>)
    535c:	681b      	ldr	r3, [r3, #0]
    535e:	0a1d      	lsrs	r5, r3, #8
    5360:	061c      	lsls	r4, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    5362:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    5366:	f7ff ff23 	bl	51b0 <counter>
    536a:	4603      	mov	r3, r0
	val += cntr;
    536c:	1820      	adds	r0, r4, r0
    536e:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    5372:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    5376:	d20a      	bcs.n	538e <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    5378:	4b06      	ldr	r3, [pc, #24]	; (5394 <z_nrf_rtc_timer_read+0x3c>)
    537a:	e9d3 2300 	ldrd	r2, r3, [r3]
    537e:	4299      	cmp	r1, r3
    5380:	bf08      	it	eq
    5382:	4290      	cmpeq	r0, r2
    5384:	d203      	bcs.n	538e <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    5386:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    538a:	f141 0100 	adc.w	r1, r1, #0
}
    538e:	bd38      	pop	{r3, r4, r5, pc}
    5390:	20000d4c 	.word	0x20000d4c
    5394:	20000480 	.word	0x20000480

00005398 <compare_set_nolocks>:
{
    5398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    539c:	4606      	mov	r6, r0
    539e:	4614      	mov	r4, r2
    53a0:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    53a2:	4610      	mov	r0, r2
    53a4:	4619      	mov	r1, r3
    53a6:	f006 fbfa 	bl	bb9e <absolute_time_to_cc>
    53aa:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    53ac:	f7ff ffd4 	bl	5358 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    53b0:	42a9      	cmp	r1, r5
    53b2:	bf08      	it	eq
    53b4:	42a0      	cmpeq	r0, r4
    53b6:	d21e      	bcs.n	53f6 <compare_set_nolocks+0x5e>
		if (target_time - curr_time > COUNTER_SPAN) {
    53b8:	ebb4 0800 	subs.w	r8, r4, r0
    53bc:	eb65 0901 	sbc.w	r9, r5, r1
    53c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    53c4:	2300      	movs	r3, #0
    53c6:	454b      	cmp	r3, r9
    53c8:	bf08      	it	eq
    53ca:	4542      	cmpeq	r2, r8
    53cc:	d32e      	bcc.n	542c <compare_set_nolocks+0x94>
		if (target_time != cc_data[chan].target_time) {
    53ce:	4b19      	ldr	r3, [pc, #100]	; (5434 <compare_set_nolocks+0x9c>)
    53d0:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    53d4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    53d8:	42ab      	cmp	r3, r5
    53da:	bf08      	it	eq
    53dc:	42a2      	cmpeq	r2, r4
    53de:	d018      	beq.n	5412 <compare_set_nolocks+0x7a>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    53e0:	4639      	mov	r1, r7
    53e2:	4630      	mov	r0, r6
    53e4:	f006 fbec 	bl	bbc0 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    53e8:	4639      	mov	r1, r7
    53ea:	f006 fbc8 	bl	bb7e <counter_sub>
    53ee:	1824      	adds	r4, r4, r0
    53f0:	f145 0500 	adc.w	r5, r5, #0
    53f4:	e00d      	b.n	5412 <compare_set_nolocks+0x7a>
		atomic_or(&force_isr_mask, BIT(chan));
    53f6:	2301      	movs	r3, #1
    53f8:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    53fa:	4a0f      	ldr	r2, [pc, #60]	; (5438 <compare_set_nolocks+0xa0>)
    53fc:	f3bf 8f5b 	dmb	ish
    5400:	e852 1f00 	ldrex	r1, [r2]
    5404:	4319      	orrs	r1, r3
    5406:	e842 1000 	strex	r0, r1, [r2]
    540a:	2800      	cmp	r0, #0
    540c:	d1f8      	bne.n	5400 <compare_set_nolocks+0x68>
    540e:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    5412:	4b08      	ldr	r3, [pc, #32]	; (5434 <compare_set_nolocks+0x9c>)
    5414:	0132      	lsls	r2, r6, #4
    5416:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    541a:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    541e:	9908      	ldr	r1, [sp, #32]
    5420:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    5422:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5424:	6073      	str	r3, [r6, #4]
	return ret;
    5426:	2000      	movs	r0, #0
}
    5428:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
    542c:	f06f 0015 	mvn.w	r0, #21
    5430:	e7fa      	b.n	5428 <compare_set_nolocks+0x90>
    5432:	bf00      	nop
    5434:	20000488 	.word	0x20000488
    5438:	20000d44 	.word	0x20000d44

0000543c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    543c:	b530      	push	{r4, r5, lr}
    543e:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    5440:	2300      	movs	r3, #0
    5442:	4a1e      	ldr	r2, [pc, #120]	; (54bc <sys_clock_driver_init+0x80>)
    5444:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    5448:	2b00      	cmp	r3, #0
    544a:	dd25      	ble.n	5498 <sys_clock_driver_init+0x5c>
    p_reg->INTENSET = mask;
    544c:	4c1b      	ldr	r4, [pc, #108]	; (54bc <sys_clock_driver_init+0x80>)
    544e:	2502      	movs	r5, #2
    5450:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5454:	4b1a      	ldr	r3, [pc, #104]	; (54c0 <sys_clock_driver_init+0x84>)
    5456:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    545a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    545e:	2200      	movs	r2, #0
    5460:	2101      	movs	r1, #1
    5462:	2011      	movs	r0, #17
    5464:	f7fd fcc0 	bl	2de8 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    5468:	2011      	movs	r0, #17
    546a:	f7fd fc9f 	bl	2dac <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    546e:	2301      	movs	r3, #1
    5470:	4a14      	ldr	r2, [pc, #80]	; (54c4 <sys_clock_driver_init+0x88>)
    5472:	6013      	str	r3, [r2, #0]
    5474:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    5476:	4a14      	ldr	r2, [pc, #80]	; (54c8 <sys_clock_driver_init+0x8c>)
    5478:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    547a:	2400      	movs	r4, #0
    547c:	9401      	str	r4, [sp, #4]
    547e:	4b13      	ldr	r3, [pc, #76]	; (54cc <sys_clock_driver_init+0x90>)
    5480:	9300      	str	r3, [sp, #0]
    5482:	4a13      	ldr	r2, [pc, #76]	; (54d0 <sys_clock_driver_init+0x94>)
    5484:	2300      	movs	r3, #0
    5486:	4620      	mov	r0, r4
    5488:	f006 fbd5 	bl	bc36 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    548c:	4628      	mov	r0, r5
    548e:	f7fe fe1b 	bl	40c8 <z_nrf_clock_control_lf_on>

	return 0;
}
    5492:	4620      	mov	r0, r4
    5494:	b003      	add	sp, #12
    5496:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    5498:	4a0e      	ldr	r2, [pc, #56]	; (54d4 <sys_clock_driver_init+0x98>)
    549a:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    549e:	f04f 30ff 	mov.w	r0, #4294967295
    54a2:	f04f 31ff 	mov.w	r1, #4294967295
    54a6:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    54aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    54ae:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    54b0:	4902      	ldr	r1, [pc, #8]	; (54bc <sys_clock_driver_init+0x80>)
    54b2:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    54b6:	3301      	adds	r3, #1
    54b8:	e7c6      	b.n	5448 <sys_clock_driver_init+0xc>
    54ba:	bf00      	nop
    54bc:	40011000 	.word	0x40011000
    54c0:	e000e100 	.word	0xe000e100
    54c4:	40011008 	.word	0x40011008
    54c8:	20000d48 	.word	0x20000d48
    54cc:	000052e5 	.word	0x000052e5
    54d0:	007fffff 	.word	0x007fffff
    54d4:	20000488 	.word	0x20000488

000054d8 <process_channel>:
{
    54d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    54dc:	b082      	sub	sp, #8
    54de:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    54e0:	f7ff fe94 	bl	520c <channel_processing_check_and_clear>
    54e4:	b910      	cbnz	r0, 54ec <process_channel+0x14>
}
    54e6:	b002      	add	sp, #8
    54e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    54ec:	f7ff ff34 	bl	5358 <z_nrf_rtc_timer_read>
    54f0:	4606      	mov	r6, r0
    54f2:	460f      	mov	r7, r1
		mcu_critical_state = full_int_lock();
    54f4:	f006 fb56 	bl	bba4 <full_int_lock>
    54f8:	4682      	mov	sl, r0
		expire_time = cc_data[chan].target_time;
    54fa:	4b13      	ldr	r3, [pc, #76]	; (5548 <process_channel+0x70>)
    54fc:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    5500:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    5504:	454f      	cmp	r7, r9
    5506:	bf08      	it	eq
    5508:	4546      	cmpeq	r6, r8
    550a:	d20b      	bcs.n	5524 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    550c:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    550e:	4650      	mov	r0, sl
    5510:	f006 fb51 	bl	bbb6 <full_int_unlock>
		if (handler) {
    5514:	2e00      	cmp	r6, #0
    5516:	d0e6      	beq.n	54e6 <process_channel+0xe>
			handler(chan, expire_time, user_context);
    5518:	9500      	str	r5, [sp, #0]
    551a:	4642      	mov	r2, r8
    551c:	464b      	mov	r3, r9
    551e:	4620      	mov	r0, r4
    5520:	47b0      	blx	r6
}
    5522:	e7e0      	b.n	54e6 <process_channel+0xe>
			handler = cc_data[chan].callback;
    5524:	4a08      	ldr	r2, [pc, #32]	; (5548 <process_channel+0x70>)
    5526:	0123      	lsls	r3, r4, #4
    5528:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    552c:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    552e:	684d      	ldr	r5, [r1, #4]
			cc_data[chan].callback = NULL;
    5530:	2000      	movs	r0, #0
    5532:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    5534:	f04f 32ff 	mov.w	r2, #4294967295
    5538:	f04f 33ff 	mov.w	r3, #4294967295
    553c:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    5540:	4620      	mov	r0, r4
    5542:	f7ff fe2b 	bl	519c <event_disable>
    5546:	e7e2      	b.n	550e <process_channel+0x36>
    5548:	20000488 	.word	0x20000488

0000554c <rtc_nrf_isr>:
{
    554c:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    554e:	4b0d      	ldr	r3, [pc, #52]	; (5584 <rtc_nrf_isr+0x38>)
    5550:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    5554:	f013 0f02 	tst.w	r3, #2
    5558:	d00a      	beq.n	5570 <rtc_nrf_isr+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    555a:	4b0b      	ldr	r3, [pc, #44]	; (5588 <rtc_nrf_isr+0x3c>)
    555c:	681b      	ldr	r3, [r3, #0]
    555e:	b13b      	cbz	r3, 5570 <rtc_nrf_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5560:	4b09      	ldr	r3, [pc, #36]	; (5588 <rtc_nrf_isr+0x3c>)
    5562:	2200      	movs	r2, #0
    5564:	601a      	str	r2, [r3, #0]
    5566:	681b      	ldr	r3, [r3, #0]
		overflow_cnt++;
    5568:	4a08      	ldr	r2, [pc, #32]	; (558c <rtc_nrf_isr+0x40>)
    556a:	6813      	ldr	r3, [r2, #0]
    556c:	3301      	adds	r3, #1
    556e:	6013      	str	r3, [r2, #0]
{
    5570:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    5572:	2c00      	cmp	r4, #0
    5574:	dd00      	ble.n	5578 <rtc_nrf_isr+0x2c>
}
    5576:	bd10      	pop	{r4, pc}
		process_channel(chan);
    5578:	4620      	mov	r0, r4
    557a:	f7ff ffad 	bl	54d8 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    557e:	3401      	adds	r4, #1
    5580:	e7f7      	b.n	5572 <rtc_nrf_isr+0x26>
    5582:	bf00      	nop
    5584:	40011000 	.word	0x40011000
    5588:	40011104 	.word	0x40011104
    558c:	20000d4c 	.word	0x20000d4c

00005590 <sys_clock_set_timeout>:
{
    5590:	b510      	push	{r4, lr}
    5592:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    5594:	f1b0 3fff 	cmp.w	r0, #4294967295
    5598:	d007      	beq.n	55aa <sys_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    559a:	1e44      	subs	r4, r0, #1
    559c:	2c00      	cmp	r4, #0
    559e:	dd07      	ble.n	55b0 <sys_clock_set_timeout+0x20>
    55a0:	4b11      	ldr	r3, [pc, #68]	; (55e8 <sys_clock_set_timeout+0x58>)
    55a2:	429c      	cmp	r4, r3
    55a4:	dd05      	ble.n	55b2 <sys_clock_set_timeout+0x22>
    55a6:	4c11      	ldr	r4, [pc, #68]	; (55ec <sys_clock_set_timeout+0x5c>)
    55a8:	e003      	b.n	55b2 <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    55aa:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
    55ae:	e7f4      	b.n	559a <sys_clock_set_timeout+0xa>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    55b0:	2400      	movs	r4, #0
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    55b2:	f7ff fed1 	bl	5358 <z_nrf_rtc_timer_read>
    55b6:	4b0e      	ldr	r3, [pc, #56]	; (55f0 <sys_clock_set_timeout+0x60>)
    55b8:	e9d3 2300 	ldrd	r2, r3, [r3]
    55bc:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
    55be:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    55c2:	d300      	bcc.n	55c6 <sys_clock_set_timeout+0x36>
		ticks = 0;
    55c4:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    55c6:	4404      	add	r4, r0
    55c8:	3401      	adds	r4, #1
	if (cyc > MAX_CYCLES) {
    55ca:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
    55ce:	d300      	bcc.n	55d2 <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    55d0:	4c06      	ldr	r4, [pc, #24]	; (55ec <sys_clock_set_timeout+0x5c>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    55d2:	2000      	movs	r0, #0
    55d4:	9001      	str	r0, [sp, #4]
    55d6:	4907      	ldr	r1, [pc, #28]	; (55f4 <sys_clock_set_timeout+0x64>)
    55d8:	9100      	str	r1, [sp, #0]
    55da:	1912      	adds	r2, r2, r4
    55dc:	f143 0300 	adc.w	r3, r3, #0
    55e0:	f006 fb29 	bl	bc36 <compare_set>
}
    55e4:	b002      	add	sp, #8
    55e6:	bd10      	pop	{r4, pc}
    55e8:	007ffffe 	.word	0x007ffffe
    55ec:	007fffff 	.word	0x007fffff
    55f0:	20000498 	.word	0x20000498
    55f4:	000052e5 	.word	0x000052e5

000055f8 <sys_clock_elapsed>:
{
    55f8:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    55fa:	f7ff fead 	bl	5358 <z_nrf_rtc_timer_read>
    55fe:	4b02      	ldr	r3, [pc, #8]	; (5608 <sys_clock_elapsed+0x10>)
    5600:	681b      	ldr	r3, [r3, #0]
}
    5602:	1ac0      	subs	r0, r0, r3
    5604:	bd08      	pop	{r3, pc}
    5606:	bf00      	nop
    5608:	20000498 	.word	0x20000498

0000560c <nrf52_errata_36>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    560c:	4b03      	ldr	r3, [pc, #12]	; (561c <nrf52_errata_36+0x10>)
    560e:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    5610:	2b08      	cmp	r3, #8
    5612:	d001      	beq.n	5618 <nrf52_errata_36+0xc>
        return false;
    5614:	2000      	movs	r0, #0
    5616:	4770      	bx	lr
                        return true;
    5618:	2001      	movs	r0, #1
}
    561a:	4770      	bx	lr
    561c:	10000130 	.word	0x10000130

00005620 <nrf52_errata_66>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5620:	4b03      	ldr	r3, [pc, #12]	; (5630 <nrf52_errata_66+0x10>)
    5622:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    5624:	2b08      	cmp	r3, #8
    5626:	d001      	beq.n	562c <nrf52_errata_66+0xc>
        return false;
    5628:	2000      	movs	r0, #0
    562a:	4770      	bx	lr
                        return true;
    562c:	2001      	movs	r0, #1
}
    562e:	4770      	bx	lr
    5630:	10000130 	.word	0x10000130

00005634 <nrf52_errata_98>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5634:	4b08      	ldr	r3, [pc, #32]	; (5658 <nrf52_errata_98+0x24>)
    5636:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5638:	3304      	adds	r3, #4
    563a:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    563c:	2a08      	cmp	r2, #8
    563e:	d001      	beq.n	5644 <nrf52_errata_98+0x10>
        return false;
    5640:	2000      	movs	r0, #0
    5642:	4770      	bx	lr
                switch(var2)
    5644:	2b00      	cmp	r3, #0
    5646:	d804      	bhi.n	5652 <nrf52_errata_98+0x1e>
    5648:	e8df f003 	tbb	[pc, r3]
    564c:	01          	.byte	0x01
    564d:	00          	.byte	0x00
            if (var1 == 0x08)
    564e:	2001      	movs	r0, #1
    5650:	4770      	bx	lr
                        return false;
    5652:	2000      	movs	r0, #0
}
    5654:	4770      	bx	lr
    5656:	bf00      	nop
    5658:	10000130 	.word	0x10000130

0000565c <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    565c:	4b08      	ldr	r3, [pc, #32]	; (5680 <nrf52_errata_103+0x24>)
    565e:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5660:	3304      	adds	r3, #4
    5662:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    5664:	2a08      	cmp	r2, #8
    5666:	d001      	beq.n	566c <nrf52_errata_103+0x10>
        return false;
    5668:	2000      	movs	r0, #0
    566a:	4770      	bx	lr
                switch(var2)
    566c:	2b00      	cmp	r3, #0
    566e:	d804      	bhi.n	567a <nrf52_errata_103+0x1e>
    5670:	e8df f003 	tbb	[pc, r3]
    5674:	01          	.byte	0x01
    5675:	00          	.byte	0x00
            if (var1 == 0x08)
    5676:	2001      	movs	r0, #1
    5678:	4770      	bx	lr
                        return false;
    567a:	2000      	movs	r0, #0
}
    567c:	4770      	bx	lr
    567e:	bf00      	nop
    5680:	10000130 	.word	0x10000130

00005684 <nrf52_errata_115>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5684:	4b08      	ldr	r3, [pc, #32]	; (56a8 <nrf52_errata_115+0x24>)
    5686:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5688:	3304      	adds	r3, #4
    568a:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    568c:	2a08      	cmp	r2, #8
    568e:	d001      	beq.n	5694 <nrf52_errata_115+0x10>
        return false;
    5690:	2000      	movs	r0, #0
    5692:	4770      	bx	lr
                switch(var2)
    5694:	2b00      	cmp	r3, #0
    5696:	d804      	bhi.n	56a2 <nrf52_errata_115+0x1e>
    5698:	e8df f003 	tbb	[pc, r3]
    569c:	01          	.byte	0x01
    569d:	00          	.byte	0x00
            if (var1 == 0x08)
    569e:	2001      	movs	r0, #1
    56a0:	4770      	bx	lr
                        return false;
    56a2:	2000      	movs	r0, #0
}
    56a4:	4770      	bx	lr
    56a6:	bf00      	nop
    56a8:	10000130 	.word	0x10000130

000056ac <nrf52_errata_120>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    56ac:	4b08      	ldr	r3, [pc, #32]	; (56d0 <nrf52_errata_120+0x24>)
    56ae:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    56b0:	3304      	adds	r3, #4
    56b2:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    56b4:	2a08      	cmp	r2, #8
    56b6:	d001      	beq.n	56bc <nrf52_errata_120+0x10>
        return false;
    56b8:	2000      	movs	r0, #0
    56ba:	4770      	bx	lr
                switch(var2)
    56bc:	2b00      	cmp	r3, #0
    56be:	d804      	bhi.n	56ca <nrf52_errata_120+0x1e>
    56c0:	e8df f003 	tbb	[pc, r3]
    56c4:	01          	.byte	0x01
    56c5:	00          	.byte	0x00
            if (var1 == 0x08)
    56c6:	2001      	movs	r0, #1
    56c8:	4770      	bx	lr
                        return false;
    56ca:	2000      	movs	r0, #0
}
    56cc:	4770      	bx	lr
    56ce:	bf00      	nop
    56d0:	10000130 	.word	0x10000130

000056d4 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    56d4:	4b03      	ldr	r3, [pc, #12]	; (56e4 <nrf52_errata_136+0x10>)
    56d6:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    56d8:	2b08      	cmp	r3, #8
    56da:	d001      	beq.n	56e0 <nrf52_errata_136+0xc>
        return false;
    56dc:	2000      	movs	r0, #0
    56de:	4770      	bx	lr
                        return true;
    56e0:	2001      	movs	r0, #1
}
    56e2:	4770      	bx	lr
    56e4:	10000130 	.word	0x10000130

000056e8 <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    56e8:	4b06      	ldr	r3, [pc, #24]	; (5704 <nrf52_configuration_249+0x1c>)
    56ea:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    56ec:	4a06      	ldr	r2, [pc, #24]	; (5708 <nrf52_configuration_249+0x20>)
    56ee:	6812      	ldr	r2, [r2, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    56f0:	2b08      	cmp	r3, #8
    56f2:	d001      	beq.n	56f8 <nrf52_configuration_249+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    56f4:	2000      	movs	r0, #0
    56f6:	4770      	bx	lr
                switch(var2)
    56f8:	2a04      	cmp	r2, #4
    56fa:	d801      	bhi.n	5700 <nrf52_configuration_249+0x18>
    56fc:	2000      	movs	r0, #0
    56fe:	4770      	bx	lr
                        return true;
    5700:	2001      	movs	r0, #1
    #endif
}
    5702:	4770      	bx	lr
    5704:	10000130 	.word	0x10000130
    5708:	10000134 	.word	0x10000134

0000570c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    570c:	4b02      	ldr	r3, [pc, #8]	; (5718 <nvmc_wait+0xc>)
    570e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    5712:	2b00      	cmp	r3, #0
    5714:	d0fa      	beq.n	570c <nvmc_wait>
}
    5716:	4770      	bx	lr
    5718:	4001e000 	.word	0x4001e000

0000571c <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    571c:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    571e:	4b03      	ldr	r3, [pc, #12]	; (572c <nvmc_config+0x10>)
    5720:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    5724:	f7ff fff2 	bl	570c <nvmc_wait>
}
    5728:	bd08      	pop	{r3, pc}
    572a:	bf00      	nop
    572c:	4001e000 	.word	0x4001e000

00005730 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    5730:	4b01      	ldr	r3, [pc, #4]	; (5738 <SystemCoreClockUpdate+0x8>)
    5732:	4a02      	ldr	r2, [pc, #8]	; (573c <SystemCoreClockUpdate+0xc>)
    5734:	601a      	str	r2, [r3, #0]
}
    5736:	4770      	bx	lr
    5738:	20000100 	.word	0x20000100
    573c:	03d09000 	.word	0x03d09000

00005740 <SystemInit>:

void SystemInit(void)
{
    5740:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    5742:	f7ff ff63 	bl	560c <nrf52_errata_36>
    5746:	b140      	cbz	r0, 575a <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    5748:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    574c:	2200      	movs	r2, #0
    574e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    5752:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    5756:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    575a:	f7ff ff61 	bl	5620 <nrf52_errata_66>
    575e:	2800      	cmp	r0, #0
    5760:	d046      	beq.n	57f0 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    5762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5766:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    576a:	4b56      	ldr	r3, [pc, #344]	; (58c4 <SystemInit+0x184>)
    576c:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    5770:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    5774:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    5778:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    577c:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    5780:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    5784:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    5788:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    578c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    5790:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    5794:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    5798:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    579c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    57a0:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    57a4:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    57a8:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    57ac:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    57b0:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    57b4:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    57b8:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    57bc:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    57c0:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    57c4:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    57c8:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    57cc:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    57d0:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    57d4:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    57d8:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    57dc:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    57e0:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    57e4:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    57e8:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    57ec:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    57f0:	f7ff ff20 	bl	5634 <nrf52_errata_98>
    57f4:	b110      	cbz	r0, 57fc <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    57f6:	4b34      	ldr	r3, [pc, #208]	; (58c8 <SystemInit+0x188>)
    57f8:	4a34      	ldr	r2, [pc, #208]	; (58cc <SystemInit+0x18c>)
    57fa:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    57fc:	f7ff ff2e 	bl	565c <nrf52_errata_103>
    5800:	b118      	cbz	r0, 580a <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    5802:	4b33      	ldr	r3, [pc, #204]	; (58d0 <SystemInit+0x190>)
    5804:	22fb      	movs	r2, #251	; 0xfb
    5806:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    580a:	f7ff ff3b 	bl	5684 <nrf52_errata_115>
    580e:	b148      	cbz	r0, 5824 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    5810:	4930      	ldr	r1, [pc, #192]	; (58d4 <SystemInit+0x194>)
    5812:	680b      	ldr	r3, [r1, #0]
    5814:	f023 030f 	bic.w	r3, r3, #15
    5818:	4a2f      	ldr	r2, [pc, #188]	; (58d8 <SystemInit+0x198>)
    581a:	6812      	ldr	r2, [r2, #0]
    581c:	f002 020f 	and.w	r2, r2, #15
    5820:	4313      	orrs	r3, r2
    5822:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    5824:	f7ff ff42 	bl	56ac <nrf52_errata_120>
    5828:	b118      	cbz	r0, 5832 <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    582a:	4b2c      	ldr	r3, [pc, #176]	; (58dc <SystemInit+0x19c>)
    582c:	f44f 7200 	mov.w	r2, #512	; 0x200
    5830:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    5832:	f7ff ff4f 	bl	56d4 <nrf52_errata_136>
    5836:	b160      	cbz	r0, 5852 <SystemInit+0x112>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    5838:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    583c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    5840:	f013 0f01 	tst.w	r3, #1
    5844:	d005      	beq.n	5852 <SystemInit+0x112>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    5846:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    584a:	f06f 0201 	mvn.w	r2, #1
    584e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    5852:	f7ff ff49 	bl	56e8 <nrf52_configuration_249>
    5856:	b138      	cbz	r0, 5868 <SystemInit+0x128>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    5858:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    585c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    5860:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5864:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    5868:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    586c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    5870:	2b00      	cmp	r3, #0
    5872:	db08      	blt.n	5886 <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    5874:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    5878:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    587c:	2b00      	cmp	r3, #0
    587e:	db02      	blt.n	5886 <SystemInit+0x146>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    5880:	f7ff ff56 	bl	5730 <SystemCoreClockUpdate>
}
    5884:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    5886:	2001      	movs	r0, #1
    5888:	f7ff ff48 	bl	571c <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    588c:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    5890:	2512      	movs	r5, #18
    5892:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    5896:	f7ff ff39 	bl	570c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    589a:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    589e:	f7ff ff35 	bl	570c <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    58a2:	2000      	movs	r0, #0
    58a4:	f7ff ff3a 	bl	571c <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
    58a8:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    58ac:	490c      	ldr	r1, [pc, #48]	; (58e0 <SystemInit+0x1a0>)
    58ae:	68ca      	ldr	r2, [r1, #12]
    58b0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    58b4:	4b0b      	ldr	r3, [pc, #44]	; (58e4 <SystemInit+0x1a4>)
    58b6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    58b8:	60cb      	str	r3, [r1, #12]
    58ba:	f3bf 8f4f 	dsb	sy
    __NOP();
    58be:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    58c0:	e7fd      	b.n	58be <SystemInit+0x17e>
    58c2:	bf00      	nop
    58c4:	4000c000 	.word	0x4000c000
    58c8:	4000568c 	.word	0x4000568c
    58cc:	00038148 	.word	0x00038148
    58d0:	4000f000 	.word	0x4000f000
    58d4:	40000ee4 	.word	0x40000ee4
    58d8:	10000258 	.word	0x10000258
    58dc:	40029640 	.word	0x40029640
    58e0:	e000ed00 	.word	0xe000ed00
    58e4:	05fa0004 	.word	0x05fa0004

000058e8 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    58e8:	b430      	push	{r4, r5}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    58ea:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    58ec:	fab4 f384 	clz	r3, r4
        if (idx < 0) {
    58f0:	f1d3 031f 	rsbs	r3, r3, #31
    58f4:	d415      	bmi.n	5922 <nrfx_flag32_alloc+0x3a>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    58f6:	2201      	movs	r2, #1
    58f8:	409a      	lsls	r2, r3
    58fa:	ea24 0202 	bic.w	r2, r4, r2
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    58fe:	f3bf 8f5b 	dmb	ish
    5902:	e850 5f00 	ldrex	r5, [r0]
    5906:	42a5      	cmp	r5, r4
    5908:	d104      	bne.n	5914 <nrfx_flag32_alloc+0x2c>
    590a:	e840 2c00 	strex	ip, r2, [r0]
    590e:	f1bc 0f00 	cmp.w	ip, #0
    5912:	d1f6      	bne.n	5902 <nrfx_flag32_alloc+0x1a>
    5914:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    5918:	d1e7      	bne.n	58ea <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    591a:	700b      	strb	r3, [r1, #0]

    return NRFX_SUCCESS;
    591c:	4802      	ldr	r0, [pc, #8]	; (5928 <nrfx_flag32_alloc+0x40>)
}
    591e:	bc30      	pop	{r4, r5}
    5920:	4770      	bx	lr
            return NRFX_ERROR_NO_MEM;
    5922:	4802      	ldr	r0, [pc, #8]	; (592c <nrfx_flag32_alloc+0x44>)
    5924:	e7fb      	b.n	591e <nrfx_flag32_alloc+0x36>
    5926:	bf00      	nop
    5928:	0bad0000 	.word	0x0bad0000
    592c:	0bad0002 	.word	0x0bad0002

00005930 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    5930:	b410      	push	{r4}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    5932:	6803      	ldr	r3, [r0, #0]
    5934:	460c      	mov	r4, r1
    5936:	fa23 f101 	lsr.w	r1, r3, r1
    593a:	f011 0f01 	tst.w	r1, #1
    593e:	d114      	bne.n	596a <nrfx_flag32_free+0x3a>
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    5940:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    5942:	2301      	movs	r3, #1
    5944:	40a3      	lsls	r3, r4
    5946:	4313      	orrs	r3, r2
    5948:	f3bf 8f5b 	dmb	ish
    594c:	e850 1f00 	ldrex	r1, [r0]
    5950:	4291      	cmp	r1, r2
    5952:	d104      	bne.n	595e <nrfx_flag32_free+0x2e>
    5954:	e840 3c00 	strex	ip, r3, [r0]
    5958:	f1bc 0f00 	cmp.w	ip, #0
    595c:	d1f6      	bne.n	594c <nrfx_flag32_free+0x1c>
    595e:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    5962:	d1ed      	bne.n	5940 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    5964:	4802      	ldr	r0, [pc, #8]	; (5970 <nrfx_flag32_free+0x40>)
}
    5966:	bc10      	pop	{r4}
    5968:	4770      	bx	lr
        return NRFX_ERROR_INVALID_PARAM;
    596a:	4802      	ldr	r0, [pc, #8]	; (5974 <nrfx_flag32_free+0x44>)
    596c:	e7fb      	b.n	5966 <nrfx_flag32_free+0x36>
    596e:	bf00      	nop
    5970:	0bad0000 	.word	0x0bad0000
    5974:	0bad0004 	.word	0x0bad0004

00005978 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    5978:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(event_handler);
    597a:	4604      	mov	r4, r0
    597c:	b150      	cbz	r0, 5994 <nrfx_clock_init+0x1c>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    597e:	4b0c      	ldr	r3, [pc, #48]	; (59b0 <nrfx_clock_init+0x38>)
    5980:	791b      	ldrb	r3, [r3, #4]
    5982:	b99b      	cbnz	r3, 59ac <nrfx_clock_init+0x34>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    5984:	4b0a      	ldr	r3, [pc, #40]	; (59b0 <nrfx_clock_init+0x38>)
    5986:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    5988:	2201      	movs	r2, #1
    598a:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    598c:	2200      	movs	r2, #0
    598e:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    5990:	4808      	ldr	r0, [pc, #32]	; (59b4 <nrfx_clock_init+0x3c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    5992:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(event_handler);
    5994:	4d08      	ldr	r5, [pc, #32]	; (59b8 <nrfx_clock_init+0x40>)
    5996:	23bd      	movs	r3, #189	; 0xbd
    5998:	462a      	mov	r2, r5
    599a:	4908      	ldr	r1, [pc, #32]	; (59bc <nrfx_clock_init+0x44>)
    599c:	4808      	ldr	r0, [pc, #32]	; (59c0 <nrfx_clock_init+0x48>)
    599e:	f005 fb64 	bl	b06a <printk>
    59a2:	21bd      	movs	r1, #189	; 0xbd
    59a4:	4628      	mov	r0, r5
    59a6:	f005 fcb9 	bl	b31c <assert_post_action>
    59aa:	e7e8      	b.n	597e <nrfx_clock_init+0x6>
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    59ac:	4805      	ldr	r0, [pc, #20]	; (59c4 <nrfx_clock_init+0x4c>)
    return err_code;
    59ae:	e7f0      	b.n	5992 <nrfx_clock_init+0x1a>
    59b0:	20000d50 	.word	0x20000d50
    59b4:	0bad0000 	.word	0x0bad0000
    59b8:	0000ccfc 	.word	0x0000ccfc
    59bc:	0000cd3c 	.word	0x0000cd3c
    59c0:	0000c46c 	.word	0x0000c46c
    59c4:	0bad000c 	.word	0x0bad000c

000059c8 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    59c8:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    59ca:	4b0b      	ldr	r3, [pc, #44]	; (59f8 <nrfx_clock_enable+0x30>)
    59cc:	791b      	ldrb	r3, [r3, #4]
    59ce:	b123      	cbz	r3, 59da <nrfx_clock_enable+0x12>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    59d0:	2000      	movs	r0, #0
    59d2:	f7fd f9fb 	bl	2dcc <arch_irq_is_enabled>
    59d6:	b160      	cbz	r0, 59f2 <nrfx_clock_enable+0x2a>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    59d8:	bd10      	pop	{r4, pc}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    59da:	4c08      	ldr	r4, [pc, #32]	; (59fc <nrfx_clock_enable+0x34>)
    59dc:	23d6      	movs	r3, #214	; 0xd6
    59de:	4622      	mov	r2, r4
    59e0:	4907      	ldr	r1, [pc, #28]	; (5a00 <nrfx_clock_enable+0x38>)
    59e2:	4808      	ldr	r0, [pc, #32]	; (5a04 <nrfx_clock_enable+0x3c>)
    59e4:	f005 fb41 	bl	b06a <printk>
    59e8:	21d6      	movs	r1, #214	; 0xd6
    59ea:	4620      	mov	r0, r4
    59ec:	f005 fc96 	bl	b31c <assert_post_action>
    59f0:	e7ee      	b.n	59d0 <nrfx_clock_enable+0x8>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    59f2:	f7fd f9db 	bl	2dac <arch_irq_enable>
}
    59f6:	e7ef      	b.n	59d8 <nrfx_clock_enable+0x10>
    59f8:	20000d50 	.word	0x20000d50
    59fc:	0000ccfc 	.word	0x0000ccfc
    5a00:	0000cd4c 	.word	0x0000cd4c
    5a04:	0000c46c 	.word	0x0000c46c

00005a08 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    5a08:	b538      	push	{r3, r4, r5, lr}
    5a0a:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5a0c:	4b2a      	ldr	r3, [pc, #168]	; (5ab8 <nrfx_clock_start+0xb0>)
    5a0e:	791b      	ldrb	r3, [r3, #4]
    5a10:	b183      	cbz	r3, 5a34 <nrfx_clock_start+0x2c>
    switch (domain)
    5a12:	b1ec      	cbz	r4, 5a50 <nrfx_clock_start+0x48>
    5a14:	2c01      	cmp	r4, #1
    5a16:	d044      	beq.n	5aa2 <nrfx_clock_start+0x9a>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    5a18:	4c28      	ldr	r4, [pc, #160]	; (5abc <nrfx_clock_start+0xb4>)
    5a1a:	f44f 73a2 	mov.w	r3, #324	; 0x144
    5a1e:	4622      	mov	r2, r4
    5a20:	4927      	ldr	r1, [pc, #156]	; (5ac0 <nrfx_clock_start+0xb8>)
    5a22:	4828      	ldr	r0, [pc, #160]	; (5ac4 <nrfx_clock_start+0xbc>)
    5a24:	f005 fb21 	bl	b06a <printk>
    5a28:	f44f 71a2 	mov.w	r1, #324	; 0x144
    5a2c:	4620      	mov	r0, r4
    5a2e:	f005 fc75 	bl	b31c <assert_post_action>
            break;
    }
}
    5a32:	e02d      	b.n	5a90 <nrfx_clock_start+0x88>
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5a34:	4d21      	ldr	r5, [pc, #132]	; (5abc <nrfx_clock_start+0xb4>)
    5a36:	f44f 7389 	mov.w	r3, #274	; 0x112
    5a3a:	462a      	mov	r2, r5
    5a3c:	4922      	ldr	r1, [pc, #136]	; (5ac8 <nrfx_clock_start+0xc0>)
    5a3e:	4821      	ldr	r0, [pc, #132]	; (5ac4 <nrfx_clock_start+0xbc>)
    5a40:	f005 fb13 	bl	b06a <printk>
    5a44:	f44f 7189 	mov.w	r1, #274	; 0x112
    5a48:	4628      	mov	r0, r5
    5a4a:	f005 fc67 	bl	b31c <assert_post_action>
    5a4e:	e7e0      	b.n	5a12 <nrfx_clock_start+0xa>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5a50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5a54:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    5a58:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5a5c:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    5a60:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    5a64:	d115      	bne.n	5a92 <nrfx_clock_start+0x8a>
    return false;
    5a66:	2200      	movs	r2, #0
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    5a68:	b10a      	cbz	r2, 5a6e <nrfx_clock_start+0x66>
    5a6a:	2b01      	cmp	r3, #1
    5a6c:	d013      	beq.n	5a96 <nrfx_clock_start+0x8e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5a6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5a72:	2200      	movs	r2, #0
    5a74:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5a78:	4b14      	ldr	r3, [pc, #80]	; (5acc <nrfx_clock_start+0xc4>)
    5a7a:	2200      	movs	r2, #0
    5a7c:	601a      	str	r2, [r3, #0]
    5a7e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    5a80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5a84:	2202      	movs	r2, #2
    5a86:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5a8a:	3308      	adds	r3, #8
    5a8c:	2201      	movs	r2, #1
    5a8e:	601a      	str	r2, [r3, #0]
}
    5a90:	bd38      	pop	{r3, r4, r5, pc}
                return true;
    5a92:	2201      	movs	r2, #1
    5a94:	e7e8      	b.n	5a68 <nrfx_clock_start+0x60>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5a96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5a9a:	2201      	movs	r2, #1
    5a9c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    5aa0:	e7ea      	b.n	5a78 <nrfx_clock_start+0x70>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5aa2:	4b0b      	ldr	r3, [pc, #44]	; (5ad0 <nrfx_clock_start+0xc8>)
    5aa4:	2200      	movs	r2, #0
    5aa6:	601a      	str	r2, [r3, #0]
    5aa8:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    5aaa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5aae:	2201      	movs	r2, #1
    5ab0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5ab4:	601a      	str	r2, [r3, #0]
}
    5ab6:	e7eb      	b.n	5a90 <nrfx_clock_start+0x88>
    5ab8:	20000d50 	.word	0x20000d50
    5abc:	0000ccfc 	.word	0x0000ccfc
    5ac0:	0000c3e8 	.word	0x0000c3e8
    5ac4:	0000c46c 	.word	0x0000c46c
    5ac8:	0000cd4c 	.word	0x0000cd4c
    5acc:	40000104 	.word	0x40000104
    5ad0:	40000100 	.word	0x40000100

00005ad4 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    5ad4:	b570      	push	{r4, r5, r6, lr}
    5ad6:	b082      	sub	sp, #8
    5ad8:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5ada:	4b5e      	ldr	r3, [pc, #376]	; (5c54 <nrfx_clock_stop+0x180>)
    5adc:	791b      	ldrb	r3, [r3, #4]
    5ade:	b183      	cbz	r3, 5b02 <nrfx_clock_stop+0x2e>
    switch (domain)
    5ae0:	b1ec      	cbz	r4, 5b1e <nrfx_clock_stop+0x4a>
    5ae2:	2c01      	cmp	r4, #1
    5ae4:	d02d      	beq.n	5b42 <nrfx_clock_stop+0x6e>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    5ae6:	4c5c      	ldr	r4, [pc, #368]	; (5c58 <nrfx_clock_stop+0x184>)
    5ae8:	f240 1367 	movw	r3, #359	; 0x167
    5aec:	4622      	mov	r2, r4
    5aee:	495b      	ldr	r1, [pc, #364]	; (5c5c <nrfx_clock_stop+0x188>)
    5af0:	485b      	ldr	r0, [pc, #364]	; (5c60 <nrfx_clock_stop+0x18c>)
    5af2:	f005 faba 	bl	b06a <printk>
    5af6:	f240 1167 	movw	r1, #359	; 0x167
    5afa:	4620      	mov	r0, r4
    5afc:	f005 fc0e 	bl	b31c <assert_post_action>
            return;
    5b00:	e0a1      	b.n	5c46 <nrfx_clock_stop+0x172>
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5b02:	4d55      	ldr	r5, [pc, #340]	; (5c58 <nrfx_clock_stop+0x184>)
    5b04:	f240 134b 	movw	r3, #331	; 0x14b
    5b08:	462a      	mov	r2, r5
    5b0a:	4956      	ldr	r1, [pc, #344]	; (5c64 <nrfx_clock_stop+0x190>)
    5b0c:	4854      	ldr	r0, [pc, #336]	; (5c60 <nrfx_clock_stop+0x18c>)
    5b0e:	f005 faac 	bl	b06a <printk>
    5b12:	f240 114b 	movw	r1, #331	; 0x14b
    5b16:	4628      	mov	r0, r5
    5b18:	f005 fc00 	bl	b31c <assert_post_action>
    5b1c:	e7e0      	b.n	5ae0 <nrfx_clock_stop+0xc>
    p_reg->INTENCLR = mask;
    5b1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5b22:	2202      	movs	r2, #2
    5b24:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5b28:	f503 7382 	add.w	r3, r3, #260	; 0x104
    5b2c:	2200      	movs	r2, #0
    5b2e:	601a      	str	r2, [r3, #0]
    5b30:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5b32:	4b4d      	ldr	r3, [pc, #308]	; (5c68 <nrfx_clock_stop+0x194>)
    5b34:	2201      	movs	r2, #1
    5b36:	601a      	str	r2, [r3, #0]
    }

    bool stopped;
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    5b38:	2c01      	cmp	r4, #1
    5b3a:	d00f      	beq.n	5b5c <nrfx_clock_stop+0x88>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
                       (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)), 10000, 1, stopped);
    }
    else
    {
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    5b3c:	f242 7510 	movw	r5, #10000	; 0x2710
    5b40:	e05f      	b.n	5c02 <nrfx_clock_stop+0x12e>
    p_reg->INTENCLR = mask;
    5b42:	2301      	movs	r3, #1
    5b44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5b48:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5b4c:	f502 7280 	add.w	r2, r2, #256	; 0x100
    5b50:	2100      	movs	r1, #0
    5b52:	6011      	str	r1, [r2, #0]
    5b54:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5b56:	4a45      	ldr	r2, [pc, #276]	; (5c6c <nrfx_clock_stop+0x198>)
    5b58:	6013      	str	r3, [r2, #0]
}
    5b5a:	e7ed      	b.n	5b38 <nrfx_clock_stop+0x64>
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    5b5c:	2301      	movs	r3, #1
    5b5e:	f88d 3007 	strb.w	r3, [sp, #7]
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    5b62:	f242 7510 	movw	r5, #10000	; 0x2710
    5b66:	e018      	b.n	5b9a <nrfx_clock_stop+0xc6>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5b68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5b6c:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    5b70:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    5b74:	f8cd 3007 	str.w	r3, [sp, #7]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5b78:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    5b7c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5b80:	d12d      	bne.n	5bde <nrfx_clock_stop+0x10a>
    return false;
    5b82:	2300      	movs	r3, #0
    5b84:	2b00      	cmp	r3, #0
    5b86:	d05c      	beq.n	5c42 <nrfx_clock_stop+0x16e>
    5b88:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5b8c:	2b01      	cmp	r3, #1
    5b8e:	d158      	bne.n	5c42 <nrfx_clock_stop+0x16e>
    5b90:	2001      	movs	r0, #1
    5b92:	f006 f87e 	bl	bc92 <nrfx_busy_wait>
    5b96:	3d01      	subs	r5, #1
    5b98:	d053      	beq.n	5c42 <nrfx_clock_stop+0x16e>
    switch (domain)
    5b9a:	2c00      	cmp	r4, #0
    5b9c:	d0e4      	beq.n	5b68 <nrfx_clock_stop+0x94>
    5b9e:	2c01      	cmp	r4, #1
    5ba0:	d00e      	beq.n	5bc0 <nrfx_clock_stop+0xec>
            NRFX_ASSERT(0);
    5ba2:	4e33      	ldr	r6, [pc, #204]	; (5c70 <nrfx_clock_stop+0x19c>)
    5ba4:	f44f 734f 	mov.w	r3, #828	; 0x33c
    5ba8:	4632      	mov	r2, r6
    5baa:	492c      	ldr	r1, [pc, #176]	; (5c5c <nrfx_clock_stop+0x188>)
    5bac:	482c      	ldr	r0, [pc, #176]	; (5c60 <nrfx_clock_stop+0x18c>)
    5bae:	f005 fa5c 	bl	b06a <printk>
    5bb2:	f44f 714f 	mov.w	r1, #828	; 0x33c
    5bb6:	4630      	mov	r0, r6
    5bb8:	f005 fbb0 	bl	b31c <assert_post_action>
            return false;
    5bbc:	2300      	movs	r3, #0
    5bbe:	e7e1      	b.n	5b84 <nrfx_clock_stop+0xb0>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    5bc0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5bc4:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
    5bc8:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    5bcc:	f88d 3007 	strb.w	r3, [sp, #7]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    5bd0:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
    5bd4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5bd8:	d103      	bne.n	5be2 <nrfx_clock_stop+0x10e>
    return false;
    5bda:	2300      	movs	r3, #0
    5bdc:	e7d2      	b.n	5b84 <nrfx_clock_stop+0xb0>
                return true;
    5bde:	2301      	movs	r3, #1
    5be0:	e7d0      	b.n	5b84 <nrfx_clock_stop+0xb0>
                return true;
    5be2:	2301      	movs	r3, #1
    5be4:	e7ce      	b.n	5b84 <nrfx_clock_stop+0xb0>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5be6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5bea:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    5bee:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5bf2:	d122      	bne.n	5c3a <nrfx_clock_stop+0x166>
    return false;
    5bf4:	2300      	movs	r3, #0
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    5bf6:	b323      	cbz	r3, 5c42 <nrfx_clock_stop+0x16e>
    5bf8:	2001      	movs	r0, #1
    5bfa:	f006 f84a 	bl	bc92 <nrfx_busy_wait>
    5bfe:	3d01      	subs	r5, #1
    5c00:	d01f      	beq.n	5c42 <nrfx_clock_stop+0x16e>
    switch (domain)
    5c02:	2c00      	cmp	r4, #0
    5c04:	d0ef      	beq.n	5be6 <nrfx_clock_stop+0x112>
    5c06:	2c01      	cmp	r4, #1
    5c08:	d00e      	beq.n	5c28 <nrfx_clock_stop+0x154>
            NRFX_ASSERT(0);
    5c0a:	4e19      	ldr	r6, [pc, #100]	; (5c70 <nrfx_clock_stop+0x19c>)
    5c0c:	f44f 734f 	mov.w	r3, #828	; 0x33c
    5c10:	4632      	mov	r2, r6
    5c12:	4912      	ldr	r1, [pc, #72]	; (5c5c <nrfx_clock_stop+0x188>)
    5c14:	4812      	ldr	r0, [pc, #72]	; (5c60 <nrfx_clock_stop+0x18c>)
    5c16:	f005 fa28 	bl	b06a <printk>
    5c1a:	f44f 714f 	mov.w	r1, #828	; 0x33c
    5c1e:	4630      	mov	r0, r6
    5c20:	f005 fb7c 	bl	b31c <assert_post_action>
            return false;
    5c24:	2300      	movs	r3, #0
    5c26:	e7e6      	b.n	5bf6 <nrfx_clock_stop+0x122>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    5c28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5c2c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    5c30:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5c34:	d103      	bne.n	5c3e <nrfx_clock_stop+0x16a>
    return false;
    5c36:	2300      	movs	r3, #0
    5c38:	e7dd      	b.n	5bf6 <nrfx_clock_stop+0x122>
                return true;
    5c3a:	2301      	movs	r3, #1
    5c3c:	e7db      	b.n	5bf6 <nrfx_clock_stop+0x122>
                return true;
    5c3e:	2301      	movs	r3, #1
    5c40:	e7d9      	b.n	5bf6 <nrfx_clock_stop+0x122>
    {
        NRFX_LOG_ERROR("Failed to stop clock domain: %d.", domain);
    }

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    5c42:	2c01      	cmp	r4, #1
    5c44:	d001      	beq.n	5c4a <nrfx_clock_stop+0x176>
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    5c46:	b002      	add	sp, #8
    5c48:	bd70      	pop	{r4, r5, r6, pc}
            m_clock_cb.hfclk_started = false;
    5c4a:	4b02      	ldr	r3, [pc, #8]	; (5c54 <nrfx_clock_stop+0x180>)
    5c4c:	2200      	movs	r2, #0
    5c4e:	715a      	strb	r2, [r3, #5]
    5c50:	e7f9      	b.n	5c46 <nrfx_clock_stop+0x172>
    5c52:	bf00      	nop
    5c54:	20000d50 	.word	0x20000d50
    5c58:	0000ccfc 	.word	0x0000ccfc
    5c5c:	0000c3e8 	.word	0x0000c3e8
    5c60:	0000c46c 	.word	0x0000c46c
    5c64:	0000cd4c 	.word	0x0000cd4c
    5c68:	4000000c 	.word	0x4000000c
    5c6c:	40000004 	.word	0x40000004
    5c70:	0000cd6c 	.word	0x0000cd6c

00005c74 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    5c74:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5c76:	4b1b      	ldr	r3, [pc, #108]	; (5ce4 <nrfx_power_clock_irq_handler+0x70>)
    5c78:	681b      	ldr	r3, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    5c7a:	b183      	cbz	r3, 5c9e <nrfx_power_clock_irq_handler+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5c7c:	4b19      	ldr	r3, [pc, #100]	; (5ce4 <nrfx_power_clock_irq_handler+0x70>)
    5c7e:	2200      	movs	r2, #0
    5c80:	601a      	str	r2, [r3, #0]
    5c82:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    5c84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5c88:	2201      	movs	r2, #1
    5c8a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    5c8e:	4b16      	ldr	r3, [pc, #88]	; (5ce8 <nrfx_power_clock_irq_handler+0x74>)
    5c90:	795b      	ldrb	r3, [r3, #5]
    5c92:	b923      	cbnz	r3, 5c9e <nrfx_power_clock_irq_handler+0x2a>
        {
            m_clock_cb.hfclk_started = true;
    5c94:	4b14      	ldr	r3, [pc, #80]	; (5ce8 <nrfx_power_clock_irq_handler+0x74>)
    5c96:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    5c98:	681b      	ldr	r3, [r3, #0]
    5c9a:	2000      	movs	r0, #0
    5c9c:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5c9e:	4b13      	ldr	r3, [pc, #76]	; (5cec <nrfx_power_clock_irq_handler+0x78>)
    5ca0:	681b      	ldr	r3, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    5ca2:	b903      	cbnz	r3, 5ca6 <nrfx_power_clock_irq_handler+0x32>
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    5ca4:	bd08      	pop	{r3, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5ca6:	4b11      	ldr	r3, [pc, #68]	; (5cec <nrfx_power_clock_irq_handler+0x78>)
    5ca8:	2200      	movs	r2, #0
    5caa:	601a      	str	r2, [r3, #0]
    5cac:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5cae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5cb2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5cb6:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    5cba:	f012 0f03 	tst.w	r2, #3
    5cbe:	d107      	bne.n	5cd0 <nrfx_power_clock_irq_handler+0x5c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5cc0:	2301      	movs	r3, #1
    5cc2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5cc6:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5cca:	3208      	adds	r2, #8
    5ccc:	6013      	str	r3, [r2, #0]
}
    5cce:	e7e9      	b.n	5ca4 <nrfx_power_clock_irq_handler+0x30>
    p_reg->INTENCLR = mask;
    5cd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5cd4:	2202      	movs	r2, #2
    5cd6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    5cda:	4b03      	ldr	r3, [pc, #12]	; (5ce8 <nrfx_power_clock_irq_handler+0x74>)
    5cdc:	681b      	ldr	r3, [r3, #0]
    5cde:	2001      	movs	r0, #1
    5ce0:	4798      	blx	r3
}
    5ce2:	e7df      	b.n	5ca4 <nrfx_power_clock_irq_handler+0x30>
    5ce4:	40000100 	.word	0x40000100
    5ce8:	20000d50 	.word	0x20000d50
    5cec:	40000104 	.word	0x40000104

00005cf0 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    5cf0:	3008      	adds	r0, #8
    5cf2:	4b03      	ldr	r3, [pc, #12]	; (5d00 <pin_in_use+0x10>)
    5cf4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    5cf8:	f000 0001 	and.w	r0, r0, #1
    5cfc:	4770      	bx	lr
    5cfe:	bf00      	nop
    5d00:	20000104 	.word	0x20000104

00005d04 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    5d04:	3008      	adds	r0, #8
    5d06:	4b03      	ldr	r3, [pc, #12]	; (5d14 <pin_in_use_by_te+0x10>)
    5d08:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    5d0c:	f3c0 1040 	ubfx	r0, r0, #5, #1
    5d10:	4770      	bx	lr
    5d12:	bf00      	nop
    5d14:	20000104 	.word	0x20000104

00005d18 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    5d18:	3008      	adds	r0, #8
    5d1a:	4b04      	ldr	r3, [pc, #16]	; (5d2c <pin_has_trigger+0x14>)
    5d1c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    5d20:	f010 001c 	ands.w	r0, r0, #28
    5d24:	bf18      	it	ne
    5d26:	2001      	movne	r0, #1
    5d28:	4770      	bx	lr
    5d2a:	bf00      	nop
    5d2c:	20000104 	.word	0x20000104

00005d30 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5d30:	3008      	adds	r0, #8
    5d32:	4b03      	ldr	r3, [pc, #12]	; (5d40 <pin_is_output+0x10>)
    5d34:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    5d38:	f3c0 0040 	ubfx	r0, r0, #1, #1
    5d3c:	4770      	bx	lr
    5d3e:	bf00      	nop
    5d40:	20000104 	.word	0x20000104

00005d44 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5d44:	3008      	adds	r0, #8
    5d46:	4b02      	ldr	r3, [pc, #8]	; (5d50 <pin_te_get+0xc>)
    5d48:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    5d4c:	0b40      	lsrs	r0, r0, #13
    5d4e:	4770      	bx	lr
    5d50:	20000104 	.word	0x20000104

00005d54 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    5d54:	2200      	movs	r2, #0
    5d56:	e004      	b.n	5d62 <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    5d58:	f04f 33ff 	mov.w	r3, #4294967295
    5d5c:	4283      	cmp	r3, r0
    5d5e:	d00f      	beq.n	5d80 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    5d60:	3201      	adds	r2, #1
    5d62:	2a2f      	cmp	r2, #47	; 0x2f
    5d64:	d80a      	bhi.n	5d7c <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    5d66:	f102 0308 	add.w	r3, r2, #8
    5d6a:	4906      	ldr	r1, [pc, #24]	; (5d84 <handler_in_use+0x30>)
    5d6c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    5d70:	f413 7f80 	tst.w	r3, #256	; 0x100
    5d74:	d0f0      	beq.n	5d58 <handler_in_use+0x4>
    5d76:	f3c3 2343 	ubfx	r3, r3, #9, #4
    5d7a:	e7ef      	b.n	5d5c <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    5d7c:	2000      	movs	r0, #0
    5d7e:	4770      	bx	lr
            return true;
    5d80:	2001      	movs	r0, #1
}
    5d82:	4770      	bx	lr
    5d84:	20000104 	.word	0x20000104

00005d88 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    5d88:	2300      	movs	r3, #0
    5d8a:	b113      	cbz	r3, 5d92 <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    5d8c:	f04f 30ff 	mov.w	r0, #4294967295
}
    5d90:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    5d92:	4a07      	ldr	r2, [pc, #28]	; (5db0 <find_handler+0x28>)
    5d94:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    5d98:	4282      	cmp	r2, r0
    5d9a:	d001      	beq.n	5da0 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    5d9c:	3301      	adds	r3, #1
    5d9e:	e7f4      	b.n	5d8a <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    5da0:	4a03      	ldr	r2, [pc, #12]	; (5db0 <find_handler+0x28>)
    5da2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    5da6:	6852      	ldr	r2, [r2, #4]
    5da8:	428a      	cmp	r2, r1
    5daa:	d1f7      	bne.n	5d9c <find_handler+0x14>
            return i;
    5dac:	4618      	mov	r0, r3
    5dae:	4770      	bx	lr
    5db0:	20000104 	.word	0x20000104

00005db4 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    5db4:	3008      	adds	r0, #8
    5db6:	4b06      	ldr	r3, [pc, #24]	; (5dd0 <channel_handler_get+0x1c>)
    5db8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    5dbc:	f410 7f80 	tst.w	r0, #256	; 0x100
    5dc0:	d004      	beq.n	5dcc <channel_handler_get+0x18>
    5dc2:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    5dc6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    5dca:	4770      	bx	lr
        return NULL;
    5dcc:	2000      	movs	r0, #0
}
    5dce:	4770      	bx	lr
    5dd0:	20000104 	.word	0x20000104

00005dd4 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    5dd4:	b570      	push	{r4, r5, r6, lr}
    5dd6:	4604      	mov	r4, r0
    5dd8:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    5dda:	f7ff ffeb 	bl	5db4 <channel_handler_get>

    if (handler)
    5dde:	b120      	cbz	r0, 5dea <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    5de0:	6806      	ldr	r6, [r0, #0]
    5de2:	6842      	ldr	r2, [r0, #4]
    5de4:	4629      	mov	r1, r5
    5de6:	4620      	mov	r0, r4
    5de8:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    5dea:	4b04      	ldr	r3, [pc, #16]	; (5dfc <call_handler+0x28>)
    5dec:	689b      	ldr	r3, [r3, #8]
    5dee:	b123      	cbz	r3, 5dfa <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    5df0:	4a02      	ldr	r2, [pc, #8]	; (5dfc <call_handler+0x28>)
    5df2:	68d2      	ldr	r2, [r2, #12]
    5df4:	4629      	mov	r1, r5
    5df6:	4620      	mov	r0, r4
    5df8:	4798      	blx	r3
    }
}
    5dfa:	bd70      	pop	{r4, r5, r6, pc}
    5dfc:	20000104 	.word	0x20000104

00005e00 <latch_pending_read_and_check>:
    }
}

#if defined(NRF_GPIO_LATCH_PRESENT)
static bool latch_pending_read_and_check(uint32_t * latch)
{
    5e00:	b410      	push	{r4}
    5e02:	b083      	sub	sp, #12
    5e04:	4604      	mov	r4, r0
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    5e06:	4b12      	ldr	r3, [pc, #72]	; (5e50 <latch_pending_read_and_check+0x50>)
    5e08:	e893 0003 	ldmia.w	r3, {r0, r1}
    5e0c:	ab02      	add	r3, sp, #8
    5e0e:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    5e12:	4620      	mov	r0, r4
    5e14:	2300      	movs	r3, #0
    5e16:	e00b      	b.n	5e30 <latch_pending_read_and_check+0x30>
        *p_masks = gpio_regs[i]->LATCH;
    5e18:	aa02      	add	r2, sp, #8
    5e1a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    5e1e:	f852 2c08 	ldr.w	r2, [r2, #-8]
    5e22:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    5e26:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    5e2a:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    5e2e:	3301      	adds	r3, #1
    5e30:	2b01      	cmp	r3, #1
    5e32:	d9f1      	bls.n	5e18 <latch_pending_read_and_check+0x18>
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);

    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    5e34:	2300      	movs	r3, #0
    5e36:	2b01      	cmp	r3, #1
    5e38:	d804      	bhi.n	5e44 <latch_pending_read_and_check+0x44>
    {
        if (latch[port_idx])
    5e3a:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    5e3e:	b92a      	cbnz	r2, 5e4c <latch_pending_read_and_check+0x4c>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    5e40:	3301      	adds	r3, #1
    5e42:	e7f8      	b.n	5e36 <latch_pending_read_and_check+0x36>
             * before or during the interrupt processing. Therefore event-processing loop
             * should be executed again. */
            return true;
        }
    }
    return false;
    5e44:	2000      	movs	r0, #0
}
    5e46:	b003      	add	sp, #12
    5e48:	bc10      	pop	{r4}
    5e4a:	4770      	bx	lr
            return true;
    5e4c:	2001      	movs	r0, #1
    5e4e:	e7fa      	b.n	5e46 <latch_pending_read_and_check+0x46>
    5e50:	0000c2e0 	.word	0x0000c2e0

00005e54 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    5e54:	f100 0208 	add.w	r2, r0, #8
    5e58:	4b16      	ldr	r3, [pc, #88]	; (5eb4 <release_handler+0x60>)
    5e5a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    5e5e:	f413 7f80 	tst.w	r3, #256	; 0x100
    5e62:	d026      	beq.n	5eb2 <release_handler+0x5e>
{
    5e64:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    5e66:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    5e6a:	4610      	mov	r0, r2
    5e6c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    5e70:	4a10      	ldr	r2, [pc, #64]	; (5eb4 <release_handler+0x60>)
    5e72:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    5e76:	4620      	mov	r0, r4
    5e78:	f7ff ff6c 	bl	5d54 <handler_in_use>
    5e7c:	b100      	cbz	r0, 5e80 <release_handler+0x2c>
}
    5e7e:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    5e80:	480c      	ldr	r0, [pc, #48]	; (5eb4 <release_handler+0x60>)
    5e82:	2300      	movs	r3, #0
    5e84:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    5e88:	4621      	mov	r1, r4
    5e8a:	3074      	adds	r0, #116	; 0x74
    5e8c:	f7ff fd50 	bl	5930 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    5e90:	4b09      	ldr	r3, [pc, #36]	; (5eb8 <release_handler+0x64>)
    5e92:	4298      	cmp	r0, r3
    5e94:	d0f3      	beq.n	5e7e <release_handler+0x2a>
    5e96:	4c09      	ldr	r4, [pc, #36]	; (5ebc <release_handler+0x68>)
    5e98:	f44f 7399 	mov.w	r3, #306	; 0x132
    5e9c:	4622      	mov	r2, r4
    5e9e:	4908      	ldr	r1, [pc, #32]	; (5ec0 <release_handler+0x6c>)
    5ea0:	4808      	ldr	r0, [pc, #32]	; (5ec4 <release_handler+0x70>)
    5ea2:	f005 f8e2 	bl	b06a <printk>
    5ea6:	f44f 7199 	mov.w	r1, #306	; 0x132
    5eaa:	4620      	mov	r0, r4
    5eac:	f005 fa36 	bl	b31c <assert_post_action>
    5eb0:	e7e5      	b.n	5e7e <release_handler+0x2a>
    5eb2:	4770      	bx	lr
    5eb4:	20000104 	.word	0x20000104
    5eb8:	0bad0000 	.word	0x0bad0000
    5ebc:	0000cda0 	.word	0x0000cda0
    5ec0:	0000cde0 	.word	0x0000cde0
    5ec4:	0000c46c 	.word	0x0000c46c

00005ec8 <pin_handler_trigger_uninit>:
{
    5ec8:	b510      	push	{r4, lr}
    5eca:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    5ecc:	f7ff ff1a 	bl	5d04 <pin_in_use_by_te>
    5ed0:	b140      	cbz	r0, 5ee4 <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    5ed2:	4620      	mov	r0, r4
    5ed4:	f7ff ff36 	bl	5d44 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    5ed8:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    5edc:	4b06      	ldr	r3, [pc, #24]	; (5ef8 <pin_handler_trigger_uninit+0x30>)
    5ede:	2200      	movs	r2, #0
    5ee0:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    5ee4:	4620      	mov	r0, r4
    5ee6:	f7ff ffb5 	bl	5e54 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    5eea:	3408      	adds	r4, #8
    5eec:	4b03      	ldr	r3, [pc, #12]	; (5efc <pin_handler_trigger_uninit+0x34>)
    5eee:	2200      	movs	r2, #0
    5ef0:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    5ef4:	bd10      	pop	{r4, pc}
    5ef6:	bf00      	nop
    5ef8:	40006000 	.word	0x40006000
    5efc:	20000104 	.word	0x20000104

00005f00 <pin_handler_set>:
{
    5f00:	b570      	push	{r4, r5, r6, lr}
    5f02:	b082      	sub	sp, #8
    5f04:	4606      	mov	r6, r0
    5f06:	460c      	mov	r4, r1
    5f08:	4615      	mov	r5, r2
    release_handler(pin);
    5f0a:	f7ff ffa3 	bl	5e54 <release_handler>
    if (!handler)
    5f0e:	b324      	cbz	r4, 5f5a <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    5f10:	4629      	mov	r1, r5
    5f12:	4620      	mov	r0, r4
    5f14:	f7ff ff38 	bl	5d88 <find_handler>
    if (handler_id < 0)
    5f18:	1e03      	subs	r3, r0, #0
    5f1a:	db13      	blt.n	5f44 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    5f1c:	4a10      	ldr	r2, [pc, #64]	; (5f60 <pin_handler_set+0x60>)
    5f1e:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    5f22:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    5f26:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    5f28:	025b      	lsls	r3, r3, #9
    5f2a:	b29b      	uxth	r3, r3
    5f2c:	f106 0008 	add.w	r0, r6, #8
    5f30:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
    5f34:	430b      	orrs	r3, r1
    5f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    5f3a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
    5f3e:	4809      	ldr	r0, [pc, #36]	; (5f64 <pin_handler_set+0x64>)
}
    5f40:	b002      	add	sp, #8
    5f42:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    5f44:	f10d 0107 	add.w	r1, sp, #7
    5f48:	4807      	ldr	r0, [pc, #28]	; (5f68 <pin_handler_set+0x68>)
    5f4a:	f7ff fccd 	bl	58e8 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    5f4e:	4b05      	ldr	r3, [pc, #20]	; (5f64 <pin_handler_set+0x64>)
    5f50:	4298      	cmp	r0, r3
    5f52:	d1f5      	bne.n	5f40 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    5f54:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5f58:	e7e0      	b.n	5f1c <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    5f5a:	4802      	ldr	r0, [pc, #8]	; (5f64 <pin_handler_set+0x64>)
    5f5c:	e7f0      	b.n	5f40 <pin_handler_set+0x40>
    5f5e:	bf00      	nop
    5f60:	20000104 	.word	0x20000104
    5f64:	0bad0000 	.word	0x0bad0000
    5f68:	20000178 	.word	0x20000178

00005f6c <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    5f6c:	b538      	push	{r3, r4, r5, lr}
    5f6e:	4604      	mov	r4, r0
    while (mask)
    5f70:	b1cc      	cbz	r4, 5fa6 <gpiote_evt_handle+0x3a>
    {
        uint32_t ch = NRF_CTZ(mask);
    5f72:	fa94 f3a4 	rbit	r3, r4
    5f76:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    5f7a:	2201      	movs	r2, #1
    5f7c:	409a      	lsls	r2, r3
    5f7e:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    5f82:	4a09      	ldr	r2, [pc, #36]	; (5fa8 <gpiote_evt_handle+0x3c>)
    5f84:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    5f88:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    5f8c:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    5f90:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    5f94:	f3c0 4001 	ubfx	r0, r0, #16, #2
    5f98:	f005 fe95 	bl	bcc6 <gpiote_polarity_to_trigger>
    5f9c:	4601      	mov	r1, r0
    5f9e:	4628      	mov	r0, r5
    5fa0:	f7ff ff18 	bl	5dd4 <call_handler>
    5fa4:	e7e4      	b.n	5f70 <gpiote_evt_handle+0x4>
    }
}
    5fa6:	bd38      	pop	{r3, r4, r5, pc}
    5fa8:	40006000 	.word	0x40006000

00005fac <next_sense_cond_call_handler>:
{
    5fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5fb0:	4604      	mov	r4, r0
    5fb2:	460d      	mov	r5, r1
    5fb4:	4616      	mov	r6, r2
    if (is_level(trigger))
    5fb6:	4608      	mov	r0, r1
    5fb8:	f005 fe87 	bl	bcca <is_level>
    5fbc:	bb60      	cbnz	r0, 6018 <next_sense_cond_call_handler+0x6c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5fbe:	2e02      	cmp	r6, #2
    5fc0:	f000 80f5 	beq.w	61ae <next_sense_cond_call_handler+0x202>
    5fc4:	f04f 0802 	mov.w	r8, #2
    switch (port)
    5fc8:	0963      	lsrs	r3, r4, #5
    5fca:	f000 80f3 	beq.w	61b4 <next_sense_cond_call_handler+0x208>
    5fce:	2b01      	cmp	r3, #1
    5fd0:	f040 80f3 	bne.w	61ba <next_sense_cond_call_handler+0x20e>
            mask = P1_FEATURE_PINS_PRESENT;
    5fd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    5fd8:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5fdc:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5fde:	f013 0f01 	tst.w	r3, #1
    5fe2:	f000 80ec 	beq.w	61be <next_sense_cond_call_handler+0x212>
    *p_pin = pin_number & 0x1F;
    5fe6:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5fea:	0963      	lsrs	r3, r4, #5
    5fec:	f000 80f5 	beq.w	61da <next_sense_cond_call_handler+0x22e>
    5ff0:	2b01      	cmp	r3, #1
    5ff2:	f000 80f5 	beq.w	61e0 <next_sense_cond_call_handler+0x234>
            NRFX_ASSERT(0);
    5ff6:	f8df 922c 	ldr.w	r9, [pc, #556]	; 6224 <next_sense_cond_call_handler+0x278>
    5ffa:	f240 232e 	movw	r3, #558	; 0x22e
    5ffe:	464a      	mov	r2, r9
    6000:	4986      	ldr	r1, [pc, #536]	; (621c <next_sense_cond_call_handler+0x270>)
    6002:	4887      	ldr	r0, [pc, #540]	; (6220 <next_sense_cond_call_handler+0x274>)
    6004:	f005 f831 	bl	b06a <printk>
    6008:	f240 212e 	movw	r1, #558	; 0x22e
    600c:	4648      	mov	r0, r9
    600e:	f005 f985 	bl	b31c <assert_post_action>
        case 0: return NRF_P0;
    6012:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    6016:	e0e4      	b.n	61e2 <next_sense_cond_call_handler+0x236>
        call_handler(pin, trigger);
    6018:	4629      	mov	r1, r5
    601a:	4620      	mov	r0, r4
    601c:	f7ff feda 	bl	5dd4 <call_handler>
    switch (port)
    6020:	0963      	lsrs	r3, r4, #5
    6022:	d01f      	beq.n	6064 <next_sense_cond_call_handler+0xb8>
    6024:	2b01      	cmp	r3, #1
    6026:	d120      	bne.n	606a <next_sense_cond_call_handler+0xbe>
            mask = P1_FEATURE_PINS_PRESENT;
    6028:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    602c:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6030:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6032:	f013 0f01 	tst.w	r3, #1
    6036:	d01a      	beq.n	606e <next_sense_cond_call_handler+0xc2>
    *p_pin = pin_number & 0x1F;
    6038:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    603c:	0963      	lsrs	r3, r4, #5
    603e:	d024      	beq.n	608a <next_sense_cond_call_handler+0xde>
    6040:	2b01      	cmp	r3, #1
    6042:	d025      	beq.n	6090 <next_sense_cond_call_handler+0xe4>
            NRFX_ASSERT(0);
    6044:	4f77      	ldr	r7, [pc, #476]	; (6224 <next_sense_cond_call_handler+0x278>)
    6046:	f240 232e 	movw	r3, #558	; 0x22e
    604a:	463a      	mov	r2, r7
    604c:	4973      	ldr	r1, [pc, #460]	; (621c <next_sense_cond_call_handler+0x270>)
    604e:	4874      	ldr	r0, [pc, #464]	; (6220 <next_sense_cond_call_handler+0x274>)
    6050:	f005 f80b 	bl	b06a <printk>
    6054:	f240 212e 	movw	r1, #558	; 0x22e
    6058:	4638      	mov	r0, r7
    605a:	f005 f95f 	bl	b31c <assert_post_action>
        case 0: return NRF_P0;
    605e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6062:	e016      	b.n	6092 <next_sense_cond_call_handler+0xe6>
            mask = P0_FEATURE_PINS_PRESENT;
    6064:	f04f 33ff 	mov.w	r3, #4294967295
    6068:	e7e0      	b.n	602c <next_sense_cond_call_handler+0x80>
    switch (port)
    606a:	2300      	movs	r3, #0
    606c:	e7de      	b.n	602c <next_sense_cond_call_handler+0x80>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    606e:	4d6d      	ldr	r5, [pc, #436]	; (6224 <next_sense_cond_call_handler+0x278>)
    6070:	f240 2329 	movw	r3, #553	; 0x229
    6074:	462a      	mov	r2, r5
    6076:	496c      	ldr	r1, [pc, #432]	; (6228 <next_sense_cond_call_handler+0x27c>)
    6078:	4869      	ldr	r0, [pc, #420]	; (6220 <next_sense_cond_call_handler+0x274>)
    607a:	f004 fff6 	bl	b06a <printk>
    607e:	f240 2129 	movw	r1, #553	; 0x229
    6082:	4628      	mov	r0, r5
    6084:	f005 f94a 	bl	b31c <assert_post_action>
    6088:	e7d6      	b.n	6038 <next_sense_cond_call_handler+0x8c>
        case 0: return NRF_P0;
    608a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    608e:	e000      	b.n	6092 <next_sense_cond_call_handler+0xe6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6090:	4b66      	ldr	r3, [pc, #408]	; (622c <next_sense_cond_call_handler+0x280>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    6092:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    6096:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    609a:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    609e:	429e      	cmp	r6, r3
    60a0:	f040 80af 	bne.w	6202 <next_sense_cond_call_handler+0x256>
    switch (port)
    60a4:	0963      	lsrs	r3, r4, #5
    60a6:	d01f      	beq.n	60e8 <next_sense_cond_call_handler+0x13c>
    60a8:	2b01      	cmp	r3, #1
    60aa:	d120      	bne.n	60ee <next_sense_cond_call_handler+0x142>
            mask = P1_FEATURE_PINS_PRESENT;
    60ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    60b0:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    60b4:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    60b6:	f013 0f01 	tst.w	r3, #1
    60ba:	d01a      	beq.n	60f2 <next_sense_cond_call_handler+0x146>
    *p_pin = pin_number & 0x1F;
    60bc:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    60c0:	0963      	lsrs	r3, r4, #5
    60c2:	d024      	beq.n	610e <next_sense_cond_call_handler+0x162>
    60c4:	2b01      	cmp	r3, #1
    60c6:	d025      	beq.n	6114 <next_sense_cond_call_handler+0x168>
            NRFX_ASSERT(0);
    60c8:	4f56      	ldr	r7, [pc, #344]	; (6224 <next_sense_cond_call_handler+0x278>)
    60ca:	f240 232e 	movw	r3, #558	; 0x22e
    60ce:	463a      	mov	r2, r7
    60d0:	4952      	ldr	r1, [pc, #328]	; (621c <next_sense_cond_call_handler+0x270>)
    60d2:	4853      	ldr	r0, [pc, #332]	; (6220 <next_sense_cond_call_handler+0x274>)
    60d4:	f004 ffc9 	bl	b06a <printk>
    60d8:	f240 212e 	movw	r1, #558	; 0x22e
    60dc:	4638      	mov	r0, r7
    60de:	f005 f91d 	bl	b31c <assert_post_action>
        case 0: return NRF_P0;
    60e2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    60e6:	e016      	b.n	6116 <next_sense_cond_call_handler+0x16a>
            mask = P0_FEATURE_PINS_PRESENT;
    60e8:	f04f 33ff 	mov.w	r3, #4294967295
    60ec:	e7e0      	b.n	60b0 <next_sense_cond_call_handler+0x104>
    switch (port)
    60ee:	2300      	movs	r3, #0
    60f0:	e7de      	b.n	60b0 <next_sense_cond_call_handler+0x104>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    60f2:	4d4c      	ldr	r5, [pc, #304]	; (6224 <next_sense_cond_call_handler+0x278>)
    60f4:	f240 2329 	movw	r3, #553	; 0x229
    60f8:	462a      	mov	r2, r5
    60fa:	494b      	ldr	r1, [pc, #300]	; (6228 <next_sense_cond_call_handler+0x27c>)
    60fc:	4848      	ldr	r0, [pc, #288]	; (6220 <next_sense_cond_call_handler+0x274>)
    60fe:	f004 ffb4 	bl	b06a <printk>
    6102:	f240 2129 	movw	r1, #553	; 0x229
    6106:	4628      	mov	r0, r5
    6108:	f005 f908 	bl	b31c <assert_post_action>
    610c:	e7d6      	b.n	60bc <next_sense_cond_call_handler+0x110>
        case 0: return NRF_P0;
    610e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    6112:	e000      	b.n	6116 <next_sense_cond_call_handler+0x16a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6114:	4945      	ldr	r1, [pc, #276]	; (622c <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6116:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    611a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    611e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    6122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    switch (port)
    6126:	0963      	lsrs	r3, r4, #5
    6128:	d01f      	beq.n	616a <next_sense_cond_call_handler+0x1be>
    612a:	2b01      	cmp	r3, #1
    612c:	d120      	bne.n	6170 <next_sense_cond_call_handler+0x1c4>
            mask = P1_FEATURE_PINS_PRESENT;
    612e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6132:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6136:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6138:	f013 0f01 	tst.w	r3, #1
    613c:	d01a      	beq.n	6174 <next_sense_cond_call_handler+0x1c8>
    *p_pin = pin_number & 0x1F;
    613e:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6142:	0964      	lsrs	r4, r4, #5
    6144:	d024      	beq.n	6190 <next_sense_cond_call_handler+0x1e4>
    6146:	2c01      	cmp	r4, #1
    6148:	d025      	beq.n	6196 <next_sense_cond_call_handler+0x1ea>
            NRFX_ASSERT(0);
    614a:	4c36      	ldr	r4, [pc, #216]	; (6224 <next_sense_cond_call_handler+0x278>)
    614c:	f240 232e 	movw	r3, #558	; 0x22e
    6150:	4622      	mov	r2, r4
    6152:	4932      	ldr	r1, [pc, #200]	; (621c <next_sense_cond_call_handler+0x270>)
    6154:	4832      	ldr	r0, [pc, #200]	; (6220 <next_sense_cond_call_handler+0x274>)
    6156:	f004 ff88 	bl	b06a <printk>
    615a:	f240 212e 	movw	r1, #558	; 0x22e
    615e:	4620      	mov	r0, r4
    6160:	f005 f8dc 	bl	b31c <assert_post_action>
        case 0: return NRF_P0;
    6164:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    6168:	e016      	b.n	6198 <next_sense_cond_call_handler+0x1ec>
            mask = P0_FEATURE_PINS_PRESENT;
    616a:	f04f 33ff 	mov.w	r3, #4294967295
    616e:	e7e0      	b.n	6132 <next_sense_cond_call_handler+0x186>
    switch (port)
    6170:	2300      	movs	r3, #0
    6172:	e7de      	b.n	6132 <next_sense_cond_call_handler+0x186>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6174:	4d2b      	ldr	r5, [pc, #172]	; (6224 <next_sense_cond_call_handler+0x278>)
    6176:	f240 2329 	movw	r3, #553	; 0x229
    617a:	462a      	mov	r2, r5
    617c:	492a      	ldr	r1, [pc, #168]	; (6228 <next_sense_cond_call_handler+0x27c>)
    617e:	4828      	ldr	r0, [pc, #160]	; (6220 <next_sense_cond_call_handler+0x274>)
    6180:	f004 ff73 	bl	b06a <printk>
    6184:	f240 2129 	movw	r1, #553	; 0x229
    6188:	4628      	mov	r0, r5
    618a:	f005 f8c7 	bl	b31c <assert_post_action>
    618e:	e7d6      	b.n	613e <next_sense_cond_call_handler+0x192>
        case 0: return NRF_P0;
    6190:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    6194:	e000      	b.n	6198 <next_sense_cond_call_handler+0x1ec>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6196:	4925      	ldr	r1, [pc, #148]	; (622c <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6198:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    619c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    61a0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    61a4:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    61a8:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
}
    61ac:	e029      	b.n	6202 <next_sense_cond_call_handler+0x256>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    61ae:	f04f 0803 	mov.w	r8, #3
    61b2:	e709      	b.n	5fc8 <next_sense_cond_call_handler+0x1c>
            mask = P0_FEATURE_PINS_PRESENT;
    61b4:	f04f 33ff 	mov.w	r3, #4294967295
    61b8:	e70e      	b.n	5fd8 <next_sense_cond_call_handler+0x2c>
    switch (port)
    61ba:	2300      	movs	r3, #0
    61bc:	e70c      	b.n	5fd8 <next_sense_cond_call_handler+0x2c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    61be:	4f19      	ldr	r7, [pc, #100]	; (6224 <next_sense_cond_call_handler+0x278>)
    61c0:	f240 2329 	movw	r3, #553	; 0x229
    61c4:	463a      	mov	r2, r7
    61c6:	4918      	ldr	r1, [pc, #96]	; (6228 <next_sense_cond_call_handler+0x27c>)
    61c8:	4815      	ldr	r0, [pc, #84]	; (6220 <next_sense_cond_call_handler+0x274>)
    61ca:	f004 ff4e 	bl	b06a <printk>
    61ce:	f240 2129 	movw	r1, #553	; 0x229
    61d2:	4638      	mov	r0, r7
    61d4:	f005 f8a2 	bl	b31c <assert_post_action>
    61d8:	e705      	b.n	5fe6 <next_sense_cond_call_handler+0x3a>
        case 0: return NRF_P0;
    61da:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    61de:	e000      	b.n	61e2 <next_sense_cond_call_handler+0x236>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    61e0:	4912      	ldr	r1, [pc, #72]	; (622c <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    61e2:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
    61e6:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    61ea:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    61ee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    61f2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    61f6:	2d03      	cmp	r5, #3
    61f8:	d007      	beq.n	620a <next_sense_cond_call_handler+0x25e>
    61fa:	2e02      	cmp	r6, #2
    61fc:	d003      	beq.n	6206 <next_sense_cond_call_handler+0x25a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    61fe:	2e03      	cmp	r6, #3
    6200:	d008      	beq.n	6214 <next_sense_cond_call_handler+0x268>
}
    6202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    6206:	2d01      	cmp	r5, #1
    6208:	d1f9      	bne.n	61fe <next_sense_cond_call_handler+0x252>
            call_handler(pin, trigger);
    620a:	4629      	mov	r1, r5
    620c:	4620      	mov	r0, r4
    620e:	f7ff fde1 	bl	5dd4 <call_handler>
}
    6212:	e7f6      	b.n	6202 <next_sense_cond_call_handler+0x256>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    6214:	2d02      	cmp	r5, #2
    6216:	d1f4      	bne.n	6202 <next_sense_cond_call_handler+0x256>
    6218:	e7f7      	b.n	620a <next_sense_cond_call_handler+0x25e>
    621a:	bf00      	nop
    621c:	0000c3e8 	.word	0x0000c3e8
    6220:	0000c46c 	.word	0x0000c46c
    6224:	0000cb64 	.word	0x0000cb64
    6228:	0000cb98 	.word	0x0000cb98
    622c:	50000300 	.word	0x50000300

00006230 <port_event_handle>:
{
    6230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6234:	b084      	sub	sp, #16
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    6236:	4a64      	ldr	r2, [pc, #400]	; (63c8 <port_event_handle+0x198>)
    6238:	466b      	mov	r3, sp
    623a:	e892 0003 	ldmia.w	r2, {r0, r1}
    623e:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    6242:	2300      	movs	r3, #0
    6244:	a802      	add	r0, sp, #8
    6246:	e00b      	b.n	6260 <port_event_handle+0x30>
        *p_masks = gpio_regs[i]->LATCH;
    6248:	aa04      	add	r2, sp, #16
    624a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    624e:	f852 2c10 	ldr.w	r2, [r2, #-16]
    6252:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    6256:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    625a:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    625e:	3301      	adds	r3, #1
    6260:	2b01      	cmp	r3, #1
    6262:	d9f1      	bls.n	6248 <port_event_handle+0x18>
    6264:	e0ab      	b.n	63be <port_event_handle+0x18e>
            mask = P0_FEATURE_PINS_PRESENT;
    6266:	f04f 33ff 	mov.w	r3, #4294967295
    626a:	e07f      	b.n	636c <port_event_handle+0x13c>
    switch (port)
    626c:	2300      	movs	r3, #0
    626e:	e07d      	b.n	636c <port_event_handle+0x13c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6270:	4f56      	ldr	r7, [pc, #344]	; (63cc <port_event_handle+0x19c>)
    6272:	f240 2329 	movw	r3, #553	; 0x229
    6276:	463a      	mov	r2, r7
    6278:	4955      	ldr	r1, [pc, #340]	; (63d0 <port_event_handle+0x1a0>)
    627a:	4856      	ldr	r0, [pc, #344]	; (63d4 <port_event_handle+0x1a4>)
    627c:	f004 fef5 	bl	b06a <printk>
    6280:	f240 2129 	movw	r1, #553	; 0x229
    6284:	4638      	mov	r0, r7
    6286:	f005 f849 	bl	b31c <assert_post_action>
    628a:	e076      	b.n	637a <port_event_handle+0x14a>
        case 0: return NRF_P0;
    628c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6290:	e000      	b.n	6294 <port_event_handle+0x64>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6292:	4b51      	ldr	r3, [pc, #324]	; (63d8 <port_event_handle+0x1a8>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    6294:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    6298:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
                next_sense_cond_call_handler(pin, trigger, sense);
    629c:	f3c2 4201 	ubfx	r2, r2, #16, #2
    62a0:	4631      	mov	r1, r6
    62a2:	4620      	mov	r0, r4
    62a4:	f7ff fe82 	bl	5fac <next_sense_cond_call_handler>
    switch (port)
    62a8:	0963      	lsrs	r3, r4, #5
    62aa:	d01f      	beq.n	62ec <port_event_handle+0xbc>
    62ac:	2b01      	cmp	r3, #1
    62ae:	d120      	bne.n	62f2 <port_event_handle+0xc2>
            mask = P1_FEATURE_PINS_PRESENT;
    62b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    62b4:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    62b8:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    62ba:	f013 0f01 	tst.w	r3, #1
    62be:	d01a      	beq.n	62f6 <port_event_handle+0xc6>
    *p_pin = pin_number & 0x1F;
    62c0:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    62c4:	0964      	lsrs	r4, r4, #5
    62c6:	d024      	beq.n	6312 <port_event_handle+0xe2>
    62c8:	2c01      	cmp	r4, #1
    62ca:	d025      	beq.n	6318 <port_event_handle+0xe8>
            NRFX_ASSERT(0);
    62cc:	4c3f      	ldr	r4, [pc, #252]	; (63cc <port_event_handle+0x19c>)
    62ce:	f240 232e 	movw	r3, #558	; 0x22e
    62d2:	4622      	mov	r2, r4
    62d4:	4941      	ldr	r1, [pc, #260]	; (63dc <port_event_handle+0x1ac>)
    62d6:	483f      	ldr	r0, [pc, #252]	; (63d4 <port_event_handle+0x1a4>)
    62d8:	f004 fec7 	bl	b06a <printk>
    62dc:	f240 212e 	movw	r1, #558	; 0x22e
    62e0:	4620      	mov	r0, r4
    62e2:	f005 f81b 	bl	b31c <assert_post_action>
        case 0: return NRF_P0;
    62e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    62ea:	e016      	b.n	631a <port_event_handle+0xea>
            mask = P0_FEATURE_PINS_PRESENT;
    62ec:	f04f 33ff 	mov.w	r3, #4294967295
    62f0:	e7e0      	b.n	62b4 <port_event_handle+0x84>
    switch (port)
    62f2:	2300      	movs	r3, #0
    62f4:	e7de      	b.n	62b4 <port_event_handle+0x84>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    62f6:	4e35      	ldr	r6, [pc, #212]	; (63cc <port_event_handle+0x19c>)
    62f8:	f240 2329 	movw	r3, #553	; 0x229
    62fc:	4632      	mov	r2, r6
    62fe:	4934      	ldr	r1, [pc, #208]	; (63d0 <port_event_handle+0x1a0>)
    6300:	4834      	ldr	r0, [pc, #208]	; (63d4 <port_event_handle+0x1a4>)
    6302:	f004 feb2 	bl	b06a <printk>
    6306:	f240 2129 	movw	r1, #553	; 0x229
    630a:	4630      	mov	r0, r6
    630c:	f005 f806 	bl	b31c <assert_post_action>
    6310:	e7d6      	b.n	62c0 <port_event_handle+0x90>
        case 0: return NRF_P0;
    6312:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6316:	e000      	b.n	631a <port_event_handle+0xea>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6318:	4a2f      	ldr	r2, [pc, #188]	; (63d8 <port_event_handle+0x1a8>)
    reg->LATCH = (1 << pin_number);
    631a:	2301      	movs	r3, #1
    631c:	40b3      	lsls	r3, r6
    631e:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
            while (latch[i])
    6322:	ab04      	add	r3, sp, #16
    6324:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    6328:	f853 4c08 	ldr.w	r4, [r3, #-8]
    632c:	2c00      	cmp	r4, #0
    632e:	d03b      	beq.n	63a8 <port_event_handle+0x178>
                uint32_t pin = NRF_CTZ(latch[i]);
    6330:	fa94 f4a4 	rbit	r4, r4
    6334:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    6338:	eb04 1445 	add.w	r4, r4, r5, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    633c:	f104 0208 	add.w	r2, r4, #8
    6340:	4b27      	ldr	r3, [pc, #156]	; (63e0 <port_event_handle+0x1b0>)
    6342:	f833 6012 	ldrh.w	r6, [r3, r2, lsl #1]
    6346:	f3c6 0682 	ubfx	r6, r6, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    634a:	08e1      	lsrs	r1, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
    634c:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    6350:	a802      	add	r0, sp, #8
    6352:	2301      	movs	r3, #1
    6354:	fa03 f202 	lsl.w	r2, r3, r2
    6358:	5c43      	ldrb	r3, [r0, r1]
    635a:	ea23 0302 	bic.w	r3, r3, r2
    635e:	5443      	strb	r3, [r0, r1]
    switch (port)
    6360:	0963      	lsrs	r3, r4, #5
    6362:	d080      	beq.n	6266 <port_event_handle+0x36>
    6364:	2b01      	cmp	r3, #1
    6366:	d181      	bne.n	626c <port_event_handle+0x3c>
            mask = P1_FEATURE_PINS_PRESENT;
    6368:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    636c:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6370:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6372:	f013 0f01 	tst.w	r3, #1
    6376:	f43f af7b 	beq.w	6270 <port_event_handle+0x40>
    *p_pin = pin_number & 0x1F;
    637a:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    637e:	0963      	lsrs	r3, r4, #5
    6380:	d084      	beq.n	628c <port_event_handle+0x5c>
    6382:	2b01      	cmp	r3, #1
    6384:	d085      	beq.n	6292 <port_event_handle+0x62>
            NRFX_ASSERT(0);
    6386:	f8df 8044 	ldr.w	r8, [pc, #68]	; 63cc <port_event_handle+0x19c>
    638a:	f240 232e 	movw	r3, #558	; 0x22e
    638e:	4642      	mov	r2, r8
    6390:	4912      	ldr	r1, [pc, #72]	; (63dc <port_event_handle+0x1ac>)
    6392:	4810      	ldr	r0, [pc, #64]	; (63d4 <port_event_handle+0x1a4>)
    6394:	f004 fe69 	bl	b06a <printk>
    6398:	f240 212e 	movw	r1, #558	; 0x22e
    639c:	4640      	mov	r0, r8
    639e:	f004 ffbd 	bl	b31c <assert_post_action>
        case 0: return NRF_P0;
    63a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    63a6:	e775      	b.n	6294 <port_event_handle+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    63a8:	3501      	adds	r5, #1
    63aa:	2d01      	cmp	r5, #1
    63ac:	d9b9      	bls.n	6322 <port_event_handle+0xf2>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    63ae:	4b0d      	ldr	r3, [pc, #52]	; (63e4 <port_event_handle+0x1b4>)
    63b0:	2200      	movs	r2, #0
    63b2:	601a      	str	r2, [r3, #0]
    63b4:	681b      	ldr	r3, [r3, #0]
    } while (latch_pending_read_and_check(latch));
    63b6:	a802      	add	r0, sp, #8
    63b8:	f7ff fd22 	bl	5e00 <latch_pending_read_and_check>
    63bc:	b108      	cbz	r0, 63c2 <port_event_handle+0x192>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    63be:	2500      	movs	r5, #0
    63c0:	e7f3      	b.n	63aa <port_event_handle+0x17a>
}
    63c2:	b004      	add	sp, #16
    63c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    63c8:	0000c2e0 	.word	0x0000c2e0
    63cc:	0000cb64 	.word	0x0000cb64
    63d0:	0000cb98 	.word	0x0000cb98
    63d4:	0000c46c 	.word	0x0000c46c
    63d8:	50000300 	.word	0x50000300
    63dc:	0000c3e8 	.word	0x0000c3e8
    63e0:	20000104 	.word	0x20000104
    63e4:	4000617c 	.word	0x4000617c

000063e8 <nrfx_gpiote_input_configure>:
{
    63e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    63ec:	4604      	mov	r4, r0
    63ee:	4615      	mov	r5, r2
    63f0:	461e      	mov	r6, r3
    if (p_input_config)
    63f2:	2900      	cmp	r1, #0
    63f4:	d062      	beq.n	64bc <nrfx_gpiote_input_configure+0xd4>
    63f6:	4688      	mov	r8, r1
        if (pin_is_task_output(pin))
    63f8:	f005 fc4f 	bl	bc9a <pin_is_task_output>
    63fc:	2800      	cmp	r0, #0
    63fe:	f040 80cb 	bne.w	6598 <nrfx_gpiote_input_configure+0x1b0>
    switch (port)
    6402:	0963      	lsrs	r3, r4, #5
    6404:	d020      	beq.n	6448 <nrfx_gpiote_input_configure+0x60>
    6406:	2b01      	cmp	r3, #1
    6408:	d121      	bne.n	644e <nrfx_gpiote_input_configure+0x66>
            mask = P1_FEATURE_PINS_PRESENT;
    640a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    640e:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6412:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6414:	f013 0f01 	tst.w	r3, #1
    6418:	d01b      	beq.n	6452 <nrfx_gpiote_input_configure+0x6a>
    *p_pin = pin_number & 0x1F;
    641a:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    641e:	0963      	lsrs	r3, r4, #5
    6420:	d025      	beq.n	646e <nrfx_gpiote_input_configure+0x86>
    6422:	2b01      	cmp	r3, #1
    6424:	d026      	beq.n	6474 <nrfx_gpiote_input_configure+0x8c>
            NRFX_ASSERT(0);
    6426:	f8df 9188 	ldr.w	r9, [pc, #392]	; 65b0 <nrfx_gpiote_input_configure+0x1c8>
    642a:	f240 232e 	movw	r3, #558	; 0x22e
    642e:	464a      	mov	r2, r9
    6430:	495d      	ldr	r1, [pc, #372]	; (65a8 <nrfx_gpiote_input_configure+0x1c0>)
    6432:	485e      	ldr	r0, [pc, #376]	; (65ac <nrfx_gpiote_input_configure+0x1c4>)
    6434:	f004 fe19 	bl	b06a <printk>
    6438:	f240 212e 	movw	r1, #558	; 0x22e
    643c:	4648      	mov	r0, r9
    643e:	f004 ff6d 	bl	b31c <assert_post_action>
        case 0: return NRF_P0;
    6442:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    6446:	e016      	b.n	6476 <nrfx_gpiote_input_configure+0x8e>
            mask = P0_FEATURE_PINS_PRESENT;
    6448:	f04f 33ff 	mov.w	r3, #4294967295
    644c:	e7df      	b.n	640e <nrfx_gpiote_input_configure+0x26>
    switch (port)
    644e:	2300      	movs	r3, #0
    6450:	e7dd      	b.n	640e <nrfx_gpiote_input_configure+0x26>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6452:	4f57      	ldr	r7, [pc, #348]	; (65b0 <nrfx_gpiote_input_configure+0x1c8>)
    6454:	f240 2329 	movw	r3, #553	; 0x229
    6458:	463a      	mov	r2, r7
    645a:	4956      	ldr	r1, [pc, #344]	; (65b4 <nrfx_gpiote_input_configure+0x1cc>)
    645c:	4853      	ldr	r0, [pc, #332]	; (65ac <nrfx_gpiote_input_configure+0x1c4>)
    645e:	f004 fe04 	bl	b06a <printk>
    6462:	f240 2129 	movw	r1, #553	; 0x229
    6466:	4638      	mov	r0, r7
    6468:	f004 ff58 	bl	b31c <assert_post_action>
    646c:	e7d5      	b.n	641a <nrfx_gpiote_input_configure+0x32>
        case 0: return NRF_P0;
    646e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    6472:	e000      	b.n	6476 <nrfx_gpiote_input_configure+0x8e>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6474:	4950      	ldr	r1, [pc, #320]	; (65b8 <nrfx_gpiote_input_configure+0x1d0>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6476:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
    647a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    647e:	f1b8 0f00 	cmp.w	r8, #0
    6482:	d03c      	beq.n	64fe <nrfx_gpiote_input_configure+0x116>
    6484:	220c      	movs	r2, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    6486:	f042 0203 	orr.w	r2, r2, #3
    cnf &= ~to_update;
    648a:	ea23 0302 	bic.w	r3, r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    648e:	f1b8 0f00 	cmp.w	r8, #0
    6492:	d036      	beq.n	6502 <nrfx_gpiote_input_configure+0x11a>
    6494:	f898 2000 	ldrb.w	r2, [r8]
    6498:	0092      	lsls	r2, r2, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    649a:	4313      	orrs	r3, r2
    reg->PIN_CNF[pin_number] = cnf;
    649c:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    64a0:	f841 3027 	str.w	r3, [r1, r7, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    64a4:	4a45      	ldr	r2, [pc, #276]	; (65bc <nrfx_gpiote_input_configure+0x1d4>)
    64a6:	f104 0108 	add.w	r1, r4, #8
    64aa:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    64ae:	f023 0302 	bic.w	r3, r3, #2
    64b2:	b29b      	uxth	r3, r3
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    64b4:	f043 0301 	orr.w	r3, r3, #1
    64b8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    64bc:	b1b5      	cbz	r5, 64ec <nrfx_gpiote_input_configure+0x104>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    64be:	f895 8000 	ldrb.w	r8, [r5]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    64c2:	f8d5 9004 	ldr.w	r9, [r5, #4]
        if (pin_is_output(pin))
    64c6:	4620      	mov	r0, r4
    64c8:	f7ff fc32 	bl	5d30 <pin_is_output>
    64cc:	b1d8      	cbz	r0, 6506 <nrfx_gpiote_input_configure+0x11e>
            if (use_evt)
    64ce:	f1b9 0f00 	cmp.w	r9, #0
    64d2:	d163      	bne.n	659c <nrfx_gpiote_input_configure+0x1b4>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    64d4:	4b39      	ldr	r3, [pc, #228]	; (65bc <nrfx_gpiote_input_configure+0x1d4>)
    64d6:	f104 0208 	add.w	r2, r4, #8
    64da:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
    64de:	f020 001c 	bic.w	r0, r0, #28
    64e2:	b280      	uxth	r0, r0
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    64e4:	ea40 0088 	orr.w	r0, r0, r8, lsl #2
    64e8:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
    if (p_handler_config)
    64ec:	2e00      	cmp	r6, #0
    64ee:	d059      	beq.n	65a4 <nrfx_gpiote_input_configure+0x1bc>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    64f0:	6872      	ldr	r2, [r6, #4]
    64f2:	6831      	ldr	r1, [r6, #0]
    64f4:	4620      	mov	r0, r4
    64f6:	f7ff fd03 	bl	5f00 <pin_handler_set>
}
    64fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    64fe:	2200      	movs	r2, #0
    6500:	e7c1      	b.n	6486 <nrfx_gpiote_input_configure+0x9e>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    6502:	2200      	movs	r2, #0
    6504:	e7c9      	b.n	649a <nrfx_gpiote_input_configure+0xb2>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    6506:	4b2d      	ldr	r3, [pc, #180]	; (65bc <nrfx_gpiote_input_configure+0x1d4>)
    6508:	f104 0208 	add.w	r2, r4, #8
    650c:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
    6510:	f027 0720 	bic.w	r7, r7, #32
    6514:	04ff      	lsls	r7, r7, #19
    6516:	0cff      	lsrs	r7, r7, #19
    6518:	f823 7012 	strh.w	r7, [r3, r2, lsl #1]
            if (use_evt)
    651c:	f1b9 0f00 	cmp.w	r9, #0
    6520:	d0d8      	beq.n	64d4 <nrfx_gpiote_input_configure+0xec>
                if (!edge)
    6522:	f1b8 0f03 	cmp.w	r8, #3
    6526:	d83b      	bhi.n	65a0 <nrfx_gpiote_input_configure+0x1b8>
                uint8_t ch = *p_trigger_config->p_in_channel;
    6528:	686b      	ldr	r3, [r5, #4]
    652a:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    652c:	f1b8 0f00 	cmp.w	r8, #0
    6530:	d106      	bne.n	6540 <nrfx_gpiote_input_configure+0x158>
    p_reg->CONFIG[idx] = 0;
    6532:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    6536:	4b22      	ldr	r3, [pc, #136]	; (65c0 <nrfx_gpiote_input_configure+0x1d8>)
    6538:	2200      	movs	r2, #0
    653a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    653e:	e7c9      	b.n	64d4 <nrfx_gpiote_input_configure+0xec>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    6540:	4640      	mov	r0, r8
    6542:	f005 fbc1 	bl	bcc8 <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    6546:	4b1e      	ldr	r3, [pc, #120]	; (65c0 <nrfx_gpiote_input_configure+0x1d8>)
    6548:	f505 72a2 	add.w	r2, r5, #324	; 0x144
    654c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    6550:	f021 0103 	bic.w	r1, r1, #3
    6554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    6558:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    655c:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    6560:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    6564:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6568:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
    656c:	0221      	lsls	r1, r4, #8
    656e:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    6572:	0400      	lsls	r0, r0, #16
    6574:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6578:	4301      	orrs	r1, r0
    657a:	ea4c 0101 	orr.w	r1, ip, r1
    657e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    6582:	036d      	lsls	r5, r5, #13
    6584:	b2ad      	uxth	r5, r5
    6586:	f104 0308 	add.w	r3, r4, #8
    658a:	432f      	orrs	r7, r5
    658c:	f047 0720 	orr.w	r7, r7, #32
    6590:	4a0a      	ldr	r2, [pc, #40]	; (65bc <nrfx_gpiote_input_configure+0x1d4>)
    6592:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
    6596:	e79d      	b.n	64d4 <nrfx_gpiote_input_configure+0xec>
            return NRFX_ERROR_INVALID_PARAM;
    6598:	480a      	ldr	r0, [pc, #40]	; (65c4 <nrfx_gpiote_input_configure+0x1dc>)
    659a:	e7ae      	b.n	64fa <nrfx_gpiote_input_configure+0x112>
                return NRFX_ERROR_INVALID_PARAM;
    659c:	4809      	ldr	r0, [pc, #36]	; (65c4 <nrfx_gpiote_input_configure+0x1dc>)
    659e:	e7ac      	b.n	64fa <nrfx_gpiote_input_configure+0x112>
                    return NRFX_ERROR_INVALID_PARAM;
    65a0:	4808      	ldr	r0, [pc, #32]	; (65c4 <nrfx_gpiote_input_configure+0x1dc>)
    65a2:	e7aa      	b.n	64fa <nrfx_gpiote_input_configure+0x112>
        err = NRFX_SUCCESS;
    65a4:	4808      	ldr	r0, [pc, #32]	; (65c8 <nrfx_gpiote_input_configure+0x1e0>)
    65a6:	e7a8      	b.n	64fa <nrfx_gpiote_input_configure+0x112>
    65a8:	0000c3e8 	.word	0x0000c3e8
    65ac:	0000c46c 	.word	0x0000c46c
    65b0:	0000cb64 	.word	0x0000cb64
    65b4:	0000cb98 	.word	0x0000cb98
    65b8:	50000300 	.word	0x50000300
    65bc:	20000104 	.word	0x20000104
    65c0:	40006000 	.word	0x40006000
    65c4:	0bad0004 	.word	0x0bad0004
    65c8:	0bad0000 	.word	0x0bad0000

000065cc <nrfx_gpiote_output_configure>:
{
    65cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    65d0:	4604      	mov	r4, r0
    65d2:	4615      	mov	r5, r2
    if (p_config)
    65d4:	2900      	cmp	r1, #0
    65d6:	f000 8086 	beq.w	66e6 <nrfx_gpiote_output_configure+0x11a>
    65da:	460f      	mov	r7, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    65dc:	f005 fb6c 	bl	bcb8 <pin_is_input>
    65e0:	b128      	cbz	r0, 65ee <nrfx_gpiote_output_configure+0x22>
    65e2:	4620      	mov	r0, r4
    65e4:	f7ff fb8e 	bl	5d04 <pin_in_use_by_te>
    65e8:	2800      	cmp	r0, #0
    65ea:	f040 80cc 	bne.w	6786 <nrfx_gpiote_output_configure+0x1ba>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    65ee:	4620      	mov	r0, r4
    65f0:	f7ff fb92 	bl	5d18 <pin_has_trigger>
    65f4:	b118      	cbz	r0, 65fe <nrfx_gpiote_output_configure+0x32>
    65f6:	787b      	ldrb	r3, [r7, #1]
    65f8:	2b01      	cmp	r3, #1
    65fa:	f000 80c6 	beq.w	678a <nrfx_gpiote_output_configure+0x1be>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    65fe:	f107 0901 	add.w	r9, r7, #1
    6602:	f107 0802 	add.w	r8, r7, #2
    switch (port)
    6606:	0963      	lsrs	r3, r4, #5
    6608:	d020      	beq.n	664c <nrfx_gpiote_output_configure+0x80>
    660a:	2b01      	cmp	r3, #1
    660c:	d121      	bne.n	6652 <nrfx_gpiote_output_configure+0x86>
            mask = P1_FEATURE_PINS_PRESENT;
    660e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6612:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6616:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6618:	f013 0f01 	tst.w	r3, #1
    661c:	d01b      	beq.n	6656 <nrfx_gpiote_output_configure+0x8a>
    *p_pin = pin_number & 0x1F;
    661e:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6622:	0963      	lsrs	r3, r4, #5
    6624:	d025      	beq.n	6672 <nrfx_gpiote_output_configure+0xa6>
    6626:	2b01      	cmp	r3, #1
    6628:	d026      	beq.n	6678 <nrfx_gpiote_output_configure+0xac>
            NRFX_ASSERT(0);
    662a:	f8df a178 	ldr.w	sl, [pc, #376]	; 67a4 <nrfx_gpiote_output_configure+0x1d8>
    662e:	f240 232e 	movw	r3, #558	; 0x22e
    6632:	4652      	mov	r2, sl
    6634:	4959      	ldr	r1, [pc, #356]	; (679c <nrfx_gpiote_output_configure+0x1d0>)
    6636:	485a      	ldr	r0, [pc, #360]	; (67a0 <nrfx_gpiote_output_configure+0x1d4>)
    6638:	f004 fd17 	bl	b06a <printk>
    663c:	f240 212e 	movw	r1, #558	; 0x22e
    6640:	4650      	mov	r0, sl
    6642:	f004 fe6b 	bl	b31c <assert_post_action>
        case 0: return NRF_P0;
    6646:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    664a:	e016      	b.n	667a <nrfx_gpiote_output_configure+0xae>
            mask = P0_FEATURE_PINS_PRESENT;
    664c:	f04f 33ff 	mov.w	r3, #4294967295
    6650:	e7df      	b.n	6612 <nrfx_gpiote_output_configure+0x46>
    switch (port)
    6652:	2300      	movs	r3, #0
    6654:	e7dd      	b.n	6612 <nrfx_gpiote_output_configure+0x46>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6656:	4e53      	ldr	r6, [pc, #332]	; (67a4 <nrfx_gpiote_output_configure+0x1d8>)
    6658:	f240 2329 	movw	r3, #553	; 0x229
    665c:	4632      	mov	r2, r6
    665e:	4952      	ldr	r1, [pc, #328]	; (67a8 <nrfx_gpiote_output_configure+0x1dc>)
    6660:	484f      	ldr	r0, [pc, #316]	; (67a0 <nrfx_gpiote_output_configure+0x1d4>)
    6662:	f004 fd02 	bl	b06a <printk>
    6666:	f240 2129 	movw	r1, #553	; 0x229
    666a:	4630      	mov	r0, r6
    666c:	f004 fe56 	bl	b31c <assert_post_action>
    6670:	e7d5      	b.n	661e <nrfx_gpiote_output_configure+0x52>
        case 0: return NRF_P0;
    6672:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6676:	e000      	b.n	667a <nrfx_gpiote_output_configure+0xae>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6678:	4a4c      	ldr	r2, [pc, #304]	; (67ac <nrfx_gpiote_output_configure+0x1e0>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    667a:	f506 73e0 	add.w	r3, r6, #448	; 0x1c0
    667e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    6682:	f1b9 0f00 	cmp.w	r9, #0
    6686:	d072      	beq.n	676e <nrfx_gpiote_output_configure+0x1a2>
    6688:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    668a:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    668e:	f1b8 0f00 	cmp.w	r8, #0
    6692:	d06e      	beq.n	6772 <nrfx_gpiote_output_configure+0x1a6>
    6694:	200c      	movs	r0, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    6696:	4303      	orrs	r3, r0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    6698:	2f00      	cmp	r7, #0
    669a:	d06c      	beq.n	6776 <nrfx_gpiote_output_configure+0x1aa>
    669c:	f44f 60e0 	mov.w	r0, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    66a0:	4303      	orrs	r3, r0
    cnf &= ~to_update;
    66a2:	ea21 0103 	bic.w	r1, r1, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    66a6:	f1b9 0f00 	cmp.w	r9, #0
    66aa:	d066      	beq.n	677a <nrfx_gpiote_output_configure+0x1ae>
    66ac:	787b      	ldrb	r3, [r7, #1]
    66ae:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    66b0:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    66b4:	f1b8 0f00 	cmp.w	r8, #0
    66b8:	d061      	beq.n	677e <nrfx_gpiote_output_configure+0x1b2>
    66ba:	78b8      	ldrb	r0, [r7, #2]
    66bc:	0080      	lsls	r0, r0, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    66be:	4303      	orrs	r3, r0
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    66c0:	2f00      	cmp	r7, #0
    66c2:	d05e      	beq.n	6782 <nrfx_gpiote_output_configure+0x1b6>
    66c4:	7838      	ldrb	r0, [r7, #0]
    66c6:	0200      	lsls	r0, r0, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    66c8:	4303      	orrs	r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    66ca:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    66cc:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    66d0:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    66d4:	4a36      	ldr	r2, [pc, #216]	; (67b0 <nrfx_gpiote_output_configure+0x1e4>)
    66d6:	f104 0108 	add.w	r1, r4, #8
    66da:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    66de:	f043 0303 	orr.w	r3, r3, #3
    66e2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    66e6:	2d00      	cmp	r5, #0
    66e8:	d051      	beq.n	678e <nrfx_gpiote_output_configure+0x1c2>
        if (pin_is_input(pin))
    66ea:	4620      	mov	r0, r4
    66ec:	f005 fae4 	bl	bcb8 <pin_is_input>
    66f0:	2800      	cmp	r0, #0
    66f2:	d14f      	bne.n	6794 <nrfx_gpiote_output_configure+0x1c8>
        uint32_t ch = p_task_config->task_ch;
    66f4:	782a      	ldrb	r2, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    66f6:	f502 71a2 	add.w	r1, r2, #324	; 0x144
    66fa:	4b2e      	ldr	r3, [pc, #184]	; (67b4 <nrfx_gpiote_output_configure+0x1e8>)
    66fc:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    6700:	492b      	ldr	r1, [pc, #172]	; (67b0 <nrfx_gpiote_output_configure+0x1e4>)
    6702:	f104 0008 	add.w	r0, r4, #8
    6706:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
    670a:	f023 0320 	bic.w	r3, r3, #32
    670e:	04db      	lsls	r3, r3, #19
    6710:	0cdb      	lsrs	r3, r3, #19
    6712:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    6716:	7869      	ldrb	r1, [r5, #1]
    6718:	2900      	cmp	r1, #0
    671a:	d03d      	beq.n	6798 <nrfx_gpiote_output_configure+0x1cc>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    671c:	f895 c002 	ldrb.w	ip, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    6720:	4d24      	ldr	r5, [pc, #144]	; (67b4 <nrfx_gpiote_output_configure+0x1e8>)
    6722:	f502 76a2 	add.w	r6, r2, #324	; 0x144
    6726:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
    672a:	f420 1099 	bic.w	r0, r0, #1253376	; 0x132000
    672e:	f420 50f8 	bic.w	r0, r0, #7936	; 0x1f00
    6732:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6736:	f855 7026 	ldr.w	r7, [r5, r6, lsl #2]
    673a:	0220      	lsls	r0, r4, #8
    673c:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    6740:	0409      	lsls	r1, r1, #16
    6742:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6746:	4301      	orrs	r1, r0
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    6748:	ea4f 500c 	mov.w	r0, ip, lsl #20
    674c:	f400 1080 	and.w	r0, r0, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    6750:	4301      	orrs	r1, r0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6752:	4339      	orrs	r1, r7
    6754:	f845 1026 	str.w	r1, [r5, r6, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    6758:	0352      	lsls	r2, r2, #13
    675a:	b292      	uxth	r2, r2
    675c:	3408      	adds	r4, #8
    675e:	431a      	orrs	r2, r3
    6760:	f042 0220 	orr.w	r2, r2, #32
    6764:	4b12      	ldr	r3, [pc, #72]	; (67b0 <nrfx_gpiote_output_configure+0x1e4>)
    6766:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    return NRFX_SUCCESS;
    676a:	4813      	ldr	r0, [pc, #76]	; (67b8 <nrfx_gpiote_output_configure+0x1ec>)
    676c:	e010      	b.n	6790 <nrfx_gpiote_output_configure+0x1c4>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    676e:	2300      	movs	r3, #0
    6770:	e78b      	b.n	668a <nrfx_gpiote_output_configure+0xbe>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    6772:	2000      	movs	r0, #0
    6774:	e78f      	b.n	6696 <nrfx_gpiote_output_configure+0xca>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    6776:	2000      	movs	r0, #0
    6778:	e792      	b.n	66a0 <nrfx_gpiote_output_configure+0xd4>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    677a:	2300      	movs	r3, #0
    677c:	e798      	b.n	66b0 <nrfx_gpiote_output_configure+0xe4>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    677e:	2000      	movs	r0, #0
    6780:	e79d      	b.n	66be <nrfx_gpiote_output_configure+0xf2>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    6782:	2000      	movs	r0, #0
    6784:	e7a0      	b.n	66c8 <nrfx_gpiote_output_configure+0xfc>
    6786:	480d      	ldr	r0, [pc, #52]	; (67bc <nrfx_gpiote_output_configure+0x1f0>)
    6788:	e002      	b.n	6790 <nrfx_gpiote_output_configure+0x1c4>
    678a:	480c      	ldr	r0, [pc, #48]	; (67bc <nrfx_gpiote_output_configure+0x1f0>)
    678c:	e000      	b.n	6790 <nrfx_gpiote_output_configure+0x1c4>
    678e:	480a      	ldr	r0, [pc, #40]	; (67b8 <nrfx_gpiote_output_configure+0x1ec>)
}
    6790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return NRFX_ERROR_INVALID_PARAM;
    6794:	4809      	ldr	r0, [pc, #36]	; (67bc <nrfx_gpiote_output_configure+0x1f0>)
    6796:	e7fb      	b.n	6790 <nrfx_gpiote_output_configure+0x1c4>
    return NRFX_SUCCESS;
    6798:	4807      	ldr	r0, [pc, #28]	; (67b8 <nrfx_gpiote_output_configure+0x1ec>)
    679a:	e7f9      	b.n	6790 <nrfx_gpiote_output_configure+0x1c4>
    679c:	0000c3e8 	.word	0x0000c3e8
    67a0:	0000c46c 	.word	0x0000c46c
    67a4:	0000cb64 	.word	0x0000cb64
    67a8:	0000cb98 	.word	0x0000cb98
    67ac:	50000300 	.word	0x50000300
    67b0:	20000104 	.word	0x20000104
    67b4:	40006000 	.word	0x40006000
    67b8:	0bad0000 	.word	0x0bad0000
    67bc:	0bad0004 	.word	0x0bad0004

000067c0 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    67c0:	4b01      	ldr	r3, [pc, #4]	; (67c8 <nrfx_gpiote_global_callback_set+0x8>)
    67c2:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    67c4:	60d9      	str	r1, [r3, #12]
}
    67c6:	4770      	bx	lr
    67c8:	20000104 	.word	0x20000104

000067cc <nrfx_gpiote_channel_get>:
{
    67cc:	b570      	push	{r4, r5, r6, lr}
    67ce:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    67d0:	460d      	mov	r5, r1
    67d2:	b159      	cbz	r1, 67ec <nrfx_gpiote_channel_get+0x20>
    if (pin_in_use_by_te(pin))
    67d4:	4620      	mov	r0, r4
    67d6:	f7ff fa95 	bl	5d04 <pin_in_use_by_te>
    67da:	b1a8      	cbz	r0, 6808 <nrfx_gpiote_channel_get+0x3c>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    67dc:	3408      	adds	r4, #8
    67de:	4b0b      	ldr	r3, [pc, #44]	; (680c <nrfx_gpiote_channel_get+0x40>)
    67e0:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    67e4:	0b5b      	lsrs	r3, r3, #13
    67e6:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    67e8:	4809      	ldr	r0, [pc, #36]	; (6810 <nrfx_gpiote_channel_get+0x44>)
}
    67ea:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(p_channel);
    67ec:	4e09      	ldr	r6, [pc, #36]	; (6814 <nrfx_gpiote_channel_get+0x48>)
    67ee:	f240 2335 	movw	r3, #565	; 0x235
    67f2:	4632      	mov	r2, r6
    67f4:	4908      	ldr	r1, [pc, #32]	; (6818 <nrfx_gpiote_channel_get+0x4c>)
    67f6:	4809      	ldr	r0, [pc, #36]	; (681c <nrfx_gpiote_channel_get+0x50>)
    67f8:	f004 fc37 	bl	b06a <printk>
    67fc:	f240 2135 	movw	r1, #565	; 0x235
    6800:	4630      	mov	r0, r6
    6802:	f004 fd8b 	bl	b31c <assert_post_action>
    6806:	e7e5      	b.n	67d4 <nrfx_gpiote_channel_get+0x8>
        return NRFX_ERROR_INVALID_PARAM;
    6808:	4805      	ldr	r0, [pc, #20]	; (6820 <nrfx_gpiote_channel_get+0x54>)
    680a:	e7ee      	b.n	67ea <nrfx_gpiote_channel_get+0x1e>
    680c:	20000104 	.word	0x20000104
    6810:	0bad0000 	.word	0x0bad0000
    6814:	0000cda0 	.word	0x0000cda0
    6818:	0000cdf4 	.word	0x0000cdf4
    681c:	0000c46c 	.word	0x0000c46c
    6820:	0bad0004 	.word	0x0bad0004

00006824 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    6824:	4b0f      	ldr	r3, [pc, #60]	; (6864 <nrfx_gpiote_init+0x40>)
    6826:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    682a:	b10b      	cbz	r3, 6830 <nrfx_gpiote_init+0xc>
        return err_code;
    682c:	480e      	ldr	r0, [pc, #56]	; (6868 <nrfx_gpiote_init+0x44>)
}
    682e:	4770      	bx	lr
{
    6830:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    6832:	4c0c      	ldr	r4, [pc, #48]	; (6864 <nrfx_gpiote_init+0x40>)
    6834:	2260      	movs	r2, #96	; 0x60
    6836:	2100      	movs	r1, #0
    6838:	f104 0010 	add.w	r0, r4, #16
    683c:	f004 fe83 	bl	b546 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    6840:	2006      	movs	r0, #6
    6842:	f7fc fab3 	bl	2dac <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6846:	4b09      	ldr	r3, [pc, #36]	; (686c <nrfx_gpiote_init+0x48>)
    6848:	2200      	movs	r2, #0
    684a:	601a      	str	r2, [r3, #0]
    684c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    684e:	4b08      	ldr	r3, [pc, #32]	; (6870 <nrfx_gpiote_init+0x4c>)
    6850:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    6854:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    6858:	2301      	movs	r3, #1
    685a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    685e:	6763      	str	r3, [r4, #116]	; 0x74
    return err_code;
    6860:	4804      	ldr	r0, [pc, #16]	; (6874 <nrfx_gpiote_init+0x50>)
}
    6862:	bd10      	pop	{r4, pc}
    6864:	20000104 	.word	0x20000104
    6868:	0bad0005 	.word	0x0bad0005
    686c:	4000617c 	.word	0x4000617c
    6870:	40006000 	.word	0x40006000
    6874:	0bad0000 	.word	0x0bad0000

00006878 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    6878:	4b03      	ldr	r3, [pc, #12]	; (6888 <nrfx_gpiote_is_init+0x10>)
    687a:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    687e:	3800      	subs	r0, #0
    6880:	bf18      	it	ne
    6882:	2001      	movne	r0, #1
    6884:	4770      	bx	lr
    6886:	bf00      	nop
    6888:	20000104 	.word	0x20000104

0000688c <nrfx_gpiote_channel_free>:
{
    688c:	b508      	push	{r3, lr}
    688e:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    6890:	4801      	ldr	r0, [pc, #4]	; (6898 <nrfx_gpiote_channel_free+0xc>)
    6892:	f7ff f84d 	bl	5930 <nrfx_flag32_free>
}
    6896:	bd08      	pop	{r3, pc}
    6898:	20000174 	.word	0x20000174

0000689c <nrfx_gpiote_channel_alloc>:
{
    689c:	b508      	push	{r3, lr}
    689e:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    68a0:	4801      	ldr	r0, [pc, #4]	; (68a8 <nrfx_gpiote_channel_alloc+0xc>)
    68a2:	f7ff f821 	bl	58e8 <nrfx_flag32_alloc>
}
    68a6:	bd08      	pop	{r3, pc}
    68a8:	20000174 	.word	0x20000174

000068ac <nrfx_gpiote_trigger_enable>:
{
    68ac:	b570      	push	{r4, r5, r6, lr}
    68ae:	4604      	mov	r4, r0
    68b0:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    68b2:	f7ff fa31 	bl	5d18 <pin_has_trigger>
    68b6:	b1b8      	cbz	r0, 68e8 <nrfx_gpiote_trigger_enable+0x3c>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    68b8:	4620      	mov	r0, r4
    68ba:	f7ff fa23 	bl	5d04 <pin_in_use_by_te>
    68be:	b118      	cbz	r0, 68c8 <nrfx_gpiote_trigger_enable+0x1c>
    68c0:	4620      	mov	r0, r4
    68c2:	f005 f9f9 	bl	bcb8 <pin_is_input>
    68c6:	b9e8      	cbnz	r0, 6904 <nrfx_gpiote_trigger_enable+0x58>
        NRFX_ASSERT(int_enable);
    68c8:	2d00      	cmp	r5, #0
    68ca:	d04c      	beq.n	6966 <nrfx_gpiote_trigger_enable+0xba>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    68cc:	f104 0308 	add.w	r3, r4, #8
    68d0:	4a70      	ldr	r2, [pc, #448]	; (6a94 <nrfx_gpiote_trigger_enable+0x1e8>)
    68d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    68d6:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    68da:	2b04      	cmp	r3, #4
    68dc:	f000 8092 	beq.w	6a04 <nrfx_gpiote_trigger_enable+0x158>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    68e0:	2b05      	cmp	r3, #5
    68e2:	d14e      	bne.n	6982 <nrfx_gpiote_trigger_enable+0xd6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    68e4:	2602      	movs	r6, #2
    68e6:	e08e      	b.n	6a06 <nrfx_gpiote_trigger_enable+0x15a>
    NRFX_ASSERT(pin_has_trigger(pin));
    68e8:	4e6b      	ldr	r6, [pc, #428]	; (6a98 <nrfx_gpiote_trigger_enable+0x1ec>)
    68ea:	f240 33df 	movw	r3, #991	; 0x3df
    68ee:	4632      	mov	r2, r6
    68f0:	496a      	ldr	r1, [pc, #424]	; (6a9c <nrfx_gpiote_trigger_enable+0x1f0>)
    68f2:	486b      	ldr	r0, [pc, #428]	; (6aa0 <nrfx_gpiote_trigger_enable+0x1f4>)
    68f4:	f004 fbb9 	bl	b06a <printk>
    68f8:	f240 31df 	movw	r1, #991	; 0x3df
    68fc:	4630      	mov	r0, r6
    68fe:	f004 fd0d 	bl	b31c <assert_post_action>
    6902:	e7d9      	b.n	68b8 <nrfx_gpiote_trigger_enable+0xc>
        uint8_t ch = pin_te_get(pin);
    6904:	4620      	mov	r0, r4
    6906:	f7ff fa1d 	bl	5d44 <pin_te_get>
    690a:	4604      	mov	r4, r0
}
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    690c:	2807      	cmp	r0, #7
    690e:	d81c      	bhi.n	694a <nrfx_gpiote_trigger_enable+0x9e>
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    6910:	00a3      	lsls	r3, r4, #2
    6912:	f503 7380 	add.w	r3, r3, #256	; 0x100
    6916:	b29b      	uxth	r3, r3
    return ((uint32_t)p_reg + event);
    6918:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    691c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6920:	2200      	movs	r2, #0
    6922:	601a      	str	r2, [r3, #0]
    6924:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    6926:	4a5f      	ldr	r2, [pc, #380]	; (6aa4 <nrfx_gpiote_trigger_enable+0x1f8>)
    6928:	f504 71a2 	add.w	r1, r4, #324	; 0x144
    692c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    6930:	f043 0301 	orr.w	r3, r3, #1
    6934:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    6938:	2d00      	cmp	r5, #0
    693a:	f000 80a9 	beq.w	6a90 <nrfx_gpiote_trigger_enable+0x1e4>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    693e:	2001      	movs	r0, #1
    6940:	fa00 f404 	lsl.w	r4, r0, r4
    p_reg->INTENSET = mask;
    6944:	f8c2 4304 	str.w	r4, [r2, #772]	; 0x304
}
    6948:	e0a2      	b.n	6a90 <nrfx_gpiote_trigger_enable+0x1e4>
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    694a:	4e57      	ldr	r6, [pc, #348]	; (6aa8 <nrfx_gpiote_trigger_enable+0x1fc>)
    694c:	f44f 7323 	mov.w	r3, #652	; 0x28c
    6950:	4632      	mov	r2, r6
    6952:	4956      	ldr	r1, [pc, #344]	; (6aac <nrfx_gpiote_trigger_enable+0x200>)
    6954:	4852      	ldr	r0, [pc, #328]	; (6aa0 <nrfx_gpiote_trigger_enable+0x1f4>)
    6956:	f004 fb88 	bl	b06a <printk>
    695a:	f44f 7123 	mov.w	r1, #652	; 0x28c
    695e:	4630      	mov	r0, r6
    6960:	f004 fcdc 	bl	b31c <assert_post_action>
    6964:	e7d4      	b.n	6910 <nrfx_gpiote_trigger_enable+0x64>
        NRFX_ASSERT(int_enable);
    6966:	4d4c      	ldr	r5, [pc, #304]	; (6a98 <nrfx_gpiote_trigger_enable+0x1ec>)
    6968:	f240 33ee 	movw	r3, #1006	; 0x3ee
    696c:	462a      	mov	r2, r5
    696e:	4950      	ldr	r1, [pc, #320]	; (6ab0 <nrfx_gpiote_trigger_enable+0x204>)
    6970:	484b      	ldr	r0, [pc, #300]	; (6aa0 <nrfx_gpiote_trigger_enable+0x1f4>)
    6972:	f004 fb7a 	bl	b06a <printk>
    6976:	f240 31ee 	movw	r1, #1006	; 0x3ee
    697a:	4628      	mov	r0, r5
    697c:	f004 fcce 	bl	b31c <assert_post_action>
    6980:	e7a4      	b.n	68cc <nrfx_gpiote_trigger_enable+0x20>
    switch (port)
    6982:	0963      	lsrs	r3, r4, #5
    6984:	d01f      	beq.n	69c6 <nrfx_gpiote_trigger_enable+0x11a>
    6986:	2b01      	cmp	r3, #1
    6988:	d120      	bne.n	69cc <nrfx_gpiote_trigger_enable+0x120>
            mask = P1_FEATURE_PINS_PRESENT;
    698a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    698e:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6992:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6994:	f013 0f01 	tst.w	r3, #1
    6998:	d01a      	beq.n	69d0 <nrfx_gpiote_trigger_enable+0x124>
    *p_pin = pin_number & 0x1F;
    699a:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    699e:	0963      	lsrs	r3, r4, #5
    69a0:	d024      	beq.n	69ec <nrfx_gpiote_trigger_enable+0x140>
    69a2:	2b01      	cmp	r3, #1
    69a4:	d025      	beq.n	69f2 <nrfx_gpiote_trigger_enable+0x146>
            NRFX_ASSERT(0);
    69a6:	4e43      	ldr	r6, [pc, #268]	; (6ab4 <nrfx_gpiote_trigger_enable+0x208>)
    69a8:	f240 232e 	movw	r3, #558	; 0x22e
    69ac:	4632      	mov	r2, r6
    69ae:	4942      	ldr	r1, [pc, #264]	; (6ab8 <nrfx_gpiote_trigger_enable+0x20c>)
    69b0:	483b      	ldr	r0, [pc, #236]	; (6aa0 <nrfx_gpiote_trigger_enable+0x1f4>)
    69b2:	f004 fb5a 	bl	b06a <printk>
    69b6:	f240 212e 	movw	r1, #558	; 0x22e
    69ba:	4630      	mov	r0, r6
    69bc:	f004 fcae 	bl	b31c <assert_post_action>
        case 0: return NRF_P0;
    69c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    69c4:	e016      	b.n	69f4 <nrfx_gpiote_trigger_enable+0x148>
            mask = P0_FEATURE_PINS_PRESENT;
    69c6:	f04f 33ff 	mov.w	r3, #4294967295
    69ca:	e7e0      	b.n	698e <nrfx_gpiote_trigger_enable+0xe2>
    switch (port)
    69cc:	2300      	movs	r3, #0
    69ce:	e7de      	b.n	698e <nrfx_gpiote_trigger_enable+0xe2>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    69d0:	4d38      	ldr	r5, [pc, #224]	; (6ab4 <nrfx_gpiote_trigger_enable+0x208>)
    69d2:	f240 2329 	movw	r3, #553	; 0x229
    69d6:	462a      	mov	r2, r5
    69d8:	4938      	ldr	r1, [pc, #224]	; (6abc <nrfx_gpiote_trigger_enable+0x210>)
    69da:	4831      	ldr	r0, [pc, #196]	; (6aa0 <nrfx_gpiote_trigger_enable+0x1f4>)
    69dc:	f004 fb45 	bl	b06a <printk>
    69e0:	f240 2129 	movw	r1, #553	; 0x229
    69e4:	4628      	mov	r0, r5
    69e6:	f004 fc99 	bl	b31c <assert_post_action>
    69ea:	e7d6      	b.n	699a <nrfx_gpiote_trigger_enable+0xee>
        case 0: return NRF_P0;
    69ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    69f0:	e000      	b.n	69f4 <nrfx_gpiote_trigger_enable+0x148>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    69f2:	4b33      	ldr	r3, [pc, #204]	; (6ac0 <nrfx_gpiote_trigger_enable+0x214>)
    return p_reg->IN;
    69f4:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    69f8:	40eb      	lsrs	r3, r5
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    69fa:	f013 0f01 	tst.w	r3, #1
    69fe:	d024      	beq.n	6a4a <nrfx_gpiote_trigger_enable+0x19e>
    6a00:	2603      	movs	r6, #3
    6a02:	e000      	b.n	6a06 <nrfx_gpiote_trigger_enable+0x15a>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    6a04:	2603      	movs	r6, #3
    switch (port)
    6a06:	0963      	lsrs	r3, r4, #5
    6a08:	d021      	beq.n	6a4e <nrfx_gpiote_trigger_enable+0x1a2>
    6a0a:	2b01      	cmp	r3, #1
    6a0c:	d122      	bne.n	6a54 <nrfx_gpiote_trigger_enable+0x1a8>
            mask = P1_FEATURE_PINS_PRESENT;
    6a0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6a12:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6a16:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6a18:	f013 0f01 	tst.w	r3, #1
    6a1c:	d01c      	beq.n	6a58 <nrfx_gpiote_trigger_enable+0x1ac>
    *p_pin = pin_number & 0x1F;
    6a1e:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6a22:	0964      	lsrs	r4, r4, #5
    6a24:	d026      	beq.n	6a74 <nrfx_gpiote_trigger_enable+0x1c8>
    6a26:	2c01      	cmp	r4, #1
    6a28:	d027      	beq.n	6a7a <nrfx_gpiote_trigger_enable+0x1ce>
            NRFX_ASSERT(0);
    6a2a:	4c22      	ldr	r4, [pc, #136]	; (6ab4 <nrfx_gpiote_trigger_enable+0x208>)
    6a2c:	f240 232e 	movw	r3, #558	; 0x22e
    6a30:	4622      	mov	r2, r4
    6a32:	4921      	ldr	r1, [pc, #132]	; (6ab8 <nrfx_gpiote_trigger_enable+0x20c>)
    6a34:	481a      	ldr	r0, [pc, #104]	; (6aa0 <nrfx_gpiote_trigger_enable+0x1f4>)
    6a36:	f004 fb18 	bl	b06a <printk>
    6a3a:	f240 212e 	movw	r1, #558	; 0x22e
    6a3e:	4620      	mov	r0, r4
    6a40:	f004 fc6c 	bl	b31c <assert_post_action>
        case 0: return NRF_P0;
    6a44:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    6a48:	e018      	b.n	6a7c <nrfx_gpiote_trigger_enable+0x1d0>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    6a4a:	2602      	movs	r6, #2
    6a4c:	e7db      	b.n	6a06 <nrfx_gpiote_trigger_enable+0x15a>
            mask = P0_FEATURE_PINS_PRESENT;
    6a4e:	f04f 33ff 	mov.w	r3, #4294967295
    6a52:	e7de      	b.n	6a12 <nrfx_gpiote_trigger_enable+0x166>
    switch (port)
    6a54:	2300      	movs	r3, #0
    6a56:	e7dc      	b.n	6a12 <nrfx_gpiote_trigger_enable+0x166>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6a58:	4d16      	ldr	r5, [pc, #88]	; (6ab4 <nrfx_gpiote_trigger_enable+0x208>)
    6a5a:	f240 2329 	movw	r3, #553	; 0x229
    6a5e:	462a      	mov	r2, r5
    6a60:	4916      	ldr	r1, [pc, #88]	; (6abc <nrfx_gpiote_trigger_enable+0x210>)
    6a62:	480f      	ldr	r0, [pc, #60]	; (6aa0 <nrfx_gpiote_trigger_enable+0x1f4>)
    6a64:	f004 fb01 	bl	b06a <printk>
    6a68:	f240 2129 	movw	r1, #553	; 0x229
    6a6c:	4628      	mov	r0, r5
    6a6e:	f004 fc55 	bl	b31c <assert_post_action>
    6a72:	e7d4      	b.n	6a1e <nrfx_gpiote_trigger_enable+0x172>
        case 0: return NRF_P0;
    6a74:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    6a78:	e000      	b.n	6a7c <nrfx_gpiote_trigger_enable+0x1d0>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6a7a:	4911      	ldr	r1, [pc, #68]	; (6ac0 <nrfx_gpiote_trigger_enable+0x214>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6a7c:	f505 72e0 	add.w	r2, r5, #448	; 0x1c0
    6a80:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    6a84:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    6a88:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    6a8c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    6a90:	bd70      	pop	{r4, r5, r6, pc}
    6a92:	bf00      	nop
    6a94:	20000104 	.word	0x20000104
    6a98:	0000cda0 	.word	0x0000cda0
    6a9c:	0000ce44 	.word	0x0000ce44
    6aa0:	0000c46c 	.word	0x0000c46c
    6aa4:	40006000 	.word	0x40006000
    6aa8:	0000ce00 	.word	0x0000ce00
    6aac:	0000ce38 	.word	0x0000ce38
    6ab0:	0000ce5c 	.word	0x0000ce5c
    6ab4:	0000cb64 	.word	0x0000cb64
    6ab8:	0000c3e8 	.word	0x0000c3e8
    6abc:	0000cb98 	.word	0x0000cb98
    6ac0:	50000300 	.word	0x50000300

00006ac4 <nrfx_gpiote_trigger_disable>:
{
    6ac4:	b538      	push	{r3, r4, r5, lr}
    6ac6:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6ac8:	f7ff f91c 	bl	5d04 <pin_in_use_by_te>
    6acc:	b1a0      	cbz	r0, 6af8 <nrfx_gpiote_trigger_disable+0x34>
    6ace:	4620      	mov	r0, r4
    6ad0:	f005 f8f2 	bl	bcb8 <pin_is_input>
    6ad4:	b180      	cbz	r0, 6af8 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    6ad6:	4620      	mov	r0, r4
    6ad8:	f7ff f934 	bl	5d44 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    6adc:	2201      	movs	r2, #1
    6ade:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    6ae0:	4b26      	ldr	r3, [pc, #152]	; (6b7c <nrfx_gpiote_trigger_disable+0xb8>)
    6ae2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    6ae6:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    6aea:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    6aee:	f022 0203 	bic.w	r2, r2, #3
    6af2:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    6af6:	e040      	b.n	6b7a <nrfx_gpiote_trigger_disable+0xb6>
    switch (port)
    6af8:	0963      	lsrs	r3, r4, #5
    6afa:	d01f      	beq.n	6b3c <nrfx_gpiote_trigger_disable+0x78>
    6afc:	2b01      	cmp	r3, #1
    6afe:	d120      	bne.n	6b42 <nrfx_gpiote_trigger_disable+0x7e>
            mask = P1_FEATURE_PINS_PRESENT;
    6b00:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6b04:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6b08:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6b0a:	f013 0f01 	tst.w	r3, #1
    6b0e:	d01a      	beq.n	6b46 <nrfx_gpiote_trigger_disable+0x82>
    *p_pin = pin_number & 0x1F;
    6b10:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6b14:	0964      	lsrs	r4, r4, #5
    6b16:	d024      	beq.n	6b62 <nrfx_gpiote_trigger_disable+0x9e>
    6b18:	2c01      	cmp	r4, #1
    6b1a:	d025      	beq.n	6b68 <nrfx_gpiote_trigger_disable+0xa4>
            NRFX_ASSERT(0);
    6b1c:	4c18      	ldr	r4, [pc, #96]	; (6b80 <nrfx_gpiote_trigger_disable+0xbc>)
    6b1e:	f240 232e 	movw	r3, #558	; 0x22e
    6b22:	4622      	mov	r2, r4
    6b24:	4917      	ldr	r1, [pc, #92]	; (6b84 <nrfx_gpiote_trigger_disable+0xc0>)
    6b26:	4818      	ldr	r0, [pc, #96]	; (6b88 <nrfx_gpiote_trigger_disable+0xc4>)
    6b28:	f004 fa9f 	bl	b06a <printk>
    6b2c:	f240 212e 	movw	r1, #558	; 0x22e
    6b30:	4620      	mov	r0, r4
    6b32:	f004 fbf3 	bl	b31c <assert_post_action>
        case 0: return NRF_P0;
    6b36:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    6b3a:	e016      	b.n	6b6a <nrfx_gpiote_trigger_disable+0xa6>
            mask = P0_FEATURE_PINS_PRESENT;
    6b3c:	f04f 33ff 	mov.w	r3, #4294967295
    6b40:	e7e0      	b.n	6b04 <nrfx_gpiote_trigger_disable+0x40>
    switch (port)
    6b42:	2300      	movs	r3, #0
    6b44:	e7de      	b.n	6b04 <nrfx_gpiote_trigger_disable+0x40>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6b46:	4d0e      	ldr	r5, [pc, #56]	; (6b80 <nrfx_gpiote_trigger_disable+0xbc>)
    6b48:	f240 2329 	movw	r3, #553	; 0x229
    6b4c:	462a      	mov	r2, r5
    6b4e:	490f      	ldr	r1, [pc, #60]	; (6b8c <nrfx_gpiote_trigger_disable+0xc8>)
    6b50:	480d      	ldr	r0, [pc, #52]	; (6b88 <nrfx_gpiote_trigger_disable+0xc4>)
    6b52:	f004 fa8a 	bl	b06a <printk>
    6b56:	f240 2129 	movw	r1, #553	; 0x229
    6b5a:	4628      	mov	r0, r5
    6b5c:	f004 fbde 	bl	b31c <assert_post_action>
    6b60:	e7d6      	b.n	6b10 <nrfx_gpiote_trigger_disable+0x4c>
        case 0: return NRF_P0;
    6b62:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    6b66:	e000      	b.n	6b6a <nrfx_gpiote_trigger_disable+0xa6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6b68:	4909      	ldr	r1, [pc, #36]	; (6b90 <nrfx_gpiote_trigger_disable+0xcc>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6b6a:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    6b6e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    6b72:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    6b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6b7a:	bd38      	pop	{r3, r4, r5, pc}
    6b7c:	40006000 	.word	0x40006000
    6b80:	0000cb64 	.word	0x0000cb64
    6b84:	0000c3e8 	.word	0x0000c3e8
    6b88:	0000c46c 	.word	0x0000c46c
    6b8c:	0000cb98 	.word	0x0000cb98
    6b90:	50000300 	.word	0x50000300

00006b94 <nrfx_gpiote_pin_uninit>:
{
    6b94:	b538      	push	{r3, r4, r5, lr}
    6b96:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    6b98:	f7ff f8aa 	bl	5cf0 <pin_in_use>
    6b9c:	b908      	cbnz	r0, 6ba2 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    6b9e:	4824      	ldr	r0, [pc, #144]	; (6c30 <nrfx_gpiote_pin_uninit+0x9c>)
}
    6ba0:	bd38      	pop	{r3, r4, r5, pc}
    nrfx_gpiote_trigger_disable(pin);
    6ba2:	4620      	mov	r0, r4
    6ba4:	f7ff ff8e 	bl	6ac4 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    6ba8:	4620      	mov	r0, r4
    6baa:	f7ff f98d 	bl	5ec8 <pin_handler_trigger_uninit>
    switch (port)
    6bae:	0963      	lsrs	r3, r4, #5
    6bb0:	d01f      	beq.n	6bf2 <nrfx_gpiote_pin_uninit+0x5e>
    6bb2:	2b01      	cmp	r3, #1
    6bb4:	d120      	bne.n	6bf8 <nrfx_gpiote_pin_uninit+0x64>
            mask = P1_FEATURE_PINS_PRESENT;
    6bb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6bba:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6bbe:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6bc0:	f013 0f01 	tst.w	r3, #1
    6bc4:	d01a      	beq.n	6bfc <nrfx_gpiote_pin_uninit+0x68>
    *p_pin = pin_number & 0x1F;
    6bc6:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6bca:	0964      	lsrs	r4, r4, #5
    6bcc:	d024      	beq.n	6c18 <nrfx_gpiote_pin_uninit+0x84>
    6bce:	2c01      	cmp	r4, #1
    6bd0:	d025      	beq.n	6c1e <nrfx_gpiote_pin_uninit+0x8a>
            NRFX_ASSERT(0);
    6bd2:	4c18      	ldr	r4, [pc, #96]	; (6c34 <nrfx_gpiote_pin_uninit+0xa0>)
    6bd4:	f240 232e 	movw	r3, #558	; 0x22e
    6bd8:	4622      	mov	r2, r4
    6bda:	4917      	ldr	r1, [pc, #92]	; (6c38 <nrfx_gpiote_pin_uninit+0xa4>)
    6bdc:	4817      	ldr	r0, [pc, #92]	; (6c3c <nrfx_gpiote_pin_uninit+0xa8>)
    6bde:	f004 fa44 	bl	b06a <printk>
    6be2:	f240 212e 	movw	r1, #558	; 0x22e
    6be6:	4620      	mov	r0, r4
    6be8:	f004 fb98 	bl	b31c <assert_post_action>
        case 0: return NRF_P0;
    6bec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6bf0:	e016      	b.n	6c20 <nrfx_gpiote_pin_uninit+0x8c>
            mask = P0_FEATURE_PINS_PRESENT;
    6bf2:	f04f 33ff 	mov.w	r3, #4294967295
    6bf6:	e7e0      	b.n	6bba <nrfx_gpiote_pin_uninit+0x26>
    switch (port)
    6bf8:	2300      	movs	r3, #0
    6bfa:	e7de      	b.n	6bba <nrfx_gpiote_pin_uninit+0x26>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6bfc:	4d0d      	ldr	r5, [pc, #52]	; (6c34 <nrfx_gpiote_pin_uninit+0xa0>)
    6bfe:	f240 2329 	movw	r3, #553	; 0x229
    6c02:	462a      	mov	r2, r5
    6c04:	490e      	ldr	r1, [pc, #56]	; (6c40 <nrfx_gpiote_pin_uninit+0xac>)
    6c06:	480d      	ldr	r0, [pc, #52]	; (6c3c <nrfx_gpiote_pin_uninit+0xa8>)
    6c08:	f004 fa2f 	bl	b06a <printk>
    6c0c:	f240 2129 	movw	r1, #553	; 0x229
    6c10:	4628      	mov	r0, r5
    6c12:	f004 fb83 	bl	b31c <assert_post_action>
    6c16:	e7d6      	b.n	6bc6 <nrfx_gpiote_pin_uninit+0x32>
        case 0: return NRF_P0;
    6c18:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6c1c:	e000      	b.n	6c20 <nrfx_gpiote_pin_uninit+0x8c>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6c1e:	4b09      	ldr	r3, [pc, #36]	; (6c44 <nrfx_gpiote_pin_uninit+0xb0>)
    reg->PIN_CNF[pin_number] = cnf;
    6c20:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    6c24:	2202      	movs	r2, #2
    6c26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    return NRFX_SUCCESS;
    6c2a:	4807      	ldr	r0, [pc, #28]	; (6c48 <nrfx_gpiote_pin_uninit+0xb4>)
    6c2c:	e7b8      	b.n	6ba0 <nrfx_gpiote_pin_uninit+0xc>
    6c2e:	bf00      	nop
    6c30:	0bad0004 	.word	0x0bad0004
    6c34:	0000cb64 	.word	0x0000cb64
    6c38:	0000c3e8 	.word	0x0000c3e8
    6c3c:	0000c46c 	.word	0x0000c46c
    6c40:	0000cb98 	.word	0x0000cb98
    6c44:	50000300 	.word	0x50000300
    6c48:	0bad0000 	.word	0x0bad0000

00006c4c <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    6c4c:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    6c4e:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    6c50:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    6c54:	2100      	movs	r1, #0
    uint32_t status = 0;
    6c56:	460d      	mov	r5, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    6c58:	e003      	b.n	6c62 <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    6c5a:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    6c5c:	3304      	adds	r3, #4
    6c5e:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    6c60:	3101      	adds	r1, #1
    6c62:	2907      	cmp	r1, #7
    6c64:	d814      	bhi.n	6c90 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6c66:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    6c6a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    6c6e:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    6c70:	2a00      	cmp	r2, #0
    6c72:	d0f2      	beq.n	6c5a <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    6c74:	4a0b      	ldr	r2, [pc, #44]	; (6ca4 <nrfx_gpiote_irq_handler+0x58>)
    6c76:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    6c7a:	4210      	tst	r0, r2
    6c7c:	d0ed      	beq.n	6c5a <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    6c7e:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    6c82:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6c86:	2400      	movs	r4, #0
    6c88:	6014      	str	r4, [r2, #0]
    6c8a:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    6c8c:	4305      	orrs	r5, r0
    6c8e:	e7e4      	b.n	6c5a <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6c90:	4b05      	ldr	r3, [pc, #20]	; (6ca8 <nrfx_gpiote_irq_handler+0x5c>)
    6c92:	681b      	ldr	r3, [r3, #0]
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    6c94:	b91b      	cbnz	r3, 6c9e <nrfx_gpiote_irq_handler+0x52>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    6c96:	4628      	mov	r0, r5
    6c98:	f7ff f968 	bl	5f6c <gpiote_evt_handle>
}
    6c9c:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    6c9e:	f7ff fac7 	bl	6230 <port_event_handle>
    6ca2:	e7f8      	b.n	6c96 <nrfx_gpiote_irq_handler+0x4a>
    6ca4:	40006000 	.word	0x40006000
    6ca8:	4000617c 	.word	0x4000617c

00006cac <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    6cac:	b508      	push	{r3, lr}
    6cae:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    6cb0:	4801      	ldr	r0, [pc, #4]	; (6cb8 <nrfx_ppi_channel_alloc+0xc>)
    6cb2:	f7fe fe19 	bl	58e8 <nrfx_flag32_alloc>
}
    6cb6:	bd08      	pop	{r3, pc}
    6cb8:	20000180 	.word	0x20000180

00006cbc <configure_pins>:
} pwm_control_block_t;
static pwm_control_block_t m_cb[NRFX_PWM_ENABLED_COUNT];

static void configure_pins(nrfx_pwm_t const *        p_instance,
                           nrfx_pwm_config_t const * p_config)
{
    6cbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6cc0:	b085      	sub	sp, #20
    6cc2:	4607      	mov	r7, r0
    6cc4:	460e      	mov	r6, r1
    // Nothing to do here if both GPIO configuration and pin selection are
    // to be skipped (the pin numbers may be then even not specified).
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    6cc6:	7b0b      	ldrb	r3, [r1, #12]
    6cc8:	2b00      	cmp	r3, #0
    6cca:	f000 80e9 	beq.w	6ea0 <configure_pins+0x1e4>
    6cce:	7b4b      	ldrb	r3, [r1, #13]
    6cd0:	2b00      	cmp	r3, #0
    6cd2:	f040 80f8 	bne.w	6ec6 <configure_pins+0x20a>
    6cd6:	2400      	movs	r4, #0
    6cd8:	e0a8      	b.n	6e2c <configure_pins+0x170>
            mask = P0_FEATURE_PINS_PRESENT;
    6cda:	f04f 33ff 	mov.w	r3, #4294967295
    6cde:	e0c0      	b.n	6e62 <configure_pins+0x1a6>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6ce0:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 6ed8 <configure_pins+0x21c>
    6ce4:	f240 2329 	movw	r3, #553	; 0x229
    6ce8:	464a      	mov	r2, r9
    6cea:	4978      	ldr	r1, [pc, #480]	; (6ecc <configure_pins+0x210>)
    6cec:	4878      	ldr	r0, [pc, #480]	; (6ed0 <configure_pins+0x214>)
    6cee:	f004 f9bc 	bl	b06a <printk>
    6cf2:	f240 2129 	movw	r1, #553	; 0x229
    6cf6:	4648      	mov	r0, r9
    6cf8:	f004 fb10 	bl	b31c <assert_post_action>
    6cfc:	e0b8      	b.n	6e70 <configure_pins+0x1b4>
        case 0: return NRF_P0;
    6cfe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6d02:	e000      	b.n	6d06 <configure_pins+0x4a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6d04:	4a73      	ldr	r2, [pc, #460]	; (6ed4 <configure_pins+0x218>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    6d06:	2301      	movs	r3, #1
    6d08:	fa03 f309 	lsl.w	r3, r3, r9
    p_reg->OUTCLR = clr_mask;
    6d0c:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
            out_pins[i]   = output_pin & ~NRFX_PWM_PIN_INVERTED;

            if (!p_config->skip_gpio_cfg)
            {
                nrf_gpio_pin_write(out_pins[i], inverted ? 1 : 0);
                nrf_gpio_cfg_output(out_pins[i]);
    6d10:	ab04      	add	r3, sp, #16
    6d12:	eb03 0888 	add.w	r8, r3, r8, lsl #2
    6d16:	f858 5c10 	ldr.w	r5, [r8, #-16]
    switch (port)
    6d1a:	096b      	lsrs	r3, r5, #5
    6d1c:	d05f      	beq.n	6dde <configure_pins+0x122>
    6d1e:	2b01      	cmp	r3, #1
    6d20:	d160      	bne.n	6de4 <configure_pins+0x128>
            mask = P1_FEATURE_PINS_PRESENT;
    6d22:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6d26:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6d2a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6d2c:	f013 0f01 	tst.w	r3, #1
    6d30:	d05a      	beq.n	6de8 <configure_pins+0x12c>
    *p_pin = pin_number & 0x1F;
    6d32:	f005 081f 	and.w	r8, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6d36:	096d      	lsrs	r5, r5, #5
    6d38:	d065      	beq.n	6e06 <configure_pins+0x14a>
    6d3a:	2d01      	cmp	r5, #1
    6d3c:	d066      	beq.n	6e0c <configure_pins+0x150>
            NRFX_ASSERT(0);
    6d3e:	4d66      	ldr	r5, [pc, #408]	; (6ed8 <configure_pins+0x21c>)
    6d40:	f240 232e 	movw	r3, #558	; 0x22e
    6d44:	462a      	mov	r2, r5
    6d46:	4965      	ldr	r1, [pc, #404]	; (6edc <configure_pins+0x220>)
    6d48:	4861      	ldr	r0, [pc, #388]	; (6ed0 <configure_pins+0x214>)
    6d4a:	f004 f98e 	bl	b06a <printk>
    6d4e:	f240 212e 	movw	r1, #558	; 0x22e
    6d52:	4628      	mov	r0, r5
    6d54:	f004 fae2 	bl	b31c <assert_post_action>
        case 0: return NRF_P0;
    6d58:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6d5c:	e057      	b.n	6e0e <configure_pins+0x152>
    switch (port)
    6d5e:	096b      	lsrs	r3, r5, #5
    6d60:	d01f      	beq.n	6da2 <configure_pins+0xe6>
    6d62:	2b01      	cmp	r3, #1
    6d64:	d120      	bne.n	6da8 <configure_pins+0xec>
            mask = P1_FEATURE_PINS_PRESENT;
    6d66:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6d6a:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6d6e:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6d70:	f013 0f01 	tst.w	r3, #1
    6d74:	d01a      	beq.n	6dac <configure_pins+0xf0>
    *p_pin = pin_number & 0x1F;
    6d76:	f005 091f 	and.w	r9, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6d7a:	096b      	lsrs	r3, r5, #5
    6d7c:	d025      	beq.n	6dca <configure_pins+0x10e>
    6d7e:	2b01      	cmp	r3, #1
    6d80:	d026      	beq.n	6dd0 <configure_pins+0x114>
            NRFX_ASSERT(0);
    6d82:	4d55      	ldr	r5, [pc, #340]	; (6ed8 <configure_pins+0x21c>)
    6d84:	f240 232e 	movw	r3, #558	; 0x22e
    6d88:	462a      	mov	r2, r5
    6d8a:	4954      	ldr	r1, [pc, #336]	; (6edc <configure_pins+0x220>)
    6d8c:	4850      	ldr	r0, [pc, #320]	; (6ed0 <configure_pins+0x214>)
    6d8e:	f004 f96c 	bl	b06a <printk>
    6d92:	f240 212e 	movw	r1, #558	; 0x22e
    6d96:	4628      	mov	r0, r5
    6d98:	f004 fac0 	bl	b31c <assert_post_action>
        case 0: return NRF_P0;
    6d9c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6da0:	e017      	b.n	6dd2 <configure_pins+0x116>
            mask = P0_FEATURE_PINS_PRESENT;
    6da2:	f04f 33ff 	mov.w	r3, #4294967295
    6da6:	e7e0      	b.n	6d6a <configure_pins+0xae>
    switch (port)
    6da8:	2300      	movs	r3, #0
    6daa:	e7de      	b.n	6d6a <configure_pins+0xae>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6dac:	f8df 9128 	ldr.w	r9, [pc, #296]	; 6ed8 <configure_pins+0x21c>
    6db0:	f240 2329 	movw	r3, #553	; 0x229
    6db4:	464a      	mov	r2, r9
    6db6:	4945      	ldr	r1, [pc, #276]	; (6ecc <configure_pins+0x210>)
    6db8:	4845      	ldr	r0, [pc, #276]	; (6ed0 <configure_pins+0x214>)
    6dba:	f004 f956 	bl	b06a <printk>
    6dbe:	f240 2129 	movw	r1, #553	; 0x229
    6dc2:	4648      	mov	r0, r9
    6dc4:	f004 faaa 	bl	b31c <assert_post_action>
    6dc8:	e7d5      	b.n	6d76 <configure_pins+0xba>
        case 0: return NRF_P0;
    6dca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6dce:	e000      	b.n	6dd2 <configure_pins+0x116>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6dd0:	4a40      	ldr	r2, [pc, #256]	; (6ed4 <configure_pins+0x218>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    6dd2:	2301      	movs	r3, #1
    6dd4:	fa03 f309 	lsl.w	r3, r3, r9
    p_reg->OUTSET = set_mask;
    6dd8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    6ddc:	e798      	b.n	6d10 <configure_pins+0x54>
            mask = P0_FEATURE_PINS_PRESENT;
    6dde:	f04f 33ff 	mov.w	r3, #4294967295
    6de2:	e7a0      	b.n	6d26 <configure_pins+0x6a>
    switch (port)
    6de4:	2300      	movs	r3, #0
    6de6:	e79e      	b.n	6d26 <configure_pins+0x6a>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6de8:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 6ed8 <configure_pins+0x21c>
    6dec:	f240 2329 	movw	r3, #553	; 0x229
    6df0:	4642      	mov	r2, r8
    6df2:	4936      	ldr	r1, [pc, #216]	; (6ecc <configure_pins+0x210>)
    6df4:	4836      	ldr	r0, [pc, #216]	; (6ed0 <configure_pins+0x214>)
    6df6:	f004 f938 	bl	b06a <printk>
    6dfa:	f240 2129 	movw	r1, #553	; 0x229
    6dfe:	4640      	mov	r0, r8
    6e00:	f004 fa8c 	bl	b31c <assert_post_action>
    6e04:	e795      	b.n	6d32 <configure_pins+0x76>
        case 0: return NRF_P0;
    6e06:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6e0a:	e000      	b.n	6e0e <configure_pins+0x152>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6e0c:	4b31      	ldr	r3, [pc, #196]	; (6ed4 <configure_pins+0x218>)
    reg->PIN_CNF[pin_number] = cnf;
    6e0e:	f508 78e0 	add.w	r8, r8, #448	; 0x1c0
    6e12:	2203      	movs	r2, #3
    6e14:	f843 2028 	str.w	r2, [r3, r8, lsl #2]
}
    6e18:	e006      	b.n	6e28 <configure_pins+0x16c>
            }
        }
        else
        {
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
    6e1a:	f04f 32ff 	mov.w	r2, #4294967295
    6e1e:	ab04      	add	r3, sp, #16
    6e20:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    6e24:	f843 2c10 	str.w	r2, [r3, #-16]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    6e28:	3401      	adds	r4, #1
    6e2a:	b2e4      	uxtb	r4, r4
    6e2c:	2c03      	cmp	r4, #3
    6e2e:	d839      	bhi.n	6ea4 <configure_pins+0x1e8>
        uint8_t output_pin = p_config->output_pins[i];
    6e30:	46a0      	mov	r8, r4
    6e32:	5d33      	ldrb	r3, [r6, r4]
        if (output_pin != NRFX_PWM_PIN_NOT_USED)
    6e34:	2bff      	cmp	r3, #255	; 0xff
    6e36:	d0f0      	beq.n	6e1a <configure_pins+0x15e>
            bool inverted = output_pin &  NRFX_PWM_PIN_INVERTED;
    6e38:	09da      	lsrs	r2, r3, #7
            out_pins[i]   = output_pin & ~NRFX_PWM_PIN_INVERTED;
    6e3a:	f023 0580 	bic.w	r5, r3, #128	; 0x80
    6e3e:	ab04      	add	r3, sp, #16
    6e40:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    6e44:	f843 5c10 	str.w	r5, [r3, #-16]
            if (!p_config->skip_gpio_cfg)
    6e48:	7b33      	ldrb	r3, [r6, #12]
    6e4a:	2b00      	cmp	r3, #0
    6e4c:	d1ec      	bne.n	6e28 <configure_pins+0x16c>
                nrf_gpio_pin_write(out_pins[i], inverted ? 1 : 0);
    6e4e:	4613      	mov	r3, r2
    if (value == 0)
    6e50:	2a00      	cmp	r2, #0
    6e52:	d184      	bne.n	6d5e <configure_pins+0xa2>
    switch (port)
    6e54:	096a      	lsrs	r2, r5, #5
    6e56:	f43f af40 	beq.w	6cda <configure_pins+0x1e>
    6e5a:	2a01      	cmp	r2, #1
    6e5c:	d101      	bne.n	6e62 <configure_pins+0x1a6>
            mask = P1_FEATURE_PINS_PRESENT;
    6e5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6e62:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6e66:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6e68:	f013 0f01 	tst.w	r3, #1
    6e6c:	f43f af38 	beq.w	6ce0 <configure_pins+0x24>
    *p_pin = pin_number & 0x1F;
    6e70:	f005 091f 	and.w	r9, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6e74:	096b      	lsrs	r3, r5, #5
    6e76:	f43f af42 	beq.w	6cfe <configure_pins+0x42>
    6e7a:	2b01      	cmp	r3, #1
    6e7c:	f43f af42 	beq.w	6d04 <configure_pins+0x48>
            NRFX_ASSERT(0);
    6e80:	4d15      	ldr	r5, [pc, #84]	; (6ed8 <configure_pins+0x21c>)
    6e82:	f240 232e 	movw	r3, #558	; 0x22e
    6e86:	462a      	mov	r2, r5
    6e88:	4914      	ldr	r1, [pc, #80]	; (6edc <configure_pins+0x220>)
    6e8a:	4811      	ldr	r0, [pc, #68]	; (6ed0 <configure_pins+0x214>)
    6e8c:	f004 f8ed 	bl	b06a <printk>
    6e90:	f240 212e 	movw	r1, #558	; 0x22e
    6e94:	4628      	mov	r0, r5
    6e96:	f004 fa41 	bl	b31c <assert_post_action>
        case 0: return NRF_P0;
    6e9a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6e9e:	e732      	b.n	6d06 <configure_pins+0x4a>
    6ea0:	2400      	movs	r4, #0
    6ea2:	e7c3      	b.n	6e2c <configure_pins+0x170>
        }
    }

    if (!p_config->skip_psel_cfg)
    6ea4:	7b73      	ldrb	r3, [r6, #13]
    6ea6:	b973      	cbnz	r3, 6ec6 <configure_pins+0x20a>
    {
        nrf_pwm_pins_set(p_instance->p_registers, out_pins);
    6ea8:	6838      	ldr	r0, [r7, #0]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    6eaa:	e00a      	b.n	6ec2 <configure_pins+0x206>
        p_reg->PSEL.OUT[i] = out_pins[i];
    6eac:	aa04      	add	r2, sp, #16
    6eae:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    6eb2:	f852 1c10 	ldr.w	r1, [r2, #-16]
    6eb6:	f503 72ac 	add.w	r2, r3, #344	; 0x158
    6eba:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    6ebe:	3301      	adds	r3, #1
    6ec0:	b2db      	uxtb	r3, r3
    6ec2:	2b03      	cmp	r3, #3
    6ec4:	d9f2      	bls.n	6eac <configure_pins+0x1f0>
    }
}
    6ec6:	b005      	add	sp, #20
    6ec8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6ecc:	0000cb98 	.word	0x0000cb98
    6ed0:	0000c46c 	.word	0x0000c46c
    6ed4:	50000300 	.word	0x50000300
    6ed8:	0000cb64 	.word	0x0000cb64
    6edc:	0000c3e8 	.word	0x0000c3e8

00006ee0 <nrfx_pwm_init>:

nrfx_err_t nrfx_pwm_init(nrfx_pwm_t const *        p_instance,
                         nrfx_pwm_config_t const * p_config,
                         nrfx_pwm_handler_t        handler,
                         void *                    p_context)
{
    6ee0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6ee4:	4604      	mov	r4, r0
    6ee6:	4690      	mov	r8, r2
    6ee8:	461f      	mov	r7, r3
    NRFX_ASSERT(p_config);
    6eea:	460e      	mov	r6, r1
    6eec:	b151      	cbz	r1, 6f04 <nrfx_pwm_init+0x24>

    nrfx_err_t err_code;

    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    6eee:	7925      	ldrb	r5, [r4, #4]

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    6ef0:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    6ef4:	493d      	ldr	r1, [pc, #244]	; (6fec <nrfx_pwm_init+0x10c>)
    6ef6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    6efa:	7a0b      	ldrb	r3, [r1, #8]
    6efc:	b173      	cbz	r3, 6f1c <nrfx_pwm_init+0x3c>
    {
        err_code = NRFX_ERROR_INVALID_STATE;
        NRFX_LOG_WARNING("Function: %s, error code: %s.",
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    6efe:	483c      	ldr	r0, [pc, #240]	; (6ff0 <nrfx_pwm_init+0x110>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    6f00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    NRFX_ASSERT(p_config);
    6f04:	4d3b      	ldr	r5, [pc, #236]	; (6ff4 <nrfx_pwm_init+0x114>)
    6f06:	238c      	movs	r3, #140	; 0x8c
    6f08:	462a      	mov	r2, r5
    6f0a:	493b      	ldr	r1, [pc, #236]	; (6ff8 <nrfx_pwm_init+0x118>)
    6f0c:	483b      	ldr	r0, [pc, #236]	; (6ffc <nrfx_pwm_init+0x11c>)
    6f0e:	f004 f8ac 	bl	b06a <printk>
    6f12:	218c      	movs	r1, #140	; 0x8c
    6f14:	4628      	mov	r0, r5
    6f16:	f004 fa01 	bl	b31c <assert_post_action>
    6f1a:	e7e8      	b.n	6eee <nrfx_pwm_init+0xe>
    p_cb->handler = handler;
    6f1c:	4a33      	ldr	r2, [pc, #204]	; (6fec <nrfx_pwm_init+0x10c>)
    6f1e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    6f22:	eb02 0381 	add.w	r3, r2, r1, lsl #2
    6f26:	f842 8021 	str.w	r8, [r2, r1, lsl #2]
    p_cb->p_context = p_context;
    6f2a:	605f      	str	r7, [r3, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    6f2c:	7b32      	ldrb	r2, [r6, #12]
    6f2e:	729a      	strb	r2, [r3, #10]
    configure_pins(p_instance, p_config);
    6f30:	4631      	mov	r1, r6
    6f32:	4620      	mov	r0, r4
    6f34:	f7ff fec2 	bl	6cbc <configure_pins>
    nrf_pwm_enable(p_instance->p_registers);
    6f38:	6823      	ldr	r3, [r4, #0]
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
    6f3a:	2201      	movs	r2, #1
    6f3c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    nrf_pwm_configure(p_instance->p_registers,
    6f40:	6827      	ldr	r7, [r4, #0]
    6f42:	f896 a005 	ldrb.w	sl, [r6, #5]
    6f46:	f896 9006 	ldrb.w	r9, [r6, #6]
    6f4a:	f8b6 8008 	ldrh.w	r8, [r6, #8]
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);
    6f4e:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
    6f52:	2b00      	cmp	r3, #0
    6f54:	db3b      	blt.n	6fce <nrfx_pwm_init+0xee>
    p_reg->PRESCALER  = base_clock;
    6f56:	f8c7 a50c 	str.w	sl, [r7, #1292]	; 0x50c
    p_reg->MODE       = mode;
    6f5a:	f8c7 9504 	str.w	r9, [r7, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    6f5e:	f8c7 8508 	str.w	r8, [r7, #1288]	; 0x508
    nrf_pwm_decoder_set(p_instance->p_registers,
    6f62:	6822      	ldr	r2, [r4, #0]
    6f64:	7ab3      	ldrb	r3, [r6, #10]
    6f66:	7af1      	ldrb	r1, [r6, #11]

NRF_STATIC_INLINE void nrf_pwm_decoder_set(NRF_PWM_Type *     p_reg,
                                           nrf_pwm_dec_load_t dec_load,
                                           nrf_pwm_dec_step_t dec_step)
{
    p_reg->DECODER = ((uint32_t)dec_load << PWM_DECODER_LOAD_Pos) |
    6f68:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    6f6c:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    nrf_pwm_shorts_set(p_instance->p_registers, 0);
    6f70:	6822      	ldr	r2, [r4, #0]
    p_reg->SHORTS = mask;
    6f72:	2300      	movs	r3, #0
    6f74:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    nrf_pwm_int_set(p_instance->p_registers, 0);
    6f78:	6822      	ldr	r2, [r4, #0]
    p_reg->INTEN = mask;
    6f7a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_LOOPSDONE);
    6f7e:	6822      	ldr	r2, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6f80:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
    6f84:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_SEQEND0);
    6f88:	6822      	ldr	r2, [r4, #0]
    6f8a:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
    6f8e:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_SEQEND1);
    6f92:	6822      	ldr	r2, [r4, #0]
    6f94:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
    6f98:	f8d2 2114 	ldr.w	r2, [r2, #276]	; 0x114
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_STOPPED);
    6f9c:	6822      	ldr	r2, [r4, #0]
    6f9e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    6fa2:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    if (p_cb->handler)
    6fa6:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    6faa:	4a10      	ldr	r2, [pc, #64]	; (6fec <nrfx_pwm_init+0x10c>)
    6fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6fb0:	b123      	cbz	r3, 6fbc <nrfx_pwm_init+0xdc>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
    6fb2:	6820      	ldr	r0, [r4, #0]
    6fb4:	f340 3007 	sbfx	r0, r0, #12, #8
    6fb8:	f7fb fef8 	bl	2dac <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    6fbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    6fc0:	4b0a      	ldr	r3, [pc, #40]	; (6fec <nrfx_pwm_init+0x10c>)
    6fc2:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    6fc6:	2301      	movs	r3, #1
    6fc8:	722b      	strb	r3, [r5, #8]
    return err_code;
    6fca:	480d      	ldr	r0, [pc, #52]	; (7000 <nrfx_pwm_init+0x120>)
    6fcc:	e798      	b.n	6f00 <nrfx_pwm_init+0x20>
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);
    6fce:	f8df b038 	ldr.w	fp, [pc, #56]	; 7008 <nrfx_pwm_init+0x128>
    6fd2:	f44f 7327 	mov.w	r3, #668	; 0x29c
    6fd6:	465a      	mov	r2, fp
    6fd8:	490a      	ldr	r1, [pc, #40]	; (7004 <nrfx_pwm_init+0x124>)
    6fda:	4808      	ldr	r0, [pc, #32]	; (6ffc <nrfx_pwm_init+0x11c>)
    6fdc:	f004 f845 	bl	b06a <printk>
    6fe0:	f44f 7127 	mov.w	r1, #668	; 0x29c
    6fe4:	4658      	mov	r0, fp
    6fe6:	f004 f999 	bl	b31c <assert_post_action>
    6fea:	e7b4      	b.n	6f56 <nrfx_pwm_init+0x76>
    6fec:	20000d58 	.word	0x20000d58
    6ff0:	0bad0005 	.word	0x0bad0005
    6ff4:	0000ce74 	.word	0x0000ce74
    6ff8:	0000ceb0 	.word	0x0000ceb0
    6ffc:	0000c46c 	.word	0x0000c46c
    7000:	0bad0000 	.word	0x0bad0000
    7004:	0000cc44 	.word	0x0000cc44
    7008:	0000cc10 	.word	0x0000cc10

0000700c <nrfx_pwm_simple_playback>:

uint32_t nrfx_pwm_simple_playback(nrfx_pwm_t const *         p_instance,
                                  nrf_pwm_sequence_t const * p_sequence,
                                  uint16_t                   playback_count,
                                  uint32_t                   flags)
{
    700c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7010:	4605      	mov	r5, r0
    7012:	460c      	mov	r4, r1
    7014:	4617      	mov	r7, r2
    7016:	461e      	mov	r6, r3
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    7018:	7903      	ldrb	r3, [r0, #4]
    701a:	4ab4      	ldr	r2, [pc, #720]	; (72ec <nrfx_pwm_simple_playback+0x2e0>)
    701c:	eb03 0843 	add.w	r8, r3, r3, lsl #1
    7020:	eb02 0888 	add.w	r8, r2, r8, lsl #2
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    7024:	f898 3008 	ldrb.w	r3, [r8, #8]
    7028:	2b00      	cmp	r3, #0
    702a:	d06d      	beq.n	7108 <nrfx_pwm_simple_playback+0xfc>
    NRFX_ASSERT(playback_count > 0);
    702c:	2f00      	cmp	r7, #0
    702e:	d07a      	beq.n	7126 <nrfx_pwm_simple_playback+0x11a>
    NRFX_ASSERT(nrfx_is_in_ram(p_sequence->values.p_raw));
    7030:	6823      	ldr	r3, [r4, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    7032:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    7036:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    703a:	f040 8083 	bne.w	7144 <nrfx_pwm_simple_playback+0x138>

    // To take advantage of the looping mechanism, we need to use both sequences
    // (single sequence can be played back only once).
    nrf_pwm_sequence_set(p_instance->p_registers, 0, p_sequence);
    703e:	f8d5 9000 	ldr.w	r9, [r5]
    NRFX_ASSERT(p_seq != NULL);
    7042:	2c00      	cmp	r4, #0
    7044:	f000 808d 	beq.w	7162 <nrfx_pwm_simple_playback+0x156>
    nrf_pwm_seq_ptr_set(      p_reg, seq_id, p_seq->values.p_raw);
    7048:	f8d4 a000 	ldr.w	sl, [r4]
    NRFX_ASSERT(p_values != NULL);
    704c:	f1ba 0f00 	cmp.w	sl, #0
    7050:	f000 8096 	beq.w	7180 <nrfx_pwm_simple_playback+0x174>
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    7054:	f8c9 a520 	str.w	sl, [r9, #1312]	; 0x520
    nrf_pwm_seq_cnt_set(      p_reg, seq_id, p_seq->length);
    7058:	f8b4 a004 	ldrh.w	sl, [r4, #4]
    NRFX_ASSERT(length != 0);
    705c:	f1ba 0f00 	cmp.w	sl, #0
    7060:	f000 809d 	beq.w	719e <nrfx_pwm_simple_playback+0x192>
    NRFX_ASSERT(length <= PWM_SEQ_CNT_CNT_Msk);
    7064:	f41a 4f00 	tst.w	sl, #32768	; 0x8000
    7068:	f040 80a8 	bne.w	71bc <nrfx_pwm_simple_playback+0x1b0>
    p_reg->SEQ[seq_id].CNT = length;
    706c:	f8c9 a524 	str.w	sl, [r9, #1316]	; 0x524
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
    7070:	f8d4 a008 	ldr.w	sl, [r4, #8]
    NRFX_ASSERT(refresh <= PWM_SEQ_REFRESH_CNT_Msk);
    7074:	f1ba 7f80 	cmp.w	sl, #16777216	; 0x1000000
    7078:	f080 80af 	bcs.w	71da <nrfx_pwm_simple_playback+0x1ce>
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    707c:	f8c9 a528 	str.w	sl, [r9, #1320]	; 0x528
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
    7080:	f8d4 a00c 	ldr.w	sl, [r4, #12]
    NRFX_ASSERT(end_delay <= PWM_SEQ_ENDDELAY_CNT_Msk);
    7084:	f1ba 7f80 	cmp.w	sl, #16777216	; 0x1000000
    7088:	f080 80b6 	bcs.w	71f8 <nrfx_pwm_simple_playback+0x1ec>
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
    708c:	f8c9 a52c 	str.w	sl, [r9, #1324]	; 0x52c
    nrf_pwm_sequence_set(p_instance->p_registers, 1, p_sequence);
    7090:	f8d5 9000 	ldr.w	r9, [r5]
    NRFX_ASSERT(p_seq != NULL);
    7094:	2c00      	cmp	r4, #0
    7096:	f000 80be 	beq.w	7216 <nrfx_pwm_simple_playback+0x20a>
    nrf_pwm_seq_ptr_set(      p_reg, seq_id, p_seq->values.p_raw);
    709a:	f8d4 a000 	ldr.w	sl, [r4]
    NRFX_ASSERT(p_values != NULL);
    709e:	f1ba 0f00 	cmp.w	sl, #0
    70a2:	f000 80c7 	beq.w	7234 <nrfx_pwm_simple_playback+0x228>
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    70a6:	f8c9 a540 	str.w	sl, [r9, #1344]	; 0x540
    nrf_pwm_seq_cnt_set(      p_reg, seq_id, p_seq->length);
    70aa:	f8b4 a004 	ldrh.w	sl, [r4, #4]
    NRFX_ASSERT(length != 0);
    70ae:	f1ba 0f00 	cmp.w	sl, #0
    70b2:	f000 80ce 	beq.w	7252 <nrfx_pwm_simple_playback+0x246>
    NRFX_ASSERT(length <= PWM_SEQ_CNT_CNT_Msk);
    70b6:	f41a 4f00 	tst.w	sl, #32768	; 0x8000
    70ba:	f040 80d9 	bne.w	7270 <nrfx_pwm_simple_playback+0x264>
    p_reg->SEQ[seq_id].CNT = length;
    70be:	f8c9 a544 	str.w	sl, [r9, #1348]	; 0x544
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
    70c2:	f8d4 a008 	ldr.w	sl, [r4, #8]
    NRFX_ASSERT(refresh <= PWM_SEQ_REFRESH_CNT_Msk);
    70c6:	f1ba 7f80 	cmp.w	sl, #16777216	; 0x1000000
    70ca:	f080 80e0 	bcs.w	728e <nrfx_pwm_simple_playback+0x282>
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    70ce:	f8c9 a548 	str.w	sl, [r9, #1352]	; 0x548
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
    70d2:	68e4      	ldr	r4, [r4, #12]
    NRFX_ASSERT(end_delay <= PWM_SEQ_ENDDELAY_CNT_Msk);
    70d4:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    70d8:	f080 80e8 	bcs.w	72ac <nrfx_pwm_simple_playback+0x2a0>
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
    70dc:	f8c9 454c 	str.w	r4, [r9, #1356]	; 0x54c
    bool odd = (playback_count & 1);
    70e0:	f007 0301 	and.w	r3, r7, #1
    nrf_pwm_loop_set(p_instance->p_registers,
    70e4:	6829      	ldr	r1, [r5, #0]
    70e6:	eb03 0757 	add.w	r7, r3, r7, lsr #1
}

NRF_STATIC_INLINE void nrf_pwm_loop_set(NRF_PWM_Type * p_reg,
                                        uint16_t       loop_count)
{
    p_reg->LOOP = loop_count;
    70ea:	f8c1 7514 	str.w	r7, [r1, #1300]	; 0x514
        (playback_count / 2) + (odd ? 1 : 0));

    uint32_t shorts_mask;
    if (flags & NRFX_PWM_FLAG_STOP)
    70ee:	f016 0f01 	tst.w	r6, #1
    70f2:	f040 80ea 	bne.w	72ca <nrfx_pwm_simple_playback+0x2be>
    {
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    }
    else if (flags & NRFX_PWM_FLAG_LOOP)
    70f6:	f016 0202 	ands.w	r2, r6, #2
    70fa:	f000 80e7 	beq.w	72cc <nrfx_pwm_simple_playback+0x2c0>
    {
        shorts_mask = odd ? NRF_PWM_SHORT_LOOPSDONE_SEQSTART1_MASK
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
    70fe:	2b00      	cmp	r3, #0
    7100:	f000 80f0 	beq.w	72e4 <nrfx_pwm_simple_playback+0x2d8>
    7104:	2208      	movs	r2, #8
    7106:	e0e1      	b.n	72cc <nrfx_pwm_simple_playback+0x2c0>
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    7108:	f8df 920c 	ldr.w	r9, [pc, #524]	; 7318 <nrfx_pwm_simple_playback+0x30c>
    710c:	f44f 7396 	mov.w	r3, #300	; 0x12c
    7110:	464a      	mov	r2, r9
    7112:	4977      	ldr	r1, [pc, #476]	; (72f0 <nrfx_pwm_simple_playback+0x2e4>)
    7114:	4877      	ldr	r0, [pc, #476]	; (72f4 <nrfx_pwm_simple_playback+0x2e8>)
    7116:	f003 ffa8 	bl	b06a <printk>
    711a:	f44f 7196 	mov.w	r1, #300	; 0x12c
    711e:	4648      	mov	r0, r9
    7120:	f004 f8fc 	bl	b31c <assert_post_action>
    7124:	e782      	b.n	702c <nrfx_pwm_simple_playback+0x20>
    NRFX_ASSERT(playback_count > 0);
    7126:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 7318 <nrfx_pwm_simple_playback+0x30c>
    712a:	f240 132d 	movw	r3, #301	; 0x12d
    712e:	464a      	mov	r2, r9
    7130:	4971      	ldr	r1, [pc, #452]	; (72f8 <nrfx_pwm_simple_playback+0x2ec>)
    7132:	4870      	ldr	r0, [pc, #448]	; (72f4 <nrfx_pwm_simple_playback+0x2e8>)
    7134:	f003 ff99 	bl	b06a <printk>
    7138:	f240 112d 	movw	r1, #301	; 0x12d
    713c:	4648      	mov	r0, r9
    713e:	f004 f8ed 	bl	b31c <assert_post_action>
    7142:	e775      	b.n	7030 <nrfx_pwm_simple_playback+0x24>
    NRFX_ASSERT(nrfx_is_in_ram(p_sequence->values.p_raw));
    7144:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 7318 <nrfx_pwm_simple_playback+0x30c>
    7148:	f44f 7397 	mov.w	r3, #302	; 0x12e
    714c:	464a      	mov	r2, r9
    714e:	496b      	ldr	r1, [pc, #428]	; (72fc <nrfx_pwm_simple_playback+0x2f0>)
    7150:	4868      	ldr	r0, [pc, #416]	; (72f4 <nrfx_pwm_simple_playback+0x2e8>)
    7152:	f003 ff8a 	bl	b06a <printk>
    7156:	f44f 7197 	mov.w	r1, #302	; 0x12e
    715a:	4648      	mov	r0, r9
    715c:	f004 f8de 	bl	b31c <assert_post_action>
    7160:	e76d      	b.n	703e <nrfx_pwm_simple_playback+0x32>
    NRFX_ASSERT(p_seq != NULL);
    7162:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 731c <nrfx_pwm_simple_playback+0x310>
    7166:	f240 23a7 	movw	r3, #679	; 0x2a7
    716a:	4652      	mov	r2, sl
    716c:	4964      	ldr	r1, [pc, #400]	; (7300 <nrfx_pwm_simple_playback+0x2f4>)
    716e:	4861      	ldr	r0, [pc, #388]	; (72f4 <nrfx_pwm_simple_playback+0x2e8>)
    7170:	f003 ff7b 	bl	b06a <printk>
    7174:	f240 21a7 	movw	r1, #679	; 0x2a7
    7178:	4650      	mov	r0, sl
    717a:	f004 f8cf 	bl	b31c <assert_post_action>
    717e:	e763      	b.n	7048 <nrfx_pwm_simple_playback+0x3c>
    NRFX_ASSERT(p_values != NULL);
    7180:	f8df b198 	ldr.w	fp, [pc, #408]	; 731c <nrfx_pwm_simple_playback+0x310>
    7184:	f44f 732d 	mov.w	r3, #692	; 0x2b4
    7188:	465a      	mov	r2, fp
    718a:	495e      	ldr	r1, [pc, #376]	; (7304 <nrfx_pwm_simple_playback+0x2f8>)
    718c:	4859      	ldr	r0, [pc, #356]	; (72f4 <nrfx_pwm_simple_playback+0x2e8>)
    718e:	f003 ff6c 	bl	b06a <printk>
    7192:	f44f 712d 	mov.w	r1, #692	; 0x2b4
    7196:	4658      	mov	r0, fp
    7198:	f004 f8c0 	bl	b31c <assert_post_action>
    719c:	e75a      	b.n	7054 <nrfx_pwm_simple_playback+0x48>
    NRFX_ASSERT(length != 0);
    719e:	f8df b17c 	ldr.w	fp, [pc, #380]	; 731c <nrfx_pwm_simple_playback+0x310>
    71a2:	f240 23bd 	movw	r3, #701	; 0x2bd
    71a6:	465a      	mov	r2, fp
    71a8:	4957      	ldr	r1, [pc, #348]	; (7308 <nrfx_pwm_simple_playback+0x2fc>)
    71aa:	4852      	ldr	r0, [pc, #328]	; (72f4 <nrfx_pwm_simple_playback+0x2e8>)
    71ac:	f003 ff5d 	bl	b06a <printk>
    71b0:	f240 21bd 	movw	r1, #701	; 0x2bd
    71b4:	4658      	mov	r0, fp
    71b6:	f004 f8b1 	bl	b31c <assert_post_action>
    71ba:	e753      	b.n	7064 <nrfx_pwm_simple_playback+0x58>
    NRFX_ASSERT(length <= PWM_SEQ_CNT_CNT_Msk);
    71bc:	f8df b15c 	ldr.w	fp, [pc, #348]	; 731c <nrfx_pwm_simple_playback+0x310>
    71c0:	f240 23be 	movw	r3, #702	; 0x2be
    71c4:	465a      	mov	r2, fp
    71c6:	4951      	ldr	r1, [pc, #324]	; (730c <nrfx_pwm_simple_playback+0x300>)
    71c8:	484a      	ldr	r0, [pc, #296]	; (72f4 <nrfx_pwm_simple_playback+0x2e8>)
    71ca:	f003 ff4e 	bl	b06a <printk>
    71ce:	f240 21be 	movw	r1, #702	; 0x2be
    71d2:	4658      	mov	r0, fp
    71d4:	f004 f8a2 	bl	b31c <assert_post_action>
    71d8:	e748      	b.n	706c <nrfx_pwm_simple_playback+0x60>
    NRFX_ASSERT(refresh <= PWM_SEQ_REFRESH_CNT_Msk);
    71da:	f8df b140 	ldr.w	fp, [pc, #320]	; 731c <nrfx_pwm_simple_playback+0x310>
    71de:	f240 23c7 	movw	r3, #711	; 0x2c7
    71e2:	465a      	mov	r2, fp
    71e4:	494a      	ldr	r1, [pc, #296]	; (7310 <nrfx_pwm_simple_playback+0x304>)
    71e6:	4843      	ldr	r0, [pc, #268]	; (72f4 <nrfx_pwm_simple_playback+0x2e8>)
    71e8:	f003 ff3f 	bl	b06a <printk>
    71ec:	f240 21c7 	movw	r1, #711	; 0x2c7
    71f0:	4658      	mov	r0, fp
    71f2:	f004 f893 	bl	b31c <assert_post_action>
    71f6:	e741      	b.n	707c <nrfx_pwm_simple_playback+0x70>
    NRFX_ASSERT(end_delay <= PWM_SEQ_ENDDELAY_CNT_Msk);
    71f8:	f8df b120 	ldr.w	fp, [pc, #288]	; 731c <nrfx_pwm_simple_playback+0x310>
    71fc:	f44f 7334 	mov.w	r3, #720	; 0x2d0
    7200:	465a      	mov	r2, fp
    7202:	4944      	ldr	r1, [pc, #272]	; (7314 <nrfx_pwm_simple_playback+0x308>)
    7204:	483b      	ldr	r0, [pc, #236]	; (72f4 <nrfx_pwm_simple_playback+0x2e8>)
    7206:	f003 ff30 	bl	b06a <printk>
    720a:	f44f 7134 	mov.w	r1, #720	; 0x2d0
    720e:	4658      	mov	r0, fp
    7210:	f004 f884 	bl	b31c <assert_post_action>
    7214:	e73a      	b.n	708c <nrfx_pwm_simple_playback+0x80>
    NRFX_ASSERT(p_seq != NULL);
    7216:	f8df a104 	ldr.w	sl, [pc, #260]	; 731c <nrfx_pwm_simple_playback+0x310>
    721a:	f240 23a7 	movw	r3, #679	; 0x2a7
    721e:	4652      	mov	r2, sl
    7220:	4937      	ldr	r1, [pc, #220]	; (7300 <nrfx_pwm_simple_playback+0x2f4>)
    7222:	4834      	ldr	r0, [pc, #208]	; (72f4 <nrfx_pwm_simple_playback+0x2e8>)
    7224:	f003 ff21 	bl	b06a <printk>
    7228:	f240 21a7 	movw	r1, #679	; 0x2a7
    722c:	4650      	mov	r0, sl
    722e:	f004 f875 	bl	b31c <assert_post_action>
    7232:	e732      	b.n	709a <nrfx_pwm_simple_playback+0x8e>
    NRFX_ASSERT(p_values != NULL);
    7234:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 731c <nrfx_pwm_simple_playback+0x310>
    7238:	f44f 732d 	mov.w	r3, #692	; 0x2b4
    723c:	465a      	mov	r2, fp
    723e:	4931      	ldr	r1, [pc, #196]	; (7304 <nrfx_pwm_simple_playback+0x2f8>)
    7240:	482c      	ldr	r0, [pc, #176]	; (72f4 <nrfx_pwm_simple_playback+0x2e8>)
    7242:	f003 ff12 	bl	b06a <printk>
    7246:	f44f 712d 	mov.w	r1, #692	; 0x2b4
    724a:	4658      	mov	r0, fp
    724c:	f004 f866 	bl	b31c <assert_post_action>
    7250:	e729      	b.n	70a6 <nrfx_pwm_simple_playback+0x9a>
    NRFX_ASSERT(length != 0);
    7252:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 731c <nrfx_pwm_simple_playback+0x310>
    7256:	f240 23bd 	movw	r3, #701	; 0x2bd
    725a:	465a      	mov	r2, fp
    725c:	492a      	ldr	r1, [pc, #168]	; (7308 <nrfx_pwm_simple_playback+0x2fc>)
    725e:	4825      	ldr	r0, [pc, #148]	; (72f4 <nrfx_pwm_simple_playback+0x2e8>)
    7260:	f003 ff03 	bl	b06a <printk>
    7264:	f240 21bd 	movw	r1, #701	; 0x2bd
    7268:	4658      	mov	r0, fp
    726a:	f004 f857 	bl	b31c <assert_post_action>
    726e:	e722      	b.n	70b6 <nrfx_pwm_simple_playback+0xaa>
    NRFX_ASSERT(length <= PWM_SEQ_CNT_CNT_Msk);
    7270:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 731c <nrfx_pwm_simple_playback+0x310>
    7274:	f240 23be 	movw	r3, #702	; 0x2be
    7278:	465a      	mov	r2, fp
    727a:	4924      	ldr	r1, [pc, #144]	; (730c <nrfx_pwm_simple_playback+0x300>)
    727c:	481d      	ldr	r0, [pc, #116]	; (72f4 <nrfx_pwm_simple_playback+0x2e8>)
    727e:	f003 fef4 	bl	b06a <printk>
    7282:	f240 21be 	movw	r1, #702	; 0x2be
    7286:	4658      	mov	r0, fp
    7288:	f004 f848 	bl	b31c <assert_post_action>
    728c:	e717      	b.n	70be <nrfx_pwm_simple_playback+0xb2>
    NRFX_ASSERT(refresh <= PWM_SEQ_REFRESH_CNT_Msk);
    728e:	f8df b08c 	ldr.w	fp, [pc, #140]	; 731c <nrfx_pwm_simple_playback+0x310>
    7292:	f240 23c7 	movw	r3, #711	; 0x2c7
    7296:	465a      	mov	r2, fp
    7298:	491d      	ldr	r1, [pc, #116]	; (7310 <nrfx_pwm_simple_playback+0x304>)
    729a:	4816      	ldr	r0, [pc, #88]	; (72f4 <nrfx_pwm_simple_playback+0x2e8>)
    729c:	f003 fee5 	bl	b06a <printk>
    72a0:	f240 21c7 	movw	r1, #711	; 0x2c7
    72a4:	4658      	mov	r0, fp
    72a6:	f004 f839 	bl	b31c <assert_post_action>
    72aa:	e710      	b.n	70ce <nrfx_pwm_simple_playback+0xc2>
    NRFX_ASSERT(end_delay <= PWM_SEQ_ENDDELAY_CNT_Msk);
    72ac:	f8df a06c 	ldr.w	sl, [pc, #108]	; 731c <nrfx_pwm_simple_playback+0x310>
    72b0:	f44f 7334 	mov.w	r3, #720	; 0x2d0
    72b4:	4652      	mov	r2, sl
    72b6:	4917      	ldr	r1, [pc, #92]	; (7314 <nrfx_pwm_simple_playback+0x308>)
    72b8:	480e      	ldr	r0, [pc, #56]	; (72f4 <nrfx_pwm_simple_playback+0x2e8>)
    72ba:	f003 fed6 	bl	b06a <printk>
    72be:	f44f 7134 	mov.w	r1, #720	; 0x2d0
    72c2:	4650      	mov	r0, sl
    72c4:	f004 f82a 	bl	b31c <assert_post_action>
    72c8:	e708      	b.n	70dc <nrfx_pwm_simple_playback+0xd0>
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    72ca:	2210      	movs	r2, #16
    }
    else
    {
        shorts_mask = 0;
    }
    nrf_pwm_shorts_set(p_instance->p_registers, shorts_mask);
    72cc:	6829      	ldr	r1, [r5, #0]
    p_reg->SHORTS = mask;
    72ce:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
                  __func__,
                  p_sequence->length);
    NRFX_LOG_DEBUG("Sequence data:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_sequence->values.p_raw,
                           p_sequence->length * sizeof(uint16_t));
    return start_playback(p_instance, p_cb, flags,
    72d2:	b2f2      	uxtb	r2, r6
    72d4:	b143      	cbz	r3, 72e8 <nrfx_pwm_simple_playback+0x2dc>
    72d6:	230c      	movs	r3, #12
    72d8:	4641      	mov	r1, r8
    72da:	4628      	mov	r0, r5
    72dc:	f004 fcfa 	bl	bcd4 <start_playback>
        odd ? NRF_PWM_TASK_SEQSTART1 : NRF_PWM_TASK_SEQSTART0);
}
    72e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
    72e4:	2204      	movs	r2, #4
    72e6:	e7f1      	b.n	72cc <nrfx_pwm_simple_playback+0x2c0>
    return start_playback(p_instance, p_cb, flags,
    72e8:	2308      	movs	r3, #8
    72ea:	e7f5      	b.n	72d8 <nrfx_pwm_simple_playback+0x2cc>
    72ec:	20000d58 	.word	0x20000d58
    72f0:	0000cebc 	.word	0x0000cebc
    72f4:	0000c46c 	.word	0x0000c46c
    72f8:	0000cee8 	.word	0x0000cee8
    72fc:	0000cefc 	.word	0x0000cefc
    7300:	0000cf28 	.word	0x0000cf28
    7304:	0000cf40 	.word	0x0000cf40
    7308:	0000cf58 	.word	0x0000cf58
    730c:	0000cf64 	.word	0x0000cf64
    7310:	0000cf84 	.word	0x0000cf84
    7314:	0000cfa8 	.word	0x0000cfa8
    7318:	0000ce74 	.word	0x0000ce74
    731c:	0000cc10 	.word	0x0000cc10

00007320 <nrfx_pwm_is_stopped>:
    return ret_val;
}


bool nrfx_pwm_is_stopped(nrfx_pwm_t const * p_instance)
{
    7320:	b570      	push	{r4, r5, r6, lr}
    7322:	4605      	mov	r5, r0
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    7324:	7904      	ldrb	r4, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    7326:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    732a:	4b15      	ldr	r3, [pc, #84]	; (7380 <nrfx_pwm_is_stopped+0x60>)
    732c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    7330:	7a1b      	ldrb	r3, [r3, #8]
    7332:	b1ab      	cbz	r3, 7360 <nrfx_pwm_is_stopped+0x40>

    bool ret_val = false;

    // If the event handler is used (interrupts are enabled), the state will
    // be changed in interrupt handler when the STOPPED event occurs.
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    7334:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    7338:	4a11      	ldr	r2, [pc, #68]	; (7380 <nrfx_pwm_is_stopped+0x60>)
    733a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    733e:	7a1b      	ldrb	r3, [r3, #8]
    7340:	b2db      	uxtb	r3, r3
    7342:	2b02      	cmp	r3, #2
    7344:	d01a      	beq.n	737c <nrfx_pwm_is_stopped+0x5c>
    {
        ret_val = true;
    7346:	2001      	movs	r0, #1
    }
    // If interrupts are disabled, we must check the STOPPED event here.
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
    7348:	682b      	ldr	r3, [r5, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    734a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    734e:	b133      	cbz	r3, 735e <nrfx_pwm_is_stopped+0x3e>
    {
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    7350:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7354:	4b0a      	ldr	r3, [pc, #40]	; (7380 <nrfx_pwm_is_stopped+0x60>)
    7356:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    735a:	2001      	movs	r0, #1
    735c:	7220      	strb	r0, [r4, #8]
        ret_val = true;
    }

    NRFX_LOG_INFO("%s returned %d.", __func__, ret_val);
    return ret_val;
}
    735e:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    7360:	4e08      	ldr	r6, [pc, #32]	; (7384 <nrfx_pwm_is_stopped+0x64>)
    7362:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
    7366:	4632      	mov	r2, r6
    7368:	4907      	ldr	r1, [pc, #28]	; (7388 <nrfx_pwm_is_stopped+0x68>)
    736a:	4808      	ldr	r0, [pc, #32]	; (738c <nrfx_pwm_is_stopped+0x6c>)
    736c:	f003 fe7d 	bl	b06a <printk>
    7370:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    7374:	4630      	mov	r0, r6
    7376:	f003 ffd1 	bl	b31c <assert_post_action>
    737a:	e7db      	b.n	7334 <nrfx_pwm_is_stopped+0x14>
    bool ret_val = false;
    737c:	2000      	movs	r0, #0
    737e:	e7e3      	b.n	7348 <nrfx_pwm_is_stopped+0x28>
    7380:	20000d58 	.word	0x20000d58
    7384:	0000ce74 	.word	0x0000ce74
    7388:	0000cebc 	.word	0x0000cebc
    738c:	0000c46c 	.word	0x0000c46c

00007390 <nrfx_pwm_stop>:
{
    7390:	b570      	push	{r4, r5, r6, lr}
    7392:	4604      	mov	r4, r0
    7394:	460d      	mov	r5, r1
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
    7396:	7903      	ldrb	r3, [r0, #4]
    7398:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    739c:	4a14      	ldr	r2, [pc, #80]	; (73f0 <nrfx_pwm_stop+0x60>)
    739e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    73a2:	7a1b      	ldrb	r3, [r3, #8]
    73a4:	b1ab      	cbz	r3, 73d2 <nrfx_pwm_stop+0x42>
    nrf_pwm_shorts_set(p_instance->p_registers, 0);
    73a6:	6823      	ldr	r3, [r4, #0]
    p_reg->SHORTS = mask;
    73a8:	2200      	movs	r2, #0
    73aa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    nrf_pwm_task_trigger(p_instance->p_registers, NRF_PWM_TASK_STOP);
    73ae:	6823      	ldr	r3, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    73b0:	2201      	movs	r2, #1
    73b2:	605a      	str	r2, [r3, #4]
    if (nrfx_pwm_is_stopped(p_instance))
    73b4:	4620      	mov	r0, r4
    73b6:	f7ff ffb3 	bl	7320 <nrfx_pwm_is_stopped>
    73ba:	4603      	mov	r3, r0
    73bc:	b938      	cbnz	r0, 73ce <nrfx_pwm_stop+0x3e>
            if (nrfx_pwm_is_stopped(p_instance))
    73be:	4620      	mov	r0, r4
    73c0:	f7ff ffae 	bl	7320 <nrfx_pwm_is_stopped>
    73c4:	4603      	mov	r3, r0
    73c6:	b910      	cbnz	r0, 73ce <nrfx_pwm_stop+0x3e>
        } while (wait_until_stopped);
    73c8:	2d00      	cmp	r5, #0
    73ca:	d1f8      	bne.n	73be <nrfx_pwm_stop+0x2e>
    bool ret_val = false;
    73cc:	462b      	mov	r3, r5
}
    73ce:	4618      	mov	r0, r3
    73d0:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
    73d2:	4e08      	ldr	r6, [pc, #32]	; (73f4 <nrfx_pwm_stop+0x64>)
    73d4:	f240 1385 	movw	r3, #389	; 0x185
    73d8:	4632      	mov	r2, r6
    73da:	4907      	ldr	r1, [pc, #28]	; (73f8 <nrfx_pwm_stop+0x68>)
    73dc:	4807      	ldr	r0, [pc, #28]	; (73fc <nrfx_pwm_stop+0x6c>)
    73de:	f003 fe44 	bl	b06a <printk>
    73e2:	f240 1185 	movw	r1, #389	; 0x185
    73e6:	4630      	mov	r0, r6
    73e8:	f003 ff98 	bl	b31c <assert_post_action>
    73ec:	e7db      	b.n	73a6 <nrfx_pwm_stop+0x16>
    73ee:	bf00      	nop
    73f0:	20000d58 	.word	0x20000d58
    73f4:	0000ce74 	.word	0x0000ce74
    73f8:	0000cfcc 	.word	0x0000cfcc
    73fc:	0000c46c 	.word	0x0000c46c

00007400 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    7400:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    7402:	4c14      	ldr	r4, [pc, #80]	; (7454 <_DoInit+0x54>)
    7404:	2303      	movs	r3, #3
    7406:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    7408:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    740a:	4a13      	ldr	r2, [pc, #76]	; (7458 <_DoInit+0x58>)
    740c:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    740e:	4b13      	ldr	r3, [pc, #76]	; (745c <_DoInit+0x5c>)
    7410:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    7412:	f44f 6380 	mov.w	r3, #1024	; 0x400
    7416:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    7418:	2300      	movs	r3, #0
    741a:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    741c:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    741e:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    7420:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    7422:	4a0f      	ldr	r2, [pc, #60]	; (7460 <_DoInit+0x60>)
    7424:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    7426:	2210      	movs	r2, #16
    7428:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    742a:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    742c:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    742e:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    7430:	490c      	ldr	r1, [pc, #48]	; (7464 <_DoInit+0x64>)
    7432:	1de0      	adds	r0, r4, #7
    7434:	f004 f824 	bl	b480 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    7438:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    743c:	490a      	ldr	r1, [pc, #40]	; (7468 <_DoInit+0x68>)
    743e:	4620      	mov	r0, r4
    7440:	f004 f81e 	bl	b480 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    7444:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    7448:	2320      	movs	r3, #32
    744a:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    744c:	f3bf 8f5f 	dmb	sy
}
    7450:	bd10      	pop	{r4, pc}
    7452:	bf00      	nop
    7454:	20000d64 	.word	0x20000d64
    7458:	0000d014 	.word	0x0000d014
    745c:	20000e1c 	.word	0x20000e1c
    7460:	20000e0c 	.word	0x20000e0c
    7464:	0000d020 	.word	0x0000d020
    7468:	0000d024 	.word	0x0000d024

0000746c <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    746c:	4b03      	ldr	r3, [pc, #12]	; (747c <z_device_state_init+0x10>)

	while (dev < __device_end) {
    746e:	4a04      	ldr	r2, [pc, #16]	; (7480 <z_device_state_init+0x14>)
    7470:	4293      	cmp	r3, r2
    7472:	d201      	bcs.n	7478 <z_device_state_init+0xc>
		z_object_init(dev);
		++dev;
    7474:	3318      	adds	r3, #24
    7476:	e7fa      	b.n	746e <z_device_state_init+0x2>
	}
}
    7478:	4770      	bx	lr
    747a:	bf00      	nop
    747c:	0000c050 	.word	0x0000c050
    7480:	0000c0f8 	.word	0x0000c0f8

00007484 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    7484:	b570      	push	{r4, r5, r6, lr}
    7486:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    7488:	4b11      	ldr	r3, [pc, #68]	; (74d0 <z_sys_init_run_level+0x4c>)
    748a:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    748e:	e009      	b.n	74a4 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    7490:	4240      	negs	r0, r0
    7492:	e017      	b.n	74c4 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    7494:	68eb      	ldr	r3, [r5, #12]
    7496:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    7498:	68ea      	ldr	r2, [r5, #12]
    749a:	7853      	ldrb	r3, [r2, #1]
    749c:	f043 0301 	orr.w	r3, r3, #1
    74a0:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    74a2:	3408      	adds	r4, #8
    74a4:	1c73      	adds	r3, r6, #1
    74a6:	4a0a      	ldr	r2, [pc, #40]	; (74d0 <z_sys_init_run_level+0x4c>)
    74a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74ac:	42a3      	cmp	r3, r4
    74ae:	d90d      	bls.n	74cc <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    74b0:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    74b2:	6823      	ldr	r3, [r4, #0]
    74b4:	4628      	mov	r0, r5
    74b6:	4798      	blx	r3
		if (dev != NULL) {
    74b8:	2d00      	cmp	r5, #0
    74ba:	d0f2      	beq.n	74a2 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    74bc:	2800      	cmp	r0, #0
    74be:	d0eb      	beq.n	7498 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    74c0:	2800      	cmp	r0, #0
    74c2:	dbe5      	blt.n	7490 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    74c4:	28ff      	cmp	r0, #255	; 0xff
    74c6:	dde5      	ble.n	7494 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    74c8:	20ff      	movs	r0, #255	; 0xff
    74ca:	e7e3      	b.n	7494 <z_sys_init_run_level+0x10>
		}
	}
}
    74cc:	bd70      	pop	{r4, r5, r6, pc}
    74ce:	bf00      	nop
    74d0:	0000d02c 	.word	0x0000d02c

000074d4 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    74d4:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    74d6:	4605      	mov	r5, r0
    74d8:	b328      	cbz	r0, 7526 <z_impl_device_get_binding+0x52>
    74da:	7803      	ldrb	r3, [r0, #0]
    74dc:	b32b      	cbz	r3, 752a <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
    74de:	4c14      	ldr	r4, [pc, #80]	; (7530 <z_impl_device_get_binding+0x5c>)
    74e0:	e000      	b.n	74e4 <z_impl_device_get_binding+0x10>
    74e2:	3418      	adds	r4, #24
    74e4:	4b13      	ldr	r3, [pc, #76]	; (7534 <z_impl_device_get_binding+0x60>)
    74e6:	429c      	cmp	r4, r3
    74e8:	d008      	beq.n	74fc <z_impl_device_get_binding+0x28>
		if (z_device_ready(dev) && (dev->name == name)) {
    74ea:	4620      	mov	r0, r4
    74ec:	f004 fc26 	bl	bd3c <z_device_ready>
    74f0:	2800      	cmp	r0, #0
    74f2:	d0f6      	beq.n	74e2 <z_impl_device_get_binding+0xe>
    74f4:	6823      	ldr	r3, [r4, #0]
    74f6:	42ab      	cmp	r3, r5
    74f8:	d1f3      	bne.n	74e2 <z_impl_device_get_binding+0xe>
    74fa:	e012      	b.n	7522 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
    74fc:	4c0c      	ldr	r4, [pc, #48]	; (7530 <z_impl_device_get_binding+0x5c>)
    74fe:	e000      	b.n	7502 <z_impl_device_get_binding+0x2e>
    7500:	3418      	adds	r4, #24
    7502:	4b0c      	ldr	r3, [pc, #48]	; (7534 <z_impl_device_get_binding+0x60>)
    7504:	429c      	cmp	r4, r3
    7506:	d00b      	beq.n	7520 <z_impl_device_get_binding+0x4c>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    7508:	4620      	mov	r0, r4
    750a:	f004 fc17 	bl	bd3c <z_device_ready>
    750e:	2800      	cmp	r0, #0
    7510:	d0f6      	beq.n	7500 <z_impl_device_get_binding+0x2c>
    7512:	6821      	ldr	r1, [r4, #0]
    7514:	4628      	mov	r0, r5
    7516:	f003 ffe8 	bl	b4ea <strcmp>
    751a:	2800      	cmp	r0, #0
    751c:	d1f0      	bne.n	7500 <z_impl_device_get_binding+0x2c>
    751e:	e000      	b.n	7522 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
    7520:	2400      	movs	r4, #0
}
    7522:	4620      	mov	r0, r4
    7524:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    7526:	4604      	mov	r4, r0
    7528:	e7fb      	b.n	7522 <z_impl_device_get_binding+0x4e>
    752a:	2400      	movs	r4, #0
    752c:	e7f9      	b.n	7522 <z_impl_device_get_binding+0x4e>
    752e:	bf00      	nop
    7530:	0000c050 	.word	0x0000c050
    7534:	0000c0f8 	.word	0x0000c0f8

00007538 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    7538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    753a:	4604      	mov	r4, r0
    753c:	460e      	mov	r6, r1
	__asm__ volatile(
    753e:	f04f 0320 	mov.w	r3, #32
    7542:	f3ef 8711 	mrs	r7, BASEPRI
    7546:	f383 8812 	msr	BASEPRI_MAX, r3
    754a:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    754e:	f002 f9e7 	bl	9920 <z_impl_z_current_get>
    7552:	4605      	mov	r5, r0
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    7554:	4631      	mov	r1, r6
    7556:	4620      	mov	r0, r4
    7558:	f004 fb86 	bl	bc68 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    755c:	2c04      	cmp	r4, #4
    755e:	d007      	beq.n	7570 <z_fatal_error+0x38>
	__asm__ volatile(
    7560:	f387 8811 	msr	BASEPRI, r7
    7564:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    7568:	4628      	mov	r0, r5
    756a:	f7fb ff7f 	bl	346c <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    756e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    7570:	4c07      	ldr	r4, [pc, #28]	; (7590 <z_fatal_error+0x58>)
    7572:	238f      	movs	r3, #143	; 0x8f
    7574:	4622      	mov	r2, r4
    7576:	4907      	ldr	r1, [pc, #28]	; (7594 <z_fatal_error+0x5c>)
    7578:	4807      	ldr	r0, [pc, #28]	; (7598 <z_fatal_error+0x60>)
    757a:	f003 fd76 	bl	b06a <printk>
    757e:	4807      	ldr	r0, [pc, #28]	; (759c <z_fatal_error+0x64>)
    7580:	f003 fd73 	bl	b06a <printk>
    7584:	218f      	movs	r1, #143	; 0x8f
    7586:	4620      	mov	r0, r4
    7588:	f003 fec8 	bl	b31c <assert_post_action>
    758c:	e7e8      	b.n	7560 <z_fatal_error+0x28>
    758e:	bf00      	nop
    7590:	0000d044 	.word	0x0000d044
    7594:	0000d068 	.word	0x0000d068
    7598:	0000c46c 	.word	0x0000c46c
    759c:	0000d088 	.word	0x0000d088

000075a0 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    75a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    75a2:	b089      	sub	sp, #36	; 0x24
    75a4:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
    75a6:	4b15      	ldr	r3, [pc, #84]	; (75fc <init_idle_thread+0x5c>)
    75a8:	25b8      	movs	r5, #184	; 0xb8
    75aa:	fb05 3500 	mla	r5, r5, r0, r3
	k_thread_stack_t *stack = z_idle_stacks[i];
    75ae:	4b14      	ldr	r3, [pc, #80]	; (7600 <init_idle_thread+0x60>)
    75b0:	f44f 76b0 	mov.w	r6, #352	; 0x160
    75b4:	fb06 3600 	mla	r6, r6, r0, r3

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
    75b8:	af06      	add	r7, sp, #24
    75ba:	4603      	mov	r3, r0
    75bc:	4a11      	ldr	r2, [pc, #68]	; (7604 <init_idle_thread+0x64>)
    75be:	2108      	movs	r1, #8
    75c0:	4638      	mov	r0, r7
    75c2:	f003 fd60 	bl	b086 <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    75c6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    75ca:	480f      	ldr	r0, [pc, #60]	; (7608 <init_idle_thread+0x68>)
    75cc:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	z_setup_new_thread(thread, stack,
    75d0:	9705      	str	r7, [sp, #20]
    75d2:	2301      	movs	r3, #1
    75d4:	9304      	str	r3, [sp, #16]
    75d6:	230f      	movs	r3, #15
    75d8:	9303      	str	r3, [sp, #12]
    75da:	2300      	movs	r3, #0
    75dc:	9302      	str	r3, [sp, #8]
    75de:	9301      	str	r3, [sp, #4]
    75e0:	9400      	str	r4, [sp, #0]
    75e2:	4b0a      	ldr	r3, [pc, #40]	; (760c <init_idle_thread+0x6c>)
    75e4:	f44f 72a0 	mov.w	r2, #320	; 0x140
    75e8:	4631      	mov	r1, r6
    75ea:	4628      	mov	r0, r5
    75ec:	f000 fa7c 	bl	7ae8 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    75f0:	7b6b      	ldrb	r3, [r5, #13]
    75f2:	f023 0304 	bic.w	r3, r3, #4
    75f6:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    75f8:	b009      	add	sp, #36	; 0x24
    75fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    75fc:	200004a0 	.word	0x200004a0
    7600:	200024e0 	.word	0x200024e0
    7604:	0000d0c0 	.word	0x0000d0c0
    7608:	2000121c 	.word	0x2000121c
    760c:	00007e01 	.word	0x00007e01

00007610 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
    7610:	b570      	push	{r4, r5, r6, lr}
    7612:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
    7614:	f001 ffbc 	bl	9590 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
    7618:	4d1b      	ldr	r5, [pc, #108]	; (7688 <prepare_multithreading+0x78>)
    761a:	4b1c      	ldr	r3, [pc, #112]	; (768c <prepare_multithreading+0x7c>)
    761c:	61dd      	str	r5, [r3, #28]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    761e:	4b1c      	ldr	r3, [pc, #112]	; (7690 <prepare_multithreading+0x80>)
    7620:	9305      	str	r3, [sp, #20]
    7622:	2301      	movs	r3, #1
    7624:	9304      	str	r3, [sp, #16]
    7626:	2400      	movs	r4, #0
    7628:	9403      	str	r4, [sp, #12]
    762a:	9402      	str	r4, [sp, #8]
    762c:	9401      	str	r4, [sp, #4]
    762e:	9400      	str	r4, [sp, #0]
    7630:	4b18      	ldr	r3, [pc, #96]	; (7694 <prepare_multithreading+0x84>)
    7632:	f44f 6280 	mov.w	r2, #1024	; 0x400
    7636:	4918      	ldr	r1, [pc, #96]	; (7698 <prepare_multithreading+0x88>)
    7638:	4628      	mov	r0, r5
    763a:	f000 fa55 	bl	7ae8 <z_setup_new_thread>
    763e:	4606      	mov	r6, r0
    7640:	7b6b      	ldrb	r3, [r5, #13]
    7642:	f023 0304 	bic.w	r3, r3, #4
    7646:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
    7648:	4628      	mov	r0, r5
    764a:	f001 fac7 	bl	8bdc <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    764e:	2c00      	cmp	r4, #0
    7650:	dd02      	ble.n	7658 <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
    7652:	4630      	mov	r0, r6
    7654:	b006      	add	sp, #24
    7656:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
    7658:	4620      	mov	r0, r4
    765a:	f7ff ffa1 	bl	75a0 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    765e:	4b0f      	ldr	r3, [pc, #60]	; (769c <prepare_multithreading+0x8c>)
    7660:	22b8      	movs	r2, #184	; 0xb8
    7662:	fb02 3204 	mla	r2, r2, r4, r3
    7666:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    766a:	4b08      	ldr	r3, [pc, #32]	; (768c <prepare_multithreading+0x7c>)
    766c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    7670:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
    7672:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
    7674:	eb04 1184 	add.w	r1, r4, r4, lsl #6
    7678:	4a09      	ldr	r2, [pc, #36]	; (76a0 <prepare_multithreading+0x90>)
    767a:	eb02 1241 	add.w	r2, r2, r1, lsl #5
    767e:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
    7682:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    7684:	3401      	adds	r4, #1
    7686:	e7e2      	b.n	764e <prepare_multithreading+0x3e>
    7688:	20000558 	.word	0x20000558
    768c:	2000121c 	.word	0x2000121c
    7690:	0000d0cc 	.word	0x0000d0cc
    7694:	000076a5 	.word	0x000076a5
    7698:	200020c0 	.word	0x200020c0
    769c:	200004a0 	.word	0x200004a0
    76a0:	20002640 	.word	0x20002640

000076a4 <bg_thread_main>:
{
    76a4:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    76a6:	4b0a      	ldr	r3, [pc, #40]	; (76d0 <bg_thread_main+0x2c>)
    76a8:	2201      	movs	r2, #1
    76aa:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    76ac:	2002      	movs	r0, #2
    76ae:	f7ff fee9 	bl	7484 <z_sys_init_run_level>
	boot_banner();
    76b2:	f002 ffef 	bl	a694 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    76b6:	2003      	movs	r0, #3
    76b8:	f7ff fee4 	bl	7484 <z_sys_init_run_level>
	z_init_static_threads();
    76bc:	f000 fb22 	bl	7d04 <z_init_static_threads>
	main();
    76c0:	f7f9 ffaa 	bl	1618 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    76c4:	4a03      	ldr	r2, [pc, #12]	; (76d4 <bg_thread_main+0x30>)
    76c6:	7b13      	ldrb	r3, [r2, #12]
    76c8:	f023 0301 	bic.w	r3, r3, #1
    76cc:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    76ce:	bd08      	pop	{r3, pc}
    76d0:	20001299 	.word	0x20001299
    76d4:	20000558 	.word	0x20000558

000076d8 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    76d8:	b508      	push	{r3, lr}
    76da:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    76dc:	4a01      	ldr	r2, [pc, #4]	; (76e4 <switch_to_main_thread+0xc>)
    76de:	4802      	ldr	r0, [pc, #8]	; (76e8 <switch_to_main_thread+0x10>)
    76e0:	f7fb fc80 	bl	2fe4 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    76e4:	000076a5 	.word	0x000076a5
    76e8:	20000558 	.word	0x20000558

000076ec <z_bss_zero>:
{
    76ec:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    76ee:	4803      	ldr	r0, [pc, #12]	; (76fc <z_bss_zero+0x10>)
    76f0:	4a03      	ldr	r2, [pc, #12]	; (7700 <z_bss_zero+0x14>)
    76f2:	1a12      	subs	r2, r2, r0
    76f4:	2100      	movs	r1, #0
    76f6:	f003 ff26 	bl	b546 <memset>
}
    76fa:	bd08      	pop	{r3, pc}
    76fc:	20000258 	.word	0x20000258
    7700:	20001458 	.word	0x20001458

00007704 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    7704:	b500      	push	{lr}
    7706:	b0af      	sub	sp, #188	; 0xbc
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    7708:	4b1c      	ldr	r3, [pc, #112]	; (777c <z_cstart+0x78>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    770a:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    770e:	4c1c      	ldr	r4, [pc, #112]	; (7780 <z_cstart+0x7c>)
    7710:	6963      	ldr	r3, [r4, #20]
    7712:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    7716:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7718:	23e0      	movs	r3, #224	; 0xe0
    771a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    771e:	2500      	movs	r5, #0
    7720:	77e5      	strb	r5, [r4, #31]
    7722:	7625      	strb	r5, [r4, #24]
    7724:	7665      	strb	r5, [r4, #25]
    7726:	76a5      	strb	r5, [r4, #26]
    7728:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    772c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    772e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    7732:	6263      	str	r3, [r4, #36]	; 0x24
    7734:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    7738:	f7fb fe08 	bl	334c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    773c:	f7fb fb18 	bl	2d70 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    7740:	f04f 33ff 	mov.w	r3, #4294967295
    7744:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    7746:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    7748:	f7fb ff4e 	bl	35e8 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    774c:	f7fb fea4 	bl	3498 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    7750:	2401      	movs	r4, #1
    7752:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    7756:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    775a:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->stack_info.size = 0U;
    775c:	9528      	str	r5, [sp, #160]	; 0xa0
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    775e:	4b09      	ldr	r3, [pc, #36]	; (7784 <z_cstart+0x80>)
    7760:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    7764:	f7ff fe82 	bl	746c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    7768:	4628      	mov	r0, r5
    776a:	f7ff fe8b 	bl	7484 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    776e:	4620      	mov	r0, r4
    7770:	f7ff fe88 	bl	7484 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    7774:	f7ff ff4c 	bl	7610 <prepare_multithreading>
    7778:	f7ff ffae 	bl	76d8 <switch_to_main_thread>
    777c:	20002e60 	.word	0x20002e60
    7780:	e000ed00 	.word	0xe000ed00
    7784:	2000121c 	.word	0x2000121c

00007788 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    7788:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    778a:	4c10      	ldr	r4, [pc, #64]	; (77cc <init_mem_slab_module+0x44>)
	int rc = 0;
    778c:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    778e:	e016      	b.n	77be <init_mem_slab_module+0x36>
    7790:	4e0f      	ldr	r6, [pc, #60]	; (77d0 <init_mem_slab_module+0x48>)
    7792:	233c      	movs	r3, #60	; 0x3c
    7794:	4632      	mov	r2, r6
    7796:	490f      	ldr	r1, [pc, #60]	; (77d4 <init_mem_slab_module+0x4c>)
    7798:	480f      	ldr	r0, [pc, #60]	; (77d8 <init_mem_slab_module+0x50>)
    779a:	f003 fc66 	bl	b06a <printk>
    779e:	480f      	ldr	r0, [pc, #60]	; (77dc <init_mem_slab_module+0x54>)
    77a0:	f003 fc63 	bl	b06a <printk>
    77a4:	213c      	movs	r1, #60	; 0x3c
    77a6:	4630      	mov	r0, r6
    77a8:	f003 fdb8 	bl	b31c <assert_post_action>
    77ac:	4b0c      	ldr	r3, [pc, #48]	; (77e0 <init_mem_slab_module+0x58>)
    77ae:	429c      	cmp	r4, r3
    77b0:	d209      	bcs.n	77c6 <init_mem_slab_module+0x3e>
		rc = create_free_list(slab);
    77b2:	4620      	mov	r0, r4
    77b4:	f004 facf 	bl	bd56 <create_free_list>
		if (rc < 0) {
    77b8:	1e05      	subs	r5, r0, #0
    77ba:	db04      	blt.n	77c6 <init_mem_slab_module+0x3e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    77bc:	3420      	adds	r4, #32
    77be:	4b08      	ldr	r3, [pc, #32]	; (77e0 <init_mem_slab_module+0x58>)
    77c0:	429c      	cmp	r4, r3
    77c2:	d9f3      	bls.n	77ac <init_mem_slab_module+0x24>
    77c4:	e7e4      	b.n	7790 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
    77c6:	4628      	mov	r0, r5
    77c8:	bd70      	pop	{r4, r5, r6, pc}
    77ca:	bf00      	nop
    77cc:	20000208 	.word	0x20000208
    77d0:	0000d0d4 	.word	0x0000d0d4
    77d4:	0000d0fc 	.word	0x0000d0fc
    77d8:	0000c46c 	.word	0x0000c46c
    77dc:	0000d11c 	.word	0x0000d11c
    77e0:	20000208 	.word	0x20000208

000077e4 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    77e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    77e8:	b082      	sub	sp, #8
    77ea:	4604      	mov	r4, r0
    77ec:	460e      	mov	r6, r1
    77ee:	4690      	mov	r8, r2
    77f0:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    77f2:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    77f6:	f04f 0320 	mov.w	r3, #32
    77fa:	f3ef 8711 	mrs	r7, BASEPRI
    77fe:	f383 8812 	msr	BASEPRI_MAX, r3
    7802:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7806:	4628      	mov	r0, r5
    7808:	f000 f8ec 	bl	79e4 <z_spin_lock_valid>
    780c:	b1c0      	cbz	r0, 7840 <k_mem_slab_alloc+0x5c>
	z_spin_lock_set_owner(l);
    780e:	4628      	mov	r0, r5
    7810:	f000 f908 	bl	7a24 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    7814:	69a3      	ldr	r3, [r4, #24]
    7816:	b323      	cbz	r3, 7862 <k_mem_slab_alloc+0x7e>
		/* take a free block */
		*mem = slab->free_list;
    7818:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    781a:	69a3      	ldr	r3, [r4, #24]
    781c:	681b      	ldr	r3, [r3, #0]
    781e:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    7820:	69e3      	ldr	r3, [r4, #28]
    7822:	3301      	adds	r3, #1
    7824:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    7826:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7828:	4628      	mov	r0, r5
    782a:	f000 f8eb 	bl	7a04 <z_spin_unlock_valid>
    782e:	b378      	cbz	r0, 7890 <k_mem_slab_alloc+0xac>
	__asm__ volatile(
    7830:	f387 8811 	msr	BASEPRI, r7
    7834:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    7838:	4620      	mov	r0, r4
    783a:	b002      	add	sp, #8
    783c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7840:	f8df a07c 	ldr.w	sl, [pc, #124]	; 78c0 <k_mem_slab_alloc+0xdc>
    7844:	2381      	movs	r3, #129	; 0x81
    7846:	4652      	mov	r2, sl
    7848:	4919      	ldr	r1, [pc, #100]	; (78b0 <k_mem_slab_alloc+0xcc>)
    784a:	481a      	ldr	r0, [pc, #104]	; (78b4 <k_mem_slab_alloc+0xd0>)
    784c:	f003 fc0d 	bl	b06a <printk>
    7850:	4629      	mov	r1, r5
    7852:	4819      	ldr	r0, [pc, #100]	; (78b8 <k_mem_slab_alloc+0xd4>)
    7854:	f003 fc09 	bl	b06a <printk>
    7858:	2181      	movs	r1, #129	; 0x81
    785a:	4650      	mov	r0, sl
    785c:	f003 fd5e 	bl	b31c <assert_post_action>
    7860:	e7d5      	b.n	780e <k_mem_slab_alloc+0x2a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    7862:	ea58 0309 	orrs.w	r3, r8, r9
    7866:	d104      	bne.n	7872 <k_mem_slab_alloc+0x8e>
		*mem = NULL;
    7868:	2300      	movs	r3, #0
    786a:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    786c:	f06f 040b 	mvn.w	r4, #11
    7870:	e7da      	b.n	7828 <k_mem_slab_alloc+0x44>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    7872:	e9cd 8900 	strd	r8, r9, [sp]
    7876:	4622      	mov	r2, r4
    7878:	4639      	mov	r1, r7
    787a:	4628      	mov	r0, r5
    787c:	f001 fb86 	bl	8f8c <z_pend_curr>
		if (result == 0) {
    7880:	4604      	mov	r4, r0
    7882:	2800      	cmp	r0, #0
    7884:	d1d8      	bne.n	7838 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    7886:	4b0d      	ldr	r3, [pc, #52]	; (78bc <k_mem_slab_alloc+0xd8>)
    7888:	689b      	ldr	r3, [r3, #8]
    788a:	695b      	ldr	r3, [r3, #20]
    788c:	6033      	str	r3, [r6, #0]
		return result;
    788e:	e7d3      	b.n	7838 <k_mem_slab_alloc+0x54>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7890:	4e0b      	ldr	r6, [pc, #44]	; (78c0 <k_mem_slab_alloc+0xdc>)
    7892:	23ac      	movs	r3, #172	; 0xac
    7894:	4632      	mov	r2, r6
    7896:	490b      	ldr	r1, [pc, #44]	; (78c4 <k_mem_slab_alloc+0xe0>)
    7898:	4806      	ldr	r0, [pc, #24]	; (78b4 <k_mem_slab_alloc+0xd0>)
    789a:	f003 fbe6 	bl	b06a <printk>
    789e:	4629      	mov	r1, r5
    78a0:	4809      	ldr	r0, [pc, #36]	; (78c8 <k_mem_slab_alloc+0xe4>)
    78a2:	f003 fbe2 	bl	b06a <printk>
    78a6:	21ac      	movs	r1, #172	; 0xac
    78a8:	4630      	mov	r0, r6
    78aa:	f003 fd37 	bl	b31c <assert_post_action>
    78ae:	e7bf      	b.n	7830 <k_mem_slab_alloc+0x4c>
    78b0:	0000c5dc 	.word	0x0000c5dc
    78b4:	0000c46c 	.word	0x0000c46c
    78b8:	0000c5f4 	.word	0x0000c5f4
    78bc:	2000121c 	.word	0x2000121c
    78c0:	0000c584 	.word	0x0000c584
    78c4:	0000c5ac 	.word	0x0000c5ac
    78c8:	0000c5c4 	.word	0x0000c5c4

000078cc <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    78cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    78d0:	4604      	mov	r4, r0
    78d2:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    78d4:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    78d8:	f04f 0320 	mov.w	r3, #32
    78dc:	f3ef 8711 	mrs	r7, BASEPRI
    78e0:	f383 8812 	msr	BASEPRI_MAX, r3
    78e4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    78e8:	4630      	mov	r0, r6
    78ea:	f000 f87b 	bl	79e4 <z_spin_lock_valid>
    78ee:	b1b0      	cbz	r0, 791e <k_mem_slab_free+0x52>
	z_spin_lock_set_owner(l);
    78f0:	4630      	mov	r0, r6
    78f2:	f000 f897 	bl	7a24 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    78f6:	69a3      	ldr	r3, [r4, #24]
    78f8:	b313      	cbz	r3, 7940 <k_mem_slab_free+0x74>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    78fa:	682b      	ldr	r3, [r5, #0]
    78fc:	69a2      	ldr	r2, [r4, #24]
    78fe:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    7900:	682b      	ldr	r3, [r5, #0]
    7902:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    7904:	69e3      	ldr	r3, [r4, #28]
    7906:	3b01      	subs	r3, #1
    7908:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    790a:	4630      	mov	r0, r6
    790c:	f000 f87a 	bl	7a04 <z_spin_unlock_valid>
    7910:	b338      	cbz	r0, 7962 <k_mem_slab_free+0x96>
	__asm__ volatile(
    7912:	f387 8811 	msr	BASEPRI, r7
    7916:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    791a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    791e:	f8df 8070 	ldr.w	r8, [pc, #112]	; 7990 <k_mem_slab_free+0xc4>
    7922:	2381      	movs	r3, #129	; 0x81
    7924:	4642      	mov	r2, r8
    7926:	4917      	ldr	r1, [pc, #92]	; (7984 <k_mem_slab_free+0xb8>)
    7928:	4817      	ldr	r0, [pc, #92]	; (7988 <k_mem_slab_free+0xbc>)
    792a:	f003 fb9e 	bl	b06a <printk>
    792e:	4631      	mov	r1, r6
    7930:	4816      	ldr	r0, [pc, #88]	; (798c <k_mem_slab_free+0xc0>)
    7932:	f003 fb9a 	bl	b06a <printk>
    7936:	2181      	movs	r1, #129	; 0x81
    7938:	4640      	mov	r0, r8
    793a:	f003 fcef 	bl	b31c <assert_post_action>
    793e:	e7d7      	b.n	78f0 <k_mem_slab_free+0x24>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    7940:	4620      	mov	r0, r4
    7942:	f001 fdc1 	bl	94c8 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    7946:	2800      	cmp	r0, #0
    7948:	d0d7      	beq.n	78fa <k_mem_slab_free+0x2e>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    794a:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    794c:	2100      	movs	r1, #0
    794e:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    7952:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    7954:	f001 f942 	bl	8bdc <z_ready_thread>
			z_reschedule(&slab->lock, key);
    7958:	4639      	mov	r1, r7
    795a:	4630      	mov	r0, r6
    795c:	f000 fe5e 	bl	861c <z_reschedule>
			return;
    7960:	e7db      	b.n	791a <k_mem_slab_free+0x4e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7962:	4c0b      	ldr	r4, [pc, #44]	; (7990 <k_mem_slab_free+0xc4>)
    7964:	23ac      	movs	r3, #172	; 0xac
    7966:	4622      	mov	r2, r4
    7968:	490a      	ldr	r1, [pc, #40]	; (7994 <k_mem_slab_free+0xc8>)
    796a:	4807      	ldr	r0, [pc, #28]	; (7988 <k_mem_slab_free+0xbc>)
    796c:	f003 fb7d 	bl	b06a <printk>
    7970:	4631      	mov	r1, r6
    7972:	4809      	ldr	r0, [pc, #36]	; (7998 <k_mem_slab_free+0xcc>)
    7974:	f003 fb79 	bl	b06a <printk>
    7978:	21ac      	movs	r1, #172	; 0xac
    797a:	4620      	mov	r0, r4
    797c:	f003 fcce 	bl	b31c <assert_post_action>
    7980:	e7c7      	b.n	7912 <k_mem_slab_free+0x46>
    7982:	bf00      	nop
    7984:	0000c5dc 	.word	0x0000c5dc
    7988:	0000c46c 	.word	0x0000c46c
    798c:	0000c5f4 	.word	0x0000c5f4
    7990:	0000c584 	.word	0x0000c584
    7994:	0000c5ac 	.word	0x0000c5ac
    7998:	0000c5c4 	.word	0x0000c5c4

0000799c <z_impl_k_thread_name_set>:
	k_spin_unlock(&z_thread_monitor_lock, key);
}
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
    799c:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
    799e:	4604      	mov	r4, r0
    79a0:	b140      	cbz	r0, 79b4 <z_impl_k_thread_name_set+0x18>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
    79a2:	2220      	movs	r2, #32
    79a4:	f104 0078 	add.w	r0, r4, #120	; 0x78
    79a8:	f003 fd73 	bl	b492 <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    79ac:	2000      	movs	r0, #0
    79ae:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
    79b2:	bd10      	pop	{r4, pc}
		thread = _current;
    79b4:	4b01      	ldr	r3, [pc, #4]	; (79bc <z_impl_k_thread_name_set+0x20>)
    79b6:	689c      	ldr	r4, [r3, #8]
    79b8:	e7f3      	b.n	79a2 <z_impl_k_thread_name_set+0x6>
    79ba:	bf00      	nop
    79bc:	2000121c 	.word	0x2000121c

000079c0 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    79c0:	b538      	push	{r3, r4, r5, lr}
    79c2:	4614      	mov	r4, r2
    79c4:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    79c6:	ea54 0305 	orrs.w	r3, r4, r5
    79ca:	d102      	bne.n	79d2 <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
    79cc:	f004 fa01 	bl	bdd2 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    79d0:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    79d2:	462b      	mov	r3, r5
    79d4:	4902      	ldr	r1, [pc, #8]	; (79e0 <schedule_new_thread+0x20>)
    79d6:	3018      	adds	r0, #24
    79d8:	f002 f942 	bl	9c60 <z_add_timeout>
    79dc:	e7f8      	b.n	79d0 <schedule_new_thread+0x10>
    79de:	bf00      	nop
    79e0:	00008d39 	.word	0x00008d39

000079e4 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    79e4:	6803      	ldr	r3, [r0, #0]

	if (thread_cpu != 0U) {
    79e6:	b13b      	cbz	r3, 79f8 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    79e8:	f003 0303 	and.w	r3, r3, #3
    79ec:	4a04      	ldr	r2, [pc, #16]	; (7a00 <z_spin_lock_valid+0x1c>)
    79ee:	7d12      	ldrb	r2, [r2, #20]
    79f0:	4293      	cmp	r3, r2
    79f2:	d003      	beq.n	79fc <z_spin_lock_valid+0x18>
			return false;
		}
	}
	return true;
    79f4:	2001      	movs	r0, #1
    79f6:	4770      	bx	lr
    79f8:	2001      	movs	r0, #1
    79fa:	4770      	bx	lr
			return false;
    79fc:	2000      	movs	r0, #0
}
    79fe:	4770      	bx	lr
    7a00:	2000121c 	.word	0x2000121c

00007a04 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    7a04:	6801      	ldr	r1, [r0, #0]
    7a06:	4a06      	ldr	r2, [pc, #24]	; (7a20 <z_spin_unlock_valid+0x1c>)
    7a08:	7d13      	ldrb	r3, [r2, #20]
    7a0a:	6892      	ldr	r2, [r2, #8]
    7a0c:	4313      	orrs	r3, r2
    7a0e:	4299      	cmp	r1, r3
    7a10:	d103      	bne.n	7a1a <z_spin_unlock_valid+0x16>
		return false;
	}
	l->thread_cpu = 0;
    7a12:	2300      	movs	r3, #0
    7a14:	6003      	str	r3, [r0, #0]
	return true;
    7a16:	2001      	movs	r0, #1
    7a18:	4770      	bx	lr
		return false;
    7a1a:	2000      	movs	r0, #0
}
    7a1c:	4770      	bx	lr
    7a1e:	bf00      	nop
    7a20:	2000121c 	.word	0x2000121c

00007a24 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    7a24:	4a02      	ldr	r2, [pc, #8]	; (7a30 <z_spin_lock_set_owner+0xc>)
    7a26:	7d13      	ldrb	r3, [r2, #20]
    7a28:	6892      	ldr	r2, [r2, #8]
    7a2a:	4313      	orrs	r3, r2
    7a2c:	6003      	str	r3, [r0, #0]
}
    7a2e:	4770      	bx	lr
    7a30:	2000121c 	.word	0x2000121c

00007a34 <z_thread_monitor_exit>:
{
    7a34:	b570      	push	{r4, r5, r6, lr}
    7a36:	4604      	mov	r4, r0
	__asm__ volatile(
    7a38:	f04f 0320 	mov.w	r3, #32
    7a3c:	f3ef 8511 	mrs	r5, BASEPRI
    7a40:	f383 8812 	msr	BASEPRI_MAX, r3
    7a44:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7a48:	481f      	ldr	r0, [pc, #124]	; (7ac8 <z_thread_monitor_exit+0x94>)
    7a4a:	f7ff ffcb 	bl	79e4 <z_spin_lock_valid>
    7a4e:	b150      	cbz	r0, 7a66 <z_thread_monitor_exit+0x32>
	z_spin_lock_set_owner(l);
    7a50:	481d      	ldr	r0, [pc, #116]	; (7ac8 <z_thread_monitor_exit+0x94>)
    7a52:	f7ff ffe7 	bl	7a24 <z_spin_lock_set_owner>
	if (thread == _kernel.threads) {
    7a56:	4b1d      	ldr	r3, [pc, #116]	; (7acc <z_thread_monitor_exit+0x98>)
    7a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7a5a:	42a3      	cmp	r3, r4
    7a5c:	d114      	bne.n	7a88 <z_thread_monitor_exit+0x54>
		_kernel.threads = _kernel.threads->next_thread;
    7a5e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
    7a60:	4b1a      	ldr	r3, [pc, #104]	; (7acc <z_thread_monitor_exit+0x98>)
    7a62:	629a      	str	r2, [r3, #40]	; 0x28
    7a64:	e017      	b.n	7a96 <z_thread_monitor_exit+0x62>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7a66:	4e1a      	ldr	r6, [pc, #104]	; (7ad0 <z_thread_monitor_exit+0x9c>)
    7a68:	2381      	movs	r3, #129	; 0x81
    7a6a:	4632      	mov	r2, r6
    7a6c:	4919      	ldr	r1, [pc, #100]	; (7ad4 <z_thread_monitor_exit+0xa0>)
    7a6e:	481a      	ldr	r0, [pc, #104]	; (7ad8 <z_thread_monitor_exit+0xa4>)
    7a70:	f003 fafb 	bl	b06a <printk>
    7a74:	4914      	ldr	r1, [pc, #80]	; (7ac8 <z_thread_monitor_exit+0x94>)
    7a76:	4819      	ldr	r0, [pc, #100]	; (7adc <z_thread_monitor_exit+0xa8>)
    7a78:	f003 faf7 	bl	b06a <printk>
    7a7c:	2181      	movs	r1, #129	; 0x81
    7a7e:	4630      	mov	r0, r6
    7a80:	f003 fc4c 	bl	b31c <assert_post_action>
    7a84:	e7e4      	b.n	7a50 <z_thread_monitor_exit+0x1c>
			prev_thread = prev_thread->next_thread;
    7a86:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    7a88:	b113      	cbz	r3, 7a90 <z_thread_monitor_exit+0x5c>
			(thread != prev_thread->next_thread)) {
    7a8a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
    7a8c:	42a2      	cmp	r2, r4
    7a8e:	d1fa      	bne.n	7a86 <z_thread_monitor_exit+0x52>
		if (prev_thread != NULL) {
    7a90:	b10b      	cbz	r3, 7a96 <z_thread_monitor_exit+0x62>
			prev_thread->next_thread = thread->next_thread;
    7a92:	6f62      	ldr	r2, [r4, #116]	; 0x74
    7a94:	675a      	str	r2, [r3, #116]	; 0x74
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7a96:	480c      	ldr	r0, [pc, #48]	; (7ac8 <z_thread_monitor_exit+0x94>)
    7a98:	f7ff ffb4 	bl	7a04 <z_spin_unlock_valid>
    7a9c:	b120      	cbz	r0, 7aa8 <z_thread_monitor_exit+0x74>
	__asm__ volatile(
    7a9e:	f385 8811 	msr	BASEPRI, r5
    7aa2:	f3bf 8f6f 	isb	sy
}
    7aa6:	bd70      	pop	{r4, r5, r6, pc}
    7aa8:	4c09      	ldr	r4, [pc, #36]	; (7ad0 <z_thread_monitor_exit+0x9c>)
    7aaa:	23ac      	movs	r3, #172	; 0xac
    7aac:	4622      	mov	r2, r4
    7aae:	490c      	ldr	r1, [pc, #48]	; (7ae0 <z_thread_monitor_exit+0xac>)
    7ab0:	4809      	ldr	r0, [pc, #36]	; (7ad8 <z_thread_monitor_exit+0xa4>)
    7ab2:	f003 fada 	bl	b06a <printk>
    7ab6:	4904      	ldr	r1, [pc, #16]	; (7ac8 <z_thread_monitor_exit+0x94>)
    7ab8:	480a      	ldr	r0, [pc, #40]	; (7ae4 <z_thread_monitor_exit+0xb0>)
    7aba:	f003 fad6 	bl	b06a <printk>
    7abe:	21ac      	movs	r1, #172	; 0xac
    7ac0:	4620      	mov	r0, r4
    7ac2:	f003 fc2b 	bl	b31c <assert_post_action>
    7ac6:	e7ea      	b.n	7a9e <z_thread_monitor_exit+0x6a>
    7ac8:	20001248 	.word	0x20001248
    7acc:	2000121c 	.word	0x2000121c
    7ad0:	0000c584 	.word	0x0000c584
    7ad4:	0000c5dc 	.word	0x0000c5dc
    7ad8:	0000c46c 	.word	0x0000c46c
    7adc:	0000c5f4 	.word	0x0000c5f4
    7ae0:	0000c5ac 	.word	0x0000c5ac
    7ae4:	0000c5c4 	.word	0x0000c5c4

00007ae8 <z_setup_new_thread>:
{
    7ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7aec:	b085      	sub	sp, #20
    7aee:	4604      	mov	r4, r0
    7af0:	460e      	mov	r6, r1
    7af2:	4690      	mov	r8, r2
    7af4:	461d      	mov	r5, r3
    7af6:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    7afa:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
    7afe:	9f11      	ldr	r7, [sp, #68]	; 0x44
	Z_ASSERT_VALID_PRIO(prio, entry);
    7b00:	2f0f      	cmp	r7, #15
    7b02:	d05e      	beq.n	7bc2 <z_setup_new_thread+0xda>
    7b04:	f107 0310 	add.w	r3, r7, #16
    7b08:	2b1e      	cmp	r3, #30
    7b0a:	d85e      	bhi.n	7bca <z_setup_new_thread+0xe2>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    7b0c:	f104 0358 	add.w	r3, r4, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    7b10:	65a3      	str	r3, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    7b12:	65e3      	str	r3, [r4, #92]	; 0x5c
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    7b14:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7b16:	2204      	movs	r2, #4
    7b18:	4639      	mov	r1, r7
    7b1a:	4620      	mov	r0, r4
    7b1c:	f004 f95d 	bl	bdda <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    7b20:	4642      	mov	r2, r8
    7b22:	4631      	mov	r1, r6
    7b24:	4620      	mov	r0, r4
    7b26:	f004 f93c 	bl	bda2 <setup_thread_stack>
    7b2a:	4607      	mov	r7, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7b2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7b2e:	9302      	str	r3, [sp, #8]
    7b30:	f8cd a004 	str.w	sl, [sp, #4]
    7b34:	f8cd b000 	str.w	fp, [sp]
    7b38:	462b      	mov	r3, r5
    7b3a:	4602      	mov	r2, r0
    7b3c:	4631      	mov	r1, r6
    7b3e:	4620      	mov	r0, r4
    7b40:	f7fb fa00 	bl	2f44 <arch_new_thread>
	new_thread->init_data = NULL;
    7b44:	2300      	movs	r3, #0
    7b46:	6563      	str	r3, [r4, #84]	; 0x54
	new_thread->entry.pEntry = entry;
    7b48:	6665      	str	r5, [r4, #100]	; 0x64
	new_thread->entry.parameter1 = p1;
    7b4a:	f8c4 b068 	str.w	fp, [r4, #104]	; 0x68
	new_thread->entry.parameter2 = p2;
    7b4e:	f8c4 a06c 	str.w	sl, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
    7b52:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7b54:	6723      	str	r3, [r4, #112]	; 0x70
	__asm__ volatile(
    7b56:	f04f 0320 	mov.w	r3, #32
    7b5a:	f3ef 8611 	mrs	r6, BASEPRI
    7b5e:	f383 8812 	msr	BASEPRI_MAX, r3
    7b62:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7b66:	4837      	ldr	r0, [pc, #220]	; (7c44 <z_setup_new_thread+0x15c>)
    7b68:	f7ff ff3c 	bl	79e4 <z_spin_lock_valid>
    7b6c:	2800      	cmp	r0, #0
    7b6e:	d042      	beq.n	7bf6 <z_setup_new_thread+0x10e>
	z_spin_lock_set_owner(l);
    7b70:	4d34      	ldr	r5, [pc, #208]	; (7c44 <z_setup_new_thread+0x15c>)
    7b72:	4628      	mov	r0, r5
    7b74:	f7ff ff56 	bl	7a24 <z_spin_lock_set_owner>
	new_thread->next_thread = _kernel.threads;
    7b78:	4b33      	ldr	r3, [pc, #204]	; (7c48 <z_setup_new_thread+0x160>)
    7b7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    7b7c:	6762      	str	r2, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
    7b7e:	629c      	str	r4, [r3, #40]	; 0x28
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7b80:	4628      	mov	r0, r5
    7b82:	f7ff ff3f 	bl	7a04 <z_spin_unlock_valid>
    7b86:	2800      	cmp	r0, #0
    7b88:	d045      	beq.n	7c16 <z_setup_new_thread+0x12e>
	__asm__ volatile(
    7b8a:	f386 8811 	msr	BASEPRI, r6
    7b8e:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
    7b92:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    7b94:	2b00      	cmp	r3, #0
    7b96:	d04e      	beq.n	7c36 <z_setup_new_thread+0x14e>
		strncpy(new_thread->name, name,
    7b98:	221f      	movs	r2, #31
    7b9a:	4619      	mov	r1, r3
    7b9c:	f104 0078 	add.w	r0, r4, #120	; 0x78
    7ba0:	f003 fc77 	bl	b492 <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    7ba4:	2300      	movs	r3, #0
    7ba6:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
	if (!_current) {
    7baa:	4b27      	ldr	r3, [pc, #156]	; (7c48 <z_setup_new_thread+0x160>)
    7bac:	689b      	ldr	r3, [r3, #8]
    7bae:	2b00      	cmp	r3, #0
    7bb0:	d045      	beq.n	7c3e <z_setup_new_thread+0x156>
	new_thread->resource_pool = _current->resource_pool;
    7bb2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    7bb6:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
}
    7bba:	4638      	mov	r0, r7
    7bbc:	b005      	add	sp, #20
    7bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    7bc2:	4b22      	ldr	r3, [pc, #136]	; (7c4c <z_setup_new_thread+0x164>)
    7bc4:	429d      	cmp	r5, r3
    7bc6:	d19d      	bne.n	7b04 <z_setup_new_thread+0x1c>
    7bc8:	e7a0      	b.n	7b0c <z_setup_new_thread+0x24>
    7bca:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 7c70 <z_setup_new_thread+0x188>
    7bce:	f240 13ff 	movw	r3, #511	; 0x1ff
    7bd2:	464a      	mov	r2, r9
    7bd4:	491e      	ldr	r1, [pc, #120]	; (7c50 <z_setup_new_thread+0x168>)
    7bd6:	481f      	ldr	r0, [pc, #124]	; (7c54 <z_setup_new_thread+0x16c>)
    7bd8:	f003 fa47 	bl	b06a <printk>
    7bdc:	f06f 030f 	mvn.w	r3, #15
    7be0:	220e      	movs	r2, #14
    7be2:	4639      	mov	r1, r7
    7be4:	481c      	ldr	r0, [pc, #112]	; (7c58 <z_setup_new_thread+0x170>)
    7be6:	f003 fa40 	bl	b06a <printk>
    7bea:	f240 11ff 	movw	r1, #511	; 0x1ff
    7bee:	4648      	mov	r0, r9
    7bf0:	f003 fb94 	bl	b31c <assert_post_action>
    7bf4:	e78a      	b.n	7b0c <z_setup_new_thread+0x24>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7bf6:	4d19      	ldr	r5, [pc, #100]	; (7c5c <z_setup_new_thread+0x174>)
    7bf8:	2381      	movs	r3, #129	; 0x81
    7bfa:	462a      	mov	r2, r5
    7bfc:	4918      	ldr	r1, [pc, #96]	; (7c60 <z_setup_new_thread+0x178>)
    7bfe:	4815      	ldr	r0, [pc, #84]	; (7c54 <z_setup_new_thread+0x16c>)
    7c00:	f003 fa33 	bl	b06a <printk>
    7c04:	490f      	ldr	r1, [pc, #60]	; (7c44 <z_setup_new_thread+0x15c>)
    7c06:	4817      	ldr	r0, [pc, #92]	; (7c64 <z_setup_new_thread+0x17c>)
    7c08:	f003 fa2f 	bl	b06a <printk>
    7c0c:	2181      	movs	r1, #129	; 0x81
    7c0e:	4628      	mov	r0, r5
    7c10:	f003 fb84 	bl	b31c <assert_post_action>
    7c14:	e7ac      	b.n	7b70 <z_setup_new_thread+0x88>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7c16:	4d11      	ldr	r5, [pc, #68]	; (7c5c <z_setup_new_thread+0x174>)
    7c18:	23ac      	movs	r3, #172	; 0xac
    7c1a:	462a      	mov	r2, r5
    7c1c:	4912      	ldr	r1, [pc, #72]	; (7c68 <z_setup_new_thread+0x180>)
    7c1e:	480d      	ldr	r0, [pc, #52]	; (7c54 <z_setup_new_thread+0x16c>)
    7c20:	f003 fa23 	bl	b06a <printk>
    7c24:	4907      	ldr	r1, [pc, #28]	; (7c44 <z_setup_new_thread+0x15c>)
    7c26:	4811      	ldr	r0, [pc, #68]	; (7c6c <z_setup_new_thread+0x184>)
    7c28:	f003 fa1f 	bl	b06a <printk>
    7c2c:	21ac      	movs	r1, #172	; 0xac
    7c2e:	4628      	mov	r0, r5
    7c30:	f003 fb74 	bl	b31c <assert_post_action>
    7c34:	e7a9      	b.n	7b8a <z_setup_new_thread+0xa2>
		new_thread->name[0] = '\0';
    7c36:	2300      	movs	r3, #0
    7c38:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    7c3c:	e7b5      	b.n	7baa <z_setup_new_thread+0xc2>
		new_thread->resource_pool = NULL;
    7c3e:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		return stack_ptr;
    7c42:	e7ba      	b.n	7bba <z_setup_new_thread+0xd2>
    7c44:	20001248 	.word	0x20001248
    7c48:	2000121c 	.word	0x2000121c
    7c4c:	00007e01 	.word	0x00007e01
    7c50:	0000d194 	.word	0x0000d194
    7c54:	0000c46c 	.word	0x0000c46c
    7c58:	0000d214 	.word	0x0000d214
    7c5c:	0000c584 	.word	0x0000c584
    7c60:	0000c5dc 	.word	0x0000c5dc
    7c64:	0000c5f4 	.word	0x0000c5f4
    7c68:	0000c5ac 	.word	0x0000c5ac
    7c6c:	0000c5c4 	.word	0x0000c5c4
    7c70:	0000d13c 	.word	0x0000d13c

00007c74 <z_impl_k_thread_create>:
{
    7c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7c78:	b086      	sub	sp, #24
    7c7a:	4604      	mov	r4, r0
    7c7c:	460d      	mov	r5, r1
    7c7e:	4616      	mov	r6, r2
    7c80:	461f      	mov	r7, r3
    7c82:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    7c86:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    7c8a:	b9db      	cbnz	r3, 7cc4 <z_impl_k_thread_create+0x50>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    7c8c:	2300      	movs	r3, #0
    7c8e:	9305      	str	r3, [sp, #20]
    7c90:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7c92:	9304      	str	r3, [sp, #16]
    7c94:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7c96:	9303      	str	r3, [sp, #12]
    7c98:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7c9a:	9302      	str	r3, [sp, #8]
    7c9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7c9e:	9301      	str	r3, [sp, #4]
    7ca0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7ca2:	9300      	str	r3, [sp, #0]
    7ca4:	463b      	mov	r3, r7
    7ca6:	4632      	mov	r2, r6
    7ca8:	4629      	mov	r1, r5
    7caa:	4620      	mov	r0, r4
    7cac:	f7ff ff1c 	bl	7ae8 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    7cb0:	f1b9 3fff 	cmp.w	r9, #4294967295
    7cb4:	bf08      	it	eq
    7cb6:	f1b8 3fff 	cmpeq.w	r8, #4294967295
    7cba:	d115      	bne.n	7ce8 <z_impl_k_thread_create+0x74>
}
    7cbc:	4620      	mov	r0, r4
    7cbe:	b006      	add	sp, #24
    7cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    7cc4:	f8df a038 	ldr.w	sl, [pc, #56]	; 7d00 <z_impl_k_thread_create+0x8c>
    7cc8:	f44f 731a 	mov.w	r3, #616	; 0x268
    7ccc:	4652      	mov	r2, sl
    7cce:	4909      	ldr	r1, [pc, #36]	; (7cf4 <z_impl_k_thread_create+0x80>)
    7cd0:	4809      	ldr	r0, [pc, #36]	; (7cf8 <z_impl_k_thread_create+0x84>)
    7cd2:	f003 f9ca 	bl	b06a <printk>
    7cd6:	4809      	ldr	r0, [pc, #36]	; (7cfc <z_impl_k_thread_create+0x88>)
    7cd8:	f003 f9c7 	bl	b06a <printk>
    7cdc:	f44f 711a 	mov.w	r1, #616	; 0x268
    7ce0:	4650      	mov	r0, sl
    7ce2:	f003 fb1b 	bl	b31c <assert_post_action>
    7ce6:	e7d1      	b.n	7c8c <z_impl_k_thread_create+0x18>
		schedule_new_thread(new_thread, delay);
    7ce8:	4642      	mov	r2, r8
    7cea:	464b      	mov	r3, r9
    7cec:	4620      	mov	r0, r4
    7cee:	f7ff fe67 	bl	79c0 <schedule_new_thread>
    7cf2:	e7e3      	b.n	7cbc <z_impl_k_thread_create+0x48>
    7cf4:	0000d248 	.word	0x0000d248
    7cf8:	0000c46c 	.word	0x0000c46c
    7cfc:	0000d25c 	.word	0x0000d25c
    7d00:	0000d13c 	.word	0x0000d13c

00007d04 <z_init_static_threads>:
{
    7d04:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    7d08:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
    7d0a:	4c37      	ldr	r4, [pc, #220]	; (7de8 <z_init_static_threads+0xe4>)
    7d0c:	e027      	b.n	7d5e <z_init_static_threads+0x5a>
    7d0e:	4d37      	ldr	r5, [pc, #220]	; (7dec <z_init_static_threads+0xe8>)
    7d10:	f240 23cf 	movw	r3, #719	; 0x2cf
    7d14:	462a      	mov	r2, r5
    7d16:	4936      	ldr	r1, [pc, #216]	; (7df0 <z_init_static_threads+0xec>)
    7d18:	4836      	ldr	r0, [pc, #216]	; (7df4 <z_init_static_threads+0xf0>)
    7d1a:	f003 f9a6 	bl	b06a <printk>
    7d1e:	4836      	ldr	r0, [pc, #216]	; (7df8 <z_init_static_threads+0xf4>)
    7d20:	f003 f9a3 	bl	b06a <printk>
    7d24:	f240 21cf 	movw	r1, #719	; 0x2cf
    7d28:	4628      	mov	r0, r5
    7d2a:	f003 faf7 	bl	b31c <assert_post_action>
    7d2e:	4b33      	ldr	r3, [pc, #204]	; (7dfc <z_init_static_threads+0xf8>)
    7d30:	429c      	cmp	r4, r3
    7d32:	d218      	bcs.n	7d66 <z_init_static_threads+0x62>
		z_setup_new_thread(
    7d34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    7d36:	9305      	str	r3, [sp, #20]
    7d38:	6a23      	ldr	r3, [r4, #32]
    7d3a:	9304      	str	r3, [sp, #16]
    7d3c:	69e3      	ldr	r3, [r4, #28]
    7d3e:	9303      	str	r3, [sp, #12]
    7d40:	69a3      	ldr	r3, [r4, #24]
    7d42:	9302      	str	r3, [sp, #8]
    7d44:	6963      	ldr	r3, [r4, #20]
    7d46:	9301      	str	r3, [sp, #4]
    7d48:	6923      	ldr	r3, [r4, #16]
    7d4a:	9300      	str	r3, [sp, #0]
    7d4c:	68e3      	ldr	r3, [r4, #12]
    7d4e:	68a2      	ldr	r2, [r4, #8]
    7d50:	6861      	ldr	r1, [r4, #4]
    7d52:	6820      	ldr	r0, [r4, #0]
    7d54:	f7ff fec8 	bl	7ae8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    7d58:	6823      	ldr	r3, [r4, #0]
    7d5a:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    7d5c:	3430      	adds	r4, #48	; 0x30
    7d5e:	4b27      	ldr	r3, [pc, #156]	; (7dfc <z_init_static_threads+0xf8>)
    7d60:	429c      	cmp	r4, r3
    7d62:	d9e4      	bls.n	7d2e <z_init_static_threads+0x2a>
    7d64:	e7d3      	b.n	7d0e <z_init_static_threads+0xa>
	k_sched_lock();
    7d66:	f000 fca7 	bl	86b8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    7d6a:	4c1f      	ldr	r4, [pc, #124]	; (7de8 <z_init_static_threads+0xe4>)
    7d6c:	e01b      	b.n	7da6 <z_init_static_threads+0xa2>
			schedule_new_thread(thread_data->init_thread,
    7d6e:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    7d70:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    7d74:	ea4f 79e3 	mov.w	r9, r3, asr #31
    7d78:	ea4f 31c9 	mov.w	r1, r9, lsl #15
    7d7c:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
    7d80:	03d8      	lsls	r0, r3, #15
    7d82:	f240 35e7 	movw	r5, #999	; 0x3e7
    7d86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7d8a:	2300      	movs	r3, #0
    7d8c:	1940      	adds	r0, r0, r5
    7d8e:	f04f 0500 	mov.w	r5, #0
    7d92:	eb45 0101 	adc.w	r1, r5, r1
    7d96:	f7f9 f8eb 	bl	f70 <__aeabi_uldivmod>
    7d9a:	4602      	mov	r2, r0
    7d9c:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    7d9e:	4630      	mov	r0, r6
    7da0:	f7ff fe0e 	bl	79c0 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
    7da4:	3430      	adds	r4, #48	; 0x30
    7da6:	4b15      	ldr	r3, [pc, #84]	; (7dfc <z_init_static_threads+0xf8>)
    7da8:	429c      	cmp	r4, r3
    7daa:	d807      	bhi.n	7dbc <z_init_static_threads+0xb8>
    7dac:	4b13      	ldr	r3, [pc, #76]	; (7dfc <z_init_static_threads+0xf8>)
    7dae:	429c      	cmp	r4, r3
    7db0:	d215      	bcs.n	7dde <z_init_static_threads+0xda>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    7db2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7db4:	f1b3 3fff 	cmp.w	r3, #4294967295
    7db8:	d0f4      	beq.n	7da4 <z_init_static_threads+0xa0>
    7dba:	e7d8      	b.n	7d6e <z_init_static_threads+0x6a>
	_FOREACH_STATIC_THREAD(thread_data) {
    7dbc:	4d0b      	ldr	r5, [pc, #44]	; (7dec <z_init_static_threads+0xe8>)
    7dbe:	f240 23ee 	movw	r3, #750	; 0x2ee
    7dc2:	462a      	mov	r2, r5
    7dc4:	490a      	ldr	r1, [pc, #40]	; (7df0 <z_init_static_threads+0xec>)
    7dc6:	480b      	ldr	r0, [pc, #44]	; (7df4 <z_init_static_threads+0xf0>)
    7dc8:	f003 f94f 	bl	b06a <printk>
    7dcc:	480a      	ldr	r0, [pc, #40]	; (7df8 <z_init_static_threads+0xf4>)
    7dce:	f003 f94c 	bl	b06a <printk>
    7dd2:	f240 21ee 	movw	r1, #750	; 0x2ee
    7dd6:	4628      	mov	r0, r5
    7dd8:	f003 faa0 	bl	b31c <assert_post_action>
    7ddc:	e7e6      	b.n	7dac <z_init_static_threads+0xa8>
	k_sched_unlock();
    7dde:	f001 fa31 	bl	9244 <k_sched_unlock>
}
    7de2:	b006      	add	sp, #24
    7de4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    7de8:	20000208 	.word	0x20000208
    7dec:	0000d13c 	.word	0x0000d13c
    7df0:	0000d284 	.word	0x0000d284
    7df4:	0000c46c 	.word	0x0000c46c
    7df8:	0000d11c 	.word	0x0000d11c
    7dfc:	20000208 	.word	0x20000208

00007e00 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    7e00:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    7e02:	4b12      	ldr	r3, [pc, #72]	; (7e4c <idle+0x4c>)
    7e04:	689b      	ldr	r3, [r3, #8]
    7e06:	f993 300e 	ldrsb.w	r3, [r3, #14]
    7e0a:	2b00      	cmp	r3, #0
    7e0c:	da0d      	bge.n	7e2a <idle+0x2a>
    7e0e:	4c10      	ldr	r4, [pc, #64]	; (7e50 <idle+0x50>)
    7e10:	2327      	movs	r3, #39	; 0x27
    7e12:	4622      	mov	r2, r4
    7e14:	490f      	ldr	r1, [pc, #60]	; (7e54 <idle+0x54>)
    7e16:	4810      	ldr	r0, [pc, #64]	; (7e58 <idle+0x58>)
    7e18:	f003 f927 	bl	b06a <printk>
    7e1c:	2127      	movs	r1, #39	; 0x27
    7e1e:	4620      	mov	r0, r4
    7e20:	f003 fa7c 	bl	b31c <assert_post_action>
    7e24:	e001      	b.n	7e2a <idle+0x2a>
	arch_cpu_idle();
    7e26:	f7fa ffa9 	bl	2d7c <arch_cpu_idle>
	__asm__ volatile(
    7e2a:	f04f 0220 	mov.w	r2, #32
    7e2e:	f3ef 8311 	mrs	r3, BASEPRI
    7e32:	f382 8812 	msr	BASEPRI_MAX, r2
    7e36:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    7e3a:	f002 f867 	bl	9f0c <z_get_next_timeout_expiry>
    7e3e:	4b03      	ldr	r3, [pc, #12]	; (7e4c <idle+0x4c>)
    7e40:	6198      	str	r0, [r3, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
    7e42:	f7fa fdcb 	bl	29dc <pm_system_suspend>
    7e46:	2800      	cmp	r0, #0
    7e48:	d1ef      	bne.n	7e2a <idle+0x2a>
    7e4a:	e7ec      	b.n	7e26 <idle+0x26>
    7e4c:	2000121c 	.word	0x2000121c
    7e50:	0000d2b4 	.word	0x0000d2b4
    7e54:	0000d2d8 	.word	0x0000d2d8
    7e58:	0000c46c 	.word	0x0000c46c

00007e5c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    7e5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7e60:	b083      	sub	sp, #12
    7e62:	4604      	mov	r4, r0
    7e64:	4616      	mov	r6, r2
    7e66:	461d      	mov	r5, r3
    7e68:	f3ef 8105 	mrs	r1, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    7e6c:	2900      	cmp	r1, #0
    7e6e:	d12b      	bne.n	7ec8 <z_impl_k_mutex_lock+0x6c>
    7e70:	f04f 0320 	mov.w	r3, #32
    7e74:	f3ef 8711 	mrs	r7, BASEPRI
    7e78:	f383 8812 	msr	BASEPRI_MAX, r3
    7e7c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7e80:	487b      	ldr	r0, [pc, #492]	; (8070 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x70>)
    7e82:	f7ff fdaf 	bl	79e4 <z_spin_lock_valid>
    7e86:	2800      	cmp	r0, #0
    7e88:	d02d      	beq.n	7ee6 <z_impl_k_mutex_lock+0x8a>
	z_spin_lock_set_owner(l);
    7e8a:	4879      	ldr	r0, [pc, #484]	; (8070 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x70>)
    7e8c:	f7ff fdca 	bl	7a24 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    7e90:	68e1      	ldr	r1, [r4, #12]
    7e92:	2900      	cmp	r1, #0
    7e94:	d138      	bne.n	7f08 <z_impl_k_mutex_lock+0xac>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    7e96:	2900      	cmp	r1, #0
    7e98:	d17d      	bne.n	7f96 <z_impl_k_mutex_lock+0x13a>
    7e9a:	4b76      	ldr	r3, [pc, #472]	; (8074 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x74>)
    7e9c:	689b      	ldr	r3, [r3, #8]
    7e9e:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    7ea2:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    7ea4:	3101      	adds	r1, #1
    7ea6:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    7ea8:	4b72      	ldr	r3, [pc, #456]	; (8074 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x74>)
    7eaa:	689b      	ldr	r3, [r3, #8]
    7eac:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7eae:	4870      	ldr	r0, [pc, #448]	; (8070 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x70>)
    7eb0:	f7ff fda8 	bl	7a04 <z_spin_unlock_valid>
    7eb4:	2800      	cmp	r0, #0
    7eb6:	d070      	beq.n	7f9a <z_impl_k_mutex_lock+0x13e>
	__asm__ volatile(
    7eb8:	f387 8811 	msr	BASEPRI, r7
    7ebc:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    7ec0:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    7ec2:	b003      	add	sp, #12
    7ec4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    7ec8:	4f6b      	ldr	r7, [pc, #428]	; (8078 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x78>)
    7eca:	2365      	movs	r3, #101	; 0x65
    7ecc:	463a      	mov	r2, r7
    7ece:	496b      	ldr	r1, [pc, #428]	; (807c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7c>)
    7ed0:	486b      	ldr	r0, [pc, #428]	; (8080 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x80>)
    7ed2:	f003 f8ca 	bl	b06a <printk>
    7ed6:	486b      	ldr	r0, [pc, #428]	; (8084 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x84>)
    7ed8:	f003 f8c7 	bl	b06a <printk>
    7edc:	2165      	movs	r1, #101	; 0x65
    7ede:	4638      	mov	r0, r7
    7ee0:	f003 fa1c 	bl	b31c <assert_post_action>
    7ee4:	e7c4      	b.n	7e70 <z_impl_k_mutex_lock+0x14>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7ee6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8090 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90>
    7eea:	2381      	movs	r3, #129	; 0x81
    7eec:	4642      	mov	r2, r8
    7eee:	4966      	ldr	r1, [pc, #408]	; (8088 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x88>)
    7ef0:	4863      	ldr	r0, [pc, #396]	; (8080 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x80>)
    7ef2:	f003 f8ba 	bl	b06a <printk>
    7ef6:	495e      	ldr	r1, [pc, #376]	; (8070 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x70>)
    7ef8:	4864      	ldr	r0, [pc, #400]	; (808c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8c>)
    7efa:	f003 f8b6 	bl	b06a <printk>
    7efe:	2181      	movs	r1, #129	; 0x81
    7f00:	4640      	mov	r0, r8
    7f02:	f003 fa0b 	bl	b31c <assert_post_action>
    7f06:	e7c0      	b.n	7e8a <z_impl_k_mutex_lock+0x2e>
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    7f08:	68a2      	ldr	r2, [r4, #8]
    7f0a:	4b5a      	ldr	r3, [pc, #360]	; (8074 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x74>)
    7f0c:	689b      	ldr	r3, [r3, #8]
    7f0e:	429a      	cmp	r2, r3
    7f10:	d0c1      	beq.n	7e96 <z_impl_k_mutex_lock+0x3a>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    7f12:	ea55 0106 	orrs.w	r1, r5, r6
    7f16:	bf0c      	ite	eq
    7f18:	f04f 0801 	moveq.w	r8, #1
    7f1c:	f04f 0800 	movne.w	r8, #0
    7f20:	d04b      	beq.n	7fba <z_impl_k_mutex_lock+0x15e>
					    mutex->owner->base.prio);
    7f22:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    7f26:	4649      	mov	r1, r9
    7f28:	f993 000e 	ldrsb.w	r0, [r3, #14]
    7f2c:	f003 ff66 	bl	bdfc <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    7f30:	4581      	cmp	r9, r0
    7f32:	dc5d      	bgt.n	7ff0 <z_impl_k_mutex_lock+0x194>
	bool resched = false;
    7f34:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    7f38:	9600      	str	r6, [sp, #0]
    7f3a:	9501      	str	r5, [sp, #4]
    7f3c:	4622      	mov	r2, r4
    7f3e:	4639      	mov	r1, r7
    7f40:	484b      	ldr	r0, [pc, #300]	; (8070 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x70>)
    7f42:	f001 f823 	bl	8f8c <z_pend_curr>
	if (got_mutex == 0) {
    7f46:	2800      	cmp	r0, #0
    7f48:	d0bb      	beq.n	7ec2 <z_impl_k_mutex_lock+0x66>
	__asm__ volatile(
    7f4a:	f04f 0320 	mov.w	r3, #32
    7f4e:	f3ef 8511 	mrs	r5, BASEPRI
    7f52:	f383 8812 	msr	BASEPRI_MAX, r3
    7f56:	f3bf 8f6f 	isb	sy
    7f5a:	4845      	ldr	r0, [pc, #276]	; (8070 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x70>)
    7f5c:	f7ff fd42 	bl	79e4 <z_spin_lock_valid>
    7f60:	2800      	cmp	r0, #0
    7f62:	d04b      	beq.n	7ffc <z_impl_k_mutex_lock+0x1a0>
	z_spin_lock_set_owner(l);
    7f64:	4842      	ldr	r0, [pc, #264]	; (8070 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x70>)
    7f66:	f7ff fd5d 	bl	7a24 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    7f6a:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7f6c:	42a3      	cmp	r3, r4
    7f6e:	d055      	beq.n	801c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    7f70:	2b00      	cmp	r3, #0
    7f72:	d053      	beq.n	801c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c>
    7f74:	6921      	ldr	r1, [r4, #16]
    7f76:	f993 000e 	ldrsb.w	r0, [r3, #14]
    7f7a:	f003 ff3f 	bl	bdfc <new_prio_for_inheritance>
    7f7e:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    7f80:	4620      	mov	r0, r4
    7f82:	f003 ff46 	bl	be12 <adjust_owner_prio>
    7f86:	2800      	cmp	r0, #0
    7f88:	d14a      	bne.n	8020 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x20>
    7f8a:	f1b9 0f00 	cmp.w	r9, #0
    7f8e:	d049      	beq.n	8024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>
    7f90:	f04f 0801 	mov.w	r8, #1
    7f94:	e046      	b.n	8024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>
					_current->base.prio :
    7f96:	6923      	ldr	r3, [r4, #16]
    7f98:	e783      	b.n	7ea2 <z_impl_k_mutex_lock+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7f9a:	4c3d      	ldr	r4, [pc, #244]	; (8090 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90>)
    7f9c:	23ac      	movs	r3, #172	; 0xac
    7f9e:	4622      	mov	r2, r4
    7fa0:	493c      	ldr	r1, [pc, #240]	; (8094 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x94>)
    7fa2:	4837      	ldr	r0, [pc, #220]	; (8080 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x80>)
    7fa4:	f003 f861 	bl	b06a <printk>
    7fa8:	4931      	ldr	r1, [pc, #196]	; (8070 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x70>)
    7faa:	483b      	ldr	r0, [pc, #236]	; (8098 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x98>)
    7fac:	f003 f85d 	bl	b06a <printk>
    7fb0:	21ac      	movs	r1, #172	; 0xac
    7fb2:	4620      	mov	r0, r4
    7fb4:	f003 f9b2 	bl	b31c <assert_post_action>
    7fb8:	e77e      	b.n	7eb8 <z_impl_k_mutex_lock+0x5c>
    7fba:	482d      	ldr	r0, [pc, #180]	; (8070 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x70>)
    7fbc:	f7ff fd22 	bl	7a04 <z_spin_unlock_valid>
    7fc0:	b130      	cbz	r0, 7fd0 <z_impl_k_mutex_lock+0x174>
	__asm__ volatile(
    7fc2:	f387 8811 	msr	BASEPRI, r7
    7fc6:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    7fca:	f06f 000f 	mvn.w	r0, #15
    7fce:	e778      	b.n	7ec2 <z_impl_k_mutex_lock+0x66>
    7fd0:	4c2f      	ldr	r4, [pc, #188]	; (8090 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90>)
    7fd2:	23ac      	movs	r3, #172	; 0xac
    7fd4:	4622      	mov	r2, r4
    7fd6:	492f      	ldr	r1, [pc, #188]	; (8094 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x94>)
    7fd8:	4829      	ldr	r0, [pc, #164]	; (8080 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x80>)
    7fda:	f003 f846 	bl	b06a <printk>
    7fde:	4924      	ldr	r1, [pc, #144]	; (8070 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x70>)
    7fe0:	482d      	ldr	r0, [pc, #180]	; (8098 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x98>)
    7fe2:	f003 f842 	bl	b06a <printk>
    7fe6:	21ac      	movs	r1, #172	; 0xac
    7fe8:	4620      	mov	r0, r4
    7fea:	f003 f997 	bl	b31c <assert_post_action>
    7fee:	e7e8      	b.n	7fc2 <z_impl_k_mutex_lock+0x166>
		resched = adjust_owner_prio(mutex, new_prio);
    7ff0:	4601      	mov	r1, r0
    7ff2:	4620      	mov	r0, r4
    7ff4:	f003 ff0d 	bl	be12 <adjust_owner_prio>
    7ff8:	4681      	mov	r9, r0
    7ffa:	e79d      	b.n	7f38 <z_impl_k_mutex_lock+0xdc>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7ffc:	4e24      	ldr	r6, [pc, #144]	; (8090 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90>)
    7ffe:	2381      	movs	r3, #129	; 0x81
    8000:	4632      	mov	r2, r6
    8002:	4921      	ldr	r1, [pc, #132]	; (8088 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x88>)
    8004:	481e      	ldr	r0, [pc, #120]	; (8080 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x80>)
    8006:	f003 f830 	bl	b06a <printk>
    800a:	4919      	ldr	r1, [pc, #100]	; (8070 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x70>)
    800c:	481f      	ldr	r0, [pc, #124]	; (808c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8c>)
    800e:	f003 f82c 	bl	b06a <printk>
    8012:	2181      	movs	r1, #129	; 0x81
    8014:	4630      	mov	r0, r6
    8016:	f003 f981 	bl	b31c <assert_post_action>
    801a:	e7a3      	b.n	7f64 <z_impl_k_mutex_lock+0x108>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    801c:	6921      	ldr	r1, [r4, #16]
    801e:	e7af      	b.n	7f80 <z_impl_k_mutex_lock+0x124>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    8020:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    8024:	f1b8 0f00 	cmp.w	r8, #0
    8028:	d006      	beq.n	8038 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38>
		z_reschedule(&lock, key);
    802a:	4629      	mov	r1, r5
    802c:	4810      	ldr	r0, [pc, #64]	; (8070 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x70>)
    802e:	f000 faf5 	bl	861c <z_reschedule>
	return -EAGAIN;
    8032:	f06f 000a 	mvn.w	r0, #10
    8036:	e744      	b.n	7ec2 <z_impl_k_mutex_lock+0x66>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8038:	480d      	ldr	r0, [pc, #52]	; (8070 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x70>)
    803a:	f7ff fce3 	bl	7a04 <z_spin_unlock_valid>
    803e:	b130      	cbz	r0, 804e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4e>
    8040:	f385 8811 	msr	BASEPRI, r5
    8044:	f3bf 8f6f 	isb	sy
    8048:	f06f 000a 	mvn.w	r0, #10
    804c:	e739      	b.n	7ec2 <z_impl_k_mutex_lock+0x66>
    804e:	4c10      	ldr	r4, [pc, #64]	; (8090 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90>)
    8050:	23ac      	movs	r3, #172	; 0xac
    8052:	4622      	mov	r2, r4
    8054:	490f      	ldr	r1, [pc, #60]	; (8094 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x94>)
    8056:	480a      	ldr	r0, [pc, #40]	; (8080 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x80>)
    8058:	f003 f807 	bl	b06a <printk>
    805c:	4904      	ldr	r1, [pc, #16]	; (8070 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x70>)
    805e:	480e      	ldr	r0, [pc, #56]	; (8098 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x98>)
    8060:	f003 f803 	bl	b06a <printk>
    8064:	21ac      	movs	r1, #172	; 0xac
    8066:	4620      	mov	r0, r4
    8068:	f003 f958 	bl	b31c <assert_post_action>
    806c:	e7e8      	b.n	8040 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40>
    806e:	bf00      	nop
    8070:	2000124c 	.word	0x2000124c
    8074:	2000121c 	.word	0x2000121c
    8078:	0000d300 	.word	0x0000d300
    807c:	0000d248 	.word	0x0000d248
    8080:	0000c46c 	.word	0x0000c46c
    8084:	0000d324 	.word	0x0000d324
    8088:	0000c5dc 	.word	0x0000c5dc
    808c:	0000c5f4 	.word	0x0000c5f4
    8090:	0000c584 	.word	0x0000c584
    8094:	0000c5ac 	.word	0x0000c5ac
    8098:	0000c5c4 	.word	0x0000c5c4

0000809c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    809c:	b570      	push	{r4, r5, r6, lr}
    809e:	4604      	mov	r4, r0
    80a0:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    80a4:	bb03      	cbnz	r3, 80e8 <z_impl_k_mutex_unlock+0x4c>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    80a6:	68a3      	ldr	r3, [r4, #8]
    80a8:	2b00      	cmp	r3, #0
    80aa:	f000 80a6 	beq.w	81fa <z_impl_k_mutex_unlock+0x15e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    80ae:	4a56      	ldr	r2, [pc, #344]	; (8208 <z_impl_k_mutex_unlock+0x16c>)
    80b0:	6892      	ldr	r2, [r2, #8]
    80b2:	4293      	cmp	r3, r2
    80b4:	f040 80a4 	bne.w	8200 <z_impl_k_mutex_unlock+0x164>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    80b8:	68e3      	ldr	r3, [r4, #12]
    80ba:	b323      	cbz	r3, 8106 <z_impl_k_mutex_unlock+0x6a>
    80bc:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    80c0:	bb6b      	cbnz	r3, 811e <z_impl_k_mutex_unlock+0x82>
	__ASSERT(_current->base.sched_locked != 1U, "");
    80c2:	4b51      	ldr	r3, [pc, #324]	; (8208 <z_impl_k_mutex_unlock+0x16c>)
    80c4:	689b      	ldr	r3, [r3, #8]
    80c6:	7bdb      	ldrb	r3, [r3, #15]
    80c8:	2b01      	cmp	r3, #1
    80ca:	d037      	beq.n	813c <z_impl_k_mutex_unlock+0xa0>

	--_current->base.sched_locked;
    80cc:	4b4e      	ldr	r3, [pc, #312]	; (8208 <z_impl_k_mutex_unlock+0x16c>)
    80ce:	689a      	ldr	r2, [r3, #8]
    80d0:	7bd3      	ldrb	r3, [r2, #15]
    80d2:	3b01      	subs	r3, #1
    80d4:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    80d6:	68e3      	ldr	r3, [r4, #12]
    80d8:	2b01      	cmp	r3, #1
    80da:	d93e      	bls.n	815a <z_impl_k_mutex_unlock+0xbe>
		mutex->lock_count--;
    80dc:	3b01      	subs	r3, #1
    80de:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    80e0:	f001 f8b0 	bl	9244 <k_sched_unlock>

	return 0;
    80e4:	2000      	movs	r0, #0
}
    80e6:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    80e8:	4d48      	ldr	r5, [pc, #288]	; (820c <z_impl_k_mutex_unlock+0x170>)
    80ea:	23c7      	movs	r3, #199	; 0xc7
    80ec:	462a      	mov	r2, r5
    80ee:	4948      	ldr	r1, [pc, #288]	; (8210 <z_impl_k_mutex_unlock+0x174>)
    80f0:	4848      	ldr	r0, [pc, #288]	; (8214 <z_impl_k_mutex_unlock+0x178>)
    80f2:	f002 ffba 	bl	b06a <printk>
    80f6:	4848      	ldr	r0, [pc, #288]	; (8218 <z_impl_k_mutex_unlock+0x17c>)
    80f8:	f002 ffb7 	bl	b06a <printk>
    80fc:	21c7      	movs	r1, #199	; 0xc7
    80fe:	4628      	mov	r0, r5
    8100:	f003 f90c 	bl	b31c <assert_post_action>
    8104:	e7cf      	b.n	80a6 <z_impl_k_mutex_unlock+0xa>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    8106:	4d41      	ldr	r5, [pc, #260]	; (820c <z_impl_k_mutex_unlock+0x170>)
    8108:	23df      	movs	r3, #223	; 0xdf
    810a:	462a      	mov	r2, r5
    810c:	4943      	ldr	r1, [pc, #268]	; (821c <z_impl_k_mutex_unlock+0x180>)
    810e:	4841      	ldr	r0, [pc, #260]	; (8214 <z_impl_k_mutex_unlock+0x178>)
    8110:	f002 ffab 	bl	b06a <printk>
    8114:	21df      	movs	r1, #223	; 0xdf
    8116:	4628      	mov	r0, r5
    8118:	f003 f900 	bl	b31c <assert_post_action>
    811c:	e7ce      	b.n	80bc <z_impl_k_mutex_unlock+0x20>
	__ASSERT(!arch_is_in_isr(), "");
    811e:	4d40      	ldr	r5, [pc, #256]	; (8220 <z_impl_k_mutex_unlock+0x184>)
    8120:	23fd      	movs	r3, #253	; 0xfd
    8122:	462a      	mov	r2, r5
    8124:	493a      	ldr	r1, [pc, #232]	; (8210 <z_impl_k_mutex_unlock+0x174>)
    8126:	483b      	ldr	r0, [pc, #236]	; (8214 <z_impl_k_mutex_unlock+0x178>)
    8128:	f002 ff9f 	bl	b06a <printk>
    812c:	483d      	ldr	r0, [pc, #244]	; (8224 <z_impl_k_mutex_unlock+0x188>)
    812e:	f002 ff9c 	bl	b06a <printk>
    8132:	21fd      	movs	r1, #253	; 0xfd
    8134:	4628      	mov	r0, r5
    8136:	f003 f8f1 	bl	b31c <assert_post_action>
    813a:	e7c2      	b.n	80c2 <z_impl_k_mutex_unlock+0x26>
	__ASSERT(_current->base.sched_locked != 1U, "");
    813c:	4d38      	ldr	r5, [pc, #224]	; (8220 <z_impl_k_mutex_unlock+0x184>)
    813e:	23fe      	movs	r3, #254	; 0xfe
    8140:	462a      	mov	r2, r5
    8142:	4939      	ldr	r1, [pc, #228]	; (8228 <z_impl_k_mutex_unlock+0x18c>)
    8144:	4833      	ldr	r0, [pc, #204]	; (8214 <z_impl_k_mutex_unlock+0x178>)
    8146:	f002 ff90 	bl	b06a <printk>
    814a:	4836      	ldr	r0, [pc, #216]	; (8224 <z_impl_k_mutex_unlock+0x188>)
    814c:	f002 ff8d 	bl	b06a <printk>
    8150:	21fe      	movs	r1, #254	; 0xfe
    8152:	4628      	mov	r0, r5
    8154:	f003 f8e2 	bl	b31c <assert_post_action>
    8158:	e7b8      	b.n	80cc <z_impl_k_mutex_unlock+0x30>
	__asm__ volatile(
    815a:	f04f 0320 	mov.w	r3, #32
    815e:	f3ef 8511 	mrs	r5, BASEPRI
    8162:	f383 8812 	msr	BASEPRI_MAX, r3
    8166:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    816a:	4830      	ldr	r0, [pc, #192]	; (822c <z_impl_k_mutex_unlock+0x190>)
    816c:	f7ff fc3a 	bl	79e4 <z_spin_lock_valid>
    8170:	b1c0      	cbz	r0, 81a4 <z_impl_k_mutex_unlock+0x108>
	z_spin_lock_set_owner(l);
    8172:	482e      	ldr	r0, [pc, #184]	; (822c <z_impl_k_mutex_unlock+0x190>)
    8174:	f7ff fc56 	bl	7a24 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    8178:	6921      	ldr	r1, [r4, #16]
    817a:	4620      	mov	r0, r4
    817c:	f003 fe49 	bl	be12 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    8180:	4620      	mov	r0, r4
    8182:	f001 f9a1 	bl	94c8 <z_unpend_first_thread>
	mutex->owner = new_owner;
    8186:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    8188:	b1e0      	cbz	r0, 81c4 <z_impl_k_mutex_unlock+0x128>
		mutex->owner_orig_prio = new_owner->base.prio;
    818a:	f990 300e 	ldrsb.w	r3, [r0, #14]
    818e:	6123      	str	r3, [r4, #16]
    8190:	2300      	movs	r3, #0
    8192:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
    8196:	f000 fd21 	bl	8bdc <z_ready_thread>
		z_reschedule(&lock, key);
    819a:	4629      	mov	r1, r5
    819c:	4823      	ldr	r0, [pc, #140]	; (822c <z_impl_k_mutex_unlock+0x190>)
    819e:	f000 fa3d 	bl	861c <z_reschedule>
    81a2:	e79d      	b.n	80e0 <z_impl_k_mutex_unlock+0x44>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    81a4:	4e22      	ldr	r6, [pc, #136]	; (8230 <z_impl_k_mutex_unlock+0x194>)
    81a6:	2381      	movs	r3, #129	; 0x81
    81a8:	4632      	mov	r2, r6
    81aa:	4922      	ldr	r1, [pc, #136]	; (8234 <z_impl_k_mutex_unlock+0x198>)
    81ac:	4819      	ldr	r0, [pc, #100]	; (8214 <z_impl_k_mutex_unlock+0x178>)
    81ae:	f002 ff5c 	bl	b06a <printk>
    81b2:	491e      	ldr	r1, [pc, #120]	; (822c <z_impl_k_mutex_unlock+0x190>)
    81b4:	4820      	ldr	r0, [pc, #128]	; (8238 <z_impl_k_mutex_unlock+0x19c>)
    81b6:	f002 ff58 	bl	b06a <printk>
    81ba:	2181      	movs	r1, #129	; 0x81
    81bc:	4630      	mov	r0, r6
    81be:	f003 f8ad 	bl	b31c <assert_post_action>
    81c2:	e7d6      	b.n	8172 <z_impl_k_mutex_unlock+0xd6>
		mutex->lock_count = 0U;
    81c4:	2300      	movs	r3, #0
    81c6:	60e3      	str	r3, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    81c8:	4818      	ldr	r0, [pc, #96]	; (822c <z_impl_k_mutex_unlock+0x190>)
    81ca:	f7ff fc1b 	bl	7a04 <z_spin_unlock_valid>
    81ce:	b120      	cbz	r0, 81da <z_impl_k_mutex_unlock+0x13e>
	__asm__ volatile(
    81d0:	f385 8811 	msr	BASEPRI, r5
    81d4:	f3bf 8f6f 	isb	sy
    81d8:	e782      	b.n	80e0 <z_impl_k_mutex_unlock+0x44>
    81da:	4c15      	ldr	r4, [pc, #84]	; (8230 <z_impl_k_mutex_unlock+0x194>)
    81dc:	23ac      	movs	r3, #172	; 0xac
    81de:	4622      	mov	r2, r4
    81e0:	4916      	ldr	r1, [pc, #88]	; (823c <z_impl_k_mutex_unlock+0x1a0>)
    81e2:	480c      	ldr	r0, [pc, #48]	; (8214 <z_impl_k_mutex_unlock+0x178>)
    81e4:	f002 ff41 	bl	b06a <printk>
    81e8:	4910      	ldr	r1, [pc, #64]	; (822c <z_impl_k_mutex_unlock+0x190>)
    81ea:	4815      	ldr	r0, [pc, #84]	; (8240 <z_impl_k_mutex_unlock+0x1a4>)
    81ec:	f002 ff3d 	bl	b06a <printk>
    81f0:	21ac      	movs	r1, #172	; 0xac
    81f2:	4620      	mov	r0, r4
    81f4:	f003 f892 	bl	b31c <assert_post_action>
    81f8:	e7ea      	b.n	81d0 <z_impl_k_mutex_unlock+0x134>
		return -EINVAL;
    81fa:	f06f 0015 	mvn.w	r0, #21
    81fe:	e772      	b.n	80e6 <z_impl_k_mutex_unlock+0x4a>
		return -EPERM;
    8200:	f04f 30ff 	mov.w	r0, #4294967295
    8204:	e76f      	b.n	80e6 <z_impl_k_mutex_unlock+0x4a>
    8206:	bf00      	nop
    8208:	2000121c 	.word	0x2000121c
    820c:	0000d300 	.word	0x0000d300
    8210:	0000d248 	.word	0x0000d248
    8214:	0000c46c 	.word	0x0000c46c
    8218:	0000d324 	.word	0x0000d324
    821c:	0000d34c 	.word	0x0000d34c
    8220:	0000d364 	.word	0x0000d364
    8224:	0000d390 	.word	0x0000d390
    8228:	0000d394 	.word	0x0000d394
    822c:	2000124c 	.word	0x2000124c
    8230:	0000c584 	.word	0x0000c584
    8234:	0000c5dc 	.word	0x0000c5dc
    8238:	0000c5f4 	.word	0x0000c5f4
    823c:	0000c5ac 	.word	0x0000c5ac
    8240:	0000c5c4 	.word	0x0000c5c4

00008244 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    8244:	b570      	push	{r4, r5, r6, lr}
    8246:	4604      	mov	r4, r0
	__asm__ volatile(
    8248:	f04f 0320 	mov.w	r3, #32
    824c:	f3ef 8511 	mrs	r5, BASEPRI
    8250:	f383 8812 	msr	BASEPRI_MAX, r3
    8254:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8258:	4819      	ldr	r0, [pc, #100]	; (82c0 <z_impl_k_sem_give+0x7c>)
    825a:	f7ff fbc3 	bl	79e4 <z_spin_lock_valid>
    825e:	b180      	cbz	r0, 8282 <z_impl_k_sem_give+0x3e>
	z_spin_lock_set_owner(l);
    8260:	4817      	ldr	r0, [pc, #92]	; (82c0 <z_impl_k_sem_give+0x7c>)
    8262:	f7ff fbdf 	bl	7a24 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    8266:	4620      	mov	r0, r4
    8268:	f001 f92e 	bl	94c8 <z_unpend_first_thread>

	if (thread != NULL) {
    826c:	b1c8      	cbz	r0, 82a2 <z_impl_k_sem_give+0x5e>
    826e:	2200      	movs	r2, #0
    8270:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    8274:	f000 fcb2 	bl	8bdc <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    8278:	4629      	mov	r1, r5
    827a:	4811      	ldr	r0, [pc, #68]	; (82c0 <z_impl_k_sem_give+0x7c>)
    827c:	f000 f9ce 	bl	861c <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    8280:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8282:	4e10      	ldr	r6, [pc, #64]	; (82c4 <z_impl_k_sem_give+0x80>)
    8284:	2381      	movs	r3, #129	; 0x81
    8286:	4632      	mov	r2, r6
    8288:	490f      	ldr	r1, [pc, #60]	; (82c8 <z_impl_k_sem_give+0x84>)
    828a:	4810      	ldr	r0, [pc, #64]	; (82cc <z_impl_k_sem_give+0x88>)
    828c:	f002 feed 	bl	b06a <printk>
    8290:	490b      	ldr	r1, [pc, #44]	; (82c0 <z_impl_k_sem_give+0x7c>)
    8292:	480f      	ldr	r0, [pc, #60]	; (82d0 <z_impl_k_sem_give+0x8c>)
    8294:	f002 fee9 	bl	b06a <printk>
    8298:	2181      	movs	r1, #129	; 0x81
    829a:	4630      	mov	r0, r6
    829c:	f003 f83e 	bl	b31c <assert_post_action>
    82a0:	e7de      	b.n	8260 <z_impl_k_sem_give+0x1c>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    82a2:	68a3      	ldr	r3, [r4, #8]
    82a4:	68e2      	ldr	r2, [r4, #12]
    82a6:	4293      	cmp	r3, r2
    82a8:	d008      	beq.n	82bc <z_impl_k_sem_give+0x78>
    82aa:	2201      	movs	r2, #1
    82ac:	4413      	add	r3, r2
    82ae:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    82b0:	2102      	movs	r1, #2
    82b2:	f104 0010 	add.w	r0, r4, #16
    82b6:	f003 fe78 	bl	bfaa <z_handle_obj_poll_events>
}
    82ba:	e7dd      	b.n	8278 <z_impl_k_sem_give+0x34>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    82bc:	2200      	movs	r2, #0
    82be:	e7f5      	b.n	82ac <z_impl_k_sem_give+0x68>
    82c0:	20001250 	.word	0x20001250
    82c4:	0000c584 	.word	0x0000c584
    82c8:	0000c5dc 	.word	0x0000c5dc
    82cc:	0000c46c 	.word	0x0000c46c
    82d0:	0000c5f4 	.word	0x0000c5f4

000082d4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    82d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    82d8:	b082      	sub	sp, #8
    82da:	4604      	mov	r4, r0
    82dc:	4616      	mov	r6, r2
    82de:	461f      	mov	r7, r3
    82e0:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    82e4:	b113      	cbz	r3, 82ec <z_impl_k_sem_take+0x18>
    82e6:	ea56 0307 	orrs.w	r3, r6, r7
    82ea:	d11f      	bne.n	832c <z_impl_k_sem_take+0x58>
    82ec:	f04f 0320 	mov.w	r3, #32
    82f0:	f3ef 8511 	mrs	r5, BASEPRI
    82f4:	f383 8812 	msr	BASEPRI_MAX, r3
    82f8:	f3bf 8f6f 	isb	sy
    82fc:	4836      	ldr	r0, [pc, #216]	; (83d8 <z_impl_k_sem_take+0x104>)
    82fe:	f7ff fb71 	bl	79e4 <z_spin_lock_valid>
    8302:	b310      	cbz	r0, 834a <z_impl_k_sem_take+0x76>
	z_spin_lock_set_owner(l);
    8304:	4834      	ldr	r0, [pc, #208]	; (83d8 <z_impl_k_sem_take+0x104>)
    8306:	f7ff fb8d 	bl	7a24 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    830a:	68a3      	ldr	r3, [r4, #8]
    830c:	2b00      	cmp	r3, #0
    830e:	d03d      	beq.n	838c <z_impl_k_sem_take+0xb8>
		sem->count--;
    8310:	3b01      	subs	r3, #1
    8312:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8314:	4830      	ldr	r0, [pc, #192]	; (83d8 <z_impl_k_sem_take+0x104>)
    8316:	f7ff fb75 	bl	7a04 <z_spin_unlock_valid>
    831a:	b338      	cbz	r0, 836c <z_impl_k_sem_take+0x98>
	__asm__ volatile(
    831c:	f385 8811 	msr	BASEPRI, r5
    8320:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    8324:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    8326:	b002      	add	sp, #8
    8328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(((arch_is_in_isr() == false) ||
    832c:	4d2b      	ldr	r5, [pc, #172]	; (83dc <z_impl_k_sem_take+0x108>)
    832e:	2379      	movs	r3, #121	; 0x79
    8330:	462a      	mov	r2, r5
    8332:	492b      	ldr	r1, [pc, #172]	; (83e0 <z_impl_k_sem_take+0x10c>)
    8334:	482b      	ldr	r0, [pc, #172]	; (83e4 <z_impl_k_sem_take+0x110>)
    8336:	f002 fe98 	bl	b06a <printk>
    833a:	482b      	ldr	r0, [pc, #172]	; (83e8 <z_impl_k_sem_take+0x114>)
    833c:	f002 fe95 	bl	b06a <printk>
    8340:	2179      	movs	r1, #121	; 0x79
    8342:	4628      	mov	r0, r5
    8344:	f002 ffea 	bl	b31c <assert_post_action>
    8348:	e7d0      	b.n	82ec <z_impl_k_sem_take+0x18>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    834a:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 83f4 <z_impl_k_sem_take+0x120>
    834e:	2381      	movs	r3, #129	; 0x81
    8350:	4642      	mov	r2, r8
    8352:	4926      	ldr	r1, [pc, #152]	; (83ec <z_impl_k_sem_take+0x118>)
    8354:	4823      	ldr	r0, [pc, #140]	; (83e4 <z_impl_k_sem_take+0x110>)
    8356:	f002 fe88 	bl	b06a <printk>
    835a:	491f      	ldr	r1, [pc, #124]	; (83d8 <z_impl_k_sem_take+0x104>)
    835c:	4824      	ldr	r0, [pc, #144]	; (83f0 <z_impl_k_sem_take+0x11c>)
    835e:	f002 fe84 	bl	b06a <printk>
    8362:	2181      	movs	r1, #129	; 0x81
    8364:	4640      	mov	r0, r8
    8366:	f002 ffd9 	bl	b31c <assert_post_action>
    836a:	e7cb      	b.n	8304 <z_impl_k_sem_take+0x30>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    836c:	4c21      	ldr	r4, [pc, #132]	; (83f4 <z_impl_k_sem_take+0x120>)
    836e:	23ac      	movs	r3, #172	; 0xac
    8370:	4622      	mov	r2, r4
    8372:	4921      	ldr	r1, [pc, #132]	; (83f8 <z_impl_k_sem_take+0x124>)
    8374:	481b      	ldr	r0, [pc, #108]	; (83e4 <z_impl_k_sem_take+0x110>)
    8376:	f002 fe78 	bl	b06a <printk>
    837a:	4917      	ldr	r1, [pc, #92]	; (83d8 <z_impl_k_sem_take+0x104>)
    837c:	481f      	ldr	r0, [pc, #124]	; (83fc <z_impl_k_sem_take+0x128>)
    837e:	f002 fe74 	bl	b06a <printk>
    8382:	21ac      	movs	r1, #172	; 0xac
    8384:	4620      	mov	r0, r4
    8386:	f002 ffc9 	bl	b31c <assert_post_action>
    838a:	e7c7      	b.n	831c <z_impl_k_sem_take+0x48>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    838c:	ea56 0307 	orrs.w	r3, r6, r7
    8390:	d007      	beq.n	83a2 <z_impl_k_sem_take+0xce>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    8392:	e9cd 6700 	strd	r6, r7, [sp]
    8396:	4622      	mov	r2, r4
    8398:	4629      	mov	r1, r5
    839a:	480f      	ldr	r0, [pc, #60]	; (83d8 <z_impl_k_sem_take+0x104>)
    839c:	f000 fdf6 	bl	8f8c <z_pend_curr>
	return ret;
    83a0:	e7c1      	b.n	8326 <z_impl_k_sem_take+0x52>
    83a2:	480d      	ldr	r0, [pc, #52]	; (83d8 <z_impl_k_sem_take+0x104>)
    83a4:	f7ff fb2e 	bl	7a04 <z_spin_unlock_valid>
    83a8:	b130      	cbz	r0, 83b8 <z_impl_k_sem_take+0xe4>
    83aa:	f385 8811 	msr	BASEPRI, r5
    83ae:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    83b2:	f06f 000f 	mvn.w	r0, #15
    83b6:	e7b6      	b.n	8326 <z_impl_k_sem_take+0x52>
    83b8:	4c0e      	ldr	r4, [pc, #56]	; (83f4 <z_impl_k_sem_take+0x120>)
    83ba:	23ac      	movs	r3, #172	; 0xac
    83bc:	4622      	mov	r2, r4
    83be:	490e      	ldr	r1, [pc, #56]	; (83f8 <z_impl_k_sem_take+0x124>)
    83c0:	4808      	ldr	r0, [pc, #32]	; (83e4 <z_impl_k_sem_take+0x110>)
    83c2:	f002 fe52 	bl	b06a <printk>
    83c6:	4904      	ldr	r1, [pc, #16]	; (83d8 <z_impl_k_sem_take+0x104>)
    83c8:	480c      	ldr	r0, [pc, #48]	; (83fc <z_impl_k_sem_take+0x128>)
    83ca:	f002 fe4e 	bl	b06a <printk>
    83ce:	21ac      	movs	r1, #172	; 0xac
    83d0:	4620      	mov	r0, r4
    83d2:	f002 ffa3 	bl	b31c <assert_post_action>
    83d6:	e7e8      	b.n	83aa <z_impl_k_sem_take+0xd6>
    83d8:	20001250 	.word	0x20001250
    83dc:	0000d3c8 	.word	0x0000d3c8
    83e0:	0000d3e8 	.word	0x0000d3e8
    83e4:	0000c46c 	.word	0x0000c46c
    83e8:	0000d390 	.word	0x0000d390
    83ec:	0000c5dc 	.word	0x0000c5dc
    83f0:	0000c5f4 	.word	0x0000c5f4
    83f4:	0000c584 	.word	0x0000c584
    83f8:	0000c5ac 	.word	0x0000c5ac
    83fc:	0000c5c4 	.word	0x0000c5c4

00008400 <pended_on_thread>:
}
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on_thread(struct k_thread *thread)
{
    8400:	b538      	push	{r3, r4, r5, lr}
    8402:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    8404:	6883      	ldr	r3, [r0, #8]
    8406:	b10b      	cbz	r3, 840c <pended_on_thread+0xc>

	return thread->base.pended_on;
}
    8408:	68a0      	ldr	r0, [r4, #8]
    840a:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(thread->base.pended_on);
    840c:	4d06      	ldr	r5, [pc, #24]	; (8428 <pended_on_thread+0x28>)
    840e:	f240 2383 	movw	r3, #643	; 0x283
    8412:	462a      	mov	r2, r5
    8414:	4905      	ldr	r1, [pc, #20]	; (842c <pended_on_thread+0x2c>)
    8416:	4806      	ldr	r0, [pc, #24]	; (8430 <pended_on_thread+0x30>)
    8418:	f002 fe27 	bl	b06a <printk>
    841c:	f240 2183 	movw	r1, #643	; 0x283
    8420:	4628      	mov	r0, r5
    8422:	f002 ff7b 	bl	b31c <assert_post_action>
    8426:	e7ef      	b.n	8408 <pended_on_thread+0x8>
    8428:	0000d438 	.word	0x0000d438
    842c:	0000d45c 	.word	0x0000d45c
    8430:	0000c46c 	.word	0x0000c46c

00008434 <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
    8434:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8436:	f1b3 3fff 	cmp.w	r3, #4294967295
    843a:	bf08      	it	eq
    843c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    8440:	d100      	bne.n	8444 <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
    8442:	bd38      	pop	{r3, r4, r5, pc}
    8444:	4902      	ldr	r1, [pc, #8]	; (8450 <add_thread_timeout+0x1c>)
    8446:	3018      	adds	r0, #24
    8448:	f001 fc0a 	bl	9c60 <z_add_timeout>
    844c:	e7f9      	b.n	8442 <add_thread_timeout+0xe>
    844e:	bf00      	nop
    8450:	00008d39 	.word	0x00008d39

00008454 <z_reset_time_slice>:
{
    8454:	b508      	push	{r3, lr}
	if (slice_time != 0) {
    8456:	4b08      	ldr	r3, [pc, #32]	; (8478 <z_reset_time_slice+0x24>)
    8458:	681b      	ldr	r3, [r3, #0]
    845a:	b903      	cbnz	r3, 845e <z_reset_time_slice+0xa>
}
    845c:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    845e:	f7fd f8cb 	bl	55f8 <sys_clock_elapsed>
    8462:	4603      	mov	r3, r0
    8464:	4a04      	ldr	r2, [pc, #16]	; (8478 <z_reset_time_slice+0x24>)
    8466:	6810      	ldr	r0, [r2, #0]
    8468:	4403      	add	r3, r0
    846a:	4a04      	ldr	r2, [pc, #16]	; (847c <z_reset_time_slice+0x28>)
    846c:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    846e:	2100      	movs	r1, #0
    8470:	f001 fd9e 	bl	9fb0 <z_set_timeout_expiry>
}
    8474:	e7f2      	b.n	845c <z_reset_time_slice+0x8>
    8476:	bf00      	nop
    8478:	20001260 	.word	0x20001260
    847c:	2000121c 	.word	0x2000121c

00008480 <k_sched_time_slice_set>:
{
    8480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8484:	4606      	mov	r6, r0
    8486:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
    8488:	2400      	movs	r4, #0
	__asm__ volatile(
    848a:	f04f 0320 	mov.w	r3, #32
    848e:	f3ef 8711 	mrs	r7, BASEPRI
    8492:	f383 8812 	msr	BASEPRI_MAX, r3
    8496:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    849a:	4829      	ldr	r0, [pc, #164]	; (8540 <k_sched_time_slice_set+0xc0>)
    849c:	f7ff faa2 	bl	79e4 <z_spin_lock_valid>
    84a0:	b118      	cbz	r0, 84aa <k_sched_time_slice_set+0x2a>
	z_spin_lock_set_owner(l);
    84a2:	4827      	ldr	r0, [pc, #156]	; (8540 <k_sched_time_slice_set+0xc0>)
    84a4:	f7ff fabe 	bl	7a24 <z_spin_lock_set_owner>
	return k;
    84a8:	e01d      	b.n	84e6 <k_sched_time_slice_set+0x66>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    84aa:	4d26      	ldr	r5, [pc, #152]	; (8544 <k_sched_time_slice_set+0xc4>)
    84ac:	2381      	movs	r3, #129	; 0x81
    84ae:	462a      	mov	r2, r5
    84b0:	4925      	ldr	r1, [pc, #148]	; (8548 <k_sched_time_slice_set+0xc8>)
    84b2:	4826      	ldr	r0, [pc, #152]	; (854c <k_sched_time_slice_set+0xcc>)
    84b4:	f002 fdd9 	bl	b06a <printk>
    84b8:	4921      	ldr	r1, [pc, #132]	; (8540 <k_sched_time_slice_set+0xc0>)
    84ba:	4825      	ldr	r0, [pc, #148]	; (8550 <k_sched_time_slice_set+0xd0>)
    84bc:	f002 fdd5 	bl	b06a <printk>
    84c0:	2181      	movs	r1, #129	; 0x81
    84c2:	4628      	mov	r0, r5
    84c4:	f002 ff2a 	bl	b31c <assert_post_action>
    84c8:	e7eb      	b.n	84a2 <k_sched_time_slice_set+0x22>
		slice_max_prio = prio;
    84ca:	4b22      	ldr	r3, [pc, #136]	; (8554 <k_sched_time_slice_set+0xd4>)
    84cc:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
    84d0:	f7ff ffc0 	bl	8454 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    84d4:	481a      	ldr	r0, [pc, #104]	; (8540 <k_sched_time_slice_set+0xc0>)
    84d6:	f7ff fa95 	bl	7a04 <z_spin_unlock_valid>
    84da:	b1f8      	cbz	r0, 851c <k_sched_time_slice_set+0x9c>
	__asm__ volatile(
    84dc:	f387 8811 	msr	BASEPRI, r7
    84e0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    84e4:	2401      	movs	r4, #1
    84e6:	bb4c      	cbnz	r4, 853c <k_sched_time_slice_set+0xbc>
		_current_cpu->slice_ticks = 0;
    84e8:	2300      	movs	r3, #0
    84ea:	4a1b      	ldr	r2, [pc, #108]	; (8558 <k_sched_time_slice_set+0xd8>)
    84ec:	6113      	str	r3, [r2, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    84ee:	0c75      	lsrs	r5, r6, #17
    84f0:	03f4      	lsls	r4, r6, #15
    84f2:	f240 30e7 	movw	r0, #999	; 0x3e7
    84f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    84fa:	2300      	movs	r3, #0
    84fc:	1820      	adds	r0, r4, r0
    84fe:	f04f 0100 	mov.w	r1, #0
    8502:	eb45 0101 	adc.w	r1, r5, r1
    8506:	f7f8 fd33 	bl	f70 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    850a:	4b14      	ldr	r3, [pc, #80]	; (855c <k_sched_time_slice_set+0xdc>)
    850c:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    850e:	2e00      	cmp	r6, #0
    8510:	dddb      	ble.n	84ca <k_sched_time_slice_set+0x4a>
			slice_time = MAX(2, slice_time);
    8512:	2802      	cmp	r0, #2
    8514:	bfb8      	it	lt
    8516:	2002      	movlt	r0, #2
    8518:	6018      	str	r0, [r3, #0]
    851a:	e7d6      	b.n	84ca <k_sched_time_slice_set+0x4a>
    851c:	4c09      	ldr	r4, [pc, #36]	; (8544 <k_sched_time_slice_set+0xc4>)
    851e:	23ac      	movs	r3, #172	; 0xac
    8520:	4622      	mov	r2, r4
    8522:	490f      	ldr	r1, [pc, #60]	; (8560 <k_sched_time_slice_set+0xe0>)
    8524:	4809      	ldr	r0, [pc, #36]	; (854c <k_sched_time_slice_set+0xcc>)
    8526:	f002 fda0 	bl	b06a <printk>
    852a:	4905      	ldr	r1, [pc, #20]	; (8540 <k_sched_time_slice_set+0xc0>)
    852c:	480d      	ldr	r0, [pc, #52]	; (8564 <k_sched_time_slice_set+0xe4>)
    852e:	f002 fd9c 	bl	b06a <printk>
    8532:	21ac      	movs	r1, #172	; 0xac
    8534:	4620      	mov	r0, r4
    8536:	f002 fef1 	bl	b31c <assert_post_action>
    853a:	e7cf      	b.n	84dc <k_sched_time_slice_set+0x5c>
}
    853c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8540:	20001258 	.word	0x20001258
    8544:	0000c584 	.word	0x0000c584
    8548:	0000c5dc 	.word	0x0000c5dc
    854c:	0000c46c 	.word	0x0000c46c
    8550:	0000c5f4 	.word	0x0000c5f4
    8554:	2000125c 	.word	0x2000125c
    8558:	2000121c 	.word	0x2000121c
    855c:	20001260 	.word	0x20001260
    8560:	0000c5ac 	.word	0x0000c5ac
    8564:	0000c5c4 	.word	0x0000c5c4

00008568 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
    8568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    856a:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    856c:	2500      	movs	r5, #0
	__asm__ volatile(
    856e:	f04f 0320 	mov.w	r3, #32
    8572:	f3ef 8611 	mrs	r6, BASEPRI
    8576:	f383 8812 	msr	BASEPRI_MAX, r3
    857a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    857e:	4820      	ldr	r0, [pc, #128]	; (8600 <z_unpend_thread_no_timeout+0x98>)
    8580:	f7ff fa30 	bl	79e4 <z_spin_lock_valid>
    8584:	b118      	cbz	r0, 858e <z_unpend_thread_no_timeout+0x26>
	z_spin_lock_set_owner(l);
    8586:	481e      	ldr	r0, [pc, #120]	; (8600 <z_unpend_thread_no_timeout+0x98>)
    8588:	f7ff fa4c 	bl	7a24 <z_spin_lock_set_owner>
	return k;
    858c:	e023      	b.n	85d6 <z_unpend_thread_no_timeout+0x6e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    858e:	4f1d      	ldr	r7, [pc, #116]	; (8604 <z_unpend_thread_no_timeout+0x9c>)
    8590:	2381      	movs	r3, #129	; 0x81
    8592:	463a      	mov	r2, r7
    8594:	491c      	ldr	r1, [pc, #112]	; (8608 <z_unpend_thread_no_timeout+0xa0>)
    8596:	481d      	ldr	r0, [pc, #116]	; (860c <z_unpend_thread_no_timeout+0xa4>)
    8598:	f002 fd67 	bl	b06a <printk>
    859c:	4918      	ldr	r1, [pc, #96]	; (8600 <z_unpend_thread_no_timeout+0x98>)
    859e:	481c      	ldr	r0, [pc, #112]	; (8610 <z_unpend_thread_no_timeout+0xa8>)
    85a0:	f002 fd63 	bl	b06a <printk>
    85a4:	2181      	movs	r1, #129	; 0x81
    85a6:	4638      	mov	r0, r7
    85a8:	f002 feb8 	bl	b31c <assert_post_action>
    85ac:	e7eb      	b.n	8586 <z_unpend_thread_no_timeout+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    85ae:	4d15      	ldr	r5, [pc, #84]	; (8604 <z_unpend_thread_no_timeout+0x9c>)
    85b0:	23ac      	movs	r3, #172	; 0xac
    85b2:	462a      	mov	r2, r5
    85b4:	4917      	ldr	r1, [pc, #92]	; (8614 <z_unpend_thread_no_timeout+0xac>)
    85b6:	4815      	ldr	r0, [pc, #84]	; (860c <z_unpend_thread_no_timeout+0xa4>)
    85b8:	f002 fd57 	bl	b06a <printk>
    85bc:	4910      	ldr	r1, [pc, #64]	; (8600 <z_unpend_thread_no_timeout+0x98>)
    85be:	4816      	ldr	r0, [pc, #88]	; (8618 <z_unpend_thread_no_timeout+0xb0>)
    85c0:	f002 fd53 	bl	b06a <printk>
    85c4:	21ac      	movs	r1, #172	; 0xac
    85c6:	4628      	mov	r0, r5
    85c8:	f002 fea8 	bl	b31c <assert_post_action>
	__asm__ volatile(
    85cc:	f386 8811 	msr	BASEPRI, r6
    85d0:	f3bf 8f6f 	isb	sy
    85d4:	2501      	movs	r5, #1
    85d6:	b98d      	cbnz	r5, 85fc <z_unpend_thread_no_timeout+0x94>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    85d8:	4620      	mov	r0, r4
    85da:	f7ff ff11 	bl	8400 <pended_on_thread>
    85de:	4621      	mov	r1, r4
    85e0:	f000 f8ec 	bl	87bc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    85e4:	7b63      	ldrb	r3, [r4, #13]
    85e6:	f023 0302 	bic.w	r3, r3, #2
    85ea:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    85ec:	2300      	movs	r3, #0
    85ee:	60a3      	str	r3, [r4, #8]
    85f0:	4803      	ldr	r0, [pc, #12]	; (8600 <z_unpend_thread_no_timeout+0x98>)
    85f2:	f7ff fa07 	bl	7a04 <z_spin_unlock_valid>
    85f6:	2800      	cmp	r0, #0
    85f8:	d1e8      	bne.n	85cc <z_unpend_thread_no_timeout+0x64>
    85fa:	e7d8      	b.n	85ae <z_unpend_thread_no_timeout+0x46>
		unpend_thread_no_timeout(thread);
	}
}
    85fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    85fe:	bf00      	nop
    8600:	20001258 	.word	0x20001258
    8604:	0000c584 	.word	0x0000c584
    8608:	0000c5dc 	.word	0x0000c5dc
    860c:	0000c46c 	.word	0x0000c46c
    8610:	0000c5f4 	.word	0x0000c5f4
    8614:	0000c5ac 	.word	0x0000c5ac
    8618:	0000c5c4 	.word	0x0000c5c4

0000861c <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    861c:	b570      	push	{r4, r5, r6, lr}
    861e:	4604      	mov	r4, r0
	if (resched(key.key) && need_swap()) {
    8620:	460d      	mov	r5, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    8622:	b921      	cbnz	r1, 862e <z_reschedule+0x12>
    8624:	f3ef 8305 	mrs	r3, IPSR
    8628:	b913      	cbnz	r3, 8630 <z_reschedule+0x14>
    862a:	2101      	movs	r1, #1
    862c:	e000      	b.n	8630 <z_reschedule+0x14>
    862e:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    8630:	f011 0f01 	tst.w	r1, #1
    8634:	d01c      	beq.n	8670 <z_reschedule+0x54>
	new_thread = _kernel.ready_q.cache;
    8636:	4b1b      	ldr	r3, [pc, #108]	; (86a4 <z_reschedule+0x88>)
    8638:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    863a:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    863c:	429a      	cmp	r2, r3
    863e:	d017      	beq.n	8670 <z_reschedule+0x54>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8640:	4620      	mov	r0, r4
    8642:	f7ff f9df 	bl	7a04 <z_spin_unlock_valid>
    8646:	b118      	cbz	r0, 8650 <z_reschedule+0x34>
	ret = arch_swap(key);
    8648:	4628      	mov	r0, r5
    864a:	f7fa fc23 	bl	2e94 <arch_swap>
		z_swap(lock, key);
    864e:	e017      	b.n	8680 <z_reschedule+0x64>
    8650:	4e15      	ldr	r6, [pc, #84]	; (86a8 <z_reschedule+0x8c>)
    8652:	23c3      	movs	r3, #195	; 0xc3
    8654:	4632      	mov	r2, r6
    8656:	4915      	ldr	r1, [pc, #84]	; (86ac <z_reschedule+0x90>)
    8658:	4815      	ldr	r0, [pc, #84]	; (86b0 <z_reschedule+0x94>)
    865a:	f002 fd06 	bl	b06a <printk>
    865e:	4621      	mov	r1, r4
    8660:	4814      	ldr	r0, [pc, #80]	; (86b4 <z_reschedule+0x98>)
    8662:	f002 fd02 	bl	b06a <printk>
    8666:	21c3      	movs	r1, #195	; 0xc3
    8668:	4630      	mov	r0, r6
    866a:	f002 fe57 	bl	b31c <assert_post_action>
    866e:	e7eb      	b.n	8648 <z_reschedule+0x2c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8670:	4620      	mov	r0, r4
    8672:	f7ff f9c7 	bl	7a04 <z_spin_unlock_valid>
    8676:	b120      	cbz	r0, 8682 <z_reschedule+0x66>
    8678:	f385 8811 	msr	BASEPRI, r5
    867c:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    8680:	bd70      	pop	{r4, r5, r6, pc}
    8682:	4e09      	ldr	r6, [pc, #36]	; (86a8 <z_reschedule+0x8c>)
    8684:	23ac      	movs	r3, #172	; 0xac
    8686:	4632      	mov	r2, r6
    8688:	4908      	ldr	r1, [pc, #32]	; (86ac <z_reschedule+0x90>)
    868a:	4809      	ldr	r0, [pc, #36]	; (86b0 <z_reschedule+0x94>)
    868c:	f002 fced 	bl	b06a <printk>
    8690:	4621      	mov	r1, r4
    8692:	4808      	ldr	r0, [pc, #32]	; (86b4 <z_reschedule+0x98>)
    8694:	f002 fce9 	bl	b06a <printk>
    8698:	21ac      	movs	r1, #172	; 0xac
    869a:	4630      	mov	r0, r6
    869c:	f002 fe3e 	bl	b31c <assert_post_action>
    86a0:	e7ea      	b.n	8678 <z_reschedule+0x5c>
    86a2:	bf00      	nop
    86a4:	2000121c 	.word	0x2000121c
    86a8:	0000c584 	.word	0x0000c584
    86ac:	0000c5ac 	.word	0x0000c5ac
    86b0:	0000c46c 	.word	0x0000c46c
    86b4:	0000c5c4 	.word	0x0000c5c4

000086b8 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    86b8:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
    86ba:	2400      	movs	r4, #0
	__asm__ volatile(
    86bc:	f04f 0320 	mov.w	r3, #32
    86c0:	f3ef 8511 	mrs	r5, BASEPRI
    86c4:	f383 8812 	msr	BASEPRI_MAX, r3
    86c8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    86cc:	482f      	ldr	r0, [pc, #188]	; (878c <k_sched_lock+0xd4>)
    86ce:	f7ff f989 	bl	79e4 <z_spin_lock_valid>
    86d2:	b118      	cbz	r0, 86dc <k_sched_lock+0x24>
	z_spin_lock_set_owner(l);
    86d4:	482d      	ldr	r0, [pc, #180]	; (878c <k_sched_lock+0xd4>)
    86d6:	f7ff f9a5 	bl	7a24 <z_spin_lock_set_owner>
	return k;
    86da:	e041      	b.n	8760 <k_sched_lock+0xa8>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    86dc:	4e2c      	ldr	r6, [pc, #176]	; (8790 <k_sched_lock+0xd8>)
    86de:	2381      	movs	r3, #129	; 0x81
    86e0:	4632      	mov	r2, r6
    86e2:	492c      	ldr	r1, [pc, #176]	; (8794 <k_sched_lock+0xdc>)
    86e4:	482c      	ldr	r0, [pc, #176]	; (8798 <k_sched_lock+0xe0>)
    86e6:	f002 fcc0 	bl	b06a <printk>
    86ea:	4928      	ldr	r1, [pc, #160]	; (878c <k_sched_lock+0xd4>)
    86ec:	482b      	ldr	r0, [pc, #172]	; (879c <k_sched_lock+0xe4>)
    86ee:	f002 fcbc 	bl	b06a <printk>
    86f2:	2181      	movs	r1, #129	; 0x81
    86f4:	4630      	mov	r0, r6
    86f6:	f002 fe11 	bl	b31c <assert_post_action>
    86fa:	e7eb      	b.n	86d4 <k_sched_lock+0x1c>
	__ASSERT(!arch_is_in_isr(), "");
    86fc:	4c28      	ldr	r4, [pc, #160]	; (87a0 <k_sched_lock+0xe8>)
    86fe:	23fd      	movs	r3, #253	; 0xfd
    8700:	4622      	mov	r2, r4
    8702:	4928      	ldr	r1, [pc, #160]	; (87a4 <k_sched_lock+0xec>)
    8704:	4824      	ldr	r0, [pc, #144]	; (8798 <k_sched_lock+0xe0>)
    8706:	f002 fcb0 	bl	b06a <printk>
    870a:	4827      	ldr	r0, [pc, #156]	; (87a8 <k_sched_lock+0xf0>)
    870c:	f002 fcad 	bl	b06a <printk>
    8710:	21fd      	movs	r1, #253	; 0xfd
    8712:	4620      	mov	r0, r4
    8714:	f002 fe02 	bl	b31c <assert_post_action>
    8718:	e027      	b.n	876a <k_sched_lock+0xb2>
	__ASSERT(_current->base.sched_locked != 1U, "");
    871a:	4c21      	ldr	r4, [pc, #132]	; (87a0 <k_sched_lock+0xe8>)
    871c:	23fe      	movs	r3, #254	; 0xfe
    871e:	4622      	mov	r2, r4
    8720:	4922      	ldr	r1, [pc, #136]	; (87ac <k_sched_lock+0xf4>)
    8722:	481d      	ldr	r0, [pc, #116]	; (8798 <k_sched_lock+0xe0>)
    8724:	f002 fca1 	bl	b06a <printk>
    8728:	481f      	ldr	r0, [pc, #124]	; (87a8 <k_sched_lock+0xf0>)
    872a:	f002 fc9e 	bl	b06a <printk>
    872e:	21fe      	movs	r1, #254	; 0xfe
    8730:	4620      	mov	r0, r4
    8732:	f002 fdf3 	bl	b31c <assert_post_action>
    8736:	e01d      	b.n	8774 <k_sched_lock+0xbc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8738:	4c15      	ldr	r4, [pc, #84]	; (8790 <k_sched_lock+0xd8>)
    873a:	23ac      	movs	r3, #172	; 0xac
    873c:	4622      	mov	r2, r4
    873e:	491c      	ldr	r1, [pc, #112]	; (87b0 <k_sched_lock+0xf8>)
    8740:	4815      	ldr	r0, [pc, #84]	; (8798 <k_sched_lock+0xe0>)
    8742:	f002 fc92 	bl	b06a <printk>
    8746:	4911      	ldr	r1, [pc, #68]	; (878c <k_sched_lock+0xd4>)
    8748:	481a      	ldr	r0, [pc, #104]	; (87b4 <k_sched_lock+0xfc>)
    874a:	f002 fc8e 	bl	b06a <printk>
    874e:	21ac      	movs	r1, #172	; 0xac
    8750:	4620      	mov	r0, r4
    8752:	f002 fde3 	bl	b31c <assert_post_action>
	__asm__ volatile(
    8756:	f385 8811 	msr	BASEPRI, r5
    875a:	f3bf 8f6f 	isb	sy
    875e:	2401      	movs	r4, #1
    8760:	b99c      	cbnz	r4, 878a <k_sched_lock+0xd2>
    8762:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    8766:	2b00      	cmp	r3, #0
    8768:	d1c8      	bne.n	86fc <k_sched_lock+0x44>
	__ASSERT(_current->base.sched_locked != 1U, "");
    876a:	4b13      	ldr	r3, [pc, #76]	; (87b8 <k_sched_lock+0x100>)
    876c:	689b      	ldr	r3, [r3, #8]
    876e:	7bdb      	ldrb	r3, [r3, #15]
    8770:	2b01      	cmp	r3, #1
    8772:	d0d2      	beq.n	871a <k_sched_lock+0x62>
	--_current->base.sched_locked;
    8774:	4b10      	ldr	r3, [pc, #64]	; (87b8 <k_sched_lock+0x100>)
    8776:	689a      	ldr	r2, [r3, #8]
    8778:	7bd3      	ldrb	r3, [r2, #15]
    877a:	3b01      	subs	r3, #1
    877c:	73d3      	strb	r3, [r2, #15]
    877e:	4803      	ldr	r0, [pc, #12]	; (878c <k_sched_lock+0xd4>)
    8780:	f7ff f940 	bl	7a04 <z_spin_unlock_valid>
    8784:	2800      	cmp	r0, #0
    8786:	d1e6      	bne.n	8756 <k_sched_lock+0x9e>
    8788:	e7d6      	b.n	8738 <k_sched_lock+0x80>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    878a:	bd70      	pop	{r4, r5, r6, pc}
    878c:	20001258 	.word	0x20001258
    8790:	0000c584 	.word	0x0000c584
    8794:	0000c5dc 	.word	0x0000c5dc
    8798:	0000c46c 	.word	0x0000c46c
    879c:	0000c5f4 	.word	0x0000c5f4
    87a0:	0000d364 	.word	0x0000d364
    87a4:	0000d248 	.word	0x0000d248
    87a8:	0000d390 	.word	0x0000d390
    87ac:	0000d394 	.word	0x0000d394
    87b0:	0000c5ac 	.word	0x0000c5ac
    87b4:	0000c5c4 	.word	0x0000c5c4
    87b8:	2000121c 	.word	0x2000121c

000087bc <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
    87bc:	b538      	push	{r3, r4, r5, lr}
    87be:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    87c0:	4b0c      	ldr	r3, [pc, #48]	; (87f4 <z_priq_dumb_remove+0x38>)
    87c2:	4299      	cmp	r1, r3
    87c4:	d007      	beq.n	87d6 <z_priq_dumb_remove+0x1a>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    87c6:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    87c8:	6823      	ldr	r3, [r4, #0]

	prev->next = next;
    87ca:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    87cc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    87ce:	2300      	movs	r3, #0
    87d0:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    87d2:	6063      	str	r3, [r4, #4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    87d4:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    87d6:	4d08      	ldr	r5, [pc, #32]	; (87f8 <z_priq_dumb_remove+0x3c>)
    87d8:	f240 33e7 	movw	r3, #999	; 0x3e7
    87dc:	462a      	mov	r2, r5
    87de:	4907      	ldr	r1, [pc, #28]	; (87fc <z_priq_dumb_remove+0x40>)
    87e0:	4807      	ldr	r0, [pc, #28]	; (8800 <z_priq_dumb_remove+0x44>)
    87e2:	f002 fc42 	bl	b06a <printk>
    87e6:	f240 31e7 	movw	r1, #999	; 0x3e7
    87ea:	4628      	mov	r0, r5
    87ec:	f002 fd96 	bl	b31c <assert_post_action>
    87f0:	e7e9      	b.n	87c6 <z_priq_dumb_remove+0xa>
    87f2:	bf00      	nop
    87f4:	200004a0 	.word	0x200004a0
    87f8:	0000d438 	.word	0x0000d438
    87fc:	0000d474 	.word	0x0000d474
    8800:	0000c46c 	.word	0x0000c46c

00008804 <z_unpend_thread>:
{
    8804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8806:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    8808:	2500      	movs	r5, #0
	__asm__ volatile(
    880a:	f04f 0320 	mov.w	r3, #32
    880e:	f3ef 8611 	mrs	r6, BASEPRI
    8812:	f383 8812 	msr	BASEPRI_MAX, r3
    8816:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    881a:	4822      	ldr	r0, [pc, #136]	; (88a4 <z_unpend_thread+0xa0>)
    881c:	f7ff f8e2 	bl	79e4 <z_spin_lock_valid>
    8820:	b118      	cbz	r0, 882a <z_unpend_thread+0x26>
	z_spin_lock_set_owner(l);
    8822:	4820      	ldr	r0, [pc, #128]	; (88a4 <z_unpend_thread+0xa0>)
    8824:	f7ff f8fe 	bl	7a24 <z_spin_lock_set_owner>
	return k;
    8828:	e023      	b.n	8872 <z_unpend_thread+0x6e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    882a:	4f1f      	ldr	r7, [pc, #124]	; (88a8 <z_unpend_thread+0xa4>)
    882c:	2381      	movs	r3, #129	; 0x81
    882e:	463a      	mov	r2, r7
    8830:	491e      	ldr	r1, [pc, #120]	; (88ac <z_unpend_thread+0xa8>)
    8832:	481f      	ldr	r0, [pc, #124]	; (88b0 <z_unpend_thread+0xac>)
    8834:	f002 fc19 	bl	b06a <printk>
    8838:	491a      	ldr	r1, [pc, #104]	; (88a4 <z_unpend_thread+0xa0>)
    883a:	481e      	ldr	r0, [pc, #120]	; (88b4 <z_unpend_thread+0xb0>)
    883c:	f002 fc15 	bl	b06a <printk>
    8840:	2181      	movs	r1, #129	; 0x81
    8842:	4638      	mov	r0, r7
    8844:	f002 fd6a 	bl	b31c <assert_post_action>
    8848:	e7eb      	b.n	8822 <z_unpend_thread+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    884a:	4d17      	ldr	r5, [pc, #92]	; (88a8 <z_unpend_thread+0xa4>)
    884c:	23ac      	movs	r3, #172	; 0xac
    884e:	462a      	mov	r2, r5
    8850:	4919      	ldr	r1, [pc, #100]	; (88b8 <z_unpend_thread+0xb4>)
    8852:	4817      	ldr	r0, [pc, #92]	; (88b0 <z_unpend_thread+0xac>)
    8854:	f002 fc09 	bl	b06a <printk>
    8858:	4912      	ldr	r1, [pc, #72]	; (88a4 <z_unpend_thread+0xa0>)
    885a:	4818      	ldr	r0, [pc, #96]	; (88bc <z_unpend_thread+0xb8>)
    885c:	f002 fc05 	bl	b06a <printk>
    8860:	21ac      	movs	r1, #172	; 0xac
    8862:	4628      	mov	r0, r5
    8864:	f002 fd5a 	bl	b31c <assert_post_action>
	__asm__ volatile(
    8868:	f386 8811 	msr	BASEPRI, r6
    886c:	f3bf 8f6f 	isb	sy
    8870:	2501      	movs	r5, #1
    8872:	b98d      	cbnz	r5, 8898 <z_unpend_thread+0x94>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    8874:	4620      	mov	r0, r4
    8876:	f7ff fdc3 	bl	8400 <pended_on_thread>
    887a:	4621      	mov	r1, r4
    887c:	f7ff ff9e 	bl	87bc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    8880:	7b63      	ldrb	r3, [r4, #13]
    8882:	f023 0302 	bic.w	r3, r3, #2
    8886:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    8888:	2300      	movs	r3, #0
    888a:	60a3      	str	r3, [r4, #8]
    888c:	4805      	ldr	r0, [pc, #20]	; (88a4 <z_unpend_thread+0xa0>)
    888e:	f7ff f8b9 	bl	7a04 <z_spin_unlock_valid>
    8892:	2800      	cmp	r0, #0
    8894:	d1e8      	bne.n	8868 <z_unpend_thread+0x64>
    8896:	e7d8      	b.n	884a <z_unpend_thread+0x46>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    8898:	f104 0018 	add.w	r0, r4, #24
    889c:	f001 fadc 	bl	9e58 <z_abort_timeout>
}
    88a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    88a2:	bf00      	nop
    88a4:	20001258 	.word	0x20001258
    88a8:	0000c584 	.word	0x0000c584
    88ac:	0000c5dc 	.word	0x0000c5dc
    88b0:	0000c46c 	.word	0x0000c46c
    88b4:	0000c5f4 	.word	0x0000c5f4
    88b8:	0000c5ac 	.word	0x0000c5ac
    88bc:	0000c5c4 	.word	0x0000c5c4

000088c0 <update_cache>:
{
    88c0:	b538      	push	{r3, r4, r5, lr}
    88c2:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    88c4:	4818      	ldr	r0, [pc, #96]	; (8928 <update_cache+0x68>)
    88c6:	f003 faea 	bl	be9e <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    88ca:	4605      	mov	r5, r0
    88cc:	b188      	cbz	r0, 88f2 <update_cache+0x32>
	if (preempt_ok != 0) {
    88ce:	bb14      	cbnz	r4, 8916 <update_cache+0x56>
	__ASSERT(_current != NULL, "");
    88d0:	4b16      	ldr	r3, [pc, #88]	; (892c <update_cache+0x6c>)
    88d2:	689b      	ldr	r3, [r3, #8]
    88d4:	b183      	cbz	r3, 88f8 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
    88d6:	4b15      	ldr	r3, [pc, #84]	; (892c <update_cache+0x6c>)
    88d8:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    88da:	7b5a      	ldrb	r2, [r3, #13]
    88dc:	f012 0f1f 	tst.w	r2, #31
    88e0:	d119      	bne.n	8916 <update_cache+0x56>
	return node->next != NULL;
    88e2:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    88e4:	b9ba      	cbnz	r2, 8916 <update_cache+0x56>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    88e6:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    88e8:	2a7f      	cmp	r2, #127	; 0x7f
    88ea:	d914      	bls.n	8916 <update_cache+0x56>
		_kernel.ready_q.cache = _current;
    88ec:	4a0f      	ldr	r2, [pc, #60]	; (892c <update_cache+0x6c>)
    88ee:	61d3      	str	r3, [r2, #28]
    88f0:	e019      	b.n	8926 <update_cache+0x66>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    88f2:	4b0e      	ldr	r3, [pc, #56]	; (892c <update_cache+0x6c>)
    88f4:	68dd      	ldr	r5, [r3, #12]
    88f6:	e7ea      	b.n	88ce <update_cache+0xe>
	__ASSERT(_current != NULL, "");
    88f8:	4c0d      	ldr	r4, [pc, #52]	; (8930 <update_cache+0x70>)
    88fa:	2389      	movs	r3, #137	; 0x89
    88fc:	4622      	mov	r2, r4
    88fe:	490d      	ldr	r1, [pc, #52]	; (8934 <update_cache+0x74>)
    8900:	480d      	ldr	r0, [pc, #52]	; (8938 <update_cache+0x78>)
    8902:	f002 fbb2 	bl	b06a <printk>
    8906:	480d      	ldr	r0, [pc, #52]	; (893c <update_cache+0x7c>)
    8908:	f002 fbaf 	bl	b06a <printk>
    890c:	2189      	movs	r1, #137	; 0x89
    890e:	4620      	mov	r0, r4
    8910:	f002 fd04 	bl	b31c <assert_post_action>
    8914:	e7df      	b.n	88d6 <update_cache+0x16>
		if (thread != _current) {
    8916:	4b05      	ldr	r3, [pc, #20]	; (892c <update_cache+0x6c>)
    8918:	689b      	ldr	r3, [r3, #8]
    891a:	42ab      	cmp	r3, r5
    891c:	d001      	beq.n	8922 <update_cache+0x62>
			z_reset_time_slice();
    891e:	f7ff fd99 	bl	8454 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    8922:	4b02      	ldr	r3, [pc, #8]	; (892c <update_cache+0x6c>)
    8924:	61dd      	str	r5, [r3, #28]
}
    8926:	bd38      	pop	{r3, r4, r5, pc}
    8928:	2000123c 	.word	0x2000123c
    892c:	2000121c 	.word	0x2000121c
    8930:	0000d438 	.word	0x0000d438
    8934:	0000d498 	.word	0x0000d498
    8938:	0000c46c 	.word	0x0000c46c
    893c:	0000d390 	.word	0x0000d390

00008940 <move_thread_to_end_of_prio_q>:
{
    8940:	b538      	push	{r3, r4, r5, lr}
    8942:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    8944:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    8946:	f990 300d 	ldrsb.w	r3, [r0, #13]
    894a:	2b00      	cmp	r3, #0
    894c:	db2b      	blt.n	89a6 <move_thread_to_end_of_prio_q+0x66>
	thread->base.thread_state |= _THREAD_QUEUED;
    894e:	7b6b      	ldrb	r3, [r5, #13]
    8950:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8954:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8956:	4b22      	ldr	r3, [pc, #136]	; (89e0 <move_thread_to_end_of_prio_q+0xa0>)
    8958:	429d      	cmp	r5, r3
    895a:	d02c      	beq.n	89b6 <move_thread_to_end_of_prio_q+0x76>
	return list->head == list;
    895c:	4b21      	ldr	r3, [pc, #132]	; (89e4 <move_thread_to_end_of_prio_q+0xa4>)
    895e:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8962:	429c      	cmp	r4, r3
    8964:	d039      	beq.n	89da <move_thread_to_end_of_prio_q+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8966:	b16c      	cbz	r4, 8984 <move_thread_to_end_of_prio_q+0x44>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8968:	4621      	mov	r1, r4
    896a:	4628      	mov	r0, r5
    896c:	f003 fa78 	bl	be60 <z_sched_prio_cmp>
    8970:	2800      	cmp	r0, #0
    8972:	dc2c      	bgt.n	89ce <move_thread_to_end_of_prio_q+0x8e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8974:	b134      	cbz	r4, 8984 <move_thread_to_end_of_prio_q+0x44>
	return (node == list->tail) ? NULL : node->next;
    8976:	4b1b      	ldr	r3, [pc, #108]	; (89e4 <move_thread_to_end_of_prio_q+0xa4>)
    8978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    897a:	429c      	cmp	r4, r3
    897c:	d002      	beq.n	8984 <move_thread_to_end_of_prio_q+0x44>
    897e:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8980:	2c00      	cmp	r4, #0
    8982:	d1f0      	bne.n	8966 <move_thread_to_end_of_prio_q+0x26>
	sys_dnode_t *const tail = list->tail;
    8984:	4b17      	ldr	r3, [pc, #92]	; (89e4 <move_thread_to_end_of_prio_q+0xa4>)
    8986:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    8988:	f103 0120 	add.w	r1, r3, #32
    898c:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    898e:	606a      	str	r2, [r5, #4]
	tail->next = node;
    8990:	6015      	str	r5, [r2, #0]
	list->tail = node;
    8992:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    8994:	4b13      	ldr	r3, [pc, #76]	; (89e4 <move_thread_to_end_of_prio_q+0xa4>)
    8996:	6898      	ldr	r0, [r3, #8]
    8998:	42a8      	cmp	r0, r5
    899a:	bf14      	ite	ne
    899c:	2000      	movne	r0, #0
    899e:	2001      	moveq	r0, #1
    89a0:	f7ff ff8e 	bl	88c0 <update_cache>
}
    89a4:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    89a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    89aa:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    89ac:	4601      	mov	r1, r0
    89ae:	480e      	ldr	r0, [pc, #56]	; (89e8 <move_thread_to_end_of_prio_q+0xa8>)
    89b0:	f7ff ff04 	bl	87bc <z_priq_dumb_remove>
}
    89b4:	e7cb      	b.n	894e <move_thread_to_end_of_prio_q+0xe>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    89b6:	4c0d      	ldr	r4, [pc, #52]	; (89ec <move_thread_to_end_of_prio_q+0xac>)
    89b8:	23ba      	movs	r3, #186	; 0xba
    89ba:	4622      	mov	r2, r4
    89bc:	490c      	ldr	r1, [pc, #48]	; (89f0 <move_thread_to_end_of_prio_q+0xb0>)
    89be:	480d      	ldr	r0, [pc, #52]	; (89f4 <move_thread_to_end_of_prio_q+0xb4>)
    89c0:	f002 fb53 	bl	b06a <printk>
    89c4:	21ba      	movs	r1, #186	; 0xba
    89c6:	4620      	mov	r0, r4
    89c8:	f002 fca8 	bl	b31c <assert_post_action>
    89cc:	e7c6      	b.n	895c <move_thread_to_end_of_prio_q+0x1c>
	sys_dnode_t *const prev = successor->prev;
    89ce:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    89d0:	606b      	str	r3, [r5, #4]
	node->next = successor;
    89d2:	602c      	str	r4, [r5, #0]
	prev->next = node;
    89d4:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    89d6:	6065      	str	r5, [r4, #4]
}
    89d8:	e7dc      	b.n	8994 <move_thread_to_end_of_prio_q+0x54>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    89da:	2400      	movs	r4, #0
    89dc:	e7c3      	b.n	8966 <move_thread_to_end_of_prio_q+0x26>
    89de:	bf00      	nop
    89e0:	200004a0 	.word	0x200004a0
    89e4:	2000121c 	.word	0x2000121c
    89e8:	2000123c 	.word	0x2000123c
    89ec:	0000d438 	.word	0x0000d438
    89f0:	0000d474 	.word	0x0000d474
    89f4:	0000c46c 	.word	0x0000c46c

000089f8 <z_time_slice>:
{
    89f8:	b570      	push	{r4, r5, r6, lr}
    89fa:	4604      	mov	r4, r0
	__asm__ volatile(
    89fc:	f04f 0320 	mov.w	r3, #32
    8a00:	f3ef 8511 	mrs	r5, BASEPRI
    8a04:	f383 8812 	msr	BASEPRI_MAX, r3
    8a08:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8a0c:	483c      	ldr	r0, [pc, #240]	; (8b00 <z_time_slice+0x108>)
    8a0e:	f7fe ffe9 	bl	79e4 <z_spin_lock_valid>
    8a12:	b338      	cbz	r0, 8a64 <z_time_slice+0x6c>
	z_spin_lock_set_owner(l);
    8a14:	483a      	ldr	r0, [pc, #232]	; (8b00 <z_time_slice+0x108>)
    8a16:	f7ff f805 	bl	7a24 <z_spin_lock_set_owner>
	if (pending_current == _current) {
    8a1a:	4b3a      	ldr	r3, [pc, #232]	; (8b04 <z_time_slice+0x10c>)
    8a1c:	689b      	ldr	r3, [r3, #8]
    8a1e:	4a3a      	ldr	r2, [pc, #232]	; (8b08 <z_time_slice+0x110>)
    8a20:	6812      	ldr	r2, [r2, #0]
    8a22:	4293      	cmp	r3, r2
    8a24:	d02e      	beq.n	8a84 <z_time_slice+0x8c>
	pending_current = NULL;
    8a26:	4a38      	ldr	r2, [pc, #224]	; (8b08 <z_time_slice+0x110>)
    8a28:	2100      	movs	r1, #0
    8a2a:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
    8a2c:	4a37      	ldr	r2, [pc, #220]	; (8b0c <z_time_slice+0x114>)
    8a2e:	6812      	ldr	r2, [r2, #0]
    8a30:	2a00      	cmp	r2, #0
    8a32:	d048      	beq.n	8ac6 <z_time_slice+0xce>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    8a34:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
    8a36:	2a7f      	cmp	r2, #127	; 0x7f
    8a38:	d845      	bhi.n	8ac6 <z_time_slice+0xce>
	uint8_t state = thread->base.thread_state;
    8a3a:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
    8a3c:	f012 0f1f 	tst.w	r2, #31
    8a40:	d141      	bne.n	8ac6 <z_time_slice+0xce>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    8a42:	f993 100e 	ldrsb.w	r1, [r3, #14]
    8a46:	4a32      	ldr	r2, [pc, #200]	; (8b10 <z_time_slice+0x118>)
    8a48:	6812      	ldr	r2, [r2, #0]
    8a4a:	4291      	cmp	r1, r2
    8a4c:	db3b      	blt.n	8ac6 <z_time_slice+0xce>
		&& !z_is_idle_thread_object(thread);
    8a4e:	4a31      	ldr	r2, [pc, #196]	; (8b14 <z_time_slice+0x11c>)
    8a50:	4293      	cmp	r3, r2
    8a52:	d038      	beq.n	8ac6 <z_time_slice+0xce>
		if (ticks >= _current_cpu->slice_ticks) {
    8a54:	4a2b      	ldr	r2, [pc, #172]	; (8b04 <z_time_slice+0x10c>)
    8a56:	6910      	ldr	r0, [r2, #16]
    8a58:	42a0      	cmp	r0, r4
    8a5a:	dd2e      	ble.n	8aba <z_time_slice+0xc2>
			_current_cpu->slice_ticks -= ticks;
    8a5c:	1b00      	subs	r0, r0, r4
    8a5e:	4b29      	ldr	r3, [pc, #164]	; (8b04 <z_time_slice+0x10c>)
    8a60:	6118      	str	r0, [r3, #16]
    8a62:	e033      	b.n	8acc <z_time_slice+0xd4>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8a64:	4e2c      	ldr	r6, [pc, #176]	; (8b18 <z_time_slice+0x120>)
    8a66:	2381      	movs	r3, #129	; 0x81
    8a68:	4632      	mov	r2, r6
    8a6a:	492c      	ldr	r1, [pc, #176]	; (8b1c <z_time_slice+0x124>)
    8a6c:	482c      	ldr	r0, [pc, #176]	; (8b20 <z_time_slice+0x128>)
    8a6e:	f002 fafc 	bl	b06a <printk>
    8a72:	4923      	ldr	r1, [pc, #140]	; (8b00 <z_time_slice+0x108>)
    8a74:	482b      	ldr	r0, [pc, #172]	; (8b24 <z_time_slice+0x12c>)
    8a76:	f002 faf8 	bl	b06a <printk>
    8a7a:	2181      	movs	r1, #129	; 0x81
    8a7c:	4630      	mov	r0, r6
    8a7e:	f002 fc4d 	bl	b31c <assert_post_action>
    8a82:	e7c7      	b.n	8a14 <z_time_slice+0x1c>
		z_reset_time_slice();
    8a84:	f7ff fce6 	bl	8454 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8a88:	481d      	ldr	r0, [pc, #116]	; (8b00 <z_time_slice+0x108>)
    8a8a:	f7fe ffbb 	bl	7a04 <z_spin_unlock_valid>
    8a8e:	b120      	cbz	r0, 8a9a <z_time_slice+0xa2>
	__asm__ volatile(
    8a90:	f385 8811 	msr	BASEPRI, r5
    8a94:	f3bf 8f6f 	isb	sy
		return;
    8a98:	e020      	b.n	8adc <z_time_slice+0xe4>
    8a9a:	4c1f      	ldr	r4, [pc, #124]	; (8b18 <z_time_slice+0x120>)
    8a9c:	23ac      	movs	r3, #172	; 0xac
    8a9e:	4622      	mov	r2, r4
    8aa0:	4921      	ldr	r1, [pc, #132]	; (8b28 <z_time_slice+0x130>)
    8aa2:	481f      	ldr	r0, [pc, #124]	; (8b20 <z_time_slice+0x128>)
    8aa4:	f002 fae1 	bl	b06a <printk>
    8aa8:	4915      	ldr	r1, [pc, #84]	; (8b00 <z_time_slice+0x108>)
    8aaa:	4820      	ldr	r0, [pc, #128]	; (8b2c <z_time_slice+0x134>)
    8aac:	f002 fadd 	bl	b06a <printk>
    8ab0:	21ac      	movs	r1, #172	; 0xac
    8ab2:	4620      	mov	r0, r4
    8ab4:	f002 fc32 	bl	b31c <assert_post_action>
    8ab8:	e7ea      	b.n	8a90 <z_time_slice+0x98>
			move_thread_to_end_of_prio_q(_current);
    8aba:	4618      	mov	r0, r3
    8abc:	f7ff ff40 	bl	8940 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
    8ac0:	f7ff fcc8 	bl	8454 <z_reset_time_slice>
    8ac4:	e002      	b.n	8acc <z_time_slice+0xd4>
		_current_cpu->slice_ticks = 0;
    8ac6:	4b0f      	ldr	r3, [pc, #60]	; (8b04 <z_time_slice+0x10c>)
    8ac8:	2200      	movs	r2, #0
    8aca:	611a      	str	r2, [r3, #16]
    8acc:	480c      	ldr	r0, [pc, #48]	; (8b00 <z_time_slice+0x108>)
    8ace:	f7fe ff99 	bl	7a04 <z_spin_unlock_valid>
    8ad2:	b120      	cbz	r0, 8ade <z_time_slice+0xe6>
    8ad4:	f385 8811 	msr	BASEPRI, r5
    8ad8:	f3bf 8f6f 	isb	sy
}
    8adc:	bd70      	pop	{r4, r5, r6, pc}
    8ade:	4c0e      	ldr	r4, [pc, #56]	; (8b18 <z_time_slice+0x120>)
    8ae0:	23ac      	movs	r3, #172	; 0xac
    8ae2:	4622      	mov	r2, r4
    8ae4:	4910      	ldr	r1, [pc, #64]	; (8b28 <z_time_slice+0x130>)
    8ae6:	480e      	ldr	r0, [pc, #56]	; (8b20 <z_time_slice+0x128>)
    8ae8:	f002 fabf 	bl	b06a <printk>
    8aec:	4904      	ldr	r1, [pc, #16]	; (8b00 <z_time_slice+0x108>)
    8aee:	480f      	ldr	r0, [pc, #60]	; (8b2c <z_time_slice+0x134>)
    8af0:	f002 fabb 	bl	b06a <printk>
    8af4:	21ac      	movs	r1, #172	; 0xac
    8af6:	4620      	mov	r0, r4
    8af8:	f002 fc10 	bl	b31c <assert_post_action>
    8afc:	e7ea      	b.n	8ad4 <z_time_slice+0xdc>
    8afe:	bf00      	nop
    8b00:	20001258 	.word	0x20001258
    8b04:	2000121c 	.word	0x2000121c
    8b08:	20001254 	.word	0x20001254
    8b0c:	20001260 	.word	0x20001260
    8b10:	2000125c 	.word	0x2000125c
    8b14:	200004a0 	.word	0x200004a0
    8b18:	0000c584 	.word	0x0000c584
    8b1c:	0000c5dc 	.word	0x0000c5dc
    8b20:	0000c46c 	.word	0x0000c46c
    8b24:	0000c5f4 	.word	0x0000c5f4
    8b28:	0000c5ac 	.word	0x0000c5ac
    8b2c:	0000c5c4 	.word	0x0000c5c4

00008b30 <ready_thread>:
{
    8b30:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    8b32:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    8b34:	f990 200d 	ldrsb.w	r2, [r0, #13]
    8b38:	2a00      	cmp	r2, #0
    8b3a:	db30      	blt.n	8b9e <ready_thread+0x6e>
    8b3c:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    8b3e:	f013 0f1f 	tst.w	r3, #31
    8b42:	d105      	bne.n	8b50 <ready_thread+0x20>
	return node->next != NULL;
    8b44:	6982      	ldr	r2, [r0, #24]
    8b46:	b10a      	cbz	r2, 8b4c <ready_thread+0x1c>
    8b48:	2200      	movs	r2, #0
    8b4a:	e002      	b.n	8b52 <ready_thread+0x22>
    8b4c:	2201      	movs	r2, #1
    8b4e:	e000      	b.n	8b52 <ready_thread+0x22>
    8b50:	2200      	movs	r2, #0
    8b52:	b322      	cbz	r2, 8b9e <ready_thread+0x6e>
	thread->base.thread_state |= _THREAD_QUEUED;
    8b54:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8b58:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8b5a:	4b1b      	ldr	r3, [pc, #108]	; (8bc8 <ready_thread+0x98>)
    8b5c:	429c      	cmp	r4, r3
    8b5e:	d01f      	beq.n	8ba0 <ready_thread+0x70>
	return list->head == list;
    8b60:	4b1a      	ldr	r3, [pc, #104]	; (8bcc <ready_thread+0x9c>)
    8b62:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8b66:	429d      	cmp	r5, r3
    8b68:	d02c      	beq.n	8bc4 <ready_thread+0x94>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8b6a:	b16d      	cbz	r5, 8b88 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8b6c:	4629      	mov	r1, r5
    8b6e:	4620      	mov	r0, r4
    8b70:	f003 f976 	bl	be60 <z_sched_prio_cmp>
    8b74:	2800      	cmp	r0, #0
    8b76:	dc1f      	bgt.n	8bb8 <ready_thread+0x88>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8b78:	b135      	cbz	r5, 8b88 <ready_thread+0x58>
	return (node == list->tail) ? NULL : node->next;
    8b7a:	4b14      	ldr	r3, [pc, #80]	; (8bcc <ready_thread+0x9c>)
    8b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8b7e:	429d      	cmp	r5, r3
    8b80:	d002      	beq.n	8b88 <ready_thread+0x58>
    8b82:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8b84:	2d00      	cmp	r5, #0
    8b86:	d1f0      	bne.n	8b6a <ready_thread+0x3a>
	sys_dnode_t *const tail = list->tail;
    8b88:	4b10      	ldr	r3, [pc, #64]	; (8bcc <ready_thread+0x9c>)
    8b8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    8b8c:	f103 0120 	add.w	r1, r3, #32
    8b90:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    8b92:	6062      	str	r2, [r4, #4]
	tail->next = node;
    8b94:	6014      	str	r4, [r2, #0]
	list->tail = node;
    8b96:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    8b98:	2000      	movs	r0, #0
    8b9a:	f7ff fe91 	bl	88c0 <update_cache>
}
    8b9e:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8ba0:	4d0b      	ldr	r5, [pc, #44]	; (8bd0 <ready_thread+0xa0>)
    8ba2:	23ba      	movs	r3, #186	; 0xba
    8ba4:	462a      	mov	r2, r5
    8ba6:	490b      	ldr	r1, [pc, #44]	; (8bd4 <ready_thread+0xa4>)
    8ba8:	480b      	ldr	r0, [pc, #44]	; (8bd8 <ready_thread+0xa8>)
    8baa:	f002 fa5e 	bl	b06a <printk>
    8bae:	21ba      	movs	r1, #186	; 0xba
    8bb0:	4628      	mov	r0, r5
    8bb2:	f002 fbb3 	bl	b31c <assert_post_action>
    8bb6:	e7d3      	b.n	8b60 <ready_thread+0x30>
	sys_dnode_t *const prev = successor->prev;
    8bb8:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    8bba:	6063      	str	r3, [r4, #4]
	node->next = successor;
    8bbc:	6025      	str	r5, [r4, #0]
	prev->next = node;
    8bbe:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    8bc0:	606c      	str	r4, [r5, #4]
}
    8bc2:	e7e9      	b.n	8b98 <ready_thread+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8bc4:	2500      	movs	r5, #0
    8bc6:	e7d0      	b.n	8b6a <ready_thread+0x3a>
    8bc8:	200004a0 	.word	0x200004a0
    8bcc:	2000121c 	.word	0x2000121c
    8bd0:	0000d438 	.word	0x0000d438
    8bd4:	0000d474 	.word	0x0000d474
    8bd8:	0000c46c 	.word	0x0000c46c

00008bdc <z_ready_thread>:
{
    8bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8bde:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    8be0:	2400      	movs	r4, #0
	__asm__ volatile(
    8be2:	f04f 0320 	mov.w	r3, #32
    8be6:	f3ef 8611 	mrs	r6, BASEPRI
    8bea:	f383 8812 	msr	BASEPRI_MAX, r3
    8bee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8bf2:	481e      	ldr	r0, [pc, #120]	; (8c6c <z_ready_thread+0x90>)
    8bf4:	f7fe fef6 	bl	79e4 <z_spin_lock_valid>
    8bf8:	b118      	cbz	r0, 8c02 <z_ready_thread+0x26>
	z_spin_lock_set_owner(l);
    8bfa:	481c      	ldr	r0, [pc, #112]	; (8c6c <z_ready_thread+0x90>)
    8bfc:	f7fe ff12 	bl	7a24 <z_spin_lock_set_owner>
	return k;
    8c00:	e027      	b.n	8c52 <z_ready_thread+0x76>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8c02:	4f1b      	ldr	r7, [pc, #108]	; (8c70 <z_ready_thread+0x94>)
    8c04:	2381      	movs	r3, #129	; 0x81
    8c06:	463a      	mov	r2, r7
    8c08:	491a      	ldr	r1, [pc, #104]	; (8c74 <z_ready_thread+0x98>)
    8c0a:	481b      	ldr	r0, [pc, #108]	; (8c78 <z_ready_thread+0x9c>)
    8c0c:	f002 fa2d 	bl	b06a <printk>
    8c10:	4916      	ldr	r1, [pc, #88]	; (8c6c <z_ready_thread+0x90>)
    8c12:	481a      	ldr	r0, [pc, #104]	; (8c7c <z_ready_thread+0xa0>)
    8c14:	f002 fa29 	bl	b06a <printk>
    8c18:	2181      	movs	r1, #129	; 0x81
    8c1a:	4638      	mov	r0, r7
    8c1c:	f002 fb7e 	bl	b31c <assert_post_action>
    8c20:	e7eb      	b.n	8bfa <z_ready_thread+0x1e>
			ready_thread(thread);
    8c22:	4628      	mov	r0, r5
    8c24:	f7ff ff84 	bl	8b30 <ready_thread>
    8c28:	e019      	b.n	8c5e <z_ready_thread+0x82>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8c2a:	4c11      	ldr	r4, [pc, #68]	; (8c70 <z_ready_thread+0x94>)
    8c2c:	23ac      	movs	r3, #172	; 0xac
    8c2e:	4622      	mov	r2, r4
    8c30:	4913      	ldr	r1, [pc, #76]	; (8c80 <z_ready_thread+0xa4>)
    8c32:	4811      	ldr	r0, [pc, #68]	; (8c78 <z_ready_thread+0x9c>)
    8c34:	f002 fa19 	bl	b06a <printk>
    8c38:	490c      	ldr	r1, [pc, #48]	; (8c6c <z_ready_thread+0x90>)
    8c3a:	4812      	ldr	r0, [pc, #72]	; (8c84 <z_ready_thread+0xa8>)
    8c3c:	f002 fa15 	bl	b06a <printk>
    8c40:	21ac      	movs	r1, #172	; 0xac
    8c42:	4620      	mov	r0, r4
    8c44:	f002 fb6a 	bl	b31c <assert_post_action>
	__asm__ volatile(
    8c48:	f386 8811 	msr	BASEPRI, r6
    8c4c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    8c50:	2401      	movs	r4, #1
    8c52:	b954      	cbnz	r4, 8c6a <z_ready_thread+0x8e>
		if (!thread_active_elsewhere(thread)) {
    8c54:	4628      	mov	r0, r5
    8c56:	f003 f901 	bl	be5c <thread_active_elsewhere>
    8c5a:	2800      	cmp	r0, #0
    8c5c:	d0e1      	beq.n	8c22 <z_ready_thread+0x46>
    8c5e:	4803      	ldr	r0, [pc, #12]	; (8c6c <z_ready_thread+0x90>)
    8c60:	f7fe fed0 	bl	7a04 <z_spin_unlock_valid>
    8c64:	2800      	cmp	r0, #0
    8c66:	d1ef      	bne.n	8c48 <z_ready_thread+0x6c>
    8c68:	e7df      	b.n	8c2a <z_ready_thread+0x4e>
}
    8c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8c6c:	20001258 	.word	0x20001258
    8c70:	0000c584 	.word	0x0000c584
    8c74:	0000c5dc 	.word	0x0000c5dc
    8c78:	0000c46c 	.word	0x0000c46c
    8c7c:	0000c5f4 	.word	0x0000c5f4
    8c80:	0000c5ac 	.word	0x0000c5ac
    8c84:	0000c5c4 	.word	0x0000c5c4

00008c88 <z_sched_start>:
{
    8c88:	b570      	push	{r4, r5, r6, lr}
    8c8a:	4604      	mov	r4, r0
	__asm__ volatile(
    8c8c:	f04f 0320 	mov.w	r3, #32
    8c90:	f3ef 8511 	mrs	r5, BASEPRI
    8c94:	f383 8812 	msr	BASEPRI_MAX, r3
    8c98:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8c9c:	481f      	ldr	r0, [pc, #124]	; (8d1c <z_sched_start+0x94>)
    8c9e:	f7fe fea1 	bl	79e4 <z_spin_lock_valid>
    8ca2:	b188      	cbz	r0, 8cc8 <z_sched_start+0x40>
	z_spin_lock_set_owner(l);
    8ca4:	481d      	ldr	r0, [pc, #116]	; (8d1c <z_sched_start+0x94>)
    8ca6:	f7fe febd 	bl	7a24 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    8caa:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
    8cac:	f013 0f04 	tst.w	r3, #4
    8cb0:	d01a      	beq.n	8ce8 <z_sched_start+0x60>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    8cb2:	f023 0304 	bic.w	r3, r3, #4
    8cb6:	7363      	strb	r3, [r4, #13]
	ready_thread(thread);
    8cb8:	4620      	mov	r0, r4
    8cba:	f7ff ff39 	bl	8b30 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    8cbe:	4629      	mov	r1, r5
    8cc0:	4816      	ldr	r0, [pc, #88]	; (8d1c <z_sched_start+0x94>)
    8cc2:	f7ff fcab 	bl	861c <z_reschedule>
}
    8cc6:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8cc8:	4e15      	ldr	r6, [pc, #84]	; (8d20 <z_sched_start+0x98>)
    8cca:	2381      	movs	r3, #129	; 0x81
    8ccc:	4632      	mov	r2, r6
    8cce:	4915      	ldr	r1, [pc, #84]	; (8d24 <z_sched_start+0x9c>)
    8cd0:	4815      	ldr	r0, [pc, #84]	; (8d28 <z_sched_start+0xa0>)
    8cd2:	f002 f9ca 	bl	b06a <printk>
    8cd6:	4911      	ldr	r1, [pc, #68]	; (8d1c <z_sched_start+0x94>)
    8cd8:	4814      	ldr	r0, [pc, #80]	; (8d2c <z_sched_start+0xa4>)
    8cda:	f002 f9c6 	bl	b06a <printk>
    8cde:	2181      	movs	r1, #129	; 0x81
    8ce0:	4630      	mov	r0, r6
    8ce2:	f002 fb1b 	bl	b31c <assert_post_action>
    8ce6:	e7dd      	b.n	8ca4 <z_sched_start+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8ce8:	480c      	ldr	r0, [pc, #48]	; (8d1c <z_sched_start+0x94>)
    8cea:	f7fe fe8b 	bl	7a04 <z_spin_unlock_valid>
    8cee:	b120      	cbz	r0, 8cfa <z_sched_start+0x72>
	__asm__ volatile(
    8cf0:	f385 8811 	msr	BASEPRI, r5
    8cf4:	f3bf 8f6f 	isb	sy
		return;
    8cf8:	e7e5      	b.n	8cc6 <z_sched_start+0x3e>
    8cfa:	4c09      	ldr	r4, [pc, #36]	; (8d20 <z_sched_start+0x98>)
    8cfc:	23ac      	movs	r3, #172	; 0xac
    8cfe:	4622      	mov	r2, r4
    8d00:	490b      	ldr	r1, [pc, #44]	; (8d30 <z_sched_start+0xa8>)
    8d02:	4809      	ldr	r0, [pc, #36]	; (8d28 <z_sched_start+0xa0>)
    8d04:	f002 f9b1 	bl	b06a <printk>
    8d08:	4904      	ldr	r1, [pc, #16]	; (8d1c <z_sched_start+0x94>)
    8d0a:	480a      	ldr	r0, [pc, #40]	; (8d34 <z_sched_start+0xac>)
    8d0c:	f002 f9ad 	bl	b06a <printk>
    8d10:	21ac      	movs	r1, #172	; 0xac
    8d12:	4620      	mov	r0, r4
    8d14:	f002 fb02 	bl	b31c <assert_post_action>
    8d18:	e7ea      	b.n	8cf0 <z_sched_start+0x68>
    8d1a:	bf00      	nop
    8d1c:	20001258 	.word	0x20001258
    8d20:	0000c584 	.word	0x0000c584
    8d24:	0000c5dc 	.word	0x0000c5dc
    8d28:	0000c46c 	.word	0x0000c46c
    8d2c:	0000c5f4 	.word	0x0000c5f4
    8d30:	0000c5ac 	.word	0x0000c5ac
    8d34:	0000c5c4 	.word	0x0000c5c4

00008d38 <z_thread_timeout>:
{
    8d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8d3c:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    8d3e:	f1a0 0618 	sub.w	r6, r0, #24
	LOCKED(&sched_spinlock) {
    8d42:	2500      	movs	r5, #0
	__asm__ volatile(
    8d44:	f04f 0320 	mov.w	r3, #32
    8d48:	f3ef 8711 	mrs	r7, BASEPRI
    8d4c:	f383 8812 	msr	BASEPRI_MAX, r3
    8d50:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8d54:	4829      	ldr	r0, [pc, #164]	; (8dfc <z_thread_timeout+0xc4>)
    8d56:	f7fe fe45 	bl	79e4 <z_spin_lock_valid>
    8d5a:	b118      	cbz	r0, 8d64 <z_thread_timeout+0x2c>
	z_spin_lock_set_owner(l);
    8d5c:	4827      	ldr	r0, [pc, #156]	; (8dfc <z_thread_timeout+0xc4>)
    8d5e:	f7fe fe61 	bl	7a24 <z_spin_lock_set_owner>
	return k;
    8d62:	e02e      	b.n	8dc2 <z_thread_timeout+0x8a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8d64:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8e0c <z_thread_timeout+0xd4>
    8d68:	2381      	movs	r3, #129	; 0x81
    8d6a:	4642      	mov	r2, r8
    8d6c:	4924      	ldr	r1, [pc, #144]	; (8e00 <z_thread_timeout+0xc8>)
    8d6e:	4825      	ldr	r0, [pc, #148]	; (8e04 <z_thread_timeout+0xcc>)
    8d70:	f002 f97b 	bl	b06a <printk>
    8d74:	4921      	ldr	r1, [pc, #132]	; (8dfc <z_thread_timeout+0xc4>)
    8d76:	4824      	ldr	r0, [pc, #144]	; (8e08 <z_thread_timeout+0xd0>)
    8d78:	f002 f977 	bl	b06a <printk>
    8d7c:	2181      	movs	r1, #129	; 0x81
    8d7e:	4640      	mov	r0, r8
    8d80:	f002 facc 	bl	b31c <assert_post_action>
    8d84:	e7ea      	b.n	8d5c <z_thread_timeout+0x24>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    8d86:	4630      	mov	r0, r6
    8d88:	f7ff fb3a 	bl	8400 <pended_on_thread>
    8d8c:	4631      	mov	r1, r6
    8d8e:	f7ff fd15 	bl	87bc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    8d92:	7b73      	ldrb	r3, [r6, #13]
    8d94:	f023 0302 	bic.w	r3, r3, #2
    8d98:	7373      	strb	r3, [r6, #13]
	thread->base.pended_on = NULL;
    8d9a:	2300      	movs	r3, #0
    8d9c:	60b3      	str	r3, [r6, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    8d9e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    8da2:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
    8da6:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    8daa:	4630      	mov	r0, r6
    8dac:	f7ff fec0 	bl	8b30 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8db0:	4812      	ldr	r0, [pc, #72]	; (8dfc <z_thread_timeout+0xc4>)
    8db2:	f7fe fe27 	bl	7a04 <z_spin_unlock_valid>
    8db6:	b178      	cbz	r0, 8dd8 <z_thread_timeout+0xa0>
	__asm__ volatile(
    8db8:	f387 8811 	msr	BASEPRI, r7
    8dbc:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    8dc0:	2501      	movs	r5, #1
    8dc2:	b9cd      	cbnz	r5, 8df8 <z_thread_timeout+0xc0>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    8dc4:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    8dc8:	f013 0f28 	tst.w	r3, #40	; 0x28
    8dcc:	d1f0      	bne.n	8db0 <z_thread_timeout+0x78>
			if (thread->base.pended_on != NULL) {
    8dce:	f854 3c10 	ldr.w	r3, [r4, #-16]
    8dd2:	2b00      	cmp	r3, #0
    8dd4:	d1d7      	bne.n	8d86 <z_thread_timeout+0x4e>
    8dd6:	e7e2      	b.n	8d9e <z_thread_timeout+0x66>
    8dd8:	4d0c      	ldr	r5, [pc, #48]	; (8e0c <z_thread_timeout+0xd4>)
    8dda:	23ac      	movs	r3, #172	; 0xac
    8ddc:	462a      	mov	r2, r5
    8dde:	490c      	ldr	r1, [pc, #48]	; (8e10 <z_thread_timeout+0xd8>)
    8de0:	4808      	ldr	r0, [pc, #32]	; (8e04 <z_thread_timeout+0xcc>)
    8de2:	f002 f942 	bl	b06a <printk>
    8de6:	4905      	ldr	r1, [pc, #20]	; (8dfc <z_thread_timeout+0xc4>)
    8de8:	480a      	ldr	r0, [pc, #40]	; (8e14 <z_thread_timeout+0xdc>)
    8dea:	f002 f93e 	bl	b06a <printk>
    8dee:	21ac      	movs	r1, #172	; 0xac
    8df0:	4628      	mov	r0, r5
    8df2:	f002 fa93 	bl	b31c <assert_post_action>
    8df6:	e7df      	b.n	8db8 <z_thread_timeout+0x80>
}
    8df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8dfc:	20001258 	.word	0x20001258
    8e00:	0000c5dc 	.word	0x0000c5dc
    8e04:	0000c46c 	.word	0x0000c46c
    8e08:	0000c5f4 	.word	0x0000c5f4
    8e0c:	0000c584 	.word	0x0000c584
    8e10:	0000c5ac 	.word	0x0000c5ac
    8e14:	0000c5c4 	.word	0x0000c5c4

00008e18 <unready_thread>:
{
    8e18:	b510      	push	{r4, lr}
    8e1a:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    8e1c:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    8e1e:	f990 300d 	ldrsb.w	r3, [r0, #13]
    8e22:	2b00      	cmp	r3, #0
    8e24:	db08      	blt.n	8e38 <unready_thread+0x20>
	update_cache(thread == _current);
    8e26:	4b08      	ldr	r3, [pc, #32]	; (8e48 <unready_thread+0x30>)
    8e28:	6898      	ldr	r0, [r3, #8]
    8e2a:	42a0      	cmp	r0, r4
    8e2c:	bf14      	ite	ne
    8e2e:	2000      	movne	r0, #0
    8e30:	2001      	moveq	r0, #1
    8e32:	f7ff fd45 	bl	88c0 <update_cache>
}
    8e36:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8e38:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    8e3c:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    8e3e:	4601      	mov	r1, r0
    8e40:	4802      	ldr	r0, [pc, #8]	; (8e4c <unready_thread+0x34>)
    8e42:	f7ff fcbb 	bl	87bc <z_priq_dumb_remove>
}
    8e46:	e7ee      	b.n	8e26 <unready_thread+0xe>
    8e48:	2000121c 	.word	0x2000121c
    8e4c:	2000123c 	.word	0x2000123c

00008e50 <add_to_waitq_locked>:
{
    8e50:	b570      	push	{r4, r5, r6, lr}
    8e52:	4605      	mov	r5, r0
    8e54:	460e      	mov	r6, r1
	unready_thread(thread);
    8e56:	f7ff ffdf 	bl	8e18 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    8e5a:	7b6b      	ldrb	r3, [r5, #13]
    8e5c:	f043 0302 	orr.w	r3, r3, #2
    8e60:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    8e62:	b1ce      	cbz	r6, 8e98 <add_to_waitq_locked+0x48>
		thread->base.pended_on = wait_q;
    8e64:	60ae      	str	r6, [r5, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8e66:	4b17      	ldr	r3, [pc, #92]	; (8ec4 <add_to_waitq_locked+0x74>)
    8e68:	429d      	cmp	r5, r3
    8e6a:	d016      	beq.n	8e9a <add_to_waitq_locked+0x4a>
	return list->head == list;
    8e6c:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8e6e:	42a6      	cmp	r6, r4
    8e70:	d025      	beq.n	8ebe <add_to_waitq_locked+0x6e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8e72:	b164      	cbz	r4, 8e8e <add_to_waitq_locked+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8e74:	4621      	mov	r1, r4
    8e76:	4628      	mov	r0, r5
    8e78:	f002 fff2 	bl	be60 <z_sched_prio_cmp>
    8e7c:	2800      	cmp	r0, #0
    8e7e:	dc18      	bgt.n	8eb2 <add_to_waitq_locked+0x62>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8e80:	b12c      	cbz	r4, 8e8e <add_to_waitq_locked+0x3e>
	return (node == list->tail) ? NULL : node->next;
    8e82:	6873      	ldr	r3, [r6, #4]
    8e84:	429c      	cmp	r4, r3
    8e86:	d002      	beq.n	8e8e <add_to_waitq_locked+0x3e>
    8e88:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8e8a:	2c00      	cmp	r4, #0
    8e8c:	d1f1      	bne.n	8e72 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    8e8e:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    8e90:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    8e92:	606b      	str	r3, [r5, #4]
	tail->next = node;
    8e94:	601d      	str	r5, [r3, #0]
	list->tail = node;
    8e96:	6075      	str	r5, [r6, #4]
}
    8e98:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8e9a:	4c0b      	ldr	r4, [pc, #44]	; (8ec8 <add_to_waitq_locked+0x78>)
    8e9c:	23ba      	movs	r3, #186	; 0xba
    8e9e:	4622      	mov	r2, r4
    8ea0:	490a      	ldr	r1, [pc, #40]	; (8ecc <add_to_waitq_locked+0x7c>)
    8ea2:	480b      	ldr	r0, [pc, #44]	; (8ed0 <add_to_waitq_locked+0x80>)
    8ea4:	f002 f8e1 	bl	b06a <printk>
    8ea8:	21ba      	movs	r1, #186	; 0xba
    8eaa:	4620      	mov	r0, r4
    8eac:	f002 fa36 	bl	b31c <assert_post_action>
    8eb0:	e7dc      	b.n	8e6c <add_to_waitq_locked+0x1c>
	sys_dnode_t *const prev = successor->prev;
    8eb2:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    8eb4:	606b      	str	r3, [r5, #4]
	node->next = successor;
    8eb6:	602c      	str	r4, [r5, #0]
	prev->next = node;
    8eb8:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    8eba:	6065      	str	r5, [r4, #4]
}
    8ebc:	e7ec      	b.n	8e98 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8ebe:	2400      	movs	r4, #0
    8ec0:	e7d7      	b.n	8e72 <add_to_waitq_locked+0x22>
    8ec2:	bf00      	nop
    8ec4:	200004a0 	.word	0x200004a0
    8ec8:	0000d438 	.word	0x0000d438
    8ecc:	0000d474 	.word	0x0000d474
    8ed0:	0000c46c 	.word	0x0000c46c

00008ed4 <pend>:
{
    8ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8ed8:	4605      	mov	r5, r0
    8eda:	460f      	mov	r7, r1
    8edc:	4691      	mov	r9, r2
    8ede:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    8ee0:	2400      	movs	r4, #0
	__asm__ volatile(
    8ee2:	f04f 0320 	mov.w	r3, #32
    8ee6:	f3ef 8611 	mrs	r6, BASEPRI
    8eea:	f383 8812 	msr	BASEPRI_MAX, r3
    8eee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8ef2:	481f      	ldr	r0, [pc, #124]	; (8f70 <pend+0x9c>)
    8ef4:	f7fe fd76 	bl	79e4 <z_spin_lock_valid>
    8ef8:	b118      	cbz	r0, 8f02 <pend+0x2e>
	z_spin_lock_set_owner(l);
    8efa:	481d      	ldr	r0, [pc, #116]	; (8f70 <pend+0x9c>)
    8efc:	f7fe fd92 	bl	7a24 <z_spin_lock_set_owner>
	return k;
    8f00:	e024      	b.n	8f4c <pend+0x78>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8f02:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8f80 <pend+0xac>
    8f06:	2381      	movs	r3, #129	; 0x81
    8f08:	4652      	mov	r2, sl
    8f0a:	491a      	ldr	r1, [pc, #104]	; (8f74 <pend+0xa0>)
    8f0c:	481a      	ldr	r0, [pc, #104]	; (8f78 <pend+0xa4>)
    8f0e:	f002 f8ac 	bl	b06a <printk>
    8f12:	4917      	ldr	r1, [pc, #92]	; (8f70 <pend+0x9c>)
    8f14:	4819      	ldr	r0, [pc, #100]	; (8f7c <pend+0xa8>)
    8f16:	f002 f8a8 	bl	b06a <printk>
    8f1a:	2181      	movs	r1, #129	; 0x81
    8f1c:	4650      	mov	r0, sl
    8f1e:	f002 f9fd 	bl	b31c <assert_post_action>
    8f22:	e7ea      	b.n	8efa <pend+0x26>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8f24:	4c16      	ldr	r4, [pc, #88]	; (8f80 <pend+0xac>)
    8f26:	23ac      	movs	r3, #172	; 0xac
    8f28:	4622      	mov	r2, r4
    8f2a:	4916      	ldr	r1, [pc, #88]	; (8f84 <pend+0xb0>)
    8f2c:	4812      	ldr	r0, [pc, #72]	; (8f78 <pend+0xa4>)
    8f2e:	f002 f89c 	bl	b06a <printk>
    8f32:	490f      	ldr	r1, [pc, #60]	; (8f70 <pend+0x9c>)
    8f34:	4814      	ldr	r0, [pc, #80]	; (8f88 <pend+0xb4>)
    8f36:	f002 f898 	bl	b06a <printk>
    8f3a:	21ac      	movs	r1, #172	; 0xac
    8f3c:	4620      	mov	r0, r4
    8f3e:	f002 f9ed 	bl	b31c <assert_post_action>
	__asm__ volatile(
    8f42:	f386 8811 	msr	BASEPRI, r6
    8f46:	f3bf 8f6f 	isb	sy
    8f4a:	2401      	movs	r4, #1
    8f4c:	b94c      	cbnz	r4, 8f62 <pend+0x8e>
		add_to_waitq_locked(thread, wait_q);
    8f4e:	4639      	mov	r1, r7
    8f50:	4628      	mov	r0, r5
    8f52:	f7ff ff7d 	bl	8e50 <add_to_waitq_locked>
    8f56:	4806      	ldr	r0, [pc, #24]	; (8f70 <pend+0x9c>)
    8f58:	f7fe fd54 	bl	7a04 <z_spin_unlock_valid>
    8f5c:	2800      	cmp	r0, #0
    8f5e:	d1f0      	bne.n	8f42 <pend+0x6e>
    8f60:	e7e0      	b.n	8f24 <pend+0x50>
	add_thread_timeout(thread, timeout);
    8f62:	464a      	mov	r2, r9
    8f64:	4643      	mov	r3, r8
    8f66:	4628      	mov	r0, r5
    8f68:	f7ff fa64 	bl	8434 <add_thread_timeout>
}
    8f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8f70:	20001258 	.word	0x20001258
    8f74:	0000c5dc 	.word	0x0000c5dc
    8f78:	0000c46c 	.word	0x0000c46c
    8f7c:	0000c5f4 	.word	0x0000c5f4
    8f80:	0000c584 	.word	0x0000c584
    8f84:	0000c5ac 	.word	0x0000c5ac
    8f88:	0000c5c4 	.word	0x0000c5c4

00008f8c <z_pend_curr>:
{
    8f8c:	b570      	push	{r4, r5, r6, lr}
    8f8e:	4604      	mov	r4, r0
    8f90:	460d      	mov	r5, r1
    8f92:	4611      	mov	r1, r2
	pending_current = _current;
    8f94:	4b0f      	ldr	r3, [pc, #60]	; (8fd4 <z_pend_curr+0x48>)
    8f96:	6898      	ldr	r0, [r3, #8]
    8f98:	4b0f      	ldr	r3, [pc, #60]	; (8fd8 <z_pend_curr+0x4c>)
    8f9a:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    8f9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    8fa0:	f7ff ff98 	bl	8ed4 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8fa4:	4620      	mov	r0, r4
    8fa6:	f7fe fd2d 	bl	7a04 <z_spin_unlock_valid>
    8faa:	b118      	cbz	r0, 8fb4 <z_pend_curr+0x28>
    8fac:	4628      	mov	r0, r5
    8fae:	f7f9 ff71 	bl	2e94 <arch_swap>
}
    8fb2:	bd70      	pop	{r4, r5, r6, pc}
    8fb4:	4e09      	ldr	r6, [pc, #36]	; (8fdc <z_pend_curr+0x50>)
    8fb6:	23c3      	movs	r3, #195	; 0xc3
    8fb8:	4632      	mov	r2, r6
    8fba:	4909      	ldr	r1, [pc, #36]	; (8fe0 <z_pend_curr+0x54>)
    8fbc:	4809      	ldr	r0, [pc, #36]	; (8fe4 <z_pend_curr+0x58>)
    8fbe:	f002 f854 	bl	b06a <printk>
    8fc2:	4621      	mov	r1, r4
    8fc4:	4808      	ldr	r0, [pc, #32]	; (8fe8 <z_pend_curr+0x5c>)
    8fc6:	f002 f850 	bl	b06a <printk>
    8fca:	21c3      	movs	r1, #195	; 0xc3
    8fcc:	4630      	mov	r0, r6
    8fce:	f002 f9a5 	bl	b31c <assert_post_action>
    8fd2:	e7eb      	b.n	8fac <z_pend_curr+0x20>
    8fd4:	2000121c 	.word	0x2000121c
    8fd8:	20001254 	.word	0x20001254
    8fdc:	0000c584 	.word	0x0000c584
    8fe0:	0000c5ac 	.word	0x0000c5ac
    8fe4:	0000c46c 	.word	0x0000c46c
    8fe8:	0000c5c4 	.word	0x0000c5c4

00008fec <z_set_prio>:
{
    8fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8ff0:	4604      	mov	r4, r0
    8ff2:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
    8ff4:	2500      	movs	r5, #0
	__asm__ volatile(
    8ff6:	f04f 0320 	mov.w	r3, #32
    8ffa:	f3ef 8611 	mrs	r6, BASEPRI
    8ffe:	f383 8812 	msr	BASEPRI_MAX, r3
    9002:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9006:	4845      	ldr	r0, [pc, #276]	; (911c <z_set_prio+0x130>)
    9008:	f7fe fcec 	bl	79e4 <z_spin_lock_valid>
    900c:	b128      	cbz	r0, 901a <z_set_prio+0x2e>
	z_spin_lock_set_owner(l);
    900e:	4843      	ldr	r0, [pc, #268]	; (911c <z_set_prio+0x130>)
    9010:	f7fe fd08 	bl	7a24 <z_spin_lock_set_owner>
	bool need_sched = 0;
    9014:	f04f 0800 	mov.w	r8, #0
	return k;
    9018:	e01e      	b.n	9058 <z_set_prio+0x6c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    901a:	f8df 8124 	ldr.w	r8, [pc, #292]	; 9140 <z_set_prio+0x154>
    901e:	2381      	movs	r3, #129	; 0x81
    9020:	4642      	mov	r2, r8
    9022:	493f      	ldr	r1, [pc, #252]	; (9120 <z_set_prio+0x134>)
    9024:	483f      	ldr	r0, [pc, #252]	; (9124 <z_set_prio+0x138>)
    9026:	f002 f820 	bl	b06a <printk>
    902a:	493c      	ldr	r1, [pc, #240]	; (911c <z_set_prio+0x130>)
    902c:	483e      	ldr	r0, [pc, #248]	; (9128 <z_set_prio+0x13c>)
    902e:	f002 f81c 	bl	b06a <printk>
    9032:	2181      	movs	r1, #129	; 0x81
    9034:	4640      	mov	r0, r8
    9036:	f002 f971 	bl	b31c <assert_post_action>
    903a:	e7e8      	b.n	900e <z_set_prio+0x22>
		if (need_sched) {
    903c:	f013 0801 	ands.w	r8, r3, #1
    9040:	d116      	bne.n	9070 <z_set_prio+0x84>
			thread->base.prio = prio;
    9042:	73a7      	strb	r7, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9044:	4835      	ldr	r0, [pc, #212]	; (911c <z_set_prio+0x130>)
    9046:	f7fe fcdd 	bl	7a04 <z_spin_unlock_valid>
    904a:	2800      	cmp	r0, #0
    904c:	d053      	beq.n	90f6 <z_set_prio+0x10a>
	__asm__ volatile(
    904e:	f386 8811 	msr	BASEPRI, r6
    9052:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    9056:	2501      	movs	r5, #1
    9058:	462b      	mov	r3, r5
    905a:	2d00      	cmp	r5, #0
    905c:	d15b      	bne.n	9116 <z_set_prio+0x12a>
	uint8_t state = thread->base.thread_state;
    905e:	7b62      	ldrb	r2, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    9060:	f012 0f1f 	tst.w	r2, #31
    9064:	d1ea      	bne.n	903c <z_set_prio+0x50>
	return node->next != NULL;
    9066:	69a1      	ldr	r1, [r4, #24]
    9068:	2900      	cmp	r1, #0
    906a:	d1e7      	bne.n	903c <z_set_prio+0x50>
    906c:	2301      	movs	r3, #1
    906e:	e7e5      	b.n	903c <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    9070:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    9074:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    9076:	4621      	mov	r1, r4
    9078:	482c      	ldr	r0, [pc, #176]	; (912c <z_set_prio+0x140>)
    907a:	f7ff fb9f 	bl	87bc <z_priq_dumb_remove>
				thread->base.prio = prio;
    907e:	73a7      	strb	r7, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    9080:	7b63      	ldrb	r3, [r4, #13]
    9082:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9086:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    9088:	4b29      	ldr	r3, [pc, #164]	; (9130 <z_set_prio+0x144>)
    908a:	429c      	cmp	r4, r3
    908c:	d01f      	beq.n	90ce <z_set_prio+0xe2>
	return list->head == list;
    908e:	4b29      	ldr	r3, [pc, #164]	; (9134 <z_set_prio+0x148>)
    9090:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9094:	429d      	cmp	r5, r3
    9096:	d02c      	beq.n	90f2 <z_set_prio+0x106>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9098:	b16d      	cbz	r5, 90b6 <z_set_prio+0xca>
		if (z_sched_prio_cmp(thread, t) > 0) {
    909a:	4629      	mov	r1, r5
    909c:	4620      	mov	r0, r4
    909e:	f002 fedf 	bl	be60 <z_sched_prio_cmp>
    90a2:	2800      	cmp	r0, #0
    90a4:	dc1f      	bgt.n	90e6 <z_set_prio+0xfa>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    90a6:	b135      	cbz	r5, 90b6 <z_set_prio+0xca>
	return (node == list->tail) ? NULL : node->next;
    90a8:	4b22      	ldr	r3, [pc, #136]	; (9134 <z_set_prio+0x148>)
    90aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    90ac:	429d      	cmp	r5, r3
    90ae:	d002      	beq.n	90b6 <z_set_prio+0xca>
    90b0:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    90b2:	2d00      	cmp	r5, #0
    90b4:	d1f0      	bne.n	9098 <z_set_prio+0xac>
	sys_dnode_t *const tail = list->tail;
    90b6:	4b1f      	ldr	r3, [pc, #124]	; (9134 <z_set_prio+0x148>)
    90b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    90ba:	f103 0120 	add.w	r1, r3, #32
    90be:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    90c0:	6062      	str	r2, [r4, #4]
	tail->next = node;
    90c2:	6014      	str	r4, [r2, #0]
	list->tail = node;
    90c4:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    90c6:	2001      	movs	r0, #1
    90c8:	f7ff fbfa 	bl	88c0 <update_cache>
    90cc:	e7ba      	b.n	9044 <z_set_prio+0x58>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    90ce:	4d1a      	ldr	r5, [pc, #104]	; (9138 <z_set_prio+0x14c>)
    90d0:	23ba      	movs	r3, #186	; 0xba
    90d2:	462a      	mov	r2, r5
    90d4:	4919      	ldr	r1, [pc, #100]	; (913c <z_set_prio+0x150>)
    90d6:	4813      	ldr	r0, [pc, #76]	; (9124 <z_set_prio+0x138>)
    90d8:	f001 ffc7 	bl	b06a <printk>
    90dc:	21ba      	movs	r1, #186	; 0xba
    90de:	4628      	mov	r0, r5
    90e0:	f002 f91c 	bl	b31c <assert_post_action>
    90e4:	e7d3      	b.n	908e <z_set_prio+0xa2>
	sys_dnode_t *const prev = successor->prev;
    90e6:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    90e8:	6063      	str	r3, [r4, #4]
	node->next = successor;
    90ea:	6025      	str	r5, [r4, #0]
	prev->next = node;
    90ec:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    90ee:	606c      	str	r4, [r5, #4]
}
    90f0:	e7e9      	b.n	90c6 <z_set_prio+0xda>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    90f2:	2500      	movs	r5, #0
    90f4:	e7d0      	b.n	9098 <z_set_prio+0xac>
    90f6:	4d12      	ldr	r5, [pc, #72]	; (9140 <z_set_prio+0x154>)
    90f8:	23ac      	movs	r3, #172	; 0xac
    90fa:	462a      	mov	r2, r5
    90fc:	4911      	ldr	r1, [pc, #68]	; (9144 <z_set_prio+0x158>)
    90fe:	4809      	ldr	r0, [pc, #36]	; (9124 <z_set_prio+0x138>)
    9100:	f001 ffb3 	bl	b06a <printk>
    9104:	4905      	ldr	r1, [pc, #20]	; (911c <z_set_prio+0x130>)
    9106:	4810      	ldr	r0, [pc, #64]	; (9148 <z_set_prio+0x15c>)
    9108:	f001 ffaf 	bl	b06a <printk>
    910c:	21ac      	movs	r1, #172	; 0xac
    910e:	4628      	mov	r0, r5
    9110:	f002 f904 	bl	b31c <assert_post_action>
    9114:	e79b      	b.n	904e <z_set_prio+0x62>
}
    9116:	4640      	mov	r0, r8
    9118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    911c:	20001258 	.word	0x20001258
    9120:	0000c5dc 	.word	0x0000c5dc
    9124:	0000c46c 	.word	0x0000c46c
    9128:	0000c5f4 	.word	0x0000c5f4
    912c:	2000123c 	.word	0x2000123c
    9130:	200004a0 	.word	0x200004a0
    9134:	2000121c 	.word	0x2000121c
    9138:	0000d438 	.word	0x0000d438
    913c:	0000d474 	.word	0x0000d474
    9140:	0000c584 	.word	0x0000c584
    9144:	0000c5ac 	.word	0x0000c5ac
    9148:	0000c5c4 	.word	0x0000c5c4

0000914c <z_impl_k_thread_suspend>:
{
    914c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    914e:	4604      	mov	r4, r0
    9150:	3018      	adds	r0, #24
    9152:	f000 fe81 	bl	9e58 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    9156:	2500      	movs	r5, #0
	__asm__ volatile(
    9158:	f04f 0320 	mov.w	r3, #32
    915c:	f3ef 8611 	mrs	r6, BASEPRI
    9160:	f383 8812 	msr	BASEPRI_MAX, r3
    9164:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9168:	482d      	ldr	r0, [pc, #180]	; (9220 <z_impl_k_thread_suspend+0xd4>)
    916a:	f7fe fc3b 	bl	79e4 <z_spin_lock_valid>
    916e:	b118      	cbz	r0, 9178 <z_impl_k_thread_suspend+0x2c>
	z_spin_lock_set_owner(l);
    9170:	482b      	ldr	r0, [pc, #172]	; (9220 <z_impl_k_thread_suspend+0xd4>)
    9172:	f7fe fc57 	bl	7a24 <z_spin_lock_set_owner>
	return k;
    9176:	e02b      	b.n	91d0 <z_impl_k_thread_suspend+0x84>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9178:	4f2a      	ldr	r7, [pc, #168]	; (9224 <z_impl_k_thread_suspend+0xd8>)
    917a:	2381      	movs	r3, #129	; 0x81
    917c:	463a      	mov	r2, r7
    917e:	492a      	ldr	r1, [pc, #168]	; (9228 <z_impl_k_thread_suspend+0xdc>)
    9180:	482a      	ldr	r0, [pc, #168]	; (922c <z_impl_k_thread_suspend+0xe0>)
    9182:	f001 ff72 	bl	b06a <printk>
    9186:	4926      	ldr	r1, [pc, #152]	; (9220 <z_impl_k_thread_suspend+0xd4>)
    9188:	4829      	ldr	r0, [pc, #164]	; (9230 <z_impl_k_thread_suspend+0xe4>)
    918a:	f001 ff6e 	bl	b06a <printk>
    918e:	2181      	movs	r1, #129	; 0x81
    9190:	4638      	mov	r0, r7
    9192:	f002 f8c3 	bl	b31c <assert_post_action>
    9196:	e7eb      	b.n	9170 <z_impl_k_thread_suspend+0x24>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    9198:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    919c:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    919e:	4621      	mov	r1, r4
    91a0:	4824      	ldr	r0, [pc, #144]	; (9234 <z_impl_k_thread_suspend+0xe8>)
    91a2:	f7ff fb0b 	bl	87bc <z_priq_dumb_remove>
}
    91a6:	e019      	b.n	91dc <z_impl_k_thread_suspend+0x90>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    91a8:	4d1e      	ldr	r5, [pc, #120]	; (9224 <z_impl_k_thread_suspend+0xd8>)
    91aa:	23ac      	movs	r3, #172	; 0xac
    91ac:	462a      	mov	r2, r5
    91ae:	4922      	ldr	r1, [pc, #136]	; (9238 <z_impl_k_thread_suspend+0xec>)
    91b0:	481e      	ldr	r0, [pc, #120]	; (922c <z_impl_k_thread_suspend+0xe0>)
    91b2:	f001 ff5a 	bl	b06a <printk>
    91b6:	491a      	ldr	r1, [pc, #104]	; (9220 <z_impl_k_thread_suspend+0xd4>)
    91b8:	4820      	ldr	r0, [pc, #128]	; (923c <z_impl_k_thread_suspend+0xf0>)
    91ba:	f001 ff56 	bl	b06a <printk>
    91be:	21ac      	movs	r1, #172	; 0xac
    91c0:	4628      	mov	r0, r5
    91c2:	f002 f8ab 	bl	b31c <assert_post_action>
	__asm__ volatile(
    91c6:	f386 8811 	msr	BASEPRI, r6
    91ca:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    91ce:	2501      	movs	r5, #1
    91d0:	b9b5      	cbnz	r5, 9200 <z_impl_k_thread_suspend+0xb4>
	return (thread->base.thread_state & state) != 0U;
    91d2:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    91d4:	f994 300d 	ldrsb.w	r3, [r4, #13]
    91d8:	2b00      	cmp	r3, #0
    91da:	dbdd      	blt.n	9198 <z_impl_k_thread_suspend+0x4c>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    91dc:	7b63      	ldrb	r3, [r4, #13]
    91de:	f043 0310 	orr.w	r3, r3, #16
    91e2:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    91e4:	4b16      	ldr	r3, [pc, #88]	; (9240 <z_impl_k_thread_suspend+0xf4>)
    91e6:	6898      	ldr	r0, [r3, #8]
    91e8:	42a0      	cmp	r0, r4
    91ea:	bf14      	ite	ne
    91ec:	2000      	movne	r0, #0
    91ee:	2001      	moveq	r0, #1
    91f0:	f7ff fb66 	bl	88c0 <update_cache>
    91f4:	480a      	ldr	r0, [pc, #40]	; (9220 <z_impl_k_thread_suspend+0xd4>)
    91f6:	f7fe fc05 	bl	7a04 <z_spin_unlock_valid>
    91fa:	2800      	cmp	r0, #0
    91fc:	d1e3      	bne.n	91c6 <z_impl_k_thread_suspend+0x7a>
    91fe:	e7d3      	b.n	91a8 <z_impl_k_thread_suspend+0x5c>
	if (thread == _current) {
    9200:	4b0f      	ldr	r3, [pc, #60]	; (9240 <z_impl_k_thread_suspend+0xf4>)
    9202:	689b      	ldr	r3, [r3, #8]
    9204:	42a3      	cmp	r3, r4
    9206:	d000      	beq.n	920a <z_impl_k_thread_suspend+0xbe>
}
    9208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
    920a:	f04f 0320 	mov.w	r3, #32
    920e:	f3ef 8011 	mrs	r0, BASEPRI
    9212:	f383 8812 	msr	BASEPRI_MAX, r3
    9216:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    921a:	f002 fe2b 	bl	be74 <z_reschedule_irqlock>
    921e:	e7f3      	b.n	9208 <z_impl_k_thread_suspend+0xbc>
    9220:	20001258 	.word	0x20001258
    9224:	0000c584 	.word	0x0000c584
    9228:	0000c5dc 	.word	0x0000c5dc
    922c:	0000c46c 	.word	0x0000c46c
    9230:	0000c5f4 	.word	0x0000c5f4
    9234:	2000123c 	.word	0x2000123c
    9238:	0000c5ac 	.word	0x0000c5ac
    923c:	0000c5c4 	.word	0x0000c5c4
    9240:	2000121c 	.word	0x2000121c

00009244 <k_sched_unlock>:
{
    9244:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
    9246:	2400      	movs	r4, #0
    9248:	f04f 0320 	mov.w	r3, #32
    924c:	f3ef 8511 	mrs	r5, BASEPRI
    9250:	f383 8812 	msr	BASEPRI_MAX, r3
    9254:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9258:	4838      	ldr	r0, [pc, #224]	; (933c <k_sched_unlock+0xf8>)
    925a:	f7fe fbc3 	bl	79e4 <z_spin_lock_valid>
    925e:	b118      	cbz	r0, 9268 <k_sched_unlock+0x24>
	z_spin_lock_set_owner(l);
    9260:	4836      	ldr	r0, [pc, #216]	; (933c <k_sched_unlock+0xf8>)
    9262:	f7fe fbdf 	bl	7a24 <z_spin_lock_set_owner>
	return k;
    9266:	e045      	b.n	92f4 <k_sched_unlock+0xb0>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9268:	4e35      	ldr	r6, [pc, #212]	; (9340 <k_sched_unlock+0xfc>)
    926a:	2381      	movs	r3, #129	; 0x81
    926c:	4632      	mov	r2, r6
    926e:	4935      	ldr	r1, [pc, #212]	; (9344 <k_sched_unlock+0x100>)
    9270:	4835      	ldr	r0, [pc, #212]	; (9348 <k_sched_unlock+0x104>)
    9272:	f001 fefa 	bl	b06a <printk>
    9276:	4931      	ldr	r1, [pc, #196]	; (933c <k_sched_unlock+0xf8>)
    9278:	4834      	ldr	r0, [pc, #208]	; (934c <k_sched_unlock+0x108>)
    927a:	f001 fef6 	bl	b06a <printk>
    927e:	2181      	movs	r1, #129	; 0x81
    9280:	4630      	mov	r0, r6
    9282:	f002 f84b 	bl	b31c <assert_post_action>
    9286:	e7eb      	b.n	9260 <k_sched_unlock+0x1c>
		__ASSERT(_current->base.sched_locked != 0U, "");
    9288:	4c31      	ldr	r4, [pc, #196]	; (9350 <k_sched_unlock+0x10c>)
    928a:	f240 3385 	movw	r3, #901	; 0x385
    928e:	4622      	mov	r2, r4
    9290:	4930      	ldr	r1, [pc, #192]	; (9354 <k_sched_unlock+0x110>)
    9292:	482d      	ldr	r0, [pc, #180]	; (9348 <k_sched_unlock+0x104>)
    9294:	f001 fee9 	bl	b06a <printk>
    9298:	482f      	ldr	r0, [pc, #188]	; (9358 <k_sched_unlock+0x114>)
    929a:	f001 fee6 	bl	b06a <printk>
    929e:	f240 3185 	movw	r1, #901	; 0x385
    92a2:	4620      	mov	r0, r4
    92a4:	f002 f83a 	bl	b31c <assert_post_action>
    92a8:	e02a      	b.n	9300 <k_sched_unlock+0xbc>
		__ASSERT(!arch_is_in_isr(), "");
    92aa:	4c29      	ldr	r4, [pc, #164]	; (9350 <k_sched_unlock+0x10c>)
    92ac:	f240 3386 	movw	r3, #902	; 0x386
    92b0:	4622      	mov	r2, r4
    92b2:	492a      	ldr	r1, [pc, #168]	; (935c <k_sched_unlock+0x118>)
    92b4:	4824      	ldr	r0, [pc, #144]	; (9348 <k_sched_unlock+0x104>)
    92b6:	f001 fed8 	bl	b06a <printk>
    92ba:	4827      	ldr	r0, [pc, #156]	; (9358 <k_sched_unlock+0x114>)
    92bc:	f001 fed5 	bl	b06a <printk>
    92c0:	f240 3186 	movw	r1, #902	; 0x386
    92c4:	4620      	mov	r0, r4
    92c6:	f002 f829 	bl	b31c <assert_post_action>
    92ca:	e01d      	b.n	9308 <k_sched_unlock+0xc4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    92cc:	4c1c      	ldr	r4, [pc, #112]	; (9340 <k_sched_unlock+0xfc>)
    92ce:	23ac      	movs	r3, #172	; 0xac
    92d0:	4622      	mov	r2, r4
    92d2:	4923      	ldr	r1, [pc, #140]	; (9360 <k_sched_unlock+0x11c>)
    92d4:	481c      	ldr	r0, [pc, #112]	; (9348 <k_sched_unlock+0x104>)
    92d6:	f001 fec8 	bl	b06a <printk>
    92da:	4918      	ldr	r1, [pc, #96]	; (933c <k_sched_unlock+0xf8>)
    92dc:	4821      	ldr	r0, [pc, #132]	; (9364 <k_sched_unlock+0x120>)
    92de:	f001 fec4 	bl	b06a <printk>
    92e2:	21ac      	movs	r1, #172	; 0xac
    92e4:	4620      	mov	r0, r4
    92e6:	f002 f819 	bl	b31c <assert_post_action>
	__asm__ volatile(
    92ea:	f385 8811 	msr	BASEPRI, r5
    92ee:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    92f2:	2401      	movs	r4, #1
    92f4:	b9b4      	cbnz	r4, 9324 <k_sched_unlock+0xe0>
		__ASSERT(_current->base.sched_locked != 0U, "");
    92f6:	4b1c      	ldr	r3, [pc, #112]	; (9368 <k_sched_unlock+0x124>)
    92f8:	689b      	ldr	r3, [r3, #8]
    92fa:	7bdb      	ldrb	r3, [r3, #15]
    92fc:	2b00      	cmp	r3, #0
    92fe:	d0c3      	beq.n	9288 <k_sched_unlock+0x44>
    9300:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    9304:	2b00      	cmp	r3, #0
    9306:	d1d0      	bne.n	92aa <k_sched_unlock+0x66>
		++_current->base.sched_locked;
    9308:	4b17      	ldr	r3, [pc, #92]	; (9368 <k_sched_unlock+0x124>)
    930a:	689a      	ldr	r2, [r3, #8]
    930c:	7bd3      	ldrb	r3, [r2, #15]
    930e:	3301      	adds	r3, #1
    9310:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    9312:	2000      	movs	r0, #0
    9314:	f7ff fad4 	bl	88c0 <update_cache>
    9318:	4808      	ldr	r0, [pc, #32]	; (933c <k_sched_unlock+0xf8>)
    931a:	f7fe fb73 	bl	7a04 <z_spin_unlock_valid>
    931e:	2800      	cmp	r0, #0
    9320:	d1e3      	bne.n	92ea <k_sched_unlock+0xa6>
    9322:	e7d3      	b.n	92cc <k_sched_unlock+0x88>
	__asm__ volatile(
    9324:	f04f 0320 	mov.w	r3, #32
    9328:	f3ef 8011 	mrs	r0, BASEPRI
    932c:	f383 8812 	msr	BASEPRI_MAX, r3
    9330:	f3bf 8f6f 	isb	sy
    9334:	f002 fd9e 	bl	be74 <z_reschedule_irqlock>
}
    9338:	bd70      	pop	{r4, r5, r6, pc}
    933a:	bf00      	nop
    933c:	20001258 	.word	0x20001258
    9340:	0000c584 	.word	0x0000c584
    9344:	0000c5dc 	.word	0x0000c5dc
    9348:	0000c46c 	.word	0x0000c46c
    934c:	0000c5f4 	.word	0x0000c5f4
    9350:	0000d438 	.word	0x0000d438
    9354:	0000d4c0 	.word	0x0000d4c0
    9358:	0000d390 	.word	0x0000d390
    935c:	0000d248 	.word	0x0000d248
    9360:	0000c5ac 	.word	0x0000c5ac
    9364:	0000c5c4 	.word	0x0000c5c4
    9368:	2000121c 	.word	0x2000121c

0000936c <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    936c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    936e:	7b43      	ldrb	r3, [r0, #13]
    9370:	f013 0f08 	tst.w	r3, #8
    9374:	d145      	bne.n	9402 <end_thread+0x96>
    9376:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    9378:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
    937c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    9380:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    9382:	f013 0f80 	tst.w	r3, #128	; 0x80
    9386:	d114      	bne.n	93b2 <end_thread+0x46>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    9388:	68ab      	ldr	r3, [r5, #8]
    938a:	b15b      	cbz	r3, 93a4 <end_thread+0x38>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    938c:	4628      	mov	r0, r5
    938e:	f7ff f837 	bl	8400 <pended_on_thread>
    9392:	4629      	mov	r1, r5
    9394:	f7ff fa12 	bl	87bc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    9398:	7b6b      	ldrb	r3, [r5, #13]
    939a:	f023 0302 	bic.w	r3, r3, #2
    939e:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    93a0:	2300      	movs	r3, #0
    93a2:	60ab      	str	r3, [r5, #8]
    93a4:	f105 0018 	add.w	r0, r5, #24
    93a8:	f000 fd56 	bl	9e58 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    93ac:	f105 0758 	add.w	r7, r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    93b0:	e01c      	b.n	93ec <end_thread+0x80>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    93b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    93b6:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    93b8:	4601      	mov	r1, r0
    93ba:	4812      	ldr	r0, [pc, #72]	; (9404 <end_thread+0x98>)
    93bc:	f7ff f9fe 	bl	87bc <z_priq_dumb_remove>
}
    93c0:	e7e2      	b.n	9388 <end_thread+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    93c2:	4620      	mov	r0, r4
    93c4:	f7ff f81c 	bl	8400 <pended_on_thread>
    93c8:	4621      	mov	r1, r4
    93ca:	f7ff f9f7 	bl	87bc <z_priq_dumb_remove>
    93ce:	7b63      	ldrb	r3, [r4, #13]
    93d0:	f023 0302 	bic.w	r3, r3, #2
    93d4:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    93d6:	2600      	movs	r6, #0
    93d8:	60a6      	str	r6, [r4, #8]
    93da:	f104 0018 	add.w	r0, r4, #24
    93de:	f000 fd3b 	bl	9e58 <z_abort_timeout>
    93e2:	f8c4 60b0 	str.w	r6, [r4, #176]	; 0xb0
		ready_thread(thread);
    93e6:	4620      	mov	r0, r4
    93e8:	f7ff fba2 	bl	8b30 <ready_thread>
	return list->head == list;
    93ec:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    93ee:	42bc      	cmp	r4, r7
    93f0:	d001      	beq.n	93f6 <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    93f2:	2c00      	cmp	r4, #0
    93f4:	d1e5      	bne.n	93c2 <end_thread+0x56>
		update_cache(1);
    93f6:	2001      	movs	r0, #1
    93f8:	f7ff fa62 	bl	88c0 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    93fc:	4628      	mov	r0, r5
    93fe:	f7fe fb19 	bl	7a34 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    9402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9404:	2000123c 	.word	0x2000123c

00009408 <z_unpend1_no_timeout>:
{
    9408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    940a:	4607      	mov	r7, r0
	LOCKED(&sched_spinlock) {
    940c:	2500      	movs	r5, #0
    940e:	f04f 0320 	mov.w	r3, #32
    9412:	f3ef 8611 	mrs	r6, BASEPRI
    9416:	f383 8812 	msr	BASEPRI_MAX, r3
    941a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    941e:	4823      	ldr	r0, [pc, #140]	; (94ac <z_unpend1_no_timeout+0xa4>)
    9420:	f7fe fae0 	bl	79e4 <z_spin_lock_valid>
    9424:	b120      	cbz	r0, 9430 <z_unpend1_no_timeout+0x28>
	z_spin_lock_set_owner(l);
    9426:	4821      	ldr	r0, [pc, #132]	; (94ac <z_unpend1_no_timeout+0xa4>)
    9428:	f7fe fafc 	bl	7a24 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
    942c:	2400      	movs	r4, #0
	return k;
    942e:	e023      	b.n	9478 <z_unpend1_no_timeout+0x70>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9430:	4c1f      	ldr	r4, [pc, #124]	; (94b0 <z_unpend1_no_timeout+0xa8>)
    9432:	2381      	movs	r3, #129	; 0x81
    9434:	4622      	mov	r2, r4
    9436:	491f      	ldr	r1, [pc, #124]	; (94b4 <z_unpend1_no_timeout+0xac>)
    9438:	481f      	ldr	r0, [pc, #124]	; (94b8 <z_unpend1_no_timeout+0xb0>)
    943a:	f001 fe16 	bl	b06a <printk>
    943e:	491b      	ldr	r1, [pc, #108]	; (94ac <z_unpend1_no_timeout+0xa4>)
    9440:	481e      	ldr	r0, [pc, #120]	; (94bc <z_unpend1_no_timeout+0xb4>)
    9442:	f001 fe12 	bl	b06a <printk>
    9446:	2181      	movs	r1, #129	; 0x81
    9448:	4620      	mov	r0, r4
    944a:	f001 ff67 	bl	b31c <assert_post_action>
    944e:	e7ea      	b.n	9426 <z_unpend1_no_timeout+0x1e>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    9450:	f7fe ffd6 	bl	8400 <pended_on_thread>
    9454:	4621      	mov	r1, r4
    9456:	f7ff f9b1 	bl	87bc <z_priq_dumb_remove>
    945a:	7b63      	ldrb	r3, [r4, #13]
    945c:	f023 0302 	bic.w	r3, r3, #2
    9460:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    9462:	2300      	movs	r3, #0
    9464:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9466:	4811      	ldr	r0, [pc, #68]	; (94ac <z_unpend1_no_timeout+0xa4>)
    9468:	f7fe facc 	bl	7a04 <z_spin_unlock_valid>
    946c:	b160      	cbz	r0, 9488 <z_unpend1_no_timeout+0x80>
	__asm__ volatile(
    946e:	f386 8811 	msr	BASEPRI, r6
    9472:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    9476:	2501      	movs	r5, #1
    9478:	b9b5      	cbnz	r5, 94a8 <z_unpend1_no_timeout+0xa0>
		thread = _priq_wait_best(&wait_q->waitq);
    947a:	4638      	mov	r0, r7
    947c:	f002 fd0f 	bl	be9e <z_priq_dumb_best>
		if (thread != NULL) {
    9480:	4604      	mov	r4, r0
    9482:	2800      	cmp	r0, #0
    9484:	d1e4      	bne.n	9450 <z_unpend1_no_timeout+0x48>
    9486:	e7ee      	b.n	9466 <z_unpend1_no_timeout+0x5e>
    9488:	4d09      	ldr	r5, [pc, #36]	; (94b0 <z_unpend1_no_timeout+0xa8>)
    948a:	23ac      	movs	r3, #172	; 0xac
    948c:	462a      	mov	r2, r5
    948e:	490c      	ldr	r1, [pc, #48]	; (94c0 <z_unpend1_no_timeout+0xb8>)
    9490:	4809      	ldr	r0, [pc, #36]	; (94b8 <z_unpend1_no_timeout+0xb0>)
    9492:	f001 fdea 	bl	b06a <printk>
    9496:	4905      	ldr	r1, [pc, #20]	; (94ac <z_unpend1_no_timeout+0xa4>)
    9498:	480a      	ldr	r0, [pc, #40]	; (94c4 <z_unpend1_no_timeout+0xbc>)
    949a:	f001 fde6 	bl	b06a <printk>
    949e:	21ac      	movs	r1, #172	; 0xac
    94a0:	4628      	mov	r0, r5
    94a2:	f001 ff3b 	bl	b31c <assert_post_action>
    94a6:	e7e2      	b.n	946e <z_unpend1_no_timeout+0x66>
}
    94a8:	4620      	mov	r0, r4
    94aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    94ac:	20001258 	.word	0x20001258
    94b0:	0000c584 	.word	0x0000c584
    94b4:	0000c5dc 	.word	0x0000c5dc
    94b8:	0000c46c 	.word	0x0000c46c
    94bc:	0000c5f4 	.word	0x0000c5f4
    94c0:	0000c5ac 	.word	0x0000c5ac
    94c4:	0000c5c4 	.word	0x0000c5c4

000094c8 <z_unpend_first_thread>:
{
    94c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    94ca:	4607      	mov	r7, r0
	LOCKED(&sched_spinlock) {
    94cc:	2500      	movs	r5, #0
	__asm__ volatile(
    94ce:	f04f 0320 	mov.w	r3, #32
    94d2:	f3ef 8611 	mrs	r6, BASEPRI
    94d6:	f383 8812 	msr	BASEPRI_MAX, r3
    94da:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    94de:	4825      	ldr	r0, [pc, #148]	; (9574 <z_unpend_first_thread+0xac>)
    94e0:	f7fe fa80 	bl	79e4 <z_spin_lock_valid>
    94e4:	b120      	cbz	r0, 94f0 <z_unpend_first_thread+0x28>
	z_spin_lock_set_owner(l);
    94e6:	4823      	ldr	r0, [pc, #140]	; (9574 <z_unpend_first_thread+0xac>)
    94e8:	f7fe fa9c 	bl	7a24 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
    94ec:	2400      	movs	r4, #0
	return k;
    94ee:	e027      	b.n	9540 <z_unpend_first_thread+0x78>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    94f0:	4c21      	ldr	r4, [pc, #132]	; (9578 <z_unpend_first_thread+0xb0>)
    94f2:	2381      	movs	r3, #129	; 0x81
    94f4:	4622      	mov	r2, r4
    94f6:	4921      	ldr	r1, [pc, #132]	; (957c <z_unpend_first_thread+0xb4>)
    94f8:	4821      	ldr	r0, [pc, #132]	; (9580 <z_unpend_first_thread+0xb8>)
    94fa:	f001 fdb6 	bl	b06a <printk>
    94fe:	491d      	ldr	r1, [pc, #116]	; (9574 <z_unpend_first_thread+0xac>)
    9500:	4820      	ldr	r0, [pc, #128]	; (9584 <z_unpend_first_thread+0xbc>)
    9502:	f001 fdb2 	bl	b06a <printk>
    9506:	2181      	movs	r1, #129	; 0x81
    9508:	4620      	mov	r0, r4
    950a:	f001 ff07 	bl	b31c <assert_post_action>
    950e:	e7ea      	b.n	94e6 <z_unpend_first_thread+0x1e>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    9510:	f7fe ff76 	bl	8400 <pended_on_thread>
    9514:	4621      	mov	r1, r4
    9516:	f7ff f951 	bl	87bc <z_priq_dumb_remove>
    951a:	7b63      	ldrb	r3, [r4, #13]
    951c:	f023 0302 	bic.w	r3, r3, #2
    9520:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    9522:	2300      	movs	r3, #0
    9524:	60a3      	str	r3, [r4, #8]
    9526:	f104 0018 	add.w	r0, r4, #24
    952a:	f000 fc95 	bl	9e58 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    952e:	4811      	ldr	r0, [pc, #68]	; (9574 <z_unpend_first_thread+0xac>)
    9530:	f7fe fa68 	bl	7a04 <z_spin_unlock_valid>
    9534:	b160      	cbz	r0, 9550 <z_unpend_first_thread+0x88>
	__asm__ volatile(
    9536:	f386 8811 	msr	BASEPRI, r6
    953a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    953e:	2501      	movs	r5, #1
    9540:	b9b5      	cbnz	r5, 9570 <z_unpend_first_thread+0xa8>
		thread = _priq_wait_best(&wait_q->waitq);
    9542:	4638      	mov	r0, r7
    9544:	f002 fcab 	bl	be9e <z_priq_dumb_best>
		if (thread != NULL) {
    9548:	4604      	mov	r4, r0
    954a:	2800      	cmp	r0, #0
    954c:	d1e0      	bne.n	9510 <z_unpend_first_thread+0x48>
    954e:	e7ee      	b.n	952e <z_unpend_first_thread+0x66>
    9550:	4d09      	ldr	r5, [pc, #36]	; (9578 <z_unpend_first_thread+0xb0>)
    9552:	23ac      	movs	r3, #172	; 0xac
    9554:	462a      	mov	r2, r5
    9556:	490c      	ldr	r1, [pc, #48]	; (9588 <z_unpend_first_thread+0xc0>)
    9558:	4809      	ldr	r0, [pc, #36]	; (9580 <z_unpend_first_thread+0xb8>)
    955a:	f001 fd86 	bl	b06a <printk>
    955e:	4905      	ldr	r1, [pc, #20]	; (9574 <z_unpend_first_thread+0xac>)
    9560:	480a      	ldr	r0, [pc, #40]	; (958c <z_unpend_first_thread+0xc4>)
    9562:	f001 fd82 	bl	b06a <printk>
    9566:	21ac      	movs	r1, #172	; 0xac
    9568:	4628      	mov	r0, r5
    956a:	f001 fed7 	bl	b31c <assert_post_action>
    956e:	e7e2      	b.n	9536 <z_unpend_first_thread+0x6e>
}
    9570:	4620      	mov	r0, r4
    9572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9574:	20001258 	.word	0x20001258
    9578:	0000c584 	.word	0x0000c584
    957c:	0000c5dc 	.word	0x0000c5dc
    9580:	0000c46c 	.word	0x0000c46c
    9584:	0000c5f4 	.word	0x0000c5f4
    9588:	0000c5ac 	.word	0x0000c5ac
    958c:	0000c5c4 	.word	0x0000c5c4

00009590 <z_sched_init>:
{
    9590:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    9592:	4804      	ldr	r0, [pc, #16]	; (95a4 <z_sched_init+0x14>)
    9594:	f002 fc8a 	bl	beac <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    9598:	2100      	movs	r1, #0
    959a:	4608      	mov	r0, r1
    959c:	f7fe ff70 	bl	8480 <k_sched_time_slice_set>
}
    95a0:	bd08      	pop	{r3, pc}
    95a2:	bf00      	nop
    95a4:	20001238 	.word	0x20001238

000095a8 <z_impl_k_yield>:
{
    95a8:	b570      	push	{r4, r5, r6, lr}
    95aa:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    95ae:	2b00      	cmp	r3, #0
    95b0:	d149      	bne.n	9646 <z_impl_k_yield+0x9e>
	__asm__ volatile(
    95b2:	f04f 0320 	mov.w	r3, #32
    95b6:	f3ef 8611 	mrs	r6, BASEPRI
    95ba:	f383 8812 	msr	BASEPRI_MAX, r3
    95be:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    95c2:	4843      	ldr	r0, [pc, #268]	; (96d0 <z_impl_k_yield+0x128>)
    95c4:	f7fe fa0e 	bl	79e4 <z_spin_lock_valid>
    95c8:	2800      	cmp	r0, #0
    95ca:	d04d      	beq.n	9668 <z_impl_k_yield+0xc0>
	z_spin_lock_set_owner(l);
    95cc:	4840      	ldr	r0, [pc, #256]	; (96d0 <z_impl_k_yield+0x128>)
    95ce:	f7fe fa29 	bl	7a24 <z_spin_lock_set_owner>
		dequeue_thread(_current);
    95d2:	4c40      	ldr	r4, [pc, #256]	; (96d4 <z_impl_k_yield+0x12c>)
    95d4:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    95d6:	7b4b      	ldrb	r3, [r1, #13]
    95d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    95dc:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    95de:	f104 0020 	add.w	r0, r4, #32
    95e2:	f7ff f8eb 	bl	87bc <z_priq_dumb_remove>
	queue_thread(_current);
    95e6:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    95e8:	7b6b      	ldrb	r3, [r5, #13]
    95ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
    95ee:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    95f0:	4b39      	ldr	r3, [pc, #228]	; (96d8 <z_impl_k_yield+0x130>)
    95f2:	429d      	cmp	r5, r3
    95f4:	d048      	beq.n	9688 <z_impl_k_yield+0xe0>
	return list->head == list;
    95f6:	4b37      	ldr	r3, [pc, #220]	; (96d4 <z_impl_k_yield+0x12c>)
    95f8:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    95fc:	429c      	cmp	r4, r3
    95fe:	d055      	beq.n	96ac <z_impl_k_yield+0x104>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9600:	b16c      	cbz	r4, 961e <z_impl_k_yield+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
    9602:	4621      	mov	r1, r4
    9604:	4628      	mov	r0, r5
    9606:	f002 fc2b 	bl	be60 <z_sched_prio_cmp>
    960a:	2800      	cmp	r0, #0
    960c:	dc48      	bgt.n	96a0 <z_impl_k_yield+0xf8>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    960e:	b134      	cbz	r4, 961e <z_impl_k_yield+0x76>
	return (node == list->tail) ? NULL : node->next;
    9610:	4b30      	ldr	r3, [pc, #192]	; (96d4 <z_impl_k_yield+0x12c>)
    9612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9614:	429c      	cmp	r4, r3
    9616:	d002      	beq.n	961e <z_impl_k_yield+0x76>
    9618:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    961a:	2c00      	cmp	r4, #0
    961c:	d1f0      	bne.n	9600 <z_impl_k_yield+0x58>
	sys_dnode_t *const tail = list->tail;
    961e:	4b2d      	ldr	r3, [pc, #180]	; (96d4 <z_impl_k_yield+0x12c>)
    9620:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    9622:	f103 0120 	add.w	r1, r3, #32
    9626:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    9628:	606a      	str	r2, [r5, #4]
	tail->next = node;
    962a:	6015      	str	r5, [r2, #0]
	list->tail = node;
    962c:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    962e:	2001      	movs	r0, #1
    9630:	f7ff f946 	bl	88c0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9634:	4826      	ldr	r0, [pc, #152]	; (96d0 <z_impl_k_yield+0x128>)
    9636:	f7fe f9e5 	bl	7a04 <z_spin_unlock_valid>
    963a:	2800      	cmp	r0, #0
    963c:	d038      	beq.n	96b0 <z_impl_k_yield+0x108>
    963e:	4630      	mov	r0, r6
    9640:	f7f9 fc28 	bl	2e94 <arch_swap>
}
    9644:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
    9646:	4c25      	ldr	r4, [pc, #148]	; (96dc <z_impl_k_yield+0x134>)
    9648:	f240 43dc 	movw	r3, #1244	; 0x4dc
    964c:	4622      	mov	r2, r4
    964e:	4924      	ldr	r1, [pc, #144]	; (96e0 <z_impl_k_yield+0x138>)
    9650:	4824      	ldr	r0, [pc, #144]	; (96e4 <z_impl_k_yield+0x13c>)
    9652:	f001 fd0a 	bl	b06a <printk>
    9656:	4824      	ldr	r0, [pc, #144]	; (96e8 <z_impl_k_yield+0x140>)
    9658:	f001 fd07 	bl	b06a <printk>
    965c:	f240 41dc 	movw	r1, #1244	; 0x4dc
    9660:	4620      	mov	r0, r4
    9662:	f001 fe5b 	bl	b31c <assert_post_action>
    9666:	e7a4      	b.n	95b2 <z_impl_k_yield+0xa>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9668:	4c20      	ldr	r4, [pc, #128]	; (96ec <z_impl_k_yield+0x144>)
    966a:	2381      	movs	r3, #129	; 0x81
    966c:	4622      	mov	r2, r4
    966e:	4920      	ldr	r1, [pc, #128]	; (96f0 <z_impl_k_yield+0x148>)
    9670:	481c      	ldr	r0, [pc, #112]	; (96e4 <z_impl_k_yield+0x13c>)
    9672:	f001 fcfa 	bl	b06a <printk>
    9676:	4916      	ldr	r1, [pc, #88]	; (96d0 <z_impl_k_yield+0x128>)
    9678:	481e      	ldr	r0, [pc, #120]	; (96f4 <z_impl_k_yield+0x14c>)
    967a:	f001 fcf6 	bl	b06a <printk>
    967e:	2181      	movs	r1, #129	; 0x81
    9680:	4620      	mov	r0, r4
    9682:	f001 fe4b 	bl	b31c <assert_post_action>
    9686:	e7a1      	b.n	95cc <z_impl_k_yield+0x24>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    9688:	4c14      	ldr	r4, [pc, #80]	; (96dc <z_impl_k_yield+0x134>)
    968a:	23ba      	movs	r3, #186	; 0xba
    968c:	4622      	mov	r2, r4
    968e:	491a      	ldr	r1, [pc, #104]	; (96f8 <z_impl_k_yield+0x150>)
    9690:	4814      	ldr	r0, [pc, #80]	; (96e4 <z_impl_k_yield+0x13c>)
    9692:	f001 fcea 	bl	b06a <printk>
    9696:	21ba      	movs	r1, #186	; 0xba
    9698:	4620      	mov	r0, r4
    969a:	f001 fe3f 	bl	b31c <assert_post_action>
    969e:	e7aa      	b.n	95f6 <z_impl_k_yield+0x4e>
	sys_dnode_t *const prev = successor->prev;
    96a0:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    96a2:	606b      	str	r3, [r5, #4]
	node->next = successor;
    96a4:	602c      	str	r4, [r5, #0]
	prev->next = node;
    96a6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    96a8:	6065      	str	r5, [r4, #4]
}
    96aa:	e7c0      	b.n	962e <z_impl_k_yield+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    96ac:	2400      	movs	r4, #0
    96ae:	e7a7      	b.n	9600 <z_impl_k_yield+0x58>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    96b0:	4c0e      	ldr	r4, [pc, #56]	; (96ec <z_impl_k_yield+0x144>)
    96b2:	23c3      	movs	r3, #195	; 0xc3
    96b4:	4622      	mov	r2, r4
    96b6:	4911      	ldr	r1, [pc, #68]	; (96fc <z_impl_k_yield+0x154>)
    96b8:	480a      	ldr	r0, [pc, #40]	; (96e4 <z_impl_k_yield+0x13c>)
    96ba:	f001 fcd6 	bl	b06a <printk>
    96be:	4904      	ldr	r1, [pc, #16]	; (96d0 <z_impl_k_yield+0x128>)
    96c0:	480f      	ldr	r0, [pc, #60]	; (9700 <z_impl_k_yield+0x158>)
    96c2:	f001 fcd2 	bl	b06a <printk>
    96c6:	21c3      	movs	r1, #195	; 0xc3
    96c8:	4620      	mov	r0, r4
    96ca:	f001 fe27 	bl	b31c <assert_post_action>
    96ce:	e7b6      	b.n	963e <z_impl_k_yield+0x96>
    96d0:	20001258 	.word	0x20001258
    96d4:	2000121c 	.word	0x2000121c
    96d8:	200004a0 	.word	0x200004a0
    96dc:	0000d438 	.word	0x0000d438
    96e0:	0000d248 	.word	0x0000d248
    96e4:	0000c46c 	.word	0x0000c46c
    96e8:	0000d390 	.word	0x0000d390
    96ec:	0000c584 	.word	0x0000c584
    96f0:	0000c5dc 	.word	0x0000c5dc
    96f4:	0000c5f4 	.word	0x0000c5f4
    96f8:	0000d474 	.word	0x0000d474
    96fc:	0000c5ac 	.word	0x0000c5ac
    9700:	0000c5c4 	.word	0x0000c5c4

00009704 <z_tick_sleep>:
{
    9704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9708:	4604      	mov	r4, r0
    970a:	460d      	mov	r5, r1
    970c:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    9710:	2b00      	cmp	r3, #0
    9712:	d14f      	bne.n	97b4 <z_tick_sleep+0xb0>
	if (ticks == 0) {
    9714:	ea54 0305 	orrs.w	r3, r4, r5
    9718:	d05e      	beq.n	97d8 <z_tick_sleep+0xd4>
	if (Z_TICK_ABS(ticks) <= 0) {
    971a:	f06f 0301 	mvn.w	r3, #1
    971e:	1b1e      	subs	r6, r3, r4
    9720:	f04f 33ff 	mov.w	r3, #4294967295
    9724:	eb63 0705 	sbc.w	r7, r3, r5
    9728:	2e01      	cmp	r6, #1
    972a:	f177 0300 	sbcs.w	r3, r7, #0
    972e:	db57      	blt.n	97e0 <z_tick_sleep+0xdc>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    9730:	f06f 0601 	mvn.w	r6, #1
    9734:	1b36      	subs	r6, r6, r4
    9736:	f04f 0320 	mov.w	r3, #32
    973a:	f3ef 8911 	mrs	r9, BASEPRI
    973e:	f383 8812 	msr	BASEPRI_MAX, r3
    9742:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9746:	4842      	ldr	r0, [pc, #264]	; (9850 <z_tick_sleep+0x14c>)
    9748:	f7fe f94c 	bl	79e4 <z_spin_lock_valid>
    974c:	2800      	cmp	r0, #0
    974e:	d04b      	beq.n	97e8 <z_tick_sleep+0xe4>
	z_spin_lock_set_owner(l);
    9750:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 9850 <z_tick_sleep+0x14c>
    9754:	4640      	mov	r0, r8
    9756:	f7fe f965 	bl	7a24 <z_spin_lock_set_owner>
	pending_current = _current;
    975a:	4f3e      	ldr	r7, [pc, #248]	; (9854 <z_tick_sleep+0x150>)
    975c:	68b8      	ldr	r0, [r7, #8]
    975e:	4b3e      	ldr	r3, [pc, #248]	; (9858 <z_tick_sleep+0x154>)
    9760:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    9762:	f7ff fb59 	bl	8e18 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    9766:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    9768:	4622      	mov	r2, r4
    976a:	462b      	mov	r3, r5
    976c:	493b      	ldr	r1, [pc, #236]	; (985c <z_tick_sleep+0x158>)
    976e:	3018      	adds	r0, #24
    9770:	f000 fa76 	bl	9c60 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    9774:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    9776:	7b53      	ldrb	r3, [r2, #13]
    9778:	f043 0310 	orr.w	r3, r3, #16
    977c:	7353      	strb	r3, [r2, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    977e:	4640      	mov	r0, r8
    9780:	f7fe f940 	bl	7a04 <z_spin_unlock_valid>
    9784:	2800      	cmp	r0, #0
    9786:	d03f      	beq.n	9808 <z_tick_sleep+0x104>
    9788:	4648      	mov	r0, r9
    978a:	f7f9 fb83 	bl	2e94 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    978e:	4b31      	ldr	r3, [pc, #196]	; (9854 <z_tick_sleep+0x150>)
    9790:	689b      	ldr	r3, [r3, #8]
	return (thread->base.thread_state & state) != 0U;
    9792:	7b5b      	ldrb	r3, [r3, #13]
    9794:	f013 0f10 	tst.w	r3, #16
    9798:	d146      	bne.n	9828 <z_tick_sleep+0x124>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    979a:	2500      	movs	r5, #0
    979c:	f002 fba1 	bl	bee2 <sys_clock_tick_get_32>
    97a0:	1a34      	subs	r4, r6, r0
    97a2:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
    97a6:	2c01      	cmp	r4, #1
    97a8:	f175 0300 	sbcs.w	r3, r5, #0
    97ac:	da4d      	bge.n	984a <z_tick_sleep+0x146>
	return 0;
    97ae:	2000      	movs	r0, #0
}
    97b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "");
    97b4:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 9880 <z_tick_sleep+0x17c>
    97b8:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
    97bc:	4642      	mov	r2, r8
    97be:	4928      	ldr	r1, [pc, #160]	; (9860 <z_tick_sleep+0x15c>)
    97c0:	4828      	ldr	r0, [pc, #160]	; (9864 <z_tick_sleep+0x160>)
    97c2:	f001 fc52 	bl	b06a <printk>
    97c6:	4828      	ldr	r0, [pc, #160]	; (9868 <z_tick_sleep+0x164>)
    97c8:	f001 fc4f 	bl	b06a <printk>
    97cc:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
    97d0:	4640      	mov	r0, r8
    97d2:	f001 fda3 	bl	b31c <assert_post_action>
    97d6:	e79d      	b.n	9714 <z_tick_sleep+0x10>
	z_impl_k_yield();
    97d8:	f7ff fee6 	bl	95a8 <z_impl_k_yield>
		return 0;
    97dc:	2000      	movs	r0, #0
    97de:	e7e7      	b.n	97b0 <z_tick_sleep+0xac>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    97e0:	f002 fb7f 	bl	bee2 <sys_clock_tick_get_32>
    97e4:	1906      	adds	r6, r0, r4
    97e6:	e7a6      	b.n	9736 <z_tick_sleep+0x32>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    97e8:	4f20      	ldr	r7, [pc, #128]	; (986c <z_tick_sleep+0x168>)
    97ea:	2381      	movs	r3, #129	; 0x81
    97ec:	463a      	mov	r2, r7
    97ee:	4920      	ldr	r1, [pc, #128]	; (9870 <z_tick_sleep+0x16c>)
    97f0:	481c      	ldr	r0, [pc, #112]	; (9864 <z_tick_sleep+0x160>)
    97f2:	f001 fc3a 	bl	b06a <printk>
    97f6:	4916      	ldr	r1, [pc, #88]	; (9850 <z_tick_sleep+0x14c>)
    97f8:	481e      	ldr	r0, [pc, #120]	; (9874 <z_tick_sleep+0x170>)
    97fa:	f001 fc36 	bl	b06a <printk>
    97fe:	2181      	movs	r1, #129	; 0x81
    9800:	4638      	mov	r0, r7
    9802:	f001 fd8b 	bl	b31c <assert_post_action>
    9806:	e7a3      	b.n	9750 <z_tick_sleep+0x4c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9808:	4c18      	ldr	r4, [pc, #96]	; (986c <z_tick_sleep+0x168>)
    980a:	23c3      	movs	r3, #195	; 0xc3
    980c:	4622      	mov	r2, r4
    980e:	491a      	ldr	r1, [pc, #104]	; (9878 <z_tick_sleep+0x174>)
    9810:	4814      	ldr	r0, [pc, #80]	; (9864 <z_tick_sleep+0x160>)
    9812:	f001 fc2a 	bl	b06a <printk>
    9816:	4641      	mov	r1, r8
    9818:	4818      	ldr	r0, [pc, #96]	; (987c <z_tick_sleep+0x178>)
    981a:	f001 fc26 	bl	b06a <printk>
    981e:	21c3      	movs	r1, #195	; 0xc3
    9820:	4620      	mov	r0, r4
    9822:	f001 fd7b 	bl	b31c <assert_post_action>
    9826:	e7af      	b.n	9788 <z_tick_sleep+0x84>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    9828:	4c15      	ldr	r4, [pc, #84]	; (9880 <z_tick_sleep+0x17c>)
    982a:	f240 5319 	movw	r3, #1305	; 0x519
    982e:	4622      	mov	r2, r4
    9830:	4914      	ldr	r1, [pc, #80]	; (9884 <z_tick_sleep+0x180>)
    9832:	480c      	ldr	r0, [pc, #48]	; (9864 <z_tick_sleep+0x160>)
    9834:	f001 fc19 	bl	b06a <printk>
    9838:	480b      	ldr	r0, [pc, #44]	; (9868 <z_tick_sleep+0x164>)
    983a:	f001 fc16 	bl	b06a <printk>
    983e:	f240 5119 	movw	r1, #1305	; 0x519
    9842:	4620      	mov	r0, r4
    9844:	f001 fd6a 	bl	b31c <assert_post_action>
    9848:	e7a7      	b.n	979a <z_tick_sleep+0x96>
		return ticks;
    984a:	4620      	mov	r0, r4
    984c:	e7b0      	b.n	97b0 <z_tick_sleep+0xac>
    984e:	bf00      	nop
    9850:	20001258 	.word	0x20001258
    9854:	2000121c 	.word	0x2000121c
    9858:	20001254 	.word	0x20001254
    985c:	00008d39 	.word	0x00008d39
    9860:	0000d248 	.word	0x0000d248
    9864:	0000c46c 	.word	0x0000c46c
    9868:	0000d390 	.word	0x0000d390
    986c:	0000c584 	.word	0x0000c584
    9870:	0000c5dc 	.word	0x0000c5dc
    9874:	0000c5f4 	.word	0x0000c5f4
    9878:	0000c5ac 	.word	0x0000c5ac
    987c:	0000c5c4 	.word	0x0000c5c4
    9880:	0000d438 	.word	0x0000d438
    9884:	0000d4f4 	.word	0x0000d4f4

00009888 <z_impl_k_sleep>:
{
    9888:	b570      	push	{r4, r5, r6, lr}
    988a:	4604      	mov	r4, r0
    988c:	460d      	mov	r5, r1
    988e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    9892:	bb13      	cbnz	r3, 98da <z_impl_k_sleep+0x52>
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9894:	f1b5 3fff 	cmp.w	r5, #4294967295
    9898:	bf08      	it	eq
    989a:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    989e:	d02d      	beq.n	98fc <z_impl_k_sleep+0x74>
	ticks = z_tick_sleep(ticks);
    98a0:	4620      	mov	r0, r4
    98a2:	4629      	mov	r1, r5
    98a4:	f7ff ff2e 	bl	9704 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    98a8:	4604      	mov	r4, r0
    98aa:	17c5      	asrs	r5, r0, #31
			return (t * to_hz + off) / from_hz;
    98ac:	0169      	lsls	r1, r5, #5
    98ae:	0143      	lsls	r3, r0, #5
    98b0:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
    98b4:	1a18      	subs	r0, r3, r0
    98b6:	eb62 0305 	sbc.w	r3, r2, r5
    98ba:	009a      	lsls	r2, r3, #2
    98bc:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
    98c0:	0081      	lsls	r1, r0, #2
    98c2:	4613      	mov	r3, r2
    98c4:	1908      	adds	r0, r1, r4
    98c6:	eb45 0303 	adc.w	r3, r5, r3
    98ca:	00da      	lsls	r2, r3, #3
    98cc:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
    98d0:	00c1      	lsls	r1, r0, #3
    98d2:	0bc8      	lsrs	r0, r1, #15
    98d4:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
    98d8:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
    98da:	4e0c      	ldr	r6, [pc, #48]	; (990c <z_impl_k_sleep+0x84>)
    98dc:	f44f 63a5 	mov.w	r3, #1320	; 0x528
    98e0:	4632      	mov	r2, r6
    98e2:	490b      	ldr	r1, [pc, #44]	; (9910 <z_impl_k_sleep+0x88>)
    98e4:	480b      	ldr	r0, [pc, #44]	; (9914 <z_impl_k_sleep+0x8c>)
    98e6:	f001 fbc0 	bl	b06a <printk>
    98ea:	480b      	ldr	r0, [pc, #44]	; (9918 <z_impl_k_sleep+0x90>)
    98ec:	f001 fbbd 	bl	b06a <printk>
    98f0:	f44f 61a5 	mov.w	r1, #1320	; 0x528
    98f4:	4630      	mov	r0, r6
    98f6:	f001 fd11 	bl	b31c <assert_post_action>
    98fa:	e7cb      	b.n	9894 <z_impl_k_sleep+0xc>
		k_thread_suspend(_current);
    98fc:	4b07      	ldr	r3, [pc, #28]	; (991c <z_impl_k_sleep+0x94>)
    98fe:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    9900:	f7ff fc24 	bl	914c <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    9904:	f04f 30ff 	mov.w	r0, #4294967295
    9908:	e7e6      	b.n	98d8 <z_impl_k_sleep+0x50>
    990a:	bf00      	nop
    990c:	0000d438 	.word	0x0000d438
    9910:	0000d248 	.word	0x0000d248
    9914:	0000c46c 	.word	0x0000c46c
    9918:	0000d390 	.word	0x0000d390
    991c:	2000121c 	.word	0x2000121c

00009920 <z_impl_z_current_get>:
}
    9920:	4b01      	ldr	r3, [pc, #4]	; (9928 <z_impl_z_current_get+0x8>)
    9922:	6898      	ldr	r0, [r3, #8]
    9924:	4770      	bx	lr
    9926:	bf00      	nop
    9928:	2000121c 	.word	0x2000121c

0000992c <z_impl_k_is_preempt_thread>:
    992c:	f3ef 8305 	mrs	r3, IPSR
	return !arch_is_in_isr() && is_preempt(_current);
    9930:	b933      	cbnz	r3, 9940 <z_impl_k_is_preempt_thread+0x14>
    9932:	4b05      	ldr	r3, [pc, #20]	; (9948 <z_impl_k_is_preempt_thread+0x1c>)
    9934:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    9936:	89db      	ldrh	r3, [r3, #14]
	return !arch_is_in_isr() && is_preempt(_current);
    9938:	2b7f      	cmp	r3, #127	; 0x7f
    993a:	d803      	bhi.n	9944 <z_impl_k_is_preempt_thread+0x18>
    993c:	2001      	movs	r0, #1
    993e:	4770      	bx	lr
    9940:	2000      	movs	r0, #0
    9942:	4770      	bx	lr
    9944:	2000      	movs	r0, #0
}
    9946:	4770      	bx	lr
    9948:	2000121c 	.word	0x2000121c

0000994c <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    994c:	b570      	push	{r4, r5, r6, lr}
    994e:	4604      	mov	r4, r0
    9950:	f04f 0320 	mov.w	r3, #32
    9954:	f3ef 8511 	mrs	r5, BASEPRI
    9958:	f383 8812 	msr	BASEPRI_MAX, r3
    995c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9960:	4840      	ldr	r0, [pc, #256]	; (9a64 <z_thread_abort+0x118>)
    9962:	f7fe f83f 	bl	79e4 <z_spin_lock_valid>
    9966:	b1b8      	cbz	r0, 9998 <z_thread_abort+0x4c>
	z_spin_lock_set_owner(l);
    9968:	483e      	ldr	r0, [pc, #248]	; (9a64 <z_thread_abort+0x118>)
    996a:	f7fe f85b 	bl	7a24 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    996e:	7b63      	ldrb	r3, [r4, #13]
    9970:	f013 0f08 	tst.w	r3, #8
    9974:	d120      	bne.n	99b8 <z_thread_abort+0x6c>
			z_swap(&sched_spinlock, key);
		}
		return; /* lock has been released */
	}
#endif
	end_thread(thread);
    9976:	4620      	mov	r0, r4
    9978:	f7ff fcf8 	bl	936c <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    997c:	4b3a      	ldr	r3, [pc, #232]	; (9a68 <z_thread_abort+0x11c>)
    997e:	689b      	ldr	r3, [r3, #8]
    9980:	42a3      	cmp	r3, r4
    9982:	d032      	beq.n	99ea <z_thread_abort+0x9e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9984:	4837      	ldr	r0, [pc, #220]	; (9a64 <z_thread_abort+0x118>)
    9986:	f7fe f83d 	bl	7a04 <z_spin_unlock_valid>
    998a:	2800      	cmp	r0, #0
    998c:	d059      	beq.n	9a42 <z_thread_abort+0xf6>
	__asm__ volatile(
    998e:	f385 8811 	msr	BASEPRI, r5
    9992:	f3bf 8f6f 	isb	sy
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    9996:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9998:	4e34      	ldr	r6, [pc, #208]	; (9a6c <z_thread_abort+0x120>)
    999a:	2381      	movs	r3, #129	; 0x81
    999c:	4632      	mov	r2, r6
    999e:	4934      	ldr	r1, [pc, #208]	; (9a70 <z_thread_abort+0x124>)
    99a0:	4834      	ldr	r0, [pc, #208]	; (9a74 <z_thread_abort+0x128>)
    99a2:	f001 fb62 	bl	b06a <printk>
    99a6:	492f      	ldr	r1, [pc, #188]	; (9a64 <z_thread_abort+0x118>)
    99a8:	4833      	ldr	r0, [pc, #204]	; (9a78 <z_thread_abort+0x12c>)
    99aa:	f001 fb5e 	bl	b06a <printk>
    99ae:	2181      	movs	r1, #129	; 0x81
    99b0:	4630      	mov	r0, r6
    99b2:	f001 fcb3 	bl	b31c <assert_post_action>
    99b6:	e7d7      	b.n	9968 <z_thread_abort+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    99b8:	482a      	ldr	r0, [pc, #168]	; (9a64 <z_thread_abort+0x118>)
    99ba:	f7fe f823 	bl	7a04 <z_spin_unlock_valid>
    99be:	b120      	cbz	r0, 99ca <z_thread_abort+0x7e>
    99c0:	f385 8811 	msr	BASEPRI, r5
    99c4:	f3bf 8f6f 	isb	sy
		return;
    99c8:	e7e5      	b.n	9996 <z_thread_abort+0x4a>
    99ca:	4c28      	ldr	r4, [pc, #160]	; (9a6c <z_thread_abort+0x120>)
    99cc:	23ac      	movs	r3, #172	; 0xac
    99ce:	4622      	mov	r2, r4
    99d0:	492a      	ldr	r1, [pc, #168]	; (9a7c <z_thread_abort+0x130>)
    99d2:	4828      	ldr	r0, [pc, #160]	; (9a74 <z_thread_abort+0x128>)
    99d4:	f001 fb49 	bl	b06a <printk>
    99d8:	4922      	ldr	r1, [pc, #136]	; (9a64 <z_thread_abort+0x118>)
    99da:	4829      	ldr	r0, [pc, #164]	; (9a80 <z_thread_abort+0x134>)
    99dc:	f001 fb45 	bl	b06a <printk>
    99e0:	21ac      	movs	r1, #172	; 0xac
    99e2:	4620      	mov	r0, r4
    99e4:	f001 fc9a 	bl	b31c <assert_post_action>
    99e8:	e7ea      	b.n	99c0 <z_thread_abort+0x74>
    99ea:	f3ef 8305 	mrs	r3, IPSR
	if (thread == _current && !arch_is_in_isr()) {
    99ee:	2b00      	cmp	r3, #0
    99f0:	d1c8      	bne.n	9984 <z_thread_abort+0x38>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    99f2:	481c      	ldr	r0, [pc, #112]	; (9a64 <z_thread_abort+0x118>)
    99f4:	f7fe f806 	bl	7a04 <z_spin_unlock_valid>
    99f8:	b198      	cbz	r0, 9a22 <z_thread_abort+0xd6>
    99fa:	4628      	mov	r0, r5
    99fc:	f7f9 fa4a 	bl	2e94 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    9a00:	4c20      	ldr	r4, [pc, #128]	; (9a84 <z_thread_abort+0x138>)
    9a02:	f240 634b 	movw	r3, #1611	; 0x64b
    9a06:	4622      	mov	r2, r4
    9a08:	491f      	ldr	r1, [pc, #124]	; (9a88 <z_thread_abort+0x13c>)
    9a0a:	481a      	ldr	r0, [pc, #104]	; (9a74 <z_thread_abort+0x128>)
    9a0c:	f001 fb2d 	bl	b06a <printk>
    9a10:	481e      	ldr	r0, [pc, #120]	; (9a8c <z_thread_abort+0x140>)
    9a12:	f001 fb2a 	bl	b06a <printk>
    9a16:	f240 614b 	movw	r1, #1611	; 0x64b
    9a1a:	4620      	mov	r0, r4
    9a1c:	f001 fc7e 	bl	b31c <assert_post_action>
    9a20:	e7b0      	b.n	9984 <z_thread_abort+0x38>
    9a22:	4c12      	ldr	r4, [pc, #72]	; (9a6c <z_thread_abort+0x120>)
    9a24:	23c3      	movs	r3, #195	; 0xc3
    9a26:	4622      	mov	r2, r4
    9a28:	4914      	ldr	r1, [pc, #80]	; (9a7c <z_thread_abort+0x130>)
    9a2a:	4812      	ldr	r0, [pc, #72]	; (9a74 <z_thread_abort+0x128>)
    9a2c:	f001 fb1d 	bl	b06a <printk>
    9a30:	490c      	ldr	r1, [pc, #48]	; (9a64 <z_thread_abort+0x118>)
    9a32:	4813      	ldr	r0, [pc, #76]	; (9a80 <z_thread_abort+0x134>)
    9a34:	f001 fb19 	bl	b06a <printk>
    9a38:	21c3      	movs	r1, #195	; 0xc3
    9a3a:	4620      	mov	r0, r4
    9a3c:	f001 fc6e 	bl	b31c <assert_post_action>
    9a40:	e7db      	b.n	99fa <z_thread_abort+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9a42:	4c0a      	ldr	r4, [pc, #40]	; (9a6c <z_thread_abort+0x120>)
    9a44:	23ac      	movs	r3, #172	; 0xac
    9a46:	4622      	mov	r2, r4
    9a48:	490c      	ldr	r1, [pc, #48]	; (9a7c <z_thread_abort+0x130>)
    9a4a:	480a      	ldr	r0, [pc, #40]	; (9a74 <z_thread_abort+0x128>)
    9a4c:	f001 fb0d 	bl	b06a <printk>
    9a50:	4904      	ldr	r1, [pc, #16]	; (9a64 <z_thread_abort+0x118>)
    9a52:	480b      	ldr	r0, [pc, #44]	; (9a80 <z_thread_abort+0x134>)
    9a54:	f001 fb09 	bl	b06a <printk>
    9a58:	21ac      	movs	r1, #172	; 0xac
    9a5a:	4620      	mov	r0, r4
    9a5c:	f001 fc5e 	bl	b31c <assert_post_action>
    9a60:	e795      	b.n	998e <z_thread_abort+0x42>
    9a62:	bf00      	nop
    9a64:	20001258 	.word	0x20001258
    9a68:	2000121c 	.word	0x2000121c
    9a6c:	0000c584 	.word	0x0000c584
    9a70:	0000c5dc 	.word	0x0000c5dc
    9a74:	0000c46c 	.word	0x0000c46c
    9a78:	0000c5f4 	.word	0x0000c5f4
    9a7c:	0000c5ac 	.word	0x0000c5ac
    9a80:	0000c5c4 	.word	0x0000c5c4
    9a84:	0000d438 	.word	0x0000d438
    9a88:	0000c3e8 	.word	0x0000c3e8
    9a8c:	0000d534 	.word	0x0000d534

00009a90 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
    9a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9a94:	4606      	mov	r6, r0
    9a96:	460f      	mov	r7, r1
    9a98:	4690      	mov	r8, r2
	struct k_thread *thread;
	bool ret = false;

	LOCKED(&sched_spinlock) {
    9a9a:	2400      	movs	r4, #0
	__asm__ volatile(
    9a9c:	f04f 0320 	mov.w	r3, #32
    9aa0:	f3ef 8511 	mrs	r5, BASEPRI
    9aa4:	f383 8812 	msr	BASEPRI_MAX, r3
    9aa8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9aac:	482b      	ldr	r0, [pc, #172]	; (9b5c <z_sched_wake+0xcc>)
    9aae:	f7fd ff99 	bl	79e4 <z_spin_lock_valid>
    9ab2:	b128      	cbz	r0, 9ac0 <z_sched_wake+0x30>
	z_spin_lock_set_owner(l);
    9ab4:	4829      	ldr	r0, [pc, #164]	; (9b5c <z_sched_wake+0xcc>)
    9ab6:	f7fd ffb5 	bl	7a24 <z_spin_lock_set_owner>
	bool ret = false;
    9aba:	f04f 0900 	mov.w	r9, #0
	return k;
    9abe:	e031      	b.n	9b24 <z_sched_wake+0x94>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9ac0:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 9b6c <z_sched_wake+0xdc>
    9ac4:	2381      	movs	r3, #129	; 0x81
    9ac6:	464a      	mov	r2, r9
    9ac8:	4925      	ldr	r1, [pc, #148]	; (9b60 <z_sched_wake+0xd0>)
    9aca:	4826      	ldr	r0, [pc, #152]	; (9b64 <z_sched_wake+0xd4>)
    9acc:	f001 facd 	bl	b06a <printk>
    9ad0:	4922      	ldr	r1, [pc, #136]	; (9b5c <z_sched_wake+0xcc>)
    9ad2:	4825      	ldr	r0, [pc, #148]	; (9b68 <z_sched_wake+0xd8>)
    9ad4:	f001 fac9 	bl	b06a <printk>
    9ad8:	2181      	movs	r1, #129	; 0x81
    9ada:	4648      	mov	r0, r9
    9adc:	f001 fc1e 	bl	b31c <assert_post_action>
    9ae0:	e7e8      	b.n	9ab4 <z_sched_wake+0x24>
    9ae2:	f8c0 70b0 	str.w	r7, [r0, #176]	; 0xb0
    9ae6:	f8c0 8014 	str.w	r8, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    9aea:	f7fe fc89 	bl	8400 <pended_on_thread>
    9aee:	4621      	mov	r1, r4
    9af0:	f7fe fe64 	bl	87bc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    9af4:	7b63      	ldrb	r3, [r4, #13]
    9af6:	f023 0302 	bic.w	r3, r3, #2
    9afa:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    9afc:	2300      	movs	r3, #0
    9afe:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
    9b00:	f104 0018 	add.w	r0, r4, #24
    9b04:	f000 f9a8 	bl	9e58 <z_abort_timeout>
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
    9b08:	4620      	mov	r0, r4
    9b0a:	f7ff f811 	bl	8b30 <ready_thread>
			ret = true;
    9b0e:	f04f 0901 	mov.w	r9, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9b12:	4812      	ldr	r0, [pc, #72]	; (9b5c <z_sched_wake+0xcc>)
    9b14:	f7fd ff76 	bl	7a04 <z_spin_unlock_valid>
    9b18:	b160      	cbz	r0, 9b34 <z_sched_wake+0xa4>
	__asm__ volatile(
    9b1a:	f385 8811 	msr	BASEPRI, r5
    9b1e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    9b22:	2401      	movs	r4, #1
    9b24:	b9b4      	cbnz	r4, 9b54 <z_sched_wake+0xc4>
		thread = _priq_wait_best(&wait_q->waitq);
    9b26:	4630      	mov	r0, r6
    9b28:	f002 f9b9 	bl	be9e <z_priq_dumb_best>
		if (thread != NULL) {
    9b2c:	4604      	mov	r4, r0
    9b2e:	2800      	cmp	r0, #0
    9b30:	d1d7      	bne.n	9ae2 <z_sched_wake+0x52>
    9b32:	e7ee      	b.n	9b12 <z_sched_wake+0x82>
    9b34:	4c0d      	ldr	r4, [pc, #52]	; (9b6c <z_sched_wake+0xdc>)
    9b36:	23ac      	movs	r3, #172	; 0xac
    9b38:	4622      	mov	r2, r4
    9b3a:	490d      	ldr	r1, [pc, #52]	; (9b70 <z_sched_wake+0xe0>)
    9b3c:	4809      	ldr	r0, [pc, #36]	; (9b64 <z_sched_wake+0xd4>)
    9b3e:	f001 fa94 	bl	b06a <printk>
    9b42:	4906      	ldr	r1, [pc, #24]	; (9b5c <z_sched_wake+0xcc>)
    9b44:	480b      	ldr	r0, [pc, #44]	; (9b74 <z_sched_wake+0xe4>)
    9b46:	f001 fa90 	bl	b06a <printk>
    9b4a:	21ac      	movs	r1, #172	; 0xac
    9b4c:	4620      	mov	r0, r4
    9b4e:	f001 fbe5 	bl	b31c <assert_post_action>
    9b52:	e7e2      	b.n	9b1a <z_sched_wake+0x8a>
		}
	}

	return ret;
}
    9b54:	4648      	mov	r0, r9
    9b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9b5a:	bf00      	nop
    9b5c:	20001258 	.word	0x20001258
    9b60:	0000c5dc 	.word	0x0000c5dc
    9b64:	0000c46c 	.word	0x0000c46c
    9b68:	0000c5f4 	.word	0x0000c5f4
    9b6c:	0000c584 	.word	0x0000c584
    9b70:	0000c5ac 	.word	0x0000c5ac
    9b74:	0000c5c4 	.word	0x0000c5c4

00009b78 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    9b78:	b5d0      	push	{r4, r6, r7, lr}
    9b7a:	b082      	sub	sp, #8
    9b7c:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    9b7e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
    9b82:	e9cd 6700 	strd	r6, r7, [sp]
    9b86:	f7ff fa01 	bl	8f8c <z_pend_curr>

	if (data != NULL) {
    9b8a:	b11c      	cbz	r4, 9b94 <z_sched_wait+0x1c>
		*data = _current->base.swap_data;
    9b8c:	4b02      	ldr	r3, [pc, #8]	; (9b98 <z_sched_wait+0x20>)
    9b8e:	689b      	ldr	r3, [r3, #8]
    9b90:	695b      	ldr	r3, [r3, #20]
    9b92:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    9b94:	b002      	add	sp, #8
    9b96:	bdd0      	pop	{r4, r6, r7, pc}
    9b98:	2000121c 	.word	0x2000121c

00009b9c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    9b9c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    9b9e:	4806      	ldr	r0, [pc, #24]	; (9bb8 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    9ba0:	4a06      	ldr	r2, [pc, #24]	; (9bbc <z_data_copy+0x20>)
    9ba2:	1a12      	subs	r2, r2, r0
    9ba4:	4906      	ldr	r1, [pc, #24]	; (9bc0 <z_data_copy+0x24>)
    9ba6:	f001 fcaa 	bl	b4fe <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    9baa:	4a06      	ldr	r2, [pc, #24]	; (9bc4 <z_data_copy+0x28>)
    9bac:	4906      	ldr	r1, [pc, #24]	; (9bc8 <z_data_copy+0x2c>)
    9bae:	4807      	ldr	r0, [pc, #28]	; (9bcc <z_data_copy+0x30>)
    9bb0:	f001 fca5 	bl	b4fe <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    9bb4:	bd08      	pop	{r3, pc}
    9bb6:	bf00      	nop
    9bb8:	20000000 	.word	0x20000000
    9bbc:	20000258 	.word	0x20000258
    9bc0:	0000d860 	.word	0x0000d860
    9bc4:	00000000 	.word	0x00000000
    9bc8:	0000d860 	.word	0x0000d860
    9bcc:	20000000 	.word	0x20000000

00009bd0 <first>:
	return list->head == list;
    9bd0:	4b03      	ldr	r3, [pc, #12]	; (9be0 <first+0x10>)
    9bd2:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9bd4:	4298      	cmp	r0, r3
    9bd6:	d000      	beq.n	9bda <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    9bd8:	4770      	bx	lr
    9bda:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    9bdc:	e7fc      	b.n	9bd8 <first+0x8>
    9bde:	bf00      	nop
    9be0:	20000184 	.word	0x20000184

00009be4 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    9be4:	b130      	cbz	r0, 9bf4 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    9be6:	4a04      	ldr	r2, [pc, #16]	; (9bf8 <next+0x14>)
    9be8:	6852      	ldr	r2, [r2, #4]
    9bea:	4290      	cmp	r0, r2
    9bec:	d001      	beq.n	9bf2 <next+0xe>
    9bee:	6800      	ldr	r0, [r0, #0]
    9bf0:	4770      	bx	lr
    9bf2:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    9bf4:	4770      	bx	lr
    9bf6:	bf00      	nop
    9bf8:	20000184 	.word	0x20000184

00009bfc <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    9bfc:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    9bfe:	4b04      	ldr	r3, [pc, #16]	; (9c10 <elapsed+0x14>)
    9c00:	681b      	ldr	r3, [r3, #0]
    9c02:	b10b      	cbz	r3, 9c08 <elapsed+0xc>
    9c04:	2000      	movs	r0, #0
}
    9c06:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    9c08:	f7fb fcf6 	bl	55f8 <sys_clock_elapsed>
    9c0c:	e7fb      	b.n	9c06 <elapsed+0xa>
    9c0e:	bf00      	nop
    9c10:	20001264 	.word	0x20001264

00009c14 <next_timeout>:

static int32_t next_timeout(void)
{
    9c14:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    9c16:	f7ff ffdb 	bl	9bd0 <first>
    9c1a:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    9c1c:	f7ff ffee 	bl	9bfc <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
    9c20:	b18c      	cbz	r4, 9c46 <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    9c22:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    9c26:	1a12      	subs	r2, r2, r0
    9c28:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    9c2c:	2a01      	cmp	r2, #1
    9c2e:	f173 0100 	sbcs.w	r1, r3, #0
    9c32:	db11      	blt.n	9c58 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    9c34:	4610      	mov	r0, r2
    9c36:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    9c3a:	f173 0300 	sbcs.w	r3, r3, #0
    9c3e:	db04      	blt.n	9c4a <next_timeout+0x36>
    9c40:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    9c44:	e001      	b.n	9c4a <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
    9c46:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    9c4a:	4b04      	ldr	r3, [pc, #16]	; (9c5c <next_timeout+0x48>)
    9c4c:	691b      	ldr	r3, [r3, #16]
    9c4e:	b113      	cbz	r3, 9c56 <next_timeout+0x42>
    9c50:	4283      	cmp	r3, r0
    9c52:	da00      	bge.n	9c56 <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
    9c54:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    9c56:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    9c58:	2000      	movs	r0, #0
    9c5a:	e7f6      	b.n	9c4a <next_timeout+0x36>
    9c5c:	2000121c 	.word	0x2000121c

00009c60 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    9c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9c64:	b087      	sub	sp, #28
    9c66:	9100      	str	r1, [sp, #0]
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9c68:	f1b3 3fff 	cmp.w	r3, #4294967295
    9c6c:	bf08      	it	eq
    9c6e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    9c72:	f000 80d3 	beq.w	9e1c <z_add_timeout+0x1bc>
    9c76:	4604      	mov	r4, r0
    9c78:	4616      	mov	r6, r2
    9c7a:	461f      	mov	r7, r3
	return node->next != NULL;
    9c7c:	6803      	ldr	r3, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    9c7e:	b16b      	cbz	r3, 9c9c <z_add_timeout+0x3c>
    9c80:	4d68      	ldr	r5, [pc, #416]	; (9e24 <z_add_timeout+0x1c4>)
    9c82:	235d      	movs	r3, #93	; 0x5d
    9c84:	462a      	mov	r2, r5
    9c86:	4968      	ldr	r1, [pc, #416]	; (9e28 <z_add_timeout+0x1c8>)
    9c88:	4868      	ldr	r0, [pc, #416]	; (9e2c <z_add_timeout+0x1cc>)
    9c8a:	f001 f9ee 	bl	b06a <printk>
    9c8e:	4868      	ldr	r0, [pc, #416]	; (9e30 <z_add_timeout+0x1d0>)
    9c90:	f001 f9eb 	bl	b06a <printk>
    9c94:	215d      	movs	r1, #93	; 0x5d
    9c96:	4628      	mov	r0, r5
    9c98:	f001 fb40 	bl	b31c <assert_post_action>
	to->fn = fn;
    9c9c:	9b00      	ldr	r3, [sp, #0]
    9c9e:	60a3      	str	r3, [r4, #8]

	LOCKED(&timeout_lock) {
    9ca0:	2500      	movs	r5, #0
	__asm__ volatile(
    9ca2:	f04f 0320 	mov.w	r3, #32
    9ca6:	f3ef 8211 	mrs	r2, BASEPRI
    9caa:	f383 8812 	msr	BASEPRI_MAX, r3
    9cae:	f3bf 8f6f 	isb	sy
    9cb2:	9200      	str	r2, [sp, #0]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9cb4:	485f      	ldr	r0, [pc, #380]	; (9e34 <z_add_timeout+0x1d4>)
    9cb6:	f7fd fe95 	bl	79e4 <z_spin_lock_valid>
    9cba:	b140      	cbz	r0, 9cce <z_add_timeout+0x6e>
	z_spin_lock_set_owner(l);
    9cbc:	485d      	ldr	r0, [pc, #372]	; (9e34 <z_add_timeout+0x1d4>)
    9cbe:	f7fd feb1 	bl	7a24 <z_spin_lock_set_owner>
	return k;
    9cc2:	9b00      	ldr	r3, [sp, #0]
    9cc4:	9303      	str	r3, [sp, #12]
    9cc6:	e9cd ab00 	strd	sl, fp, [sp]
    9cca:	46a3      	mov	fp, r4
    9ccc:	e040      	b.n	9d50 <z_add_timeout+0xf0>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9cce:	2381      	movs	r3, #129	; 0x81
    9cd0:	4a59      	ldr	r2, [pc, #356]	; (9e38 <z_add_timeout+0x1d8>)
    9cd2:	495a      	ldr	r1, [pc, #360]	; (9e3c <z_add_timeout+0x1dc>)
    9cd4:	4855      	ldr	r0, [pc, #340]	; (9e2c <z_add_timeout+0x1cc>)
    9cd6:	f001 f9c8 	bl	b06a <printk>
    9cda:	4956      	ldr	r1, [pc, #344]	; (9e34 <z_add_timeout+0x1d4>)
    9cdc:	4858      	ldr	r0, [pc, #352]	; (9e40 <z_add_timeout+0x1e0>)
    9cde:	f001 f9c4 	bl	b06a <printk>
    9ce2:	2181      	movs	r1, #129	; 0x81
    9ce4:	4854      	ldr	r0, [pc, #336]	; (9e38 <z_add_timeout+0x1d8>)
    9ce6:	f001 fb19 	bl	b31c <assert_post_action>
    9cea:	e7e7      	b.n	9cbc <z_add_timeout+0x5c>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
    9cec:	2201      	movs	r2, #1
    9cee:	2300      	movs	r3, #0
    9cf0:	e052      	b.n	9d98 <z_add_timeout+0x138>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    9cf2:	f7ff ff83 	bl	9bfc <elapsed>
    9cf6:	1833      	adds	r3, r6, r0
    9cf8:	eb47 74e0 	adc.w	r4, r7, r0, asr #31
    9cfc:	1c5a      	adds	r2, r3, #1
    9cfe:	f144 0300 	adc.w	r3, r4, #0
    9d02:	f8cb 2010 	str.w	r2, [fp, #16]
    9d06:	f8cb 3014 	str.w	r3, [fp, #20]
    9d0a:	e049      	b.n	9da0 <z_add_timeout+0x140>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    9d0c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    9d10:	1aa2      	subs	r2, r4, r2
    9d12:	9b05      	ldr	r3, [sp, #20]
    9d14:	eb65 0303 	sbc.w	r3, r5, r3
    9d18:	6102      	str	r2, [r0, #16]
    9d1a:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
    9d1c:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
    9d1e:	f8cb 3004 	str.w	r3, [fp, #4]
	node->next = successor;
    9d22:	f8cb 0000 	str.w	r0, [fp]
	prev->next = node;
    9d26:	f8c3 b000 	str.w	fp, [r3]
	successor->prev = node;
    9d2a:	f8c0 b004 	str.w	fp, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    9d2e:	2800      	cmp	r0, #0
    9d30:	d04c      	beq.n	9dcc <z_add_timeout+0x16c>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    9d32:	f7ff ff4d 	bl	9bd0 <first>
    9d36:	4583      	cmp	fp, r0
    9d38:	d053      	beq.n	9de2 <z_add_timeout+0x182>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9d3a:	483e      	ldr	r0, [pc, #248]	; (9e34 <z_add_timeout+0x1d4>)
    9d3c:	f7fd fe62 	bl	7a04 <z_spin_unlock_valid>
    9d40:	2800      	cmp	r0, #0
    9d42:	d05b      	beq.n	9dfc <z_add_timeout+0x19c>
	__asm__ volatile(
    9d44:	9b03      	ldr	r3, [sp, #12]
    9d46:	f383 8811 	msr	BASEPRI, r3
    9d4a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    9d4e:	2501      	movs	r5, #1
    9d50:	2d00      	cmp	r5, #0
    9d52:	d163      	bne.n	9e1c <z_add_timeout+0x1bc>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    9d54:	f06f 0301 	mvn.w	r3, #1
    9d58:	ebb3 0806 	subs.w	r8, r3, r6
    9d5c:	f04f 30ff 	mov.w	r0, #4294967295
    9d60:	eb60 0907 	sbc.w	r9, r0, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    9d64:	f1b8 0f00 	cmp.w	r8, #0
    9d68:	f179 0300 	sbcs.w	r3, r9, #0
    9d6c:	dbc1      	blt.n	9cf2 <z_add_timeout+0x92>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    9d6e:	4a35      	ldr	r2, [pc, #212]	; (9e44 <z_add_timeout+0x1e4>)
    9d70:	6813      	ldr	r3, [r2, #0]
    9d72:	6852      	ldr	r2, [r2, #4]
    9d74:	18f3      	adds	r3, r6, r3
    9d76:	eb47 0202 	adc.w	r2, r7, r2
    9d7a:	f06f 0101 	mvn.w	r1, #1
    9d7e:	1acb      	subs	r3, r1, r3
    9d80:	9300      	str	r3, [sp, #0]
    9d82:	eb60 0302 	sbc.w	r3, r0, r2
    9d86:	9301      	str	r3, [sp, #4]
			to->dticks = MAX(1, ticks);
    9d88:	e9dd 0100 	ldrd	r0, r1, [sp]
    9d8c:	4602      	mov	r2, r0
    9d8e:	460b      	mov	r3, r1
    9d90:	2801      	cmp	r0, #1
    9d92:	f171 0100 	sbcs.w	r1, r1, #0
    9d96:	dba9      	blt.n	9cec <z_add_timeout+0x8c>
    9d98:	f8cb 2010 	str.w	r2, [fp, #16]
    9d9c:	f8cb 3014 	str.w	r3, [fp, #20]
		for (t = first(); t != NULL; t = next(t)) {
    9da0:	f7ff ff16 	bl	9bd0 <first>
    9da4:	2800      	cmp	r0, #0
    9da6:	d0c2      	beq.n	9d2e <z_add_timeout+0xce>
			if (t->dticks > to->dticks) {
    9da8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    9dac:	e9db 2304 	ldrd	r2, r3, [fp, #16]
    9db0:	42a2      	cmp	r2, r4
    9db2:	eb73 0105 	sbcs.w	r1, r3, r5
    9db6:	dba9      	blt.n	9d0c <z_add_timeout+0xac>
			to->dticks -= t->dticks;
    9db8:	1b11      	subs	r1, r2, r4
    9dba:	eb63 0305 	sbc.w	r3, r3, r5
    9dbe:	f8cb 1010 	str.w	r1, [fp, #16]
    9dc2:	f8cb 3014 	str.w	r3, [fp, #20]
		for (t = first(); t != NULL; t = next(t)) {
    9dc6:	f7ff ff0d 	bl	9be4 <next>
    9dca:	e7eb      	b.n	9da4 <z_add_timeout+0x144>
	sys_dnode_t *const tail = list->tail;
    9dcc:	4b1e      	ldr	r3, [pc, #120]	; (9e48 <z_add_timeout+0x1e8>)
    9dce:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    9dd0:	f8cb 3000 	str.w	r3, [fp]
	node->prev = tail;
    9dd4:	f8cb 2004 	str.w	r2, [fp, #4]
	tail->next = node;
    9dd8:	f8c2 b000 	str.w	fp, [r2]
	list->tail = node;
    9ddc:	f8c3 b004 	str.w	fp, [r3, #4]
}
    9de0:	e7a7      	b.n	9d32 <z_add_timeout+0xd2>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    9de2:	f7ff ff17 	bl	9c14 <next_timeout>

			if (next_time == 0 ||
    9de6:	4603      	mov	r3, r0
    9de8:	b118      	cbz	r0, 9df2 <z_add_timeout+0x192>
			    _current_cpu->slice_ticks != next_time) {
    9dea:	4a18      	ldr	r2, [pc, #96]	; (9e4c <z_add_timeout+0x1ec>)
    9dec:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    9dee:	4282      	cmp	r2, r0
    9df0:	d0a3      	beq.n	9d3a <z_add_timeout+0xda>
				sys_clock_set_timeout(next_time, false);
    9df2:	2100      	movs	r1, #0
    9df4:	4618      	mov	r0, r3
    9df6:	f7fb fbcb 	bl	5590 <sys_clock_set_timeout>
    9dfa:	e79e      	b.n	9d3a <z_add_timeout+0xda>
    9dfc:	4c0e      	ldr	r4, [pc, #56]	; (9e38 <z_add_timeout+0x1d8>)
    9dfe:	23ac      	movs	r3, #172	; 0xac
    9e00:	4622      	mov	r2, r4
    9e02:	4913      	ldr	r1, [pc, #76]	; (9e50 <z_add_timeout+0x1f0>)
    9e04:	4809      	ldr	r0, [pc, #36]	; (9e2c <z_add_timeout+0x1cc>)
    9e06:	f001 f930 	bl	b06a <printk>
    9e0a:	490a      	ldr	r1, [pc, #40]	; (9e34 <z_add_timeout+0x1d4>)
    9e0c:	4811      	ldr	r0, [pc, #68]	; (9e54 <z_add_timeout+0x1f4>)
    9e0e:	f001 f92c 	bl	b06a <printk>
    9e12:	21ac      	movs	r1, #172	; 0xac
    9e14:	4620      	mov	r0, r4
    9e16:	f001 fa81 	bl	b31c <assert_post_action>
    9e1a:	e793      	b.n	9d44 <z_add_timeout+0xe4>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    9e1c:	b007      	add	sp, #28
    9e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9e22:	bf00      	nop
    9e24:	0000d558 	.word	0x0000d558
    9e28:	0000d57c 	.word	0x0000d57c
    9e2c:	0000c46c 	.word	0x0000c46c
    9e30:	0000d390 	.word	0x0000d390
    9e34:	20001268 	.word	0x20001268
    9e38:	0000c584 	.word	0x0000c584
    9e3c:	0000c5dc 	.word	0x0000c5dc
    9e40:	0000c5f4 	.word	0x0000c5f4
    9e44:	20000610 	.word	0x20000610
    9e48:	20000184 	.word	0x20000184
    9e4c:	2000121c 	.word	0x2000121c
    9e50:	0000c5ac 	.word	0x0000c5ac
    9e54:	0000c5c4 	.word	0x0000c5c4

00009e58 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    9e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9e5c:	4605      	mov	r5, r0
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
    9e5e:	2400      	movs	r4, #0
	__asm__ volatile(
    9e60:	f04f 0320 	mov.w	r3, #32
    9e64:	f3ef 8711 	mrs	r7, BASEPRI
    9e68:	f383 8812 	msr	BASEPRI_MAX, r3
    9e6c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9e70:	481f      	ldr	r0, [pc, #124]	; (9ef0 <z_abort_timeout+0x98>)
    9e72:	f7fd fdb7 	bl	79e4 <z_spin_lock_valid>
    9e76:	b128      	cbz	r0, 9e84 <z_abort_timeout+0x2c>
	z_spin_lock_set_owner(l);
    9e78:	481d      	ldr	r0, [pc, #116]	; (9ef0 <z_abort_timeout+0x98>)
    9e7a:	f7fd fdd3 	bl	7a24 <z_spin_lock_set_owner>
	int ret = -EINVAL;
    9e7e:	f06f 0815 	mvn.w	r8, #21
	return k;
    9e82:	e01c      	b.n	9ebe <z_abort_timeout+0x66>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9e84:	4e1b      	ldr	r6, [pc, #108]	; (9ef4 <z_abort_timeout+0x9c>)
    9e86:	2381      	movs	r3, #129	; 0x81
    9e88:	4632      	mov	r2, r6
    9e8a:	491b      	ldr	r1, [pc, #108]	; (9ef8 <z_abort_timeout+0xa0>)
    9e8c:	481b      	ldr	r0, [pc, #108]	; (9efc <z_abort_timeout+0xa4>)
    9e8e:	f001 f8ec 	bl	b06a <printk>
    9e92:	4917      	ldr	r1, [pc, #92]	; (9ef0 <z_abort_timeout+0x98>)
    9e94:	481a      	ldr	r0, [pc, #104]	; (9f00 <z_abort_timeout+0xa8>)
    9e96:	f001 f8e8 	bl	b06a <printk>
    9e9a:	2181      	movs	r1, #129	; 0x81
    9e9c:	4630      	mov	r0, r6
    9e9e:	f001 fa3d 	bl	b31c <assert_post_action>
    9ea2:	e7e9      	b.n	9e78 <z_abort_timeout+0x20>
		if (sys_dnode_is_linked(&to->node)) {
			remove_timeout(to);
    9ea4:	4628      	mov	r0, r5
    9ea6:	f002 f805 	bl	beb4 <remove_timeout>
			ret = 0;
    9eaa:	46b0      	mov	r8, r6
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9eac:	4810      	ldr	r0, [pc, #64]	; (9ef0 <z_abort_timeout+0x98>)
    9eae:	f7fd fda9 	bl	7a04 <z_spin_unlock_valid>
    9eb2:	b150      	cbz	r0, 9eca <z_abort_timeout+0x72>
	__asm__ volatile(
    9eb4:	f387 8811 	msr	BASEPRI, r7
    9eb8:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    9ebc:	2401      	movs	r4, #1
    9ebe:	4626      	mov	r6, r4
    9ec0:	b99c      	cbnz	r4, 9eea <z_abort_timeout+0x92>
	return node->next != NULL;
    9ec2:	682b      	ldr	r3, [r5, #0]
		if (sys_dnode_is_linked(&to->node)) {
    9ec4:	2b00      	cmp	r3, #0
    9ec6:	d1ed      	bne.n	9ea4 <z_abort_timeout+0x4c>
    9ec8:	e7f0      	b.n	9eac <z_abort_timeout+0x54>
    9eca:	4c0a      	ldr	r4, [pc, #40]	; (9ef4 <z_abort_timeout+0x9c>)
    9ecc:	23ac      	movs	r3, #172	; 0xac
    9ece:	4622      	mov	r2, r4
    9ed0:	490c      	ldr	r1, [pc, #48]	; (9f04 <z_abort_timeout+0xac>)
    9ed2:	480a      	ldr	r0, [pc, #40]	; (9efc <z_abort_timeout+0xa4>)
    9ed4:	f001 f8c9 	bl	b06a <printk>
    9ed8:	4905      	ldr	r1, [pc, #20]	; (9ef0 <z_abort_timeout+0x98>)
    9eda:	480b      	ldr	r0, [pc, #44]	; (9f08 <z_abort_timeout+0xb0>)
    9edc:	f001 f8c5 	bl	b06a <printk>
    9ee0:	21ac      	movs	r1, #172	; 0xac
    9ee2:	4620      	mov	r0, r4
    9ee4:	f001 fa1a 	bl	b31c <assert_post_action>
    9ee8:	e7e4      	b.n	9eb4 <z_abort_timeout+0x5c>
		}
	}

	return ret;
}
    9eea:	4640      	mov	r0, r8
    9eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9ef0:	20001268 	.word	0x20001268
    9ef4:	0000c584 	.word	0x0000c584
    9ef8:	0000c5dc 	.word	0x0000c5dc
    9efc:	0000c46c 	.word	0x0000c46c
    9f00:	0000c5f4 	.word	0x0000c5f4
    9f04:	0000c5ac 	.word	0x0000c5ac
    9f08:	0000c5c4 	.word	0x0000c5c4

00009f0c <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    9f0c:	b570      	push	{r4, r5, r6, lr}
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
    9f0e:	2500      	movs	r5, #0
	__asm__ volatile(
    9f10:	f04f 0320 	mov.w	r3, #32
    9f14:	f3ef 8611 	mrs	r6, BASEPRI
    9f18:	f383 8812 	msr	BASEPRI_MAX, r3
    9f1c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9f20:	481c      	ldr	r0, [pc, #112]	; (9f94 <z_get_next_timeout_expiry+0x88>)
    9f22:	f7fd fd5f 	bl	79e4 <z_spin_lock_valid>
    9f26:	b128      	cbz	r0, 9f34 <z_get_next_timeout_expiry+0x28>
	z_spin_lock_set_owner(l);
    9f28:	481a      	ldr	r0, [pc, #104]	; (9f94 <z_get_next_timeout_expiry+0x88>)
    9f2a:	f7fd fd7b 	bl	7a24 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    9f2e:	f04f 34ff 	mov.w	r4, #4294967295
	return k;
    9f32:	e023      	b.n	9f7c <z_get_next_timeout_expiry+0x70>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9f34:	4c18      	ldr	r4, [pc, #96]	; (9f98 <z_get_next_timeout_expiry+0x8c>)
    9f36:	2381      	movs	r3, #129	; 0x81
    9f38:	4622      	mov	r2, r4
    9f3a:	4918      	ldr	r1, [pc, #96]	; (9f9c <z_get_next_timeout_expiry+0x90>)
    9f3c:	4818      	ldr	r0, [pc, #96]	; (9fa0 <z_get_next_timeout_expiry+0x94>)
    9f3e:	f001 f894 	bl	b06a <printk>
    9f42:	4914      	ldr	r1, [pc, #80]	; (9f94 <z_get_next_timeout_expiry+0x88>)
    9f44:	4817      	ldr	r0, [pc, #92]	; (9fa4 <z_get_next_timeout_expiry+0x98>)
    9f46:	f001 f890 	bl	b06a <printk>
    9f4a:	2181      	movs	r1, #129	; 0x81
    9f4c:	4620      	mov	r0, r4
    9f4e:	f001 f9e5 	bl	b31c <assert_post_action>
    9f52:	e7e9      	b.n	9f28 <z_get_next_timeout_expiry+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9f54:	4d10      	ldr	r5, [pc, #64]	; (9f98 <z_get_next_timeout_expiry+0x8c>)
    9f56:	23ac      	movs	r3, #172	; 0xac
    9f58:	462a      	mov	r2, r5
    9f5a:	4913      	ldr	r1, [pc, #76]	; (9fa8 <z_get_next_timeout_expiry+0x9c>)
    9f5c:	4810      	ldr	r0, [pc, #64]	; (9fa0 <z_get_next_timeout_expiry+0x94>)
    9f5e:	f001 f884 	bl	b06a <printk>
    9f62:	490c      	ldr	r1, [pc, #48]	; (9f94 <z_get_next_timeout_expiry+0x88>)
    9f64:	4811      	ldr	r0, [pc, #68]	; (9fac <z_get_next_timeout_expiry+0xa0>)
    9f66:	f001 f880 	bl	b06a <printk>
    9f6a:	21ac      	movs	r1, #172	; 0xac
    9f6c:	4628      	mov	r0, r5
    9f6e:	f001 f9d5 	bl	b31c <assert_post_action>
	__asm__ volatile(
    9f72:	f386 8811 	msr	BASEPRI, r6
    9f76:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    9f7a:	2501      	movs	r5, #1
    9f7c:	b945      	cbnz	r5, 9f90 <z_get_next_timeout_expiry+0x84>
		ret = next_timeout();
    9f7e:	f7ff fe49 	bl	9c14 <next_timeout>
    9f82:	4604      	mov	r4, r0
    9f84:	4803      	ldr	r0, [pc, #12]	; (9f94 <z_get_next_timeout_expiry+0x88>)
    9f86:	f7fd fd3d 	bl	7a04 <z_spin_unlock_valid>
    9f8a:	2800      	cmp	r0, #0
    9f8c:	d1f1      	bne.n	9f72 <z_get_next_timeout_expiry+0x66>
    9f8e:	e7e1      	b.n	9f54 <z_get_next_timeout_expiry+0x48>
	}
	return ret;
}
    9f90:	4620      	mov	r0, r4
    9f92:	bd70      	pop	{r4, r5, r6, pc}
    9f94:	20001268 	.word	0x20001268
    9f98:	0000c584 	.word	0x0000c584
    9f9c:	0000c5dc 	.word	0x0000c5dc
    9fa0:	0000c46c 	.word	0x0000c46c
    9fa4:	0000c5f4 	.word	0x0000c5f4
    9fa8:	0000c5ac 	.word	0x0000c5ac
    9fac:	0000c5c4 	.word	0x0000c5c4

00009fb0 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    9fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9fb4:	4607      	mov	r7, r0
    9fb6:	4688      	mov	r8, r1
	LOCKED(&timeout_lock) {
    9fb8:	2500      	movs	r5, #0
	__asm__ volatile(
    9fba:	f04f 0320 	mov.w	r3, #32
    9fbe:	f3ef 8611 	mrs	r6, BASEPRI
    9fc2:	f383 8812 	msr	BASEPRI_MAX, r3
    9fc6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9fca:	4825      	ldr	r0, [pc, #148]	; (a060 <z_set_timeout_expiry+0xb0>)
    9fcc:	f7fd fd0a 	bl	79e4 <z_spin_lock_valid>
    9fd0:	b118      	cbz	r0, 9fda <z_set_timeout_expiry+0x2a>
	z_spin_lock_set_owner(l);
    9fd2:	4823      	ldr	r0, [pc, #140]	; (a060 <z_set_timeout_expiry+0xb0>)
    9fd4:	f7fd fd26 	bl	7a24 <z_spin_lock_set_owner>
	return k;
    9fd8:	e01e      	b.n	a018 <z_set_timeout_expiry+0x68>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9fda:	4c22      	ldr	r4, [pc, #136]	; (a064 <z_set_timeout_expiry+0xb4>)
    9fdc:	2381      	movs	r3, #129	; 0x81
    9fde:	4622      	mov	r2, r4
    9fe0:	4921      	ldr	r1, [pc, #132]	; (a068 <z_set_timeout_expiry+0xb8>)
    9fe2:	4822      	ldr	r0, [pc, #136]	; (a06c <z_set_timeout_expiry+0xbc>)
    9fe4:	f001 f841 	bl	b06a <printk>
    9fe8:	491d      	ldr	r1, [pc, #116]	; (a060 <z_set_timeout_expiry+0xb0>)
    9fea:	4821      	ldr	r0, [pc, #132]	; (a070 <z_set_timeout_expiry+0xc0>)
    9fec:	f001 f83d 	bl	b06a <printk>
    9ff0:	2181      	movs	r1, #129	; 0x81
    9ff2:	4620      	mov	r0, r4
    9ff4:	f001 f992 	bl	b31c <assert_post_action>
    9ff8:	e7eb      	b.n	9fd2 <z_set_timeout_expiry+0x22>
		int next_to = next_timeout();
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
    9ffa:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    9ffc:	f004 0401 	and.w	r4, r4, #1
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    a000:	2801      	cmp	r0, #1
    a002:	dd00      	ble.n	a006 <z_set_timeout_expiry+0x56>
    a004:	b99c      	cbnz	r4, a02e <z_set_timeout_expiry+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a006:	4816      	ldr	r0, [pc, #88]	; (a060 <z_set_timeout_expiry+0xb0>)
    a008:	f7fd fcfc 	bl	7a04 <z_spin_unlock_valid>
    a00c:	b1b0      	cbz	r0, a03c <z_set_timeout_expiry+0x8c>
	__asm__ volatile(
    a00e:	f386 8811 	msr	BASEPRI, r6
    a012:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    a016:	2501      	movs	r5, #1
    a018:	462c      	mov	r4, r5
    a01a:	b9fd      	cbnz	r5, a05c <z_set_timeout_expiry+0xac>
		int next_to = next_timeout();
    a01c:	f7ff fdfa 	bl	9c14 <next_timeout>
			      || (ticks <= next_to);
    a020:	f1b0 3fff 	cmp.w	r0, #4294967295
    a024:	d0e9      	beq.n	9ffa <z_set_timeout_expiry+0x4a>
    a026:	42b8      	cmp	r0, r7
    a028:	dbe8      	blt.n	9ffc <z_set_timeout_expiry+0x4c>
    a02a:	2401      	movs	r4, #1
    a02c:	e7e6      	b.n	9ffc <z_set_timeout_expiry+0x4c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    a02e:	4641      	mov	r1, r8
    a030:	42b8      	cmp	r0, r7
    a032:	bfa8      	it	ge
    a034:	4638      	movge	r0, r7
    a036:	f7fb faab 	bl	5590 <sys_clock_set_timeout>
    a03a:	e7e4      	b.n	a006 <z_set_timeout_expiry+0x56>
    a03c:	4c09      	ldr	r4, [pc, #36]	; (a064 <z_set_timeout_expiry+0xb4>)
    a03e:	23ac      	movs	r3, #172	; 0xac
    a040:	4622      	mov	r2, r4
    a042:	490c      	ldr	r1, [pc, #48]	; (a074 <z_set_timeout_expiry+0xc4>)
    a044:	4809      	ldr	r0, [pc, #36]	; (a06c <z_set_timeout_expiry+0xbc>)
    a046:	f001 f810 	bl	b06a <printk>
    a04a:	4905      	ldr	r1, [pc, #20]	; (a060 <z_set_timeout_expiry+0xb0>)
    a04c:	480a      	ldr	r0, [pc, #40]	; (a078 <z_set_timeout_expiry+0xc8>)
    a04e:	f001 f80c 	bl	b06a <printk>
    a052:	21ac      	movs	r1, #172	; 0xac
    a054:	4620      	mov	r0, r4
    a056:	f001 f961 	bl	b31c <assert_post_action>
    a05a:	e7d8      	b.n	a00e <z_set_timeout_expiry+0x5e>
		}
	}
}
    a05c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a060:	20001268 	.word	0x20001268
    a064:	0000c584 	.word	0x0000c584
    a068:	0000c5dc 	.word	0x0000c5dc
    a06c:	0000c46c 	.word	0x0000c46c
    a070:	0000c5f4 	.word	0x0000c5f4
    a074:	0000c5ac 	.word	0x0000c5ac
    a078:	0000c5c4 	.word	0x0000c5c4

0000a07c <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    a07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a07e:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    a080:	f7fe fcba 	bl	89f8 <z_time_slice>
	__asm__ volatile(
    a084:	f04f 0320 	mov.w	r3, #32
    a088:	f3ef 8411 	mrs	r4, BASEPRI
    a08c:	f383 8812 	msr	BASEPRI_MAX, r3
    a090:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a094:	4854      	ldr	r0, [pc, #336]	; (a1e8 <sys_clock_announce+0x16c>)
    a096:	f7fd fca5 	bl	79e4 <z_spin_lock_valid>
    a09a:	b128      	cbz	r0, a0a8 <sys_clock_announce+0x2c>
	z_spin_lock_set_owner(l);
    a09c:	4852      	ldr	r0, [pc, #328]	; (a1e8 <sys_clock_announce+0x16c>)
    a09e:	f7fd fcc1 	bl	7a24 <z_spin_lock_set_owner>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    a0a2:	4b52      	ldr	r3, [pc, #328]	; (a1ec <sys_clock_announce+0x170>)
    a0a4:	601d      	str	r5, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    a0a6:	e031      	b.n	a10c <sys_clock_announce+0x90>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a0a8:	4e51      	ldr	r6, [pc, #324]	; (a1f0 <sys_clock_announce+0x174>)
    a0aa:	2381      	movs	r3, #129	; 0x81
    a0ac:	4632      	mov	r2, r6
    a0ae:	4951      	ldr	r1, [pc, #324]	; (a1f4 <sys_clock_announce+0x178>)
    a0b0:	4851      	ldr	r0, [pc, #324]	; (a1f8 <sys_clock_announce+0x17c>)
    a0b2:	f000 ffda 	bl	b06a <printk>
    a0b6:	494c      	ldr	r1, [pc, #304]	; (a1e8 <sys_clock_announce+0x16c>)
    a0b8:	4850      	ldr	r0, [pc, #320]	; (a1fc <sys_clock_announce+0x180>)
    a0ba:	f000 ffd6 	bl	b06a <printk>
    a0be:	2181      	movs	r1, #129	; 0x81
    a0c0:	4630      	mov	r0, r6
    a0c2:	f001 f92b 	bl	b31c <assert_post_action>
    a0c6:	e7e9      	b.n	a09c <sys_clock_announce+0x20>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a0c8:	4e49      	ldr	r6, [pc, #292]	; (a1f0 <sys_clock_announce+0x174>)
    a0ca:	23ac      	movs	r3, #172	; 0xac
    a0cc:	4632      	mov	r2, r6
    a0ce:	494c      	ldr	r1, [pc, #304]	; (a200 <sys_clock_announce+0x184>)
    a0d0:	4849      	ldr	r0, [pc, #292]	; (a1f8 <sys_clock_announce+0x17c>)
    a0d2:	f000 ffca 	bl	b06a <printk>
    a0d6:	4944      	ldr	r1, [pc, #272]	; (a1e8 <sys_clock_announce+0x16c>)
    a0d8:	484a      	ldr	r0, [pc, #296]	; (a204 <sys_clock_announce+0x188>)
    a0da:	f000 ffc6 	bl	b06a <printk>
    a0de:	21ac      	movs	r1, #172	; 0xac
    a0e0:	4630      	mov	r0, r6
    a0e2:	f001 f91b 	bl	b31c <assert_post_action>
    a0e6:	e035      	b.n	a154 <sys_clock_announce+0xd8>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a0e8:	4d41      	ldr	r5, [pc, #260]	; (a1f0 <sys_clock_announce+0x174>)
    a0ea:	2381      	movs	r3, #129	; 0x81
    a0ec:	462a      	mov	r2, r5
    a0ee:	4941      	ldr	r1, [pc, #260]	; (a1f4 <sys_clock_announce+0x178>)
    a0f0:	4841      	ldr	r0, [pc, #260]	; (a1f8 <sys_clock_announce+0x17c>)
    a0f2:	f000 ffba 	bl	b06a <printk>
    a0f6:	493c      	ldr	r1, [pc, #240]	; (a1e8 <sys_clock_announce+0x16c>)
    a0f8:	4840      	ldr	r0, [pc, #256]	; (a1fc <sys_clock_announce+0x180>)
    a0fa:	f000 ffb6 	bl	b06a <printk>
    a0fe:	2181      	movs	r1, #129	; 0x81
    a100:	4628      	mov	r0, r5
    a102:	f001 f90b 	bl	b31c <assert_post_action>
	z_spin_lock_set_owner(l);
    a106:	4838      	ldr	r0, [pc, #224]	; (a1e8 <sys_clock_announce+0x16c>)
    a108:	f7fd fc8c 	bl	7a24 <z_spin_lock_set_owner>
    a10c:	f7ff fd60 	bl	9bd0 <first>
    a110:	4605      	mov	r5, r0
    a112:	2800      	cmp	r0, #0
    a114:	d033      	beq.n	a17e <sys_clock_announce+0x102>
    a116:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    a11a:	4b34      	ldr	r3, [pc, #208]	; (a1ec <sys_clock_announce+0x170>)
    a11c:	6819      	ldr	r1, [r3, #0]
    a11e:	17cb      	asrs	r3, r1, #31
    a120:	42b1      	cmp	r1, r6
    a122:	41bb      	sbcs	r3, r7
    a124:	db2b      	blt.n	a17e <sys_clock_announce+0x102>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    a126:	4838      	ldr	r0, [pc, #224]	; (a208 <sys_clock_announce+0x18c>)
    a128:	e9d0 2300 	ldrd	r2, r3, [r0]
    a12c:	1992      	adds	r2, r2, r6
    a12e:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
    a132:	e9c0 2300 	strd	r2, r3, [r0]
		announce_remaining -= dt;
    a136:	1b89      	subs	r1, r1, r6
    a138:	4b2c      	ldr	r3, [pc, #176]	; (a1ec <sys_clock_announce+0x170>)
    a13a:	6019      	str	r1, [r3, #0]
		t->dticks = 0;
    a13c:	2200      	movs	r2, #0
    a13e:	2300      	movs	r3, #0
    a140:	e9c5 2304 	strd	r2, r3, [r5, #16]
		remove_timeout(t);
    a144:	4628      	mov	r0, r5
    a146:	f001 feb5 	bl	beb4 <remove_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a14a:	4827      	ldr	r0, [pc, #156]	; (a1e8 <sys_clock_announce+0x16c>)
    a14c:	f7fd fc5a 	bl	7a04 <z_spin_unlock_valid>
    a150:	2800      	cmp	r0, #0
    a152:	d0b9      	beq.n	a0c8 <sys_clock_announce+0x4c>
	__asm__ volatile(
    a154:	f384 8811 	msr	BASEPRI, r4
    a158:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    a15c:	68ab      	ldr	r3, [r5, #8]
    a15e:	4628      	mov	r0, r5
    a160:	4798      	blx	r3
	__asm__ volatile(
    a162:	f04f 0320 	mov.w	r3, #32
    a166:	f3ef 8411 	mrs	r4, BASEPRI
    a16a:	f383 8812 	msr	BASEPRI_MAX, r3
    a16e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a172:	481d      	ldr	r0, [pc, #116]	; (a1e8 <sys_clock_announce+0x16c>)
    a174:	f7fd fc36 	bl	79e4 <z_spin_lock_valid>
    a178:	2800      	cmp	r0, #0
    a17a:	d1c4      	bne.n	a106 <sys_clock_announce+0x8a>
    a17c:	e7b4      	b.n	a0e8 <sys_clock_announce+0x6c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    a17e:	b145      	cbz	r5, a192 <sys_clock_announce+0x116>
		first()->dticks -= announce_remaining;
    a180:	4b1a      	ldr	r3, [pc, #104]	; (a1ec <sys_clock_announce+0x170>)
    a182:	6819      	ldr	r1, [r3, #0]
    a184:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
    a188:	1a52      	subs	r2, r2, r1
    a18a:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
    a18e:	e9c5 2304 	strd	r2, r3, [r5, #16]
	}

	curr_tick += announce_remaining;
    a192:	481d      	ldr	r0, [pc, #116]	; (a208 <sys_clock_announce+0x18c>)
    a194:	4915      	ldr	r1, [pc, #84]	; (a1ec <sys_clock_announce+0x170>)
    a196:	680d      	ldr	r5, [r1, #0]
    a198:	e9d0 2300 	ldrd	r2, r3, [r0]
    a19c:	1952      	adds	r2, r2, r5
    a19e:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
    a1a2:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
    a1a6:	2500      	movs	r5, #0
    a1a8:	600d      	str	r5, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
    a1aa:	f7ff fd33 	bl	9c14 <next_timeout>
    a1ae:	4629      	mov	r1, r5
    a1b0:	f7fb f9ee 	bl	5590 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a1b4:	480c      	ldr	r0, [pc, #48]	; (a1e8 <sys_clock_announce+0x16c>)
    a1b6:	f7fd fc25 	bl	7a04 <z_spin_unlock_valid>
    a1ba:	b120      	cbz	r0, a1c6 <sys_clock_announce+0x14a>
	__asm__ volatile(
    a1bc:	f384 8811 	msr	BASEPRI, r4
    a1c0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    a1c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a1c6:	4d0a      	ldr	r5, [pc, #40]	; (a1f0 <sys_clock_announce+0x174>)
    a1c8:	23ac      	movs	r3, #172	; 0xac
    a1ca:	462a      	mov	r2, r5
    a1cc:	490c      	ldr	r1, [pc, #48]	; (a200 <sys_clock_announce+0x184>)
    a1ce:	480a      	ldr	r0, [pc, #40]	; (a1f8 <sys_clock_announce+0x17c>)
    a1d0:	f000 ff4b 	bl	b06a <printk>
    a1d4:	4904      	ldr	r1, [pc, #16]	; (a1e8 <sys_clock_announce+0x16c>)
    a1d6:	480b      	ldr	r0, [pc, #44]	; (a204 <sys_clock_announce+0x188>)
    a1d8:	f000 ff47 	bl	b06a <printk>
    a1dc:	21ac      	movs	r1, #172	; 0xac
    a1de:	4628      	mov	r0, r5
    a1e0:	f001 f89c 	bl	b31c <assert_post_action>
    a1e4:	e7ea      	b.n	a1bc <sys_clock_announce+0x140>
    a1e6:	bf00      	nop
    a1e8:	20001268 	.word	0x20001268
    a1ec:	20001264 	.word	0x20001264
    a1f0:	0000c584 	.word	0x0000c584
    a1f4:	0000c5dc 	.word	0x0000c5dc
    a1f8:	0000c46c 	.word	0x0000c46c
    a1fc:	0000c5f4 	.word	0x0000c5f4
    a200:	0000c5ac 	.word	0x0000c5ac
    a204:	0000c5c4 	.word	0x0000c5c4
    a208:	20000610 	.word	0x20000610

0000a20c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    a20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    a20e:	2400      	movs	r4, #0
	__asm__ volatile(
    a210:	f04f 0320 	mov.w	r3, #32
    a214:	f3ef 8511 	mrs	r5, BASEPRI
    a218:	f383 8812 	msr	BASEPRI_MAX, r3
    a21c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a220:	481f      	ldr	r0, [pc, #124]	; (a2a0 <sys_clock_tick_get+0x94>)
    a222:	f7fd fbdf 	bl	79e4 <z_spin_lock_valid>
    a226:	b128      	cbz	r0, a234 <sys_clock_tick_get+0x28>
	z_spin_lock_set_owner(l);
    a228:	481d      	ldr	r0, [pc, #116]	; (a2a0 <sys_clock_tick_get+0x94>)
    a22a:	f7fd fbfb 	bl	7a24 <z_spin_lock_set_owner>
	uint64_t t = 0U;
    a22e:	2600      	movs	r6, #0
    a230:	2700      	movs	r7, #0
	return k;
    a232:	e023      	b.n	a27c <sys_clock_tick_get+0x70>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a234:	4e1b      	ldr	r6, [pc, #108]	; (a2a4 <sys_clock_tick_get+0x98>)
    a236:	2381      	movs	r3, #129	; 0x81
    a238:	4632      	mov	r2, r6
    a23a:	491b      	ldr	r1, [pc, #108]	; (a2a8 <sys_clock_tick_get+0x9c>)
    a23c:	481b      	ldr	r0, [pc, #108]	; (a2ac <sys_clock_tick_get+0xa0>)
    a23e:	f000 ff14 	bl	b06a <printk>
    a242:	4917      	ldr	r1, [pc, #92]	; (a2a0 <sys_clock_tick_get+0x94>)
    a244:	481a      	ldr	r0, [pc, #104]	; (a2b0 <sys_clock_tick_get+0xa4>)
    a246:	f000 ff10 	bl	b06a <printk>
    a24a:	2181      	movs	r1, #129	; 0x81
    a24c:	4630      	mov	r0, r6
    a24e:	f001 f865 	bl	b31c <assert_post_action>
    a252:	e7e9      	b.n	a228 <sys_clock_tick_get+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a254:	4c13      	ldr	r4, [pc, #76]	; (a2a4 <sys_clock_tick_get+0x98>)
    a256:	23ac      	movs	r3, #172	; 0xac
    a258:	4622      	mov	r2, r4
    a25a:	4916      	ldr	r1, [pc, #88]	; (a2b4 <sys_clock_tick_get+0xa8>)
    a25c:	4813      	ldr	r0, [pc, #76]	; (a2ac <sys_clock_tick_get+0xa0>)
    a25e:	f000 ff04 	bl	b06a <printk>
    a262:	490f      	ldr	r1, [pc, #60]	; (a2a0 <sys_clock_tick_get+0x94>)
    a264:	4814      	ldr	r0, [pc, #80]	; (a2b8 <sys_clock_tick_get+0xac>)
    a266:	f000 ff00 	bl	b06a <printk>
    a26a:	21ac      	movs	r1, #172	; 0xac
    a26c:	4620      	mov	r0, r4
    a26e:	f001 f855 	bl	b31c <assert_post_action>
	__asm__ volatile(
    a272:	f385 8811 	msr	BASEPRI, r5
    a276:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    a27a:	2401      	movs	r4, #1
    a27c:	b96c      	cbnz	r4, a29a <sys_clock_tick_get+0x8e>
		t = curr_tick + sys_clock_elapsed();
    a27e:	f7fb f9bb 	bl	55f8 <sys_clock_elapsed>
    a282:	4b0e      	ldr	r3, [pc, #56]	; (a2bc <sys_clock_tick_get+0xb0>)
    a284:	e9d3 6700 	ldrd	r6, r7, [r3]
    a288:	1836      	adds	r6, r6, r0
    a28a:	f147 0700 	adc.w	r7, r7, #0
    a28e:	4804      	ldr	r0, [pc, #16]	; (a2a0 <sys_clock_tick_get+0x94>)
    a290:	f7fd fbb8 	bl	7a04 <z_spin_unlock_valid>
    a294:	2800      	cmp	r0, #0
    a296:	d1ec      	bne.n	a272 <sys_clock_tick_get+0x66>
    a298:	e7dc      	b.n	a254 <sys_clock_tick_get+0x48>
	}
	return t;
}
    a29a:	4630      	mov	r0, r6
    a29c:	4639      	mov	r1, r7
    a29e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a2a0:	20001268 	.word	0x20001268
    a2a4:	0000c584 	.word	0x0000c584
    a2a8:	0000c5dc 	.word	0x0000c5dc
    a2ac:	0000c46c 	.word	0x0000c46c
    a2b0:	0000c5f4 	.word	0x0000c5f4
    a2b4:	0000c5ac 	.word	0x0000c5ac
    a2b8:	0000c5c4 	.word	0x0000c5c4
    a2bc:	20000610 	.word	0x20000610

0000a2c0 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    a2c0:	b570      	push	{r4, r5, r6, lr}
    a2c2:	4604      	mov	r4, r0
	__asm__ volatile(
    a2c4:	f04f 0320 	mov.w	r3, #32
    a2c8:	f3ef 8611 	mrs	r6, BASEPRI
    a2cc:	f383 8812 	msr	BASEPRI_MAX, r3
    a2d0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a2d4:	4856      	ldr	r0, [pc, #344]	; (a430 <z_timer_expiration_handler+0x170>)
    a2d6:	f7fd fb85 	bl	79e4 <z_spin_lock_valid>
    a2da:	2800      	cmp	r0, #0
    a2dc:	d049      	beq.n	a372 <z_timer_expiration_handler+0xb2>
	z_spin_lock_set_owner(l);
    a2de:	4854      	ldr	r0, [pc, #336]	; (a430 <z_timer_expiration_handler+0x170>)
    a2e0:	f7fd fba0 	bl	7a24 <z_spin_lock_set_owner>
	return k;
    a2e4:	4635      	mov	r5, r6

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    a2e6:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    a2ea:	ea52 0103 	orrs.w	r1, r2, r3
    a2ee:	d005      	beq.n	a2fc <z_timer_expiration_handler+0x3c>
    a2f0:	f1b3 3fff 	cmp.w	r3, #4294967295
    a2f4:	bf08      	it	eq
    a2f6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    a2fa:	d14a      	bne.n	a392 <z_timer_expiration_handler+0xd2>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    a2fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    a2fe:	3301      	adds	r3, #1
    a300:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    a302:	6a23      	ldr	r3, [r4, #32]
    a304:	b1db      	cbz	r3, a33e <z_timer_expiration_handler+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a306:	484a      	ldr	r0, [pc, #296]	; (a430 <z_timer_expiration_handler+0x170>)
    a308:	f7fd fb7c 	bl	7a04 <z_spin_unlock_valid>
    a30c:	2800      	cmp	r0, #0
    a30e:	d045      	beq.n	a39c <z_timer_expiration_handler+0xdc>
	__asm__ volatile(
    a310:	f386 8811 	msr	BASEPRI, r6
    a314:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    a318:	6a23      	ldr	r3, [r4, #32]
    a31a:	4620      	mov	r0, r4
    a31c:	4798      	blx	r3
	__asm__ volatile(
    a31e:	f04f 0320 	mov.w	r3, #32
    a322:	f3ef 8511 	mrs	r5, BASEPRI
    a326:	f383 8812 	msr	BASEPRI_MAX, r3
    a32a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a32e:	4840      	ldr	r0, [pc, #256]	; (a430 <z_timer_expiration_handler+0x170>)
    a330:	f7fd fb58 	bl	79e4 <z_spin_lock_valid>
    a334:	2800      	cmp	r0, #0
    a336:	d041      	beq.n	a3bc <z_timer_expiration_handler+0xfc>
	z_spin_lock_set_owner(l);
    a338:	483d      	ldr	r0, [pc, #244]	; (a430 <z_timer_expiration_handler+0x170>)
    a33a:	f7fd fb73 	bl	7a24 <z_spin_lock_set_owner>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    a33e:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
    a342:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a344:	42a3      	cmp	r3, r4
    a346:	d049      	beq.n	a3dc <z_timer_expiration_handler+0x11c>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    a348:	2c00      	cmp	r4, #0
    a34a:	d047      	beq.n	a3dc <z_timer_expiration_handler+0x11c>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
    a34c:	4620      	mov	r0, r4
    a34e:	f7fe f90b 	bl	8568 <z_unpend_thread_no_timeout>
    a352:	2300      	movs	r3, #0
    a354:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a358:	4835      	ldr	r0, [pc, #212]	; (a430 <z_timer_expiration_handler+0x170>)
    a35a:	f7fd fb53 	bl	7a04 <z_spin_unlock_valid>
    a35e:	2800      	cmp	r0, #0
    a360:	d055      	beq.n	a40e <z_timer_expiration_handler+0x14e>
	__asm__ volatile(
    a362:	f385 8811 	msr	BASEPRI, r5
    a366:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
    a36a:	4620      	mov	r0, r4
    a36c:	f7fe fc36 	bl	8bdc <z_ready_thread>
}
    a370:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a372:	4d30      	ldr	r5, [pc, #192]	; (a434 <z_timer_expiration_handler+0x174>)
    a374:	2381      	movs	r3, #129	; 0x81
    a376:	462a      	mov	r2, r5
    a378:	492f      	ldr	r1, [pc, #188]	; (a438 <z_timer_expiration_handler+0x178>)
    a37a:	4830      	ldr	r0, [pc, #192]	; (a43c <z_timer_expiration_handler+0x17c>)
    a37c:	f000 fe75 	bl	b06a <printk>
    a380:	492b      	ldr	r1, [pc, #172]	; (a430 <z_timer_expiration_handler+0x170>)
    a382:	482f      	ldr	r0, [pc, #188]	; (a440 <z_timer_expiration_handler+0x180>)
    a384:	f000 fe71 	bl	b06a <printk>
    a388:	2181      	movs	r1, #129	; 0x81
    a38a:	4628      	mov	r0, r5
    a38c:	f000 ffc6 	bl	b31c <assert_post_action>
    a390:	e7a5      	b.n	a2de <z_timer_expiration_handler+0x1e>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    a392:	492c      	ldr	r1, [pc, #176]	; (a444 <z_timer_expiration_handler+0x184>)
    a394:	4620      	mov	r0, r4
    a396:	f7ff fc63 	bl	9c60 <z_add_timeout>
    a39a:	e7af      	b.n	a2fc <z_timer_expiration_handler+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a39c:	4d25      	ldr	r5, [pc, #148]	; (a434 <z_timer_expiration_handler+0x174>)
    a39e:	23ac      	movs	r3, #172	; 0xac
    a3a0:	462a      	mov	r2, r5
    a3a2:	4929      	ldr	r1, [pc, #164]	; (a448 <z_timer_expiration_handler+0x188>)
    a3a4:	4825      	ldr	r0, [pc, #148]	; (a43c <z_timer_expiration_handler+0x17c>)
    a3a6:	f000 fe60 	bl	b06a <printk>
    a3aa:	4921      	ldr	r1, [pc, #132]	; (a430 <z_timer_expiration_handler+0x170>)
    a3ac:	4827      	ldr	r0, [pc, #156]	; (a44c <z_timer_expiration_handler+0x18c>)
    a3ae:	f000 fe5c 	bl	b06a <printk>
    a3b2:	21ac      	movs	r1, #172	; 0xac
    a3b4:	4628      	mov	r0, r5
    a3b6:	f000 ffb1 	bl	b31c <assert_post_action>
    a3ba:	e7a9      	b.n	a310 <z_timer_expiration_handler+0x50>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a3bc:	4e1d      	ldr	r6, [pc, #116]	; (a434 <z_timer_expiration_handler+0x174>)
    a3be:	2381      	movs	r3, #129	; 0x81
    a3c0:	4632      	mov	r2, r6
    a3c2:	491d      	ldr	r1, [pc, #116]	; (a438 <z_timer_expiration_handler+0x178>)
    a3c4:	481d      	ldr	r0, [pc, #116]	; (a43c <z_timer_expiration_handler+0x17c>)
    a3c6:	f000 fe50 	bl	b06a <printk>
    a3ca:	4919      	ldr	r1, [pc, #100]	; (a430 <z_timer_expiration_handler+0x170>)
    a3cc:	481c      	ldr	r0, [pc, #112]	; (a440 <z_timer_expiration_handler+0x180>)
    a3ce:	f000 fe4c 	bl	b06a <printk>
    a3d2:	2181      	movs	r1, #129	; 0x81
    a3d4:	4630      	mov	r0, r6
    a3d6:	f000 ffa1 	bl	b31c <assert_post_action>
    a3da:	e7ad      	b.n	a338 <z_timer_expiration_handler+0x78>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a3dc:	4814      	ldr	r0, [pc, #80]	; (a430 <z_timer_expiration_handler+0x170>)
    a3de:	f7fd fb11 	bl	7a04 <z_spin_unlock_valid>
    a3e2:	b120      	cbz	r0, a3ee <z_timer_expiration_handler+0x12e>
    a3e4:	f385 8811 	msr	BASEPRI, r5
    a3e8:	f3bf 8f6f 	isb	sy
		return;
    a3ec:	e7c0      	b.n	a370 <z_timer_expiration_handler+0xb0>
    a3ee:	4c11      	ldr	r4, [pc, #68]	; (a434 <z_timer_expiration_handler+0x174>)
    a3f0:	23ac      	movs	r3, #172	; 0xac
    a3f2:	4622      	mov	r2, r4
    a3f4:	4914      	ldr	r1, [pc, #80]	; (a448 <z_timer_expiration_handler+0x188>)
    a3f6:	4811      	ldr	r0, [pc, #68]	; (a43c <z_timer_expiration_handler+0x17c>)
    a3f8:	f000 fe37 	bl	b06a <printk>
    a3fc:	490c      	ldr	r1, [pc, #48]	; (a430 <z_timer_expiration_handler+0x170>)
    a3fe:	4813      	ldr	r0, [pc, #76]	; (a44c <z_timer_expiration_handler+0x18c>)
    a400:	f000 fe33 	bl	b06a <printk>
    a404:	21ac      	movs	r1, #172	; 0xac
    a406:	4620      	mov	r0, r4
    a408:	f000 ff88 	bl	b31c <assert_post_action>
    a40c:	e7ea      	b.n	a3e4 <z_timer_expiration_handler+0x124>
    a40e:	4e09      	ldr	r6, [pc, #36]	; (a434 <z_timer_expiration_handler+0x174>)
    a410:	23ac      	movs	r3, #172	; 0xac
    a412:	4632      	mov	r2, r6
    a414:	490c      	ldr	r1, [pc, #48]	; (a448 <z_timer_expiration_handler+0x188>)
    a416:	4809      	ldr	r0, [pc, #36]	; (a43c <z_timer_expiration_handler+0x17c>)
    a418:	f000 fe27 	bl	b06a <printk>
    a41c:	4904      	ldr	r1, [pc, #16]	; (a430 <z_timer_expiration_handler+0x170>)
    a41e:	480b      	ldr	r0, [pc, #44]	; (a44c <z_timer_expiration_handler+0x18c>)
    a420:	f000 fe23 	bl	b06a <printk>
    a424:	21ac      	movs	r1, #172	; 0xac
    a426:	4630      	mov	r0, r6
    a428:	f000 ff78 	bl	b31c <assert_post_action>
    a42c:	e799      	b.n	a362 <z_timer_expiration_handler+0xa2>
    a42e:	bf00      	nop
    a430:	2000126c 	.word	0x2000126c
    a434:	0000c584 	.word	0x0000c584
    a438:	0000c5dc 	.word	0x0000c5dc
    a43c:	0000c46c 	.word	0x0000c46c
    a440:	0000c5f4 	.word	0x0000c5f4
    a444:	0000a2c1 	.word	0x0000a2c1
    a448:	0000c5ac 	.word	0x0000c5ac
    a44c:	0000c5c4 	.word	0x0000c5c4

0000a450 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    a450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a454:	b087      	sub	sp, #28
    a456:	4614      	mov	r4, r2
    a458:	461d      	mov	r5, r3
    a45a:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    a45e:	f1b3 3fff 	cmp.w	r3, #4294967295
    a462:	bf08      	it	eq
    a464:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    a468:	d035      	beq.n	a4d6 <z_impl_k_timer_start+0x86>
    a46a:	4606      	mov	r6, r0
    a46c:	4613      	mov	r3, r2
    a46e:	462a      	mov	r2, r5
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    a470:	f1b9 3fff 	cmp.w	r9, #4294967295
    a474:	bf08      	it	eq
    a476:	f1b8 3fff 	cmpeq.w	r8, #4294967295
    a47a:	d012      	beq.n	a4a2 <z_impl_k_timer_start+0x52>
    a47c:	ea58 0109 	orrs.w	r1, r8, r9
    a480:	d00f      	beq.n	a4a2 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
    a482:	f06f 0701 	mvn.w	r7, #1
    a486:	ebb7 0708 	subs.w	r7, r7, r8
    a48a:	9702      	str	r7, [sp, #8]
    a48c:	f04f 31ff 	mov.w	r1, #4294967295
    a490:	eb61 0709 	sbc.w	r7, r1, r9
    a494:	9703      	str	r7, [sp, #12]
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    a496:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    a49a:	2800      	cmp	r0, #0
    a49c:	f171 0100 	sbcs.w	r1, r1, #0
    a4a0:	db1c      	blt.n	a4dc <z_impl_k_timer_start+0x8c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    a4a2:	f06f 0101 	mvn.w	r1, #1
    a4a6:	ebb1 0a03 	subs.w	sl, r1, r3
    a4aa:	f04f 31ff 	mov.w	r1, #4294967295
    a4ae:	eb61 0b02 	sbc.w	fp, r1, r2
    a4b2:	f1ba 0f00 	cmp.w	sl, #0
    a4b6:	f17b 0100 	sbcs.w	r1, fp, #0
    a4ba:	db23      	blt.n	a504 <z_impl_k_timer_start+0xb4>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
    a4bc:	4630      	mov	r0, r6
    a4be:	f7ff fccb 	bl	9e58 <z_abort_timeout>
	timer->period = period;
    a4c2:	e9c6 890a 	strd	r8, r9, [r6, #40]	; 0x28
	timer->status = 0U;
    a4c6:	2300      	movs	r3, #0
    a4c8:	6333      	str	r3, [r6, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    a4ca:	4622      	mov	r2, r4
    a4cc:	462b      	mov	r3, r5
    a4ce:	4917      	ldr	r1, [pc, #92]	; (a52c <z_impl_k_timer_start+0xdc>)
    a4d0:	4630      	mov	r0, r6
    a4d2:	f7ff fbc5 	bl	9c60 <z_add_timeout>
		     duration);
}
    a4d6:	b007      	add	sp, #28
    a4d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		period.ticks = MAX(period.ticks - 1, 1);
    a4dc:	f118 31ff 	adds.w	r1, r8, #4294967295
    a4e0:	9104      	str	r1, [sp, #16]
    a4e2:	f149 31ff 	adc.w	r1, r9, #4294967295
    a4e6:	9105      	str	r1, [sp, #20]
    a4e8:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
    a4ec:	4638      	mov	r0, r7
    a4ee:	4641      	mov	r1, r8
    a4f0:	2f01      	cmp	r7, #1
    a4f2:	f178 0700 	sbcs.w	r7, r8, #0
    a4f6:	db02      	blt.n	a4fe <z_impl_k_timer_start+0xae>
    a4f8:	4680      	mov	r8, r0
    a4fa:	4689      	mov	r9, r1
    a4fc:	e7d1      	b.n	a4a2 <z_impl_k_timer_start+0x52>
    a4fe:	2001      	movs	r0, #1
    a500:	2100      	movs	r1, #0
    a502:	e7f9      	b.n	a4f8 <z_impl_k_timer_start+0xa8>
		duration.ticks = MAX(duration.ticks - 1, 0);
    a504:	f113 33ff 	adds.w	r3, r3, #4294967295
    a508:	9300      	str	r3, [sp, #0]
    a50a:	f142 33ff 	adc.w	r3, r2, #4294967295
    a50e:	9301      	str	r3, [sp, #4]
    a510:	e9dd 0100 	ldrd	r0, r1, [sp]
    a514:	4602      	mov	r2, r0
    a516:	460b      	mov	r3, r1
    a518:	2800      	cmp	r0, #0
    a51a:	f171 0100 	sbcs.w	r1, r1, #0
    a51e:	db02      	blt.n	a526 <z_impl_k_timer_start+0xd6>
    a520:	4614      	mov	r4, r2
    a522:	461d      	mov	r5, r3
    a524:	e7ca      	b.n	a4bc <z_impl_k_timer_start+0x6c>
    a526:	2200      	movs	r2, #0
    a528:	4613      	mov	r3, r2
    a52a:	e7f9      	b.n	a520 <z_impl_k_timer_start+0xd0>
    a52c:	0000a2c1 	.word	0x0000a2c1

0000a530 <signal_poller>:

	return events_registered;
}

static int signal_poller(struct k_poll_event *event, uint32_t state)
{
    a530:	b570      	push	{r4, r5, r6, lr}
    a532:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
    a534:	6880      	ldr	r0, [r0, #8]
    a536:	f001 fcfd 	bl	bf34 <poller_thread>

	__ASSERT(thread != NULL, "poller should have a thread\n");
    a53a:	4604      	mov	r4, r0
    a53c:	b1e8      	cbz	r0, a57a <signal_poller+0x4a>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
    a53e:	7b63      	ldrb	r3, [r4, #13]

	if (!z_is_thread_pending(thread)) {
    a540:	f013 0f02 	tst.w	r3, #2
    a544:	d036      	beq.n	a5b4 <signal_poller+0x84>
}

static ALWAYS_INLINE bool z_is_thread_timeout_expired(struct k_thread *thread)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	return thread->base.timeout.dticks == _EXPIRED;
    a546:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
		return 0;
	}

	if (z_is_thread_timeout_expired(thread)) {
    a54a:	f06f 0001 	mvn.w	r0, #1
    a54e:	f04f 31ff 	mov.w	r1, #4294967295
    a552:	428b      	cmp	r3, r1
    a554:	bf08      	it	eq
    a556:	4282      	cmpeq	r2, r0
    a558:	d02e      	beq.n	a5b8 <signal_poller+0x88>
		return -EAGAIN;
	}

	z_unpend_thread(thread);
    a55a:	4620      	mov	r0, r4
    a55c:	f7fe f952 	bl	8804 <z_unpend_thread>
	arch_thread_return_value_set(thread,
    a560:	2d08      	cmp	r5, #8
    a562:	d019      	beq.n	a598 <signal_poller+0x68>
    a564:	2300      	movs	r3, #0
    a566:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	uint8_t state = thread->base.thread_state;
    a56a:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    a56c:	f013 0f1f 	tst.w	r3, #31
    a570:	d117      	bne.n	a5a2 <signal_poller+0x72>
	return node->next != NULL;
    a572:	69a3      	ldr	r3, [r4, #24]
    a574:	b19b      	cbz	r3, a59e <signal_poller+0x6e>
    a576:	2300      	movs	r3, #0
    a578:	e014      	b.n	a5a4 <signal_poller+0x74>
	__ASSERT(thread != NULL, "poller should have a thread\n");
    a57a:	4e11      	ldr	r6, [pc, #68]	; (a5c0 <signal_poller+0x90>)
    a57c:	23f9      	movs	r3, #249	; 0xf9
    a57e:	4632      	mov	r2, r6
    a580:	4910      	ldr	r1, [pc, #64]	; (a5c4 <signal_poller+0x94>)
    a582:	4811      	ldr	r0, [pc, #68]	; (a5c8 <signal_poller+0x98>)
    a584:	f000 fd71 	bl	b06a <printk>
    a588:	4810      	ldr	r0, [pc, #64]	; (a5cc <signal_poller+0x9c>)
    a58a:	f000 fd6e 	bl	b06a <printk>
    a58e:	21f9      	movs	r1, #249	; 0xf9
    a590:	4630      	mov	r0, r6
    a592:	f000 fec3 	bl	b31c <assert_post_action>
    a596:	e7d2      	b.n	a53e <signal_poller+0xe>
	arch_thread_return_value_set(thread,
    a598:	f06f 0303 	mvn.w	r3, #3
    a59c:	e7e3      	b.n	a566 <signal_poller+0x36>
    a59e:	2301      	movs	r3, #1
    a5a0:	e000      	b.n	a5a4 <signal_poller+0x74>
    a5a2:	2300      	movs	r3, #0
		state == K_POLL_STATE_CANCELLED ? -EINTR : 0);

	if (!z_is_thread_ready(thread)) {
    a5a4:	b90b      	cbnz	r3, a5aa <signal_poller+0x7a>
		return 0;
    a5a6:	2000      	movs	r0, #0
    a5a8:	e005      	b.n	a5b6 <signal_poller+0x86>
	}

	z_ready_thread(thread);
    a5aa:	4620      	mov	r0, r4
    a5ac:	f7fe fb16 	bl	8bdc <z_ready_thread>

	return 0;
    a5b0:	2000      	movs	r0, #0
    a5b2:	e000      	b.n	a5b6 <signal_poller+0x86>
		return 0;
    a5b4:	2000      	movs	r0, #0
}
    a5b6:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
    a5b8:	f06f 000a 	mvn.w	r0, #10
    a5bc:	e7fb      	b.n	a5b6 <signal_poller+0x86>
    a5be:	bf00      	nop
    a5c0:	0000d59c 	.word	0x0000d59c
    a5c4:	0000d5c0 	.word	0x0000d5c0
    a5c8:	0000c46c 	.word	0x0000c46c
    a5cc:	0000d5d8 	.word	0x0000d5d8

0000a5d0 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
    a5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a5d2:	4604      	mov	r4, r0
    a5d4:	460d      	mov	r5, r1
	__asm__ volatile(
    a5d6:	f04f 0320 	mov.w	r3, #32
    a5da:	f3ef 8611 	mrs	r6, BASEPRI
    a5de:	f383 8812 	msr	BASEPRI_MAX, r3
    a5e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a5e6:	4824      	ldr	r0, [pc, #144]	; (a678 <z_impl_k_poll_signal_raise+0xa8>)
    a5e8:	f7fd f9fc 	bl	79e4 <z_spin_lock_valid>
    a5ec:	b1d0      	cbz	r0, a624 <z_impl_k_poll_signal_raise+0x54>
	z_spin_lock_set_owner(l);
    a5ee:	4822      	ldr	r0, [pc, #136]	; (a678 <z_impl_k_poll_signal_raise+0xa8>)
    a5f0:	f7fd fa18 	bl	7a24 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
    a5f4:	60e5      	str	r5, [r4, #12]
	sig->signaled = 1U;
    a5f6:	2301      	movs	r3, #1
    a5f8:	60a3      	str	r3, [r4, #8]
	return list->head == list;
    a5fa:	6820      	ldr	r0, [r4, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
    a5fc:	4284      	cmp	r4, r0
    a5fe:	d021      	beq.n	a644 <z_impl_k_poll_signal_raise+0x74>
	sys_dnode_t *const prev = node->prev;
    a600:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
    a602:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
    a604:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    a606:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    a608:	2300      	movs	r3, #0
    a60a:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
    a60c:	6043      	str	r3, [r0, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&sig->poll_events);
	if (poll_event == NULL) {
    a60e:	b1c8      	cbz	r0, a644 <z_impl_k_poll_signal_raise+0x74>
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    a610:	2101      	movs	r1, #1
    a612:	f001 fca8 	bl	bf66 <signal_poll_event>
    a616:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
    a618:	4631      	mov	r1, r6
    a61a:	4817      	ldr	r0, [pc, #92]	; (a678 <z_impl_k_poll_signal_raise+0xa8>)
    a61c:	f7fd fffe 	bl	861c <z_reschedule>
	return rc;
}
    a620:	4620      	mov	r0, r4
    a622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a624:	4f15      	ldr	r7, [pc, #84]	; (a67c <z_impl_k_poll_signal_raise+0xac>)
    a626:	2381      	movs	r3, #129	; 0x81
    a628:	463a      	mov	r2, r7
    a62a:	4915      	ldr	r1, [pc, #84]	; (a680 <z_impl_k_poll_signal_raise+0xb0>)
    a62c:	4815      	ldr	r0, [pc, #84]	; (a684 <z_impl_k_poll_signal_raise+0xb4>)
    a62e:	f000 fd1c 	bl	b06a <printk>
    a632:	4911      	ldr	r1, [pc, #68]	; (a678 <z_impl_k_poll_signal_raise+0xa8>)
    a634:	4814      	ldr	r0, [pc, #80]	; (a688 <z_impl_k_poll_signal_raise+0xb8>)
    a636:	f000 fd18 	bl	b06a <printk>
    a63a:	2181      	movs	r1, #129	; 0x81
    a63c:	4638      	mov	r0, r7
    a63e:	f000 fe6d 	bl	b31c <assert_post_action>
    a642:	e7d4      	b.n	a5ee <z_impl_k_poll_signal_raise+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a644:	480c      	ldr	r0, [pc, #48]	; (a678 <z_impl_k_poll_signal_raise+0xa8>)
    a646:	f7fd f9dd 	bl	7a04 <z_spin_unlock_valid>
    a64a:	b128      	cbz	r0, a658 <z_impl_k_poll_signal_raise+0x88>
	__asm__ volatile(
    a64c:	f386 8811 	msr	BASEPRI, r6
    a650:	f3bf 8f6f 	isb	sy
		return 0;
    a654:	2400      	movs	r4, #0
    a656:	e7e3      	b.n	a620 <z_impl_k_poll_signal_raise+0x50>
    a658:	4c08      	ldr	r4, [pc, #32]	; (a67c <z_impl_k_poll_signal_raise+0xac>)
    a65a:	23ac      	movs	r3, #172	; 0xac
    a65c:	4622      	mov	r2, r4
    a65e:	490b      	ldr	r1, [pc, #44]	; (a68c <z_impl_k_poll_signal_raise+0xbc>)
    a660:	4808      	ldr	r0, [pc, #32]	; (a684 <z_impl_k_poll_signal_raise+0xb4>)
    a662:	f000 fd02 	bl	b06a <printk>
    a666:	4904      	ldr	r1, [pc, #16]	; (a678 <z_impl_k_poll_signal_raise+0xa8>)
    a668:	4809      	ldr	r0, [pc, #36]	; (a690 <z_impl_k_poll_signal_raise+0xc0>)
    a66a:	f000 fcfe 	bl	b06a <printk>
    a66e:	21ac      	movs	r1, #172	; 0xac
    a670:	4620      	mov	r0, r4
    a672:	f000 fe53 	bl	b31c <assert_post_action>
    a676:	e7e9      	b.n	a64c <z_impl_k_poll_signal_raise+0x7c>
    a678:	20001270 	.word	0x20001270
    a67c:	0000c584 	.word	0x0000c584
    a680:	0000c5dc 	.word	0x0000c5dc
    a684:	0000c46c 	.word	0x0000c46c
    a688:	0000c5f4 	.word	0x0000c5f4
    a68c:	0000c5ac 	.word	0x0000c5ac
    a690:	0000c5c4 	.word	0x0000c5c4

0000a694 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    a694:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    a696:	4a03      	ldr	r2, [pc, #12]	; (a6a4 <boot_banner+0x10>)
    a698:	4903      	ldr	r1, [pc, #12]	; (a6a8 <boot_banner+0x14>)
    a69a:	4804      	ldr	r0, [pc, #16]	; (a6ac <boot_banner+0x18>)
    a69c:	f000 fce5 	bl	b06a <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    a6a0:	bd08      	pop	{r3, pc}
    a6a2:	bf00      	nop
    a6a4:	0000c948 	.word	0x0000c948
    a6a8:	0000d6e4 	.word	0x0000d6e4
    a6ac:	0000d6f4 	.word	0x0000d6f4

0000a6b0 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    a6b0:	b510      	push	{r4, lr}
    a6b2:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    a6b4:	4b08      	ldr	r3, [pc, #32]	; (a6d8 <k_sys_work_q_init+0x28>)
    a6b6:	9302      	str	r3, [sp, #8]
    a6b8:	2400      	movs	r4, #0
    a6ba:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    a6be:	ab02      	add	r3, sp, #8
    a6c0:	9300      	str	r3, [sp, #0]
    a6c2:	f04f 33ff 	mov.w	r3, #4294967295
    a6c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    a6ca:	4904      	ldr	r1, [pc, #16]	; (a6dc <k_sys_work_q_init+0x2c>)
    a6cc:	4804      	ldr	r0, [pc, #16]	; (a6e0 <k_sys_work_q_init+0x30>)
    a6ce:	f000 fa2b 	bl	ab28 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    a6d2:	4620      	mov	r0, r4
    a6d4:	b004      	add	sp, #16
    a6d6:	bd10      	pop	{r4, pc}
    a6d8:	0000d71c 	.word	0x0000d71c
    a6dc:	20002e60 	.word	0x20002e60
    a6e0:	20000618 	.word	0x20000618

0000a6e4 <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
    a6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a6e6:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
    a6e8:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    a6ea:	f013 0f02 	tst.w	r3, #2
    a6ee:	d16e      	bne.n	a7ce <submit_to_queue_locked+0xea>
    a6f0:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    a6f2:	f013 0f04 	tst.w	r3, #4
    a6f6:	d16f      	bne.n	a7d8 <submit_to_queue_locked+0xf4>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
    a6f8:	680b      	ldr	r3, [r1, #0]
    a6fa:	2b00      	cmp	r3, #0
    a6fc:	d03c      	beq.n	a778 <submit_to_queue_locked+0x94>
	return (*flagp & BIT(bit)) != 0U;
    a6fe:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    a700:	f013 0f01 	tst.w	r3, #1
    a704:	d049      	beq.n	a79a <submit_to_queue_locked+0xb6>
			__ASSERT_NO_MSG(work->queue != NULL);
    a706:	68a3      	ldr	r3, [r4, #8]
    a708:	2b00      	cmp	r3, #0
    a70a:	d038      	beq.n	a77e <submit_to_queue_locked+0x9a>
			*queuep = work->queue;
    a70c:	68a3      	ldr	r3, [r4, #8]
    a70e:	602b      	str	r3, [r5, #0]
			ret = 2;
    a710:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
    a712:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
    a714:	2e00      	cmp	r6, #0
    a716:	d04e      	beq.n	a7b6 <submit_to_queue_locked+0xd2>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    a718:	4b30      	ldr	r3, [pc, #192]	; (a7dc <submit_to_queue_locked+0xf8>)
    a71a:	689b      	ldr	r3, [r3, #8]
    a71c:	42b3      	cmp	r3, r6
    a71e:	d03e      	beq.n	a79e <submit_to_queue_locked+0xba>
    a720:	2300      	movs	r3, #0
    a722:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
    a724:	f8d6 30d0 	ldr.w	r3, [r6, #208]	; 0xd0
    a728:	f3c3 0180 	ubfx	r1, r3, #2, #1
    a72c:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    a730:	f013 0f01 	tst.w	r3, #1
    a734:	d042      	beq.n	a7bc <submit_to_queue_locked+0xd8>
	} else if (draining && !chained) {
    a736:	b109      	cbz	r1, a73c <submit_to_queue_locked+0x58>
    a738:	2a00      	cmp	r2, #0
    a73a:	d042      	beq.n	a7c2 <submit_to_queue_locked+0xde>
	} else if (plugged && !draining) {
    a73c:	b108      	cbz	r0, a742 <submit_to_queue_locked+0x5e>
    a73e:	2900      	cmp	r1, #0
    a740:	d042      	beq.n	a7c8 <submit_to_queue_locked+0xe4>
	parent->next = child;
    a742:	2300      	movs	r3, #0
    a744:	6023      	str	r3, [r4, #0]
	return list->tail;
    a746:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
Z_GENLIST_APPEND(slist, snode)
    a74a:	b37b      	cbz	r3, a7ac <submit_to_queue_locked+0xc8>
	parent->next = child;
    a74c:	601c      	str	r4, [r3, #0]
	list->tail = node;
    a74e:	f8c6 40bc 	str.w	r4, [r6, #188]	; 0xbc
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    a752:	2200      	movs	r2, #0
    a754:	4611      	mov	r1, r2
    a756:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
    a75a:	f7ff f999 	bl	9a90 <z_sched_wake>
		ret = 1;
    a75e:	2001      	movs	r0, #1

		if (rc < 0) {
    a760:	2800      	cmp	r0, #0
    a762:	db06      	blt.n	a772 <submit_to_queue_locked+0x8e>
	*flagp |= BIT(bit);
    a764:	68e3      	ldr	r3, [r4, #12]
    a766:	f043 0304 	orr.w	r3, r3, #4
    a76a:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
    a76c:	682b      	ldr	r3, [r5, #0]
    a76e:	60a3      	str	r3, [r4, #8]
    a770:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
    a772:	2800      	cmp	r0, #0
    a774:	dc2f      	bgt.n	a7d6 <submit_to_queue_locked+0xf2>
    a776:	e02c      	b.n	a7d2 <submit_to_queue_locked+0xee>
			*queuep = work->queue;
    a778:	6883      	ldr	r3, [r0, #8]
    a77a:	600b      	str	r3, [r1, #0]
    a77c:	e7bf      	b.n	a6fe <submit_to_queue_locked+0x1a>
			__ASSERT_NO_MSG(work->queue != NULL);
    a77e:	4e18      	ldr	r6, [pc, #96]	; (a7e0 <submit_to_queue_locked+0xfc>)
    a780:	f44f 73a7 	mov.w	r3, #334	; 0x14e
    a784:	4632      	mov	r2, r6
    a786:	4917      	ldr	r1, [pc, #92]	; (a7e4 <submit_to_queue_locked+0x100>)
    a788:	4817      	ldr	r0, [pc, #92]	; (a7e8 <submit_to_queue_locked+0x104>)
    a78a:	f000 fc6e 	bl	b06a <printk>
    a78e:	f44f 71a7 	mov.w	r1, #334	; 0x14e
    a792:	4630      	mov	r0, r6
    a794:	f000 fdc2 	bl	b31c <assert_post_action>
    a798:	e7b8      	b.n	a70c <submit_to_queue_locked+0x28>
		ret = 1;
    a79a:	2701      	movs	r7, #1
    a79c:	e7b9      	b.n	a712 <submit_to_queue_locked+0x2e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    a79e:	f001 fb12 	bl	bdc6 <k_is_in_isr>
    a7a2:	b908      	cbnz	r0, a7a8 <submit_to_queue_locked+0xc4>
    a7a4:	2301      	movs	r3, #1
    a7a6:	e7bc      	b.n	a722 <submit_to_queue_locked+0x3e>
    a7a8:	2300      	movs	r3, #0
    a7aa:	e7ba      	b.n	a722 <submit_to_queue_locked+0x3e>
    a7ac:	f8c6 40bc 	str.w	r4, [r6, #188]	; 0xbc
	list->head = node;
    a7b0:	f8c6 40b8 	str.w	r4, [r6, #184]	; 0xb8
}
    a7b4:	e7cd      	b.n	a752 <submit_to_queue_locked+0x6e>
		return -EINVAL;
    a7b6:	f06f 0015 	mvn.w	r0, #21
    a7ba:	e7d1      	b.n	a760 <submit_to_queue_locked+0x7c>
		ret = -ENODEV;
    a7bc:	f06f 0012 	mvn.w	r0, #18
    a7c0:	e7ce      	b.n	a760 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
    a7c2:	f06f 000f 	mvn.w	r0, #15
    a7c6:	e7cb      	b.n	a760 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
    a7c8:	f06f 000f 	mvn.w	r0, #15
    a7cc:	e7c8      	b.n	a760 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
    a7ce:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
    a7d2:	2300      	movs	r3, #0
    a7d4:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
    a7d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
    a7d8:	2000      	movs	r0, #0
    a7da:	e7fa      	b.n	a7d2 <submit_to_queue_locked+0xee>
    a7dc:	2000121c 	.word	0x2000121c
    a7e0:	0000d728 	.word	0x0000d728
    a7e4:	0000d74c 	.word	0x0000d74c
    a7e8:	0000c46c 	.word	0x0000c46c

0000a7ec <finalize_cancel_locked>:
{
    a7ec:	b570      	push	{r4, r5, r6, lr}
    a7ee:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
    a7f0:	68c3      	ldr	r3, [r0, #12]
    a7f2:	f023 0302 	bic.w	r3, r3, #2
    a7f6:	60c3      	str	r3, [r0, #12]
	return list->head;
    a7f8:	4b19      	ldr	r3, [pc, #100]	; (a860 <finalize_cancel_locked+0x74>)
    a7fa:	6818      	ldr	r0, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    a7fc:	b1e8      	cbz	r0, a83a <finalize_cancel_locked+0x4e>
    a7fe:	4604      	mov	r4, r0
Z_GENLIST_PEEK_NEXT(slist, snode)
    a800:	b100      	cbz	r0, a804 <finalize_cancel_locked+0x18>
	return node->next;
    a802:	6804      	ldr	r4, [r0, #0]
    a804:	2600      	movs	r6, #0
    a806:	e01d      	b.n	a844 <finalize_cancel_locked+0x58>
Z_GENLIST_REMOVE(slist, snode)
    a808:	b15e      	cbz	r6, a822 <finalize_cancel_locked+0x36>
	return node->next;
    a80a:	6803      	ldr	r3, [r0, #0]
	parent->next = child;
    a80c:	6033      	str	r3, [r6, #0]
	return list->tail;
    a80e:	4b14      	ldr	r3, [pc, #80]	; (a860 <finalize_cancel_locked+0x74>)
    a810:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    a812:	4298      	cmp	r0, r3
    a814:	d00e      	beq.n	a834 <finalize_cancel_locked+0x48>
	parent->next = child;
    a816:	2300      	movs	r3, #0
    a818:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    a81c:	f7fd fd12 	bl	8244 <z_impl_k_sem_give>
}
    a820:	e015      	b.n	a84e <finalize_cancel_locked+0x62>
	return node->next;
    a822:	6802      	ldr	r2, [r0, #0]
	list->head = node;
    a824:	4b0e      	ldr	r3, [pc, #56]	; (a860 <finalize_cancel_locked+0x74>)
    a826:	601a      	str	r2, [r3, #0]
	return list->tail;
    a828:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    a82a:	4298      	cmp	r0, r3
    a82c:	d1f3      	bne.n	a816 <finalize_cancel_locked+0x2a>
	list->tail = node;
    a82e:	4b0c      	ldr	r3, [pc, #48]	; (a860 <finalize_cancel_locked+0x74>)
    a830:	605a      	str	r2, [r3, #4]
}
    a832:	e7f0      	b.n	a816 <finalize_cancel_locked+0x2a>
	list->tail = node;
    a834:	4b0a      	ldr	r3, [pc, #40]	; (a860 <finalize_cancel_locked+0x74>)
    a836:	605e      	str	r6, [r3, #4]
}
    a838:	e7ed      	b.n	a816 <finalize_cancel_locked+0x2a>
    a83a:	4604      	mov	r4, r0
    a83c:	e7e2      	b.n	a804 <finalize_cancel_locked+0x18>
    a83e:	4623      	mov	r3, r4
    a840:	4620      	mov	r0, r4
    a842:	461c      	mov	r4, r3
    a844:	b150      	cbz	r0, a85c <finalize_cancel_locked+0x70>
		if (wc->work == work) {
    a846:	6843      	ldr	r3, [r0, #4]
    a848:	42ab      	cmp	r3, r5
    a84a:	d0dd      	beq.n	a808 <finalize_cancel_locked+0x1c>
			prev = &wc->node;
    a84c:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    a84e:	2c00      	cmp	r4, #0
    a850:	d0f5      	beq.n	a83e <finalize_cancel_locked+0x52>
    a852:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    a854:	2c00      	cmp	r4, #0
    a856:	d0f3      	beq.n	a840 <finalize_cancel_locked+0x54>
	return node->next;
    a858:	6823      	ldr	r3, [r4, #0]
    a85a:	e7f1      	b.n	a840 <finalize_cancel_locked+0x54>
}
    a85c:	bd70      	pop	{r4, r5, r6, pc}
    a85e:	bf00      	nop
    a860:	20001278 	.word	0x20001278

0000a864 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    a864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a868:	b084      	sub	sp, #16
    a86a:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
    a86c:	e026      	b.n	a8bc <work_queue_main+0x58>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a86e:	4c6e      	ldr	r4, [pc, #440]	; (aa28 <work_queue_main+0x1c4>)
    a870:	2381      	movs	r3, #129	; 0x81
    a872:	4622      	mov	r2, r4
    a874:	496d      	ldr	r1, [pc, #436]	; (aa2c <work_queue_main+0x1c8>)
    a876:	486e      	ldr	r0, [pc, #440]	; (aa30 <work_queue_main+0x1cc>)
    a878:	f000 fbf7 	bl	b06a <printk>
    a87c:	496d      	ldr	r1, [pc, #436]	; (aa34 <work_queue_main+0x1d0>)
    a87e:	486e      	ldr	r0, [pc, #440]	; (aa38 <work_queue_main+0x1d4>)
    a880:	f000 fbf3 	bl	b06a <printk>
    a884:	2181      	movs	r1, #129	; 0x81
    a886:	4620      	mov	r0, r4
    a888:	f000 fd48 	bl	b31c <assert_post_action>
    a88c:	e023      	b.n	a8d6 <work_queue_main+0x72>
	return (*flagp & BIT(bit)) != 0U;
    a88e:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
	*flagp &= ~BIT(bit);
    a892:	f023 0204 	bic.w	r2, r3, #4
    a896:	f8c5 20d0 	str.w	r2, [r5, #208]	; 0xd0
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
    a89a:	f013 0f04 	tst.w	r3, #4
    a89e:	d174      	bne.n	a98a <work_queue_main+0x126>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
    a8a0:	2300      	movs	r3, #0
    a8a2:	9302      	str	r3, [sp, #8]
    a8a4:	f04f 32ff 	mov.w	r2, #4294967295
    a8a8:	f04f 33ff 	mov.w	r3, #4294967295
    a8ac:	e9cd 2300 	strd	r2, r3, [sp]
    a8b0:	f105 02c0 	add.w	r2, r5, #192	; 0xc0
    a8b4:	4631      	mov	r1, r6
    a8b6:	485f      	ldr	r0, [pc, #380]	; (aa34 <work_queue_main+0x1d0>)
    a8b8:	f7ff f95e 	bl	9b78 <z_sched_wait>
	__asm__ volatile(
    a8bc:	f04f 0320 	mov.w	r3, #32
    a8c0:	f3ef 8611 	mrs	r6, BASEPRI
    a8c4:	f383 8812 	msr	BASEPRI_MAX, r3
    a8c8:	f3bf 8f6f 	isb	sy
    a8cc:	4859      	ldr	r0, [pc, #356]	; (aa34 <work_queue_main+0x1d0>)
    a8ce:	f7fd f889 	bl	79e4 <z_spin_lock_valid>
    a8d2:	2800      	cmp	r0, #0
    a8d4:	d0cb      	beq.n	a86e <work_queue_main+0xa>
	z_spin_lock_set_owner(l);
    a8d6:	4857      	ldr	r0, [pc, #348]	; (aa34 <work_queue_main+0x1d0>)
    a8d8:	f7fd f8a4 	bl	7a24 <z_spin_lock_set_owner>
	return list->head;
    a8dc:	f8d5 40b8 	ldr.w	r4, [r5, #184]	; 0xb8
Z_GENLIST_GET(slist, snode)
    a8e0:	2c00      	cmp	r4, #0
    a8e2:	d0d4      	beq.n	a88e <work_queue_main+0x2a>
	return node->next;
    a8e4:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    a8e6:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	return list->tail;
    a8ea:	f8d5 20bc 	ldr.w	r2, [r5, #188]	; 0xbc
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    a8ee:	4294      	cmp	r4, r2
    a8f0:	d048      	beq.n	a984 <work_queue_main+0x120>
	*flagp |= BIT(bit);
    a8f2:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
    a8f6:	f043 0302 	orr.w	r3, r3, #2
    a8fa:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
    a8fe:	68e3      	ldr	r3, [r4, #12]
    a900:	f043 0301 	orr.w	r3, r3, #1
	*flagp &= ~BIT(bit);
    a904:	f023 0304 	bic.w	r3, r3, #4
    a908:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
    a90a:	6867      	ldr	r7, [r4, #4]
		if (work == NULL) {
    a90c:	2c00      	cmp	r4, #0
    a90e:	d0c7      	beq.n	a8a0 <work_queue_main+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a910:	4848      	ldr	r0, [pc, #288]	; (aa34 <work_queue_main+0x1d0>)
    a912:	f7fd f877 	bl	7a04 <z_spin_unlock_valid>
    a916:	2800      	cmp	r0, #0
    a918:	d042      	beq.n	a9a0 <work_queue_main+0x13c>
	__asm__ volatile(
    a91a:	f386 8811 	msr	BASEPRI, r6
    a91e:	f3bf 8f6f 	isb	sy
			continue;
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
    a922:	2f00      	cmp	r7, #0
    a924:	d04d      	beq.n	a9c2 <work_queue_main+0x15e>
		handler(work);
    a926:	4620      	mov	r0, r4
    a928:	47b8      	blx	r7
	__asm__ volatile(
    a92a:	f04f 0320 	mov.w	r3, #32
    a92e:	f3ef 8611 	mrs	r6, BASEPRI
    a932:	f383 8812 	msr	BASEPRI_MAX, r3
    a936:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a93a:	483e      	ldr	r0, [pc, #248]	; (aa34 <work_queue_main+0x1d0>)
    a93c:	f7fd f852 	bl	79e4 <z_spin_lock_valid>
    a940:	2800      	cmp	r0, #0
    a942:	d04c      	beq.n	a9de <work_queue_main+0x17a>
	z_spin_lock_set_owner(l);
    a944:	483b      	ldr	r0, [pc, #236]	; (aa34 <work_queue_main+0x1d0>)
    a946:	f7fd f86d 	bl	7a24 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
    a94a:	68e3      	ldr	r3, [r4, #12]
    a94c:	f023 0301 	bic.w	r3, r3, #1
    a950:	60e3      	str	r3, [r4, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    a952:	f013 0f02 	tst.w	r3, #2
    a956:	d152      	bne.n	a9fe <work_queue_main+0x19a>
	*flagp &= ~BIT(bit);
    a958:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
    a95c:	f023 0302 	bic.w	r3, r3, #2
    a960:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
	return (*flagp & BIT(bit)) != 0U;
    a964:	f3c3 2400 	ubfx	r4, r3, #8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a968:	4832      	ldr	r0, [pc, #200]	; (aa34 <work_queue_main+0x1d0>)
    a96a:	f7fd f84b 	bl	7a04 <z_spin_unlock_valid>
    a96e:	2800      	cmp	r0, #0
    a970:	d049      	beq.n	aa06 <work_queue_main+0x1a2>
	__asm__ volatile(
    a972:	f386 8811 	msr	BASEPRI, r6
    a976:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    a97a:	2c00      	cmp	r4, #0
    a97c:	d19e      	bne.n	a8bc <work_queue_main+0x58>
	z_impl_k_yield();
    a97e:	f7fe fe13 	bl	95a8 <z_impl_k_yield>
}
    a982:	e79b      	b.n	a8bc <work_queue_main+0x58>
	list->tail = node;
    a984:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
}
    a988:	e7b3      	b.n	a8f2 <work_queue_main+0x8e>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    a98a:	f105 07c8 	add.w	r7, r5, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    a98e:	2200      	movs	r2, #0
    a990:	2101      	movs	r1, #1
    a992:	4638      	mov	r0, r7
    a994:	f7ff f87c 	bl	9a90 <z_sched_wake>
    a998:	2800      	cmp	r0, #0
    a99a:	d1f8      	bne.n	a98e <work_queue_main+0x12a>
		k_work_handler_t handler = NULL;
    a99c:	2700      	movs	r7, #0
    a99e:	e7b5      	b.n	a90c <work_queue_main+0xa8>
    a9a0:	f8df 8084 	ldr.w	r8, [pc, #132]	; aa28 <work_queue_main+0x1c4>
    a9a4:	23ac      	movs	r3, #172	; 0xac
    a9a6:	4642      	mov	r2, r8
    a9a8:	4924      	ldr	r1, [pc, #144]	; (aa3c <work_queue_main+0x1d8>)
    a9aa:	4821      	ldr	r0, [pc, #132]	; (aa30 <work_queue_main+0x1cc>)
    a9ac:	f000 fb5d 	bl	b06a <printk>
    a9b0:	4920      	ldr	r1, [pc, #128]	; (aa34 <work_queue_main+0x1d0>)
    a9b2:	4823      	ldr	r0, [pc, #140]	; (aa40 <work_queue_main+0x1dc>)
    a9b4:	f000 fb59 	bl	b06a <printk>
    a9b8:	21ac      	movs	r1, #172	; 0xac
    a9ba:	4640      	mov	r0, r8
    a9bc:	f000 fcae 	bl	b31c <assert_post_action>
    a9c0:	e7ab      	b.n	a91a <work_queue_main+0xb6>
		__ASSERT_NO_MSG(handler != NULL);
    a9c2:	4e20      	ldr	r6, [pc, #128]	; (aa44 <work_queue_main+0x1e0>)
    a9c4:	f44f 7322 	mov.w	r3, #648	; 0x288
    a9c8:	4632      	mov	r2, r6
    a9ca:	491f      	ldr	r1, [pc, #124]	; (aa48 <work_queue_main+0x1e4>)
    a9cc:	4818      	ldr	r0, [pc, #96]	; (aa30 <work_queue_main+0x1cc>)
    a9ce:	f000 fb4c 	bl	b06a <printk>
    a9d2:	f44f 7122 	mov.w	r1, #648	; 0x288
    a9d6:	4630      	mov	r0, r6
    a9d8:	f000 fca0 	bl	b31c <assert_post_action>
    a9dc:	e7a3      	b.n	a926 <work_queue_main+0xc2>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a9de:	4f12      	ldr	r7, [pc, #72]	; (aa28 <work_queue_main+0x1c4>)
    a9e0:	2381      	movs	r3, #129	; 0x81
    a9e2:	463a      	mov	r2, r7
    a9e4:	4911      	ldr	r1, [pc, #68]	; (aa2c <work_queue_main+0x1c8>)
    a9e6:	4812      	ldr	r0, [pc, #72]	; (aa30 <work_queue_main+0x1cc>)
    a9e8:	f000 fb3f 	bl	b06a <printk>
    a9ec:	4911      	ldr	r1, [pc, #68]	; (aa34 <work_queue_main+0x1d0>)
    a9ee:	4812      	ldr	r0, [pc, #72]	; (aa38 <work_queue_main+0x1d4>)
    a9f0:	f000 fb3b 	bl	b06a <printk>
    a9f4:	2181      	movs	r1, #129	; 0x81
    a9f6:	4638      	mov	r0, r7
    a9f8:	f000 fc90 	bl	b31c <assert_post_action>
    a9fc:	e7a2      	b.n	a944 <work_queue_main+0xe0>
			finalize_cancel_locked(work);
    a9fe:	4620      	mov	r0, r4
    aa00:	f7ff fef4 	bl	a7ec <finalize_cancel_locked>
    aa04:	e7a8      	b.n	a958 <work_queue_main+0xf4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    aa06:	4f08      	ldr	r7, [pc, #32]	; (aa28 <work_queue_main+0x1c4>)
    aa08:	23ac      	movs	r3, #172	; 0xac
    aa0a:	463a      	mov	r2, r7
    aa0c:	490b      	ldr	r1, [pc, #44]	; (aa3c <work_queue_main+0x1d8>)
    aa0e:	4808      	ldr	r0, [pc, #32]	; (aa30 <work_queue_main+0x1cc>)
    aa10:	f000 fb2b 	bl	b06a <printk>
    aa14:	4907      	ldr	r1, [pc, #28]	; (aa34 <work_queue_main+0x1d0>)
    aa16:	480a      	ldr	r0, [pc, #40]	; (aa40 <work_queue_main+0x1dc>)
    aa18:	f000 fb27 	bl	b06a <printk>
    aa1c:	21ac      	movs	r1, #172	; 0xac
    aa1e:	4638      	mov	r0, r7
    aa20:	f000 fc7c 	bl	b31c <assert_post_action>
    aa24:	e7a5      	b.n	a972 <work_queue_main+0x10e>
    aa26:	bf00      	nop
    aa28:	0000c584 	.word	0x0000c584
    aa2c:	0000c5dc 	.word	0x0000c5dc
    aa30:	0000c46c 	.word	0x0000c46c
    aa34:	20001274 	.word	0x20001274
    aa38:	0000c5f4 	.word	0x0000c5f4
    aa3c:	0000c5ac 	.word	0x0000c5ac
    aa40:	0000c5c4 	.word	0x0000c5c4
    aa44:	0000d728 	.word	0x0000d728
    aa48:	0000d768 	.word	0x0000d768

0000aa4c <k_work_submit_to_queue>:
{
    aa4c:	b570      	push	{r4, r5, r6, lr}
    aa4e:	b082      	sub	sp, #8
    aa50:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
    aa52:	460c      	mov	r4, r1
    aa54:	b309      	cbz	r1, aa9a <k_work_submit_to_queue+0x4e>
	__asm__ volatile(
    aa56:	f04f 0320 	mov.w	r3, #32
    aa5a:	f3ef 8611 	mrs	r6, BASEPRI
    aa5e:	f383 8812 	msr	BASEPRI_MAX, r3
    aa62:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    aa66:	4827      	ldr	r0, [pc, #156]	; (ab04 <k_work_submit_to_queue+0xb8>)
    aa68:	f7fc ffbc 	bl	79e4 <z_spin_lock_valid>
    aa6c:	b318      	cbz	r0, aab6 <k_work_submit_to_queue+0x6a>
	z_spin_lock_set_owner(l);
    aa6e:	4d25      	ldr	r5, [pc, #148]	; (ab04 <k_work_submit_to_queue+0xb8>)
    aa70:	4628      	mov	r0, r5
    aa72:	f7fc ffd7 	bl	7a24 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
    aa76:	a901      	add	r1, sp, #4
    aa78:	4620      	mov	r0, r4
    aa7a:	f7ff fe33 	bl	a6e4 <submit_to_queue_locked>
    aa7e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    aa80:	4628      	mov	r0, r5
    aa82:	f7fc ffbf 	bl	7a04 <z_spin_unlock_valid>
    aa86:	b330      	cbz	r0, aad6 <k_work_submit_to_queue+0x8a>
	__asm__ volatile(
    aa88:	f386 8811 	msr	BASEPRI, r6
    aa8c:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
    aa90:	2c00      	cmp	r4, #0
    aa92:	dc30      	bgt.n	aaf6 <k_work_submit_to_queue+0xaa>
}
    aa94:	4620      	mov	r0, r4
    aa96:	b002      	add	sp, #8
    aa98:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(work != NULL);
    aa9a:	4d1b      	ldr	r5, [pc, #108]	; (ab08 <k_work_submit_to_queue+0xbc>)
    aa9c:	f240 1369 	movw	r3, #361	; 0x169
    aaa0:	462a      	mov	r2, r5
    aaa2:	491a      	ldr	r1, [pc, #104]	; (ab0c <k_work_submit_to_queue+0xc0>)
    aaa4:	481a      	ldr	r0, [pc, #104]	; (ab10 <k_work_submit_to_queue+0xc4>)
    aaa6:	f000 fae0 	bl	b06a <printk>
    aaaa:	f240 1169 	movw	r1, #361	; 0x169
    aaae:	4628      	mov	r0, r5
    aab0:	f000 fc34 	bl	b31c <assert_post_action>
    aab4:	e7cf      	b.n	aa56 <k_work_submit_to_queue+0xa>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    aab6:	4d17      	ldr	r5, [pc, #92]	; (ab14 <k_work_submit_to_queue+0xc8>)
    aab8:	2381      	movs	r3, #129	; 0x81
    aaba:	462a      	mov	r2, r5
    aabc:	4916      	ldr	r1, [pc, #88]	; (ab18 <k_work_submit_to_queue+0xcc>)
    aabe:	4814      	ldr	r0, [pc, #80]	; (ab10 <k_work_submit_to_queue+0xc4>)
    aac0:	f000 fad3 	bl	b06a <printk>
    aac4:	490f      	ldr	r1, [pc, #60]	; (ab04 <k_work_submit_to_queue+0xb8>)
    aac6:	4815      	ldr	r0, [pc, #84]	; (ab1c <k_work_submit_to_queue+0xd0>)
    aac8:	f000 facf 	bl	b06a <printk>
    aacc:	2181      	movs	r1, #129	; 0x81
    aace:	4628      	mov	r0, r5
    aad0:	f000 fc24 	bl	b31c <assert_post_action>
    aad4:	e7cb      	b.n	aa6e <k_work_submit_to_queue+0x22>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    aad6:	4d0f      	ldr	r5, [pc, #60]	; (ab14 <k_work_submit_to_queue+0xc8>)
    aad8:	23ac      	movs	r3, #172	; 0xac
    aada:	462a      	mov	r2, r5
    aadc:	4910      	ldr	r1, [pc, #64]	; (ab20 <k_work_submit_to_queue+0xd4>)
    aade:	480c      	ldr	r0, [pc, #48]	; (ab10 <k_work_submit_to_queue+0xc4>)
    aae0:	f000 fac3 	bl	b06a <printk>
    aae4:	4907      	ldr	r1, [pc, #28]	; (ab04 <k_work_submit_to_queue+0xb8>)
    aae6:	480f      	ldr	r0, [pc, #60]	; (ab24 <k_work_submit_to_queue+0xd8>)
    aae8:	f000 fabf 	bl	b06a <printk>
    aaec:	21ac      	movs	r1, #172	; 0xac
    aaee:	4628      	mov	r0, r5
    aaf0:	f000 fc14 	bl	b31c <assert_post_action>
    aaf4:	e7c8      	b.n	aa88 <k_work_submit_to_queue+0x3c>
	return z_impl_k_is_preempt_thread();
    aaf6:	f7fe ff19 	bl	992c <z_impl_k_is_preempt_thread>
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
    aafa:	2800      	cmp	r0, #0
    aafc:	d0ca      	beq.n	aa94 <k_work_submit_to_queue+0x48>
	z_impl_k_yield();
    aafe:	f7fe fd53 	bl	95a8 <z_impl_k_yield>
	return ret;
    ab02:	e7c7      	b.n	aa94 <k_work_submit_to_queue+0x48>
    ab04:	20001274 	.word	0x20001274
    ab08:	0000d728 	.word	0x0000d728
    ab0c:	0000d780 	.word	0x0000d780
    ab10:	0000c46c 	.word	0x0000c46c
    ab14:	0000c584 	.word	0x0000c584
    ab18:	0000c5dc 	.word	0x0000c5dc
    ab1c:	0000c5f4 	.word	0x0000c5f4
    ab20:	0000c5ac 	.word	0x0000c5ac
    ab24:	0000c5c4 	.word	0x0000c5c4

0000ab28 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    ab28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ab2c:	b089      	sub	sp, #36	; 0x24
    ab2e:	460d      	mov	r5, r1
    ab30:	4617      	mov	r7, r2
    ab32:	4698      	mov	r8, r3
    ab34:	9e10      	ldr	r6, [sp, #64]	; 0x40
	__ASSERT_NO_MSG(queue);
    ab36:	4604      	mov	r4, r0
    ab38:	2800      	cmp	r0, #0
    ab3a:	d03e      	beq.n	abba <k_work_queue_start+0x92>
	__ASSERT_NO_MSG(stack);
    ab3c:	2d00      	cmp	r5, #0
    ab3e:	d04b      	beq.n	abd8 <k_work_queue_start+0xb0>
	return (*flagp & BIT(bit)) != 0U;
    ab40:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
    ab44:	f013 0f01 	tst.w	r3, #1
    ab48:	d155      	bne.n	abf6 <k_work_queue_start+0xce>
	list->head = NULL;
    ab4a:	2300      	movs	r3, #0
    ab4c:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
	list->tail = NULL;
    ab50:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
	sys_dlist_init(&w->waitq);
    ab54:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
    ab58:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
    ab5c:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
    ab60:	f104 03c8 	add.w	r3, r4, #200	; 0xc8
	list->head = (sys_dnode_t *)list;
    ab64:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
	list->tail = (sys_dnode_t *)list;
    ab68:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    ab6c:	2e00      	cmp	r6, #0
    ab6e:	d051      	beq.n	ac14 <k_work_queue_start+0xec>
    ab70:	7933      	ldrb	r3, [r6, #4]
    ab72:	2b00      	cmp	r3, #0
    ab74:	d150      	bne.n	ac18 <k_work_queue_start+0xf0>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    ab76:	2301      	movs	r3, #1
	*flagp = flags;
    ab78:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    ab7c:	f04f 32ff 	mov.w	r2, #4294967295
    ab80:	f04f 33ff 	mov.w	r3, #4294967295
    ab84:	e9cd 2306 	strd	r2, r3, [sp, #24]
    ab88:	2200      	movs	r2, #0
    ab8a:	9204      	str	r2, [sp, #16]
    ab8c:	f8cd 800c 	str.w	r8, [sp, #12]
    ab90:	9202      	str	r2, [sp, #8]
    ab92:	9201      	str	r2, [sp, #4]
    ab94:	9400      	str	r4, [sp, #0]
    ab96:	4b22      	ldr	r3, [pc, #136]	; (ac20 <k_work_queue_start+0xf8>)
    ab98:	463a      	mov	r2, r7
    ab9a:	4629      	mov	r1, r5
    ab9c:	4620      	mov	r0, r4
    ab9e:	f7fd f869 	bl	7c74 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    aba2:	b126      	cbz	r6, abae <k_work_queue_start+0x86>
    aba4:	6831      	ldr	r1, [r6, #0]
    aba6:	b111      	cbz	r1, abae <k_work_queue_start+0x86>
	return z_impl_k_thread_name_set(thread, str);
    aba8:	4620      	mov	r0, r4
    abaa:	f7fc fef7 	bl	799c <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    abae:	4620      	mov	r0, r4
    abb0:	f001 f90f 	bl	bdd2 <z_impl_k_thread_start>
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    abb4:	b009      	add	sp, #36	; 0x24
    abb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT_NO_MSG(queue);
    abba:	f8df 9078 	ldr.w	r9, [pc, #120]	; ac34 <k_work_queue_start+0x10c>
    abbe:	f240 23b5 	movw	r3, #693	; 0x2b5
    abc2:	464a      	mov	r2, r9
    abc4:	4917      	ldr	r1, [pc, #92]	; (ac24 <k_work_queue_start+0xfc>)
    abc6:	4818      	ldr	r0, [pc, #96]	; (ac28 <k_work_queue_start+0x100>)
    abc8:	f000 fa4f 	bl	b06a <printk>
    abcc:	f240 21b5 	movw	r1, #693	; 0x2b5
    abd0:	4648      	mov	r0, r9
    abd2:	f000 fba3 	bl	b31c <assert_post_action>
    abd6:	e7b1      	b.n	ab3c <k_work_queue_start+0x14>
	__ASSERT_NO_MSG(stack);
    abd8:	f8df 9058 	ldr.w	r9, [pc, #88]	; ac34 <k_work_queue_start+0x10c>
    abdc:	f240 23b6 	movw	r3, #694	; 0x2b6
    abe0:	464a      	mov	r2, r9
    abe2:	4912      	ldr	r1, [pc, #72]	; (ac2c <k_work_queue_start+0x104>)
    abe4:	4810      	ldr	r0, [pc, #64]	; (ac28 <k_work_queue_start+0x100>)
    abe6:	f000 fa40 	bl	b06a <printk>
    abea:	f240 21b6 	movw	r1, #694	; 0x2b6
    abee:	4648      	mov	r0, r9
    abf0:	f000 fb94 	bl	b31c <assert_post_action>
    abf4:	e7a4      	b.n	ab40 <k_work_queue_start+0x18>
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
    abf6:	f8df 903c 	ldr.w	r9, [pc, #60]	; ac34 <k_work_queue_start+0x10c>
    abfa:	f240 23b7 	movw	r3, #695	; 0x2b7
    abfe:	464a      	mov	r2, r9
    ac00:	490b      	ldr	r1, [pc, #44]	; (ac30 <k_work_queue_start+0x108>)
    ac02:	4809      	ldr	r0, [pc, #36]	; (ac28 <k_work_queue_start+0x100>)
    ac04:	f000 fa31 	bl	b06a <printk>
    ac08:	f240 21b7 	movw	r1, #695	; 0x2b7
    ac0c:	4648      	mov	r0, r9
    ac0e:	f000 fb85 	bl	b31c <assert_post_action>
    ac12:	e79a      	b.n	ab4a <k_work_queue_start+0x22>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    ac14:	2301      	movs	r3, #1
    ac16:	e7af      	b.n	ab78 <k_work_queue_start+0x50>
		flags |= K_WORK_QUEUE_NO_YIELD;
    ac18:	f240 1301 	movw	r3, #257	; 0x101
    ac1c:	e7ac      	b.n	ab78 <k_work_queue_start+0x50>
    ac1e:	bf00      	nop
    ac20:	0000a865 	.word	0x0000a865
    ac24:	0000d794 	.word	0x0000d794
    ac28:	0000c46c 	.word	0x0000c46c
    ac2c:	0000d79c 	.word	0x0000d79c
    ac30:	0000d7a4 	.word	0x0000d7a4
    ac34:	0000d728 	.word	0x0000d728

0000ac38 <nrf_cc3xx_platform_init_no_rng>:
    ac38:	b510      	push	{r4, lr}
    ac3a:	4c0a      	ldr	r4, [pc, #40]	; (ac64 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    ac3c:	6823      	ldr	r3, [r4, #0]
    ac3e:	b11b      	cbz	r3, ac48 <nrf_cc3xx_platform_init_no_rng+0x10>
    ac40:	2301      	movs	r3, #1
    ac42:	6023      	str	r3, [r4, #0]
    ac44:	2000      	movs	r0, #0
    ac46:	bd10      	pop	{r4, pc}
    ac48:	f000 f8d6 	bl	adf8 <CC_LibInitNoRng>
    ac4c:	2800      	cmp	r0, #0
    ac4e:	d0f7      	beq.n	ac40 <nrf_cc3xx_platform_init_no_rng+0x8>
    ac50:	3801      	subs	r0, #1
    ac52:	2806      	cmp	r0, #6
    ac54:	d803      	bhi.n	ac5e <nrf_cc3xx_platform_init_no_rng+0x26>
    ac56:	4b04      	ldr	r3, [pc, #16]	; (ac68 <nrf_cc3xx_platform_init_no_rng+0x30>)
    ac58:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    ac5c:	bd10      	pop	{r4, pc}
    ac5e:	4803      	ldr	r0, [pc, #12]	; (ac6c <nrf_cc3xx_platform_init_no_rng+0x34>)
    ac60:	bd10      	pop	{r4, pc}
    ac62:	bf00      	nop
    ac64:	20001280 	.word	0x20001280
    ac68:	0000d7d8 	.word	0x0000d7d8
    ac6c:	ffff8ffe 	.word	0xffff8ffe

0000ac70 <nrf_cc3xx_platform_abort>:
    ac70:	f3bf 8f4f 	dsb	sy
    ac74:	4905      	ldr	r1, [pc, #20]	; (ac8c <nrf_cc3xx_platform_abort+0x1c>)
    ac76:	4b06      	ldr	r3, [pc, #24]	; (ac90 <nrf_cc3xx_platform_abort+0x20>)
    ac78:	68ca      	ldr	r2, [r1, #12]
    ac7a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    ac7e:	4313      	orrs	r3, r2
    ac80:	60cb      	str	r3, [r1, #12]
    ac82:	f3bf 8f4f 	dsb	sy
    ac86:	bf00      	nop
    ac88:	e7fd      	b.n	ac86 <nrf_cc3xx_platform_abort+0x16>
    ac8a:	bf00      	nop
    ac8c:	e000ed00 	.word	0xe000ed00
    ac90:	05fa0004 	.word	0x05fa0004

0000ac94 <CC_PalAbort>:
    ac94:	b4f0      	push	{r4, r5, r6, r7}
    ac96:	4f09      	ldr	r7, [pc, #36]	; (acbc <CC_PalAbort+0x28>)
    ac98:	4e09      	ldr	r6, [pc, #36]	; (acc0 <CC_PalAbort+0x2c>)
    ac9a:	4c0a      	ldr	r4, [pc, #40]	; (acc4 <CC_PalAbort+0x30>)
    ac9c:	4a0a      	ldr	r2, [pc, #40]	; (acc8 <CC_PalAbort+0x34>)
    ac9e:	4d0b      	ldr	r5, [pc, #44]	; (accc <CC_PalAbort+0x38>)
    aca0:	490b      	ldr	r1, [pc, #44]	; (acd0 <CC_PalAbort+0x3c>)
    aca2:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    aca6:	603b      	str	r3, [r7, #0]
    aca8:	6852      	ldr	r2, [r2, #4]
    acaa:	6033      	str	r3, [r6, #0]
    acac:	6023      	str	r3, [r4, #0]
    acae:	2400      	movs	r4, #0
    acb0:	602b      	str	r3, [r5, #0]
    acb2:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
    acb6:	bcf0      	pop	{r4, r5, r6, r7}
    acb8:	4710      	bx	r2
    acba:	bf00      	nop
    acbc:	5002b400 	.word	0x5002b400
    acc0:	5002b404 	.word	0x5002b404
    acc4:	5002b408 	.word	0x5002b408
    acc8:	2000018c 	.word	0x2000018c
    accc:	5002b40c 	.word	0x5002b40c
    acd0:	5002a000 	.word	0x5002a000

0000acd4 <nrf_cc3xx_platform_set_abort>:
    acd4:	e9d0 1200 	ldrd	r1, r2, [r0]
    acd8:	4b01      	ldr	r3, [pc, #4]	; (ace0 <nrf_cc3xx_platform_set_abort+0xc>)
    acda:	e9c3 1200 	strd	r1, r2, [r3]
    acde:	4770      	bx	lr
    ace0:	2000018c 	.word	0x2000018c

0000ace4 <mutex_free>:
    ace4:	b510      	push	{r4, lr}
    ace6:	4604      	mov	r4, r0
    ace8:	b130      	cbz	r0, acf8 <mutex_free+0x14>
    acea:	6863      	ldr	r3, [r4, #4]
    acec:	06db      	lsls	r3, r3, #27
    acee:	d502      	bpl.n	acf6 <mutex_free+0x12>
    acf0:	2300      	movs	r3, #0
    acf2:	6023      	str	r3, [r4, #0]
    acf4:	6063      	str	r3, [r4, #4]
    acf6:	bd10      	pop	{r4, pc}
    acf8:	4b02      	ldr	r3, [pc, #8]	; (ad04 <mutex_free+0x20>)
    acfa:	4803      	ldr	r0, [pc, #12]	; (ad08 <mutex_free+0x24>)
    acfc:	685b      	ldr	r3, [r3, #4]
    acfe:	4798      	blx	r3
    ad00:	e7f3      	b.n	acea <mutex_free+0x6>
    ad02:	bf00      	nop
    ad04:	2000018c 	.word	0x2000018c
    ad08:	0000d7f4 	.word	0x0000d7f4

0000ad0c <mutex_unlock>:
    ad0c:	b168      	cbz	r0, ad2a <mutex_unlock+0x1e>
    ad0e:	6843      	ldr	r3, [r0, #4]
    ad10:	b13b      	cbz	r3, ad22 <mutex_unlock+0x16>
    ad12:	06db      	lsls	r3, r3, #27
    ad14:	d507      	bpl.n	ad26 <mutex_unlock+0x1a>
    ad16:	f3bf 8f5f 	dmb	sy
    ad1a:	2300      	movs	r3, #0
    ad1c:	6003      	str	r3, [r0, #0]
    ad1e:	4618      	mov	r0, r3
    ad20:	4770      	bx	lr
    ad22:	4803      	ldr	r0, [pc, #12]	; (ad30 <mutex_unlock+0x24>)
    ad24:	4770      	bx	lr
    ad26:	4803      	ldr	r0, [pc, #12]	; (ad34 <mutex_unlock+0x28>)
    ad28:	4770      	bx	lr
    ad2a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    ad2e:	4770      	bx	lr
    ad30:	ffff8fea 	.word	0xffff8fea
    ad34:	ffff8fe9 	.word	0xffff8fe9

0000ad38 <mutex_init>:
    ad38:	b510      	push	{r4, lr}
    ad3a:	4604      	mov	r4, r0
    ad3c:	b120      	cbz	r0, ad48 <mutex_init+0x10>
    ad3e:	2200      	movs	r2, #0
    ad40:	2311      	movs	r3, #17
    ad42:	6022      	str	r2, [r4, #0]
    ad44:	6063      	str	r3, [r4, #4]
    ad46:	bd10      	pop	{r4, pc}
    ad48:	4801      	ldr	r0, [pc, #4]	; (ad50 <mutex_init+0x18>)
    ad4a:	f7ff ffa3 	bl	ac94 <CC_PalAbort>
    ad4e:	e7f6      	b.n	ad3e <mutex_init+0x6>
    ad50:	0000d81c 	.word	0x0000d81c

0000ad54 <mutex_lock>:
    ad54:	b1c0      	cbz	r0, ad88 <mutex_lock+0x34>
    ad56:	6843      	ldr	r3, [r0, #4]
    ad58:	b1a3      	cbz	r3, ad84 <mutex_lock+0x30>
    ad5a:	06db      	lsls	r3, r3, #27
    ad5c:	d510      	bpl.n	ad80 <mutex_lock+0x2c>
    ad5e:	2201      	movs	r2, #1
    ad60:	f3bf 8f5b 	dmb	ish
    ad64:	e850 3f00 	ldrex	r3, [r0]
    ad68:	e840 2100 	strex	r1, r2, [r0]
    ad6c:	2900      	cmp	r1, #0
    ad6e:	d1f9      	bne.n	ad64 <mutex_lock+0x10>
    ad70:	f3bf 8f5b 	dmb	ish
    ad74:	2b01      	cmp	r3, #1
    ad76:	d0f3      	beq.n	ad60 <mutex_lock+0xc>
    ad78:	f3bf 8f5f 	dmb	sy
    ad7c:	2000      	movs	r0, #0
    ad7e:	4770      	bx	lr
    ad80:	4803      	ldr	r0, [pc, #12]	; (ad90 <mutex_lock+0x3c>)
    ad82:	4770      	bx	lr
    ad84:	4803      	ldr	r0, [pc, #12]	; (ad94 <mutex_lock+0x40>)
    ad86:	4770      	bx	lr
    ad88:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    ad8c:	4770      	bx	lr
    ad8e:	bf00      	nop
    ad90:	ffff8fe9 	.word	0xffff8fe9
    ad94:	ffff8fea 	.word	0xffff8fea

0000ad98 <nrf_cc3xx_platform_set_mutexes>:
    ad98:	b570      	push	{r4, r5, r6, lr}
    ad9a:	e9d0 2300 	ldrd	r2, r3, [r0]
    ad9e:	4c13      	ldr	r4, [pc, #76]	; (adec <nrf_cc3xx_platform_set_mutexes+0x54>)
    ada0:	4d13      	ldr	r5, [pc, #76]	; (adf0 <nrf_cc3xx_platform_set_mutexes+0x58>)
    ada2:	e9c4 2300 	strd	r2, r3, [r4]
    ada6:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
    adaa:	e9c4 6302 	strd	r6, r3, [r4, #8]
    adae:	4b11      	ldr	r3, [pc, #68]	; (adf4 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    adb0:	6808      	ldr	r0, [r1, #0]
    adb2:	6018      	str	r0, [r3, #0]
    adb4:	6848      	ldr	r0, [r1, #4]
    adb6:	6058      	str	r0, [r3, #4]
    adb8:	6888      	ldr	r0, [r1, #8]
    adba:	6098      	str	r0, [r3, #8]
    adbc:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
    adc0:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    adc4:	60de      	str	r6, [r3, #12]
    adc6:	6118      	str	r0, [r3, #16]
    adc8:	06cb      	lsls	r3, r1, #27
    adca:	d50d      	bpl.n	ade8 <nrf_cc3xx_platform_set_mutexes+0x50>
    adcc:	2300      	movs	r3, #0
    adce:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    add2:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    add6:	f505 7088 	add.w	r0, r5, #272	; 0x110
    adda:	4790      	blx	r2
    addc:	6823      	ldr	r3, [r4, #0]
    adde:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    ade2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ade6:	4718      	bx	r3
    ade8:	bd70      	pop	{r4, r5, r6, pc}
    adea:	bf00      	nop
    adec:	2000019c 	.word	0x2000019c
    adf0:	2000129c 	.word	0x2000129c
    adf4:	200001ac 	.word	0x200001ac

0000adf8 <CC_LibInitNoRng>:
    adf8:	b510      	push	{r4, lr}
    adfa:	f000 f833 	bl	ae64 <CC_HalInit>
    adfe:	b120      	cbz	r0, ae0a <CC_LibInitNoRng+0x12>
    ae00:	2403      	movs	r4, #3
    ae02:	f000 f867 	bl	aed4 <CC_PalTerminate>
    ae06:	4620      	mov	r0, r4
    ae08:	bd10      	pop	{r4, pc}
    ae0a:	f000 f835 	bl	ae78 <CC_PalInit>
    ae0e:	b990      	cbnz	r0, ae36 <CC_LibInitNoRng+0x3e>
    ae10:	f000 f8b0 	bl	af74 <CC_PalPowerSaveModeSelect>
    ae14:	b990      	cbnz	r0, ae3c <CC_LibInitNoRng+0x44>
    ae16:	4b0f      	ldr	r3, [pc, #60]	; (ae54 <CC_LibInitNoRng+0x5c>)
    ae18:	681b      	ldr	r3, [r3, #0]
    ae1a:	0e1b      	lsrs	r3, r3, #24
    ae1c:	2bf0      	cmp	r3, #240	; 0xf0
    ae1e:	d108      	bne.n	ae32 <CC_LibInitNoRng+0x3a>
    ae20:	4a0d      	ldr	r2, [pc, #52]	; (ae58 <CC_LibInitNoRng+0x60>)
    ae22:	4b0e      	ldr	r3, [pc, #56]	; (ae5c <CC_LibInitNoRng+0x64>)
    ae24:	6812      	ldr	r2, [r2, #0]
    ae26:	429a      	cmp	r2, r3
    ae28:	d00a      	beq.n	ae40 <CC_LibInitNoRng+0x48>
    ae2a:	2407      	movs	r4, #7
    ae2c:	f000 f81c 	bl	ae68 <CC_HalTerminate>
    ae30:	e7e7      	b.n	ae02 <CC_LibInitNoRng+0xa>
    ae32:	2406      	movs	r4, #6
    ae34:	e7fa      	b.n	ae2c <CC_LibInitNoRng+0x34>
    ae36:	2404      	movs	r4, #4
    ae38:	4620      	mov	r0, r4
    ae3a:	bd10      	pop	{r4, pc}
    ae3c:	2400      	movs	r4, #0
    ae3e:	e7f5      	b.n	ae2c <CC_LibInitNoRng+0x34>
    ae40:	2001      	movs	r0, #1
    ae42:	f000 f897 	bl	af74 <CC_PalPowerSaveModeSelect>
    ae46:	4604      	mov	r4, r0
    ae48:	2800      	cmp	r0, #0
    ae4a:	d1f7      	bne.n	ae3c <CC_LibInitNoRng+0x44>
    ae4c:	4b04      	ldr	r3, [pc, #16]	; (ae60 <CC_LibInitNoRng+0x68>)
    ae4e:	6018      	str	r0, [r3, #0]
    ae50:	e7d9      	b.n	ae06 <CC_LibInitNoRng+0xe>
    ae52:	bf00      	nop
    ae54:	5002b928 	.word	0x5002b928
    ae58:	5002ba24 	.word	0x5002ba24
    ae5c:	20e00000 	.word	0x20e00000
    ae60:	5002ba0c 	.word	0x5002ba0c

0000ae64 <CC_HalInit>:
    ae64:	2000      	movs	r0, #0
    ae66:	4770      	bx	lr

0000ae68 <CC_HalTerminate>:
    ae68:	2000      	movs	r0, #0
    ae6a:	4770      	bx	lr

0000ae6c <CC_HalMaskInterrupt>:
    ae6c:	4b01      	ldr	r3, [pc, #4]	; (ae74 <CC_HalMaskInterrupt+0x8>)
    ae6e:	6018      	str	r0, [r3, #0]
    ae70:	4770      	bx	lr
    ae72:	bf00      	nop
    ae74:	5002ba04 	.word	0x5002ba04

0000ae78 <CC_PalInit>:
    ae78:	b510      	push	{r4, lr}
    ae7a:	4811      	ldr	r0, [pc, #68]	; (aec0 <CC_PalInit+0x48>)
    ae7c:	f000 f848 	bl	af10 <CC_PalMutexCreate>
    ae80:	b100      	cbz	r0, ae84 <CC_PalInit+0xc>
    ae82:	bd10      	pop	{r4, pc}
    ae84:	480f      	ldr	r0, [pc, #60]	; (aec4 <CC_PalInit+0x4c>)
    ae86:	f000 f843 	bl	af10 <CC_PalMutexCreate>
    ae8a:	2800      	cmp	r0, #0
    ae8c:	d1f9      	bne.n	ae82 <CC_PalInit+0xa>
    ae8e:	4c0e      	ldr	r4, [pc, #56]	; (aec8 <CC_PalInit+0x50>)
    ae90:	4620      	mov	r0, r4
    ae92:	f000 f83d 	bl	af10 <CC_PalMutexCreate>
    ae96:	2800      	cmp	r0, #0
    ae98:	d1f3      	bne.n	ae82 <CC_PalInit+0xa>
    ae9a:	4b0c      	ldr	r3, [pc, #48]	; (aecc <CC_PalInit+0x54>)
    ae9c:	480c      	ldr	r0, [pc, #48]	; (aed0 <CC_PalInit+0x58>)
    ae9e:	601c      	str	r4, [r3, #0]
    aea0:	f000 f836 	bl	af10 <CC_PalMutexCreate>
    aea4:	4601      	mov	r1, r0
    aea6:	2800      	cmp	r0, #0
    aea8:	d1eb      	bne.n	ae82 <CC_PalInit+0xa>
    aeaa:	f000 f82d 	bl	af08 <CC_PalDmaInit>
    aeae:	4604      	mov	r4, r0
    aeb0:	b108      	cbz	r0, aeb6 <CC_PalInit+0x3e>
    aeb2:	4620      	mov	r0, r4
    aeb4:	bd10      	pop	{r4, pc}
    aeb6:	f000 f83f 	bl	af38 <CC_PalPowerSaveModeInit>
    aeba:	4620      	mov	r0, r4
    aebc:	e7fa      	b.n	aeb4 <CC_PalInit+0x3c>
    aebe:	bf00      	nop
    aec0:	200001e4 	.word	0x200001e4
    aec4:	200001d8 	.word	0x200001d8
    aec8:	200001e0 	.word	0x200001e0
    aecc:	200001e8 	.word	0x200001e8
    aed0:	200001dc 	.word	0x200001dc

0000aed4 <CC_PalTerminate>:
    aed4:	b508      	push	{r3, lr}
    aed6:	4808      	ldr	r0, [pc, #32]	; (aef8 <CC_PalTerminate+0x24>)
    aed8:	f000 f824 	bl	af24 <CC_PalMutexDestroy>
    aedc:	4807      	ldr	r0, [pc, #28]	; (aefc <CC_PalTerminate+0x28>)
    aede:	f000 f821 	bl	af24 <CC_PalMutexDestroy>
    aee2:	4807      	ldr	r0, [pc, #28]	; (af00 <CC_PalTerminate+0x2c>)
    aee4:	f000 f81e 	bl	af24 <CC_PalMutexDestroy>
    aee8:	4806      	ldr	r0, [pc, #24]	; (af04 <CC_PalTerminate+0x30>)
    aeea:	f000 f81b 	bl	af24 <CC_PalMutexDestroy>
    aeee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    aef2:	f000 b80b 	b.w	af0c <CC_PalDmaTerminate>
    aef6:	bf00      	nop
    aef8:	200001e4 	.word	0x200001e4
    aefc:	200001d8 	.word	0x200001d8
    af00:	200001e0 	.word	0x200001e0
    af04:	200001dc 	.word	0x200001dc

0000af08 <CC_PalDmaInit>:
    af08:	2000      	movs	r0, #0
    af0a:	4770      	bx	lr

0000af0c <CC_PalDmaTerminate>:
    af0c:	4770      	bx	lr
    af0e:	bf00      	nop

0000af10 <CC_PalMutexCreate>:
    af10:	b508      	push	{r3, lr}
    af12:	4b03      	ldr	r3, [pc, #12]	; (af20 <CC_PalMutexCreate+0x10>)
    af14:	6802      	ldr	r2, [r0, #0]
    af16:	681b      	ldr	r3, [r3, #0]
    af18:	6810      	ldr	r0, [r2, #0]
    af1a:	4798      	blx	r3
    af1c:	2000      	movs	r0, #0
    af1e:	bd08      	pop	{r3, pc}
    af20:	2000019c 	.word	0x2000019c

0000af24 <CC_PalMutexDestroy>:
    af24:	b508      	push	{r3, lr}
    af26:	4b03      	ldr	r3, [pc, #12]	; (af34 <CC_PalMutexDestroy+0x10>)
    af28:	6802      	ldr	r2, [r0, #0]
    af2a:	685b      	ldr	r3, [r3, #4]
    af2c:	6810      	ldr	r0, [r2, #0]
    af2e:	4798      	blx	r3
    af30:	2000      	movs	r0, #0
    af32:	bd08      	pop	{r3, pc}
    af34:	2000019c 	.word	0x2000019c

0000af38 <CC_PalPowerSaveModeInit>:
    af38:	b570      	push	{r4, r5, r6, lr}
    af3a:	4c09      	ldr	r4, [pc, #36]	; (af60 <CC_PalPowerSaveModeInit+0x28>)
    af3c:	4d09      	ldr	r5, [pc, #36]	; (af64 <CC_PalPowerSaveModeInit+0x2c>)
    af3e:	6920      	ldr	r0, [r4, #16]
    af40:	68ab      	ldr	r3, [r5, #8]
    af42:	4798      	blx	r3
    af44:	b118      	cbz	r0, af4e <CC_PalPowerSaveModeInit+0x16>
    af46:	4b08      	ldr	r3, [pc, #32]	; (af68 <CC_PalPowerSaveModeInit+0x30>)
    af48:	4808      	ldr	r0, [pc, #32]	; (af6c <CC_PalPowerSaveModeInit+0x34>)
    af4a:	685b      	ldr	r3, [r3, #4]
    af4c:	4798      	blx	r3
    af4e:	4a08      	ldr	r2, [pc, #32]	; (af70 <CC_PalPowerSaveModeInit+0x38>)
    af50:	68eb      	ldr	r3, [r5, #12]
    af52:	6920      	ldr	r0, [r4, #16]
    af54:	2100      	movs	r1, #0
    af56:	6011      	str	r1, [r2, #0]
    af58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    af5c:	4718      	bx	r3
    af5e:	bf00      	nop
    af60:	200001ac 	.word	0x200001ac
    af64:	2000019c 	.word	0x2000019c
    af68:	2000018c 	.word	0x2000018c
    af6c:	0000d840 	.word	0x0000d840
    af70:	20001294 	.word	0x20001294

0000af74 <CC_PalPowerSaveModeSelect>:
    af74:	b570      	push	{r4, r5, r6, lr}
    af76:	4d1a      	ldr	r5, [pc, #104]	; (afe0 <CC_PalPowerSaveModeSelect+0x6c>)
    af78:	4e1a      	ldr	r6, [pc, #104]	; (afe4 <CC_PalPowerSaveModeSelect+0x70>)
    af7a:	4604      	mov	r4, r0
    af7c:	68b2      	ldr	r2, [r6, #8]
    af7e:	6928      	ldr	r0, [r5, #16]
    af80:	4790      	blx	r2
    af82:	b9f0      	cbnz	r0, afc2 <CC_PalPowerSaveModeSelect+0x4e>
    af84:	b15c      	cbz	r4, af9e <CC_PalPowerSaveModeSelect+0x2a>
    af86:	4c18      	ldr	r4, [pc, #96]	; (afe8 <CC_PalPowerSaveModeSelect+0x74>)
    af88:	6823      	ldr	r3, [r4, #0]
    af8a:	b1ab      	cbz	r3, afb8 <CC_PalPowerSaveModeSelect+0x44>
    af8c:	2b01      	cmp	r3, #1
    af8e:	d01a      	beq.n	afc6 <CC_PalPowerSaveModeSelect+0x52>
    af90:	3b01      	subs	r3, #1
    af92:	6023      	str	r3, [r4, #0]
    af94:	6928      	ldr	r0, [r5, #16]
    af96:	68f3      	ldr	r3, [r6, #12]
    af98:	4798      	blx	r3
    af9a:	2000      	movs	r0, #0
    af9c:	bd70      	pop	{r4, r5, r6, pc}
    af9e:	4c12      	ldr	r4, [pc, #72]	; (afe8 <CC_PalPowerSaveModeSelect+0x74>)
    afa0:	6821      	ldr	r1, [r4, #0]
    afa2:	b939      	cbnz	r1, afb4 <CC_PalPowerSaveModeSelect+0x40>
    afa4:	4b11      	ldr	r3, [pc, #68]	; (afec <CC_PalPowerSaveModeSelect+0x78>)
    afa6:	4a12      	ldr	r2, [pc, #72]	; (aff0 <CC_PalPowerSaveModeSelect+0x7c>)
    afa8:	2001      	movs	r0, #1
    afaa:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    afae:	6813      	ldr	r3, [r2, #0]
    afb0:	2b00      	cmp	r3, #0
    afb2:	d1fc      	bne.n	afae <CC_PalPowerSaveModeSelect+0x3a>
    afb4:	3101      	adds	r1, #1
    afb6:	6021      	str	r1, [r4, #0]
    afb8:	68f3      	ldr	r3, [r6, #12]
    afba:	6928      	ldr	r0, [r5, #16]
    afbc:	4798      	blx	r3
    afbe:	2000      	movs	r0, #0
    afc0:	bd70      	pop	{r4, r5, r6, pc}
    afc2:	480c      	ldr	r0, [pc, #48]	; (aff4 <CC_PalPowerSaveModeSelect+0x80>)
    afc4:	bd70      	pop	{r4, r5, r6, pc}
    afc6:	4a0a      	ldr	r2, [pc, #40]	; (aff0 <CC_PalPowerSaveModeSelect+0x7c>)
    afc8:	6813      	ldr	r3, [r2, #0]
    afca:	2b00      	cmp	r3, #0
    afcc:	d1fc      	bne.n	afc8 <CC_PalPowerSaveModeSelect+0x54>
    afce:	4a07      	ldr	r2, [pc, #28]	; (afec <CC_PalPowerSaveModeSelect+0x78>)
    afd0:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    afd4:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    afd8:	f7ff ff48 	bl	ae6c <CC_HalMaskInterrupt>
    afdc:	6823      	ldr	r3, [r4, #0]
    afde:	e7d7      	b.n	af90 <CC_PalPowerSaveModeSelect+0x1c>
    afe0:	200001ac 	.word	0x200001ac
    afe4:	2000019c 	.word	0x2000019c
    afe8:	20001294 	.word	0x20001294
    afec:	5002a000 	.word	0x5002a000
    aff0:	5002b910 	.word	0x5002b910
    aff4:	ffff8fe9 	.word	0xffff8fe9

0000aff8 <sys_notify_validate>:
	if (notify == NULL) {
    aff8:	4602      	mov	r2, r0
    affa:	b1b0      	cbz	r0, b02a <sys_notify_validate+0x32>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    affc:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    affe:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
    b002:	2b02      	cmp	r3, #2
    b004:	d00b      	beq.n	b01e <sys_notify_validate+0x26>
    b006:	2b03      	cmp	r3, #3
    b008:	d004      	beq.n	b014 <sys_notify_validate+0x1c>
    b00a:	2b01      	cmp	r3, #1
    b00c:	d004      	beq.n	b018 <sys_notify_validate+0x20>
    b00e:	f06f 0015 	mvn.w	r0, #21
    b012:	4770      	bx	lr
		if (notify->method.callback == NULL) {
    b014:	6803      	ldr	r3, [r0, #0]
    b016:	b15b      	cbz	r3, b030 <sys_notify_validate+0x38>
		notify->result = 0;
    b018:	2000      	movs	r0, #0
    b01a:	6090      	str	r0, [r2, #8]
    b01c:	4770      	bx	lr
		if (notify->method.signal == NULL) {
    b01e:	6803      	ldr	r3, [r0, #0]
    b020:	2b00      	cmp	r3, #0
    b022:	d1f9      	bne.n	b018 <sys_notify_validate+0x20>
			rv = -EINVAL;
    b024:	f06f 0015 	mvn.w	r0, #21
}
    b028:	4770      	bx	lr
		return -EINVAL;
    b02a:	f06f 0015 	mvn.w	r0, #21
    b02e:	4770      	bx	lr
			rv = -EINVAL;
    b030:	f06f 0015 	mvn.w	r0, #21
    b034:	4770      	bx	lr

0000b036 <arch_printk_char_out>:
}
    b036:	2000      	movs	r0, #0
    b038:	4770      	bx	lr

0000b03a <str_out>:
{
    b03a:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    b03c:	680c      	ldr	r4, [r1, #0]
    b03e:	b154      	cbz	r4, b056 <str_out+0x1c>
    b040:	688a      	ldr	r2, [r1, #8]
    b042:	684b      	ldr	r3, [r1, #4]
    b044:	429a      	cmp	r2, r3
    b046:	da06      	bge.n	b056 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
    b048:	3b01      	subs	r3, #1
    b04a:	429a      	cmp	r2, r3
    b04c:	d008      	beq.n	b060 <str_out+0x26>
		ctx->str[ctx->count++] = c;
    b04e:	1c53      	adds	r3, r2, #1
    b050:	608b      	str	r3, [r1, #8]
    b052:	54a0      	strb	r0, [r4, r2]
    b054:	e002      	b.n	b05c <str_out+0x22>
		ctx->count++;
    b056:	688b      	ldr	r3, [r1, #8]
    b058:	3301      	adds	r3, #1
    b05a:	608b      	str	r3, [r1, #8]
}
    b05c:	bc10      	pop	{r4}
    b05e:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
    b060:	1c53      	adds	r3, r2, #1
    b062:	608b      	str	r3, [r1, #8]
    b064:	2300      	movs	r3, #0
    b066:	54a3      	strb	r3, [r4, r2]
    b068:	e7f8      	b.n	b05c <str_out+0x22>

0000b06a <printk>:
{
    b06a:	b40f      	push	{r0, r1, r2, r3}
    b06c:	b500      	push	{lr}
    b06e:	b083      	sub	sp, #12
    b070:	a904      	add	r1, sp, #16
    b072:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    b076:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    b078:	f7f6 fb96 	bl	17a8 <vprintk>
}
    b07c:	b003      	add	sp, #12
    b07e:	f85d eb04 	ldr.w	lr, [sp], #4
    b082:	b004      	add	sp, #16
    b084:	4770      	bx	lr

0000b086 <snprintk>:
{
    b086:	b40c      	push	{r2, r3}
    b088:	b500      	push	{lr}
    b08a:	b083      	sub	sp, #12
    b08c:	ab04      	add	r3, sp, #16
    b08e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    b092:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    b094:	f7f6 fb98 	bl	17c8 <vsnprintk>
}
    b098:	b003      	add	sp, #12
    b09a:	f85d eb04 	ldr.w	lr, [sp], #4
    b09e:	b002      	add	sp, #8
    b0a0:	4770      	bx	lr

0000b0a2 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    b0a2:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b0a6:	8b81      	ldrh	r1, [r0, #28]
    b0a8:	f021 0107 	bic.w	r1, r1, #7
    b0ac:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    b0ae:	8381      	strh	r1, [r0, #28]
}
    b0b0:	4770      	bx	lr

0000b0b2 <notify_monitors>:
{
    b0b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b0b6:	4606      	mov	r6, r0
    b0b8:	460f      	mov	r7, r1
    b0ba:	4690      	mov	r8, r2
	return list->head;
    b0bc:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    b0be:	b119      	cbz	r1, b0c8 <notify_monitors+0x16>
    b0c0:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    b0c2:	b131      	cbz	r1, b0d2 <notify_monitors+0x20>
	return node->next;
    b0c4:	680c      	ldr	r4, [r1, #0]
    b0c6:	e004      	b.n	b0d2 <notify_monitors+0x20>
    b0c8:	460c      	mov	r4, r1
    b0ca:	e002      	b.n	b0d2 <notify_monitors+0x20>
    b0cc:	4623      	mov	r3, r4
    b0ce:	4621      	mov	r1, r4
    b0d0:	461c      	mov	r4, r3
    b0d2:	b159      	cbz	r1, b0ec <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
    b0d4:	684d      	ldr	r5, [r1, #4]
    b0d6:	4643      	mov	r3, r8
    b0d8:	463a      	mov	r2, r7
    b0da:	4630      	mov	r0, r6
    b0dc:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    b0de:	2c00      	cmp	r4, #0
    b0e0:	d0f4      	beq.n	b0cc <notify_monitors+0x1a>
    b0e2:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    b0e4:	2c00      	cmp	r4, #0
    b0e6:	d0f2      	beq.n	b0ce <notify_monitors+0x1c>
	return node->next;
    b0e8:	6823      	ldr	r3, [r4, #0]
    b0ea:	e7f0      	b.n	b0ce <notify_monitors+0x1c>
}
    b0ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000b0f0 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    b0f0:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    b0f2:	f013 0307 	ands.w	r3, r3, #7
    b0f6:	d103      	bne.n	b100 <process_recheck+0x10>
	return list->head;
    b0f8:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    b0fa:	b10a      	cbz	r2, b100 <process_recheck+0x10>
		evt = EVT_START;
    b0fc:	2003      	movs	r0, #3
    b0fe:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    b100:	2b02      	cmp	r3, #2
    b102:	d003      	beq.n	b10c <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    b104:	2b01      	cmp	r3, #1
    b106:	d006      	beq.n	b116 <process_recheck+0x26>
	int evt = EVT_NOP;
    b108:	2000      	movs	r0, #0
    b10a:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    b10c:	8bc2      	ldrh	r2, [r0, #30]
    b10e:	2a00      	cmp	r2, #0
    b110:	d1f8      	bne.n	b104 <process_recheck+0x14>
		evt = EVT_STOP;
    b112:	2004      	movs	r0, #4
    b114:	4770      	bx	lr
    b116:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    b118:	b10b      	cbz	r3, b11e <process_recheck+0x2e>
		evt = EVT_RESET;
    b11a:	2005      	movs	r0, #5
}
    b11c:	4770      	bx	lr
	int evt = EVT_NOP;
    b11e:	2000      	movs	r0, #0
    b120:	4770      	bx	lr

0000b122 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    b122:	b158      	cbz	r0, b13c <validate_args+0x1a>
{
    b124:	b510      	push	{r4, lr}
    b126:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    b128:	b159      	cbz	r1, b142 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
    b12a:	1d08      	adds	r0, r1, #4
    b12c:	f7ff ff64 	bl	aff8 <sys_notify_validate>
	if ((rv == 0)
    b130:	b918      	cbnz	r0, b13a <validate_args+0x18>
	    && ((cli->notify.flags
    b132:	68a3      	ldr	r3, [r4, #8]
    b134:	f033 0303 	bics.w	r3, r3, #3
    b138:	d106      	bne.n	b148 <validate_args+0x26>
}
    b13a:	bd10      	pop	{r4, pc}
		return -EINVAL;
    b13c:	f06f 0015 	mvn.w	r0, #21
}
    b140:	4770      	bx	lr
		return -EINVAL;
    b142:	f06f 0015 	mvn.w	r0, #21
    b146:	e7f8      	b.n	b13a <validate_args+0x18>
		rv = -EINVAL;
    b148:	f06f 0015 	mvn.w	r0, #21
    b14c:	e7f5      	b.n	b13a <validate_args+0x18>

0000b14e <notify_one>:
{
    b14e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b152:	4607      	mov	r7, r0
    b154:	460c      	mov	r4, r1
    b156:	4616      	mov	r6, r2
    b158:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    b15a:	4619      	mov	r1, r3
    b15c:	1d20      	adds	r0, r4, #4
    b15e:	f7f6 fae1 	bl	1724 <sys_notify_finalize>
	if (cb) {
    b162:	b128      	cbz	r0, b170 <notify_one+0x22>
    b164:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    b166:	462b      	mov	r3, r5
    b168:	4632      	mov	r2, r6
    b16a:	4621      	mov	r1, r4
    b16c:	4638      	mov	r0, r7
    b16e:	47c0      	blx	r8
}
    b170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000b174 <notify_all>:
{
    b174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b178:	4681      	mov	r9, r0
    b17a:	460c      	mov	r4, r1
    b17c:	4690      	mov	r8, r2
    b17e:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
    b180:	e005      	b.n	b18e <notify_all+0x1a>
	list->tail = node;
    b182:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
    b184:	463b      	mov	r3, r7
    b186:	4642      	mov	r2, r8
    b188:	4648      	mov	r0, r9
    b18a:	f7ff ffe0 	bl	b14e <notify_one>
	return list->head;
    b18e:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    b190:	b129      	cbz	r1, b19e <notify_all+0x2a>
	return node->next;
    b192:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    b194:	6025      	str	r5, [r4, #0]
	return list->tail;
    b196:	6866      	ldr	r6, [r4, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    b198:	428e      	cmp	r6, r1
    b19a:	d1f3      	bne.n	b184 <notify_all+0x10>
    b19c:	e7f1      	b.n	b182 <notify_all+0xe>
}
    b19e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000b1a2 <onoff_manager_init>:
	if ((mgr == NULL)
    b1a2:	b170      	cbz	r0, b1c2 <onoff_manager_init+0x20>
{
    b1a4:	b538      	push	{r3, r4, r5, lr}
    b1a6:	460c      	mov	r4, r1
    b1a8:	4605      	mov	r5, r0
	    || (transitions == NULL)
    b1aa:	b169      	cbz	r1, b1c8 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
    b1ac:	680b      	ldr	r3, [r1, #0]
    b1ae:	b173      	cbz	r3, b1ce <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
    b1b0:	684b      	ldr	r3, [r1, #4]
    b1b2:	b17b      	cbz	r3, b1d4 <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    b1b4:	2220      	movs	r2, #32
    b1b6:	2100      	movs	r1, #0
    b1b8:	f000 f9c5 	bl	b546 <memset>
    b1bc:	612c      	str	r4, [r5, #16]
	return 0;
    b1be:	2000      	movs	r0, #0
}
    b1c0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    b1c2:	f06f 0015 	mvn.w	r0, #21
}
    b1c6:	4770      	bx	lr
		return -EINVAL;
    b1c8:	f06f 0015 	mvn.w	r0, #21
    b1cc:	e7f8      	b.n	b1c0 <onoff_manager_init+0x1e>
    b1ce:	f06f 0015 	mvn.w	r0, #21
    b1d2:	e7f5      	b.n	b1c0 <onoff_manager_init+0x1e>
    b1d4:	f06f 0015 	mvn.w	r0, #21
    b1d8:	e7f2      	b.n	b1c0 <onoff_manager_init+0x1e>

0000b1da <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    b1da:	b508      	push	{r3, lr}
    b1dc:	4604      	mov	r4, r0
    b1de:	4608      	mov	r0, r1
    b1e0:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    b1e2:	461a      	mov	r2, r3
    b1e4:	47a0      	blx	r4
	return z_impl_z_current_get();
    b1e6:	f7fe fb9b 	bl	9920 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    b1ea:	f7f8 f93f 	bl	346c <z_impl_k_thread_abort>

0000b1ee <extract_decimal>:
{
    b1ee:	b410      	push	{r4}
    b1f0:	4604      	mov	r4, r0
	const char *sp = *str;
    b1f2:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    b1f4:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    b1f6:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    b1f8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    b1fc:	2909      	cmp	r1, #9
    b1fe:	d806      	bhi.n	b20e <extract_decimal+0x20>
		val = 10U * val + *sp++ - '0';
    b200:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    b204:	3201      	adds	r2, #1
    b206:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    b20a:	3830      	subs	r0, #48	; 0x30
    b20c:	e7f3      	b.n	b1f6 <extract_decimal+0x8>
	*str = sp;
    b20e:	6022      	str	r2, [r4, #0]
}
    b210:	bc10      	pop	{r4}
    b212:	4770      	bx	lr

0000b214 <encode_uint>:
{
    b214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b218:	b083      	sub	sp, #12
    b21a:	4604      	mov	r4, r0
    b21c:	460d      	mov	r5, r1
    b21e:	9201      	str	r2, [sp, #4]
    b220:	469a      	mov	sl, r3
    b222:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    b226:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    b228:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    b22c:	2b6f      	cmp	r3, #111	; 0x6f
    b22e:	d00f      	beq.n	b250 <encode_uint+0x3c>
    b230:	d906      	bls.n	b240 <encode_uint+0x2c>
    b232:	2b70      	cmp	r3, #112	; 0x70
    b234:	d00f      	beq.n	b256 <encode_uint+0x42>
    b236:	2b78      	cmp	r3, #120	; 0x78
    b238:	d110      	bne.n	b25c <encode_uint+0x48>
		return 16;
    b23a:	f04f 0910 	mov.w	r9, #16
    b23e:	e026      	b.n	b28e <encode_uint+0x7a>
	switch (specifier) {
    b240:	2b58      	cmp	r3, #88	; 0x58
    b242:	d002      	beq.n	b24a <encode_uint+0x36>
    b244:	f04f 090a 	mov.w	r9, #10
    b248:	e021      	b.n	b28e <encode_uint+0x7a>
		return 16;
    b24a:	f04f 0910 	mov.w	r9, #16
    b24e:	e01e      	b.n	b28e <encode_uint+0x7a>
		return 8;
    b250:	f04f 0908 	mov.w	r9, #8
    b254:	e01b      	b.n	b28e <encode_uint+0x7a>
		return 16;
    b256:	f04f 0910 	mov.w	r9, #16
    b25a:	e018      	b.n	b28e <encode_uint+0x7a>
	switch (specifier) {
    b25c:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
    b260:	e015      	b.n	b28e <encode_uint+0x7a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    b262:	f1bb 0f19 	cmp.w	fp, #25
    b266:	d820      	bhi.n	b2aa <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    b268:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    b26a:	3237      	adds	r2, #55	; 0x37
    b26c:	b2d2      	uxtb	r2, r2
    b26e:	f808 2d01 	strb.w	r2, [r8, #-1]!
		value /= radix;
    b272:	4632      	mov	r2, r6
    b274:	463b      	mov	r3, r7
    b276:	4620      	mov	r0, r4
    b278:	4629      	mov	r1, r5
    b27a:	f7f5 fe79 	bl	f70 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    b27e:	42bd      	cmp	r5, r7
    b280:	bf08      	it	eq
    b282:	42b4      	cmpeq	r4, r6
    b284:	d315      	bcc.n	b2b2 <encode_uint+0x9e>
    b286:	45d0      	cmp	r8, sl
    b288:	d913      	bls.n	b2b2 <encode_uint+0x9e>
		value /= radix;
    b28a:	4604      	mov	r4, r0
    b28c:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    b28e:	464e      	mov	r6, r9
    b290:	2700      	movs	r7, #0
    b292:	464a      	mov	r2, r9
    b294:	463b      	mov	r3, r7
    b296:	4620      	mov	r0, r4
    b298:	4629      	mov	r1, r5
    b29a:	f7f5 fe69 	bl	f70 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    b29e:	2a09      	cmp	r2, #9
    b2a0:	d8df      	bhi.n	b262 <encode_uint+0x4e>
    b2a2:	b2d2      	uxtb	r2, r2
    b2a4:	3230      	adds	r2, #48	; 0x30
    b2a6:	b2d2      	uxtb	r2, r2
    b2a8:	e7e1      	b.n	b26e <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    b2aa:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    b2ac:	3257      	adds	r2, #87	; 0x57
    b2ae:	b2d2      	uxtb	r2, r2
    b2b0:	e7dd      	b.n	b26e <encode_uint+0x5a>
	if (conv->flag_hash) {
    b2b2:	9b01      	ldr	r3, [sp, #4]
    b2b4:	781b      	ldrb	r3, [r3, #0]
    b2b6:	f013 0f20 	tst.w	r3, #32
    b2ba:	d005      	beq.n	b2c8 <encode_uint+0xb4>
		if (radix == 8) {
    b2bc:	f1b9 0f08 	cmp.w	r9, #8
    b2c0:	d006      	beq.n	b2d0 <encode_uint+0xbc>
		} else if (radix == 16) {
    b2c2:	f1b9 0f10 	cmp.w	r9, #16
    b2c6:	d009      	beq.n	b2dc <encode_uint+0xc8>
}
    b2c8:	4640      	mov	r0, r8
    b2ca:	b003      	add	sp, #12
    b2cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    b2d0:	9a01      	ldr	r2, [sp, #4]
    b2d2:	7893      	ldrb	r3, [r2, #2]
    b2d4:	f043 0308 	orr.w	r3, r3, #8
    b2d8:	7093      	strb	r3, [r2, #2]
    b2da:	e7f5      	b.n	b2c8 <encode_uint+0xb4>
			conv->altform_0c = true;
    b2dc:	9a01      	ldr	r2, [sp, #4]
    b2de:	7893      	ldrb	r3, [r2, #2]
    b2e0:	f043 0310 	orr.w	r3, r3, #16
    b2e4:	7093      	strb	r3, [r2, #2]
    b2e6:	e7ef      	b.n	b2c8 <encode_uint+0xb4>

0000b2e8 <outs>:
{
    b2e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b2ec:	4607      	mov	r7, r0
    b2ee:	460e      	mov	r6, r1
    b2f0:	4614      	mov	r4, r2
    b2f2:	4698      	mov	r8, r3
	size_t count = 0;
    b2f4:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    b2f6:	e006      	b.n	b306 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    b2f8:	4631      	mov	r1, r6
    b2fa:	f814 0b01 	ldrb.w	r0, [r4], #1
    b2fe:	47b8      	blx	r7
		if (rc < 0) {
    b300:	2800      	cmp	r0, #0
    b302:	db09      	blt.n	b318 <outs+0x30>
		++count;
    b304:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    b306:	4544      	cmp	r4, r8
    b308:	d3f6      	bcc.n	b2f8 <outs+0x10>
    b30a:	f1b8 0f00 	cmp.w	r8, #0
    b30e:	d102      	bne.n	b316 <outs+0x2e>
    b310:	7823      	ldrb	r3, [r4, #0]
    b312:	2b00      	cmp	r3, #0
    b314:	d1f0      	bne.n	b2f8 <outs+0x10>
	return (int)count;
    b316:	4628      	mov	r0, r5
}
    b318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000b31c <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    b31c:	4040      	eors	r0, r0
    b31e:	f380 8811 	msr	BASEPRI, r0
    b322:	f04f 0004 	mov.w	r0, #4
    b326:	df02      	svc	2
}
    b328:	4770      	bx	lr

0000b32a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    b32a:	4770      	bx	lr

0000b32c <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    b32c:	2200      	movs	r2, #0
    b32e:	6002      	str	r2, [r0, #0]
    b330:	6042      	str	r2, [r0, #4]
    b332:	6082      	str	r2, [r0, #8]
}
    b334:	4770      	bx	lr

0000b336 <abort_function>:
{
    b336:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    b338:	2000      	movs	r0, #0
    b33a:	f7f7 fa9b 	bl	2874 <sys_reboot>

0000b33e <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    b33e:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    b340:	f7fc f8fa 	bl	7538 <z_fatal_error>
}
    b344:	bd08      	pop	{r3, pc}

0000b346 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    b346:	b508      	push	{r3, lr}
    b348:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    b34a:	6800      	ldr	r0, [r0, #0]
    b34c:	f7ff fff7 	bl	b33e <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    b350:	bd08      	pop	{r3, pc}

0000b352 <z_irq_spurious>:
 * called.
 *
 * @return N/A
 */
void z_irq_spurious(const void *unused)
{
    b352:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    b354:	2100      	movs	r1, #0
    b356:	2001      	movs	r0, #1
    b358:	f7ff fff1 	bl	b33e <z_arm_fatal_error>
}
    b35c:	bd08      	pop	{r3, pc}

0000b35e <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    b35e:	b508      	push	{r3, lr}
	handler();
    b360:	f7f7 fd78 	bl	2e54 <z_SysNmiOnReset>
	z_arm_int_exit();
    b364:	f7f7 fe74 	bl	3050 <z_arm_exc_exit>
}
    b368:	bd08      	pop	{r3, pc}

0000b36a <memory_fault_recoverable>:
}
    b36a:	2000      	movs	r0, #0
    b36c:	4770      	bx	lr

0000b36e <debug_monitor>:
	*recoverable = false;
    b36e:	2300      	movs	r3, #0
    b370:	700b      	strb	r3, [r1, #0]
}
    b372:	4770      	bx	lr

0000b374 <fault_handle>:
{
    b374:	b508      	push	{r3, lr}
	*recoverable = false;
    b376:	2300      	movs	r3, #0
    b378:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    b37a:	1ecb      	subs	r3, r1, #3
    b37c:	2b09      	cmp	r3, #9
    b37e:	d81a      	bhi.n	b3b6 <fault_handle+0x42>
    b380:	e8df f003 	tbb	[pc, r3]
    b384:	110d0905 	.word	0x110d0905
    b388:	19191919 	.word	0x19191919
    b38c:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
    b38e:	4611      	mov	r1, r2
    b390:	f7f7 ff0c 	bl	31ac <hard_fault>
		break;
    b394:	e010      	b.n	b3b8 <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
    b396:	2100      	movs	r1, #0
    b398:	f7f7 fea4 	bl	30e4 <mem_manage_fault>
		break;
    b39c:	e00c      	b.n	b3b8 <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
    b39e:	2100      	movs	r1, #0
    b3a0:	f7f7 fe64 	bl	306c <bus_fault>
		break;
    b3a4:	e008      	b.n	b3b8 <fault_handle+0x44>
		reason = usage_fault(esf);
    b3a6:	f7f7 fe8b 	bl	30c0 <usage_fault>
		break;
    b3aa:	e005      	b.n	b3b8 <fault_handle+0x44>
		debug_monitor(esf, recoverable);
    b3ac:	4611      	mov	r1, r2
    b3ae:	f7ff ffde 	bl	b36e <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    b3b2:	2000      	movs	r0, #0
		break;
    b3b4:	e000      	b.n	b3b8 <fault_handle+0x44>
	*recoverable = false;
    b3b6:	2000      	movs	r0, #0
}
    b3b8:	bd08      	pop	{r3, pc}

0000b3ba <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
    b3ba:	6843      	ldr	r3, [r0, #4]
    b3bc:	1e5a      	subs	r2, r3, #1
		&&
    b3be:	4213      	tst	r3, r2
    b3c0:	d106      	bne.n	b3d0 <mpu_partition_is_valid+0x16>
		&&
    b3c2:	2b1f      	cmp	r3, #31
    b3c4:	d906      	bls.n	b3d4 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
    b3c6:	6803      	ldr	r3, [r0, #0]
		&&
    b3c8:	421a      	tst	r2, r3
    b3ca:	d005      	beq.n	b3d8 <mpu_partition_is_valid+0x1e>
    b3cc:	2000      	movs	r0, #0
    b3ce:	4770      	bx	lr
    b3d0:	2000      	movs	r0, #0
    b3d2:	4770      	bx	lr
    b3d4:	2000      	movs	r0, #0
    b3d6:	4770      	bx	lr
    b3d8:	2001      	movs	r0, #1
}
    b3da:	4770      	bx	lr

0000b3dc <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
    b3dc:	2807      	cmp	r0, #7
    b3de:	d805      	bhi.n	b3ec <region_allocate_and_init+0x10>
{
    b3e0:	b510      	push	{r4, lr}
    b3e2:	4604      	mov	r4, r0
	region_init(index, region_conf);
    b3e4:	f7f8 f878 	bl	34d8 <region_init>
	return index;
    b3e8:	4620      	mov	r0, r4
}
    b3ea:	bd10      	pop	{r4, pc}
		return -EINVAL;
    b3ec:	f06f 0015 	mvn.w	r0, #21
}
    b3f0:	4770      	bx	lr

0000b3f2 <mpu_configure_region>:
{
    b3f2:	b500      	push	{lr}
    b3f4:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    b3f6:	680b      	ldr	r3, [r1, #0]
    b3f8:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    b3fa:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    b3fc:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
    b3fe:	2b20      	cmp	r3, #32
    b400:	d912      	bls.n	b428 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
    b402:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    b406:	d811      	bhi.n	b42c <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    b408:	3b01      	subs	r3, #1
    b40a:	fab3 f383 	clz	r3, r3
    b40e:	f1c3 031f 	rsb	r3, r3, #31
    b412:	005b      	lsls	r3, r3, #1
    b414:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    b418:	4313      	orrs	r3, r2
    b41a:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    b41c:	a901      	add	r1, sp, #4
    b41e:	f7ff ffdd 	bl	b3dc <region_allocate_and_init>
}
    b422:	b005      	add	sp, #20
    b424:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
    b428:	2308      	movs	r3, #8
    b42a:	e7f5      	b.n	b418 <mpu_configure_region+0x26>
		return REGION_4G;
    b42c:	233e      	movs	r3, #62	; 0x3e
    b42e:	e7f3      	b.n	b418 <mpu_configure_region+0x26>

0000b430 <mpu_configure_regions>:
{
    b430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b434:	4680      	mov	r8, r0
    b436:	460f      	mov	r7, r1
    b438:	4699      	mov	r9, r3
	int reg_index = start_reg_index;
    b43a:	4616      	mov	r6, r2
	for (i = 0; i < regions_num; i++) {
    b43c:	2500      	movs	r5, #0
    b43e:	e009      	b.n	b454 <mpu_configure_regions+0x24>
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    b440:	4621      	mov	r1, r4
    b442:	b2f0      	uxtb	r0, r6
    b444:	f7ff ffd5 	bl	b3f2 <mpu_configure_region>
    b448:	4606      	mov	r6, r0
		if (reg_index == -EINVAL) {
    b44a:	f110 0f16 	cmn.w	r0, #22
    b44e:	d014      	beq.n	b47a <mpu_configure_regions+0x4a>
		reg_index++;
    b450:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    b452:	3501      	adds	r5, #1
    b454:	42bd      	cmp	r5, r7
    b456:	da10      	bge.n	b47a <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
    b458:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    b45c:	eb08 0484 	add.w	r4, r8, r4, lsl #2
    b460:	6862      	ldr	r2, [r4, #4]
    b462:	2a00      	cmp	r2, #0
    b464:	d0f5      	beq.n	b452 <mpu_configure_regions+0x22>
		if (do_sanity_check &&
    b466:	f1b9 0f00 	cmp.w	r9, #0
    b46a:	d0e9      	beq.n	b440 <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
    b46c:	4620      	mov	r0, r4
    b46e:	f7ff ffa4 	bl	b3ba <mpu_partition_is_valid>
		if (do_sanity_check &&
    b472:	2800      	cmp	r0, #0
    b474:	d1e4      	bne.n	b440 <mpu_configure_regions+0x10>
			return -EINVAL;
    b476:	f06f 0615 	mvn.w	r6, #21
}
    b47a:	4630      	mov	r0, r6
    b47c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000b480 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    b480:	4602      	mov	r2, r0
    b482:	780b      	ldrb	r3, [r1, #0]
    b484:	b11b      	cbz	r3, b48e <strcpy+0xe>
		*d = *s;
    b486:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
    b48a:	3101      	adds	r1, #1
    b48c:	e7f9      	b.n	b482 <strcpy+0x2>
	}

	*d = '\0';
    b48e:	7013      	strb	r3, [r2, #0]

	return dest;
}
    b490:	4770      	bx	lr

0000b492 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    b492:	4603      	mov	r3, r0
    b494:	b1a2      	cbz	r2, b4c0 <strncpy+0x2e>
{
    b496:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
    b498:	780c      	ldrb	r4, [r1, #0]
    b49a:	b12c      	cbz	r4, b4a8 <strncpy+0x16>
		*d = *s;
    b49c:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
    b4a0:	3101      	adds	r1, #1
		d++;
		n--;
    b4a2:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
    b4a4:	2a00      	cmp	r2, #0
    b4a6:	d1f7      	bne.n	b498 <strncpy+0x6>
	}

	while (n > 0) {
    b4a8:	b122      	cbz	r2, b4b4 <strncpy+0x22>
		*d = '\0';
    b4aa:	2100      	movs	r1, #0
    b4ac:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
    b4b0:	3a01      	subs	r2, #1
    b4b2:	e7f9      	b.n	b4a8 <strncpy+0x16>
	}

	return dest;
}
    b4b4:	bc10      	pop	{r4}
    b4b6:	4770      	bx	lr
		*d = '\0';
    b4b8:	2100      	movs	r1, #0
    b4ba:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    b4be:	3a01      	subs	r2, #1
	while (n > 0) {
    b4c0:	2a00      	cmp	r2, #0
    b4c2:	d1f9      	bne.n	b4b8 <strncpy+0x26>
    b4c4:	4770      	bx	lr

0000b4c6 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    b4c6:	4603      	mov	r3, r0
	size_t n = 0;
    b4c8:	2000      	movs	r0, #0

	while (*s != '\0') {
    b4ca:	781a      	ldrb	r2, [r3, #0]
    b4cc:	b112      	cbz	r2, b4d4 <strlen+0xe>
		s++;
    b4ce:	3301      	adds	r3, #1
		n++;
    b4d0:	3001      	adds	r0, #1
    b4d2:	e7fa      	b.n	b4ca <strlen+0x4>
	}

	return n;
}
    b4d4:	4770      	bx	lr

0000b4d6 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    b4d6:	4603      	mov	r3, r0
	size_t n = 0;
    b4d8:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    b4da:	781a      	ldrb	r2, [r3, #0]
    b4dc:	b122      	cbz	r2, b4e8 <strnlen+0x12>
    b4de:	4288      	cmp	r0, r1
    b4e0:	d202      	bcs.n	b4e8 <strnlen+0x12>
		s++;
    b4e2:	3301      	adds	r3, #1
		n++;
    b4e4:	3001      	adds	r0, #1
    b4e6:	e7f8      	b.n	b4da <strnlen+0x4>
	}

	return n;
}
    b4e8:	4770      	bx	lr

0000b4ea <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    b4ea:	7803      	ldrb	r3, [r0, #0]
    b4ec:	780a      	ldrb	r2, [r1, #0]
    b4ee:	4293      	cmp	r3, r2
    b4f0:	d103      	bne.n	b4fa <strcmp+0x10>
    b4f2:	b113      	cbz	r3, b4fa <strcmp+0x10>
		s1++;
    b4f4:	3001      	adds	r0, #1
		s2++;
    b4f6:	3101      	adds	r1, #1
    b4f8:	e7f7      	b.n	b4ea <strcmp>
	}

	return *s1 - *s2;
}
    b4fa:	1a98      	subs	r0, r3, r2
    b4fc:	4770      	bx	lr

0000b4fe <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    b4fe:	b410      	push	{r4}
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    b500:	ea80 0301 	eor.w	r3, r0, r1
    b504:	f013 0f03 	tst.w	r3, #3
    b508:	d001      	beq.n	b50e <memcpy+0x10>
	unsigned char *d_byte = (unsigned char *)d;
    b50a:	4603      	mov	r3, r0
    b50c:	e017      	b.n	b53e <memcpy+0x40>
    b50e:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    b510:	f013 0f03 	tst.w	r3, #3
    b514:	d00b      	beq.n	b52e <memcpy+0x30>
			if (n == 0) {
    b516:	b1a2      	cbz	r2, b542 <memcpy+0x44>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    b518:	f811 4b01 	ldrb.w	r4, [r1], #1
    b51c:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    b520:	3a01      	subs	r2, #1
    b522:	e7f5      	b.n	b510 <memcpy+0x12>

		mem_word_t *d_word = (mem_word_t *)d_byte;
		const mem_word_t *s_word = (const mem_word_t *)s_byte;

		while (n >= sizeof(mem_word_t)) {
			*(d_word++) = *(s_word++);
    b524:	f851 4b04 	ldr.w	r4, [r1], #4
    b528:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    b52c:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    b52e:	2a03      	cmp	r2, #3
    b530:	d8f8      	bhi.n	b524 <memcpy+0x26>
    b532:	e004      	b.n	b53e <memcpy+0x40>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    b534:	f811 4b01 	ldrb.w	r4, [r1], #1
    b538:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    b53c:	3a01      	subs	r2, #1
	while (n > 0) {
    b53e:	2a00      	cmp	r2, #0
    b540:	d1f8      	bne.n	b534 <memcpy+0x36>
	}

	return d;
}
    b542:	bc10      	pop	{r4}
    b544:	4770      	bx	lr

0000b546 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    b546:	b410      	push	{r4}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    b548:	b2cc      	uxtb	r4, r1
	unsigned char *d_byte = (unsigned char *)buf;
    b54a:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    b54c:	f013 0f03 	tst.w	r3, #3
    b550:	d004      	beq.n	b55c <memset+0x16>
		if (n == 0) {
    b552:	b19a      	cbz	r2, b57c <memset+0x36>
			return buf;
		}
		*(d_byte++) = c_byte;
    b554:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    b558:	3a01      	subs	r2, #1
    b55a:	e7f7      	b.n	b54c <memset+0x6>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    b55c:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    b55e:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    b562:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    b566:	2a03      	cmp	r2, #3
    b568:	d906      	bls.n	b578 <memset+0x32>
		*(d_word++) = c_word;
    b56a:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    b56e:	3a04      	subs	r2, #4
    b570:	e7f9      	b.n	b566 <memset+0x20>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
    b572:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    b576:	3a01      	subs	r2, #1
	while (n > 0) {
    b578:	2a00      	cmp	r2, #0
    b57a:	d1fa      	bne.n	b572 <memset+0x2c>
	}

	return buf;
}
    b57c:	bc10      	pop	{r4}
    b57e:	4770      	bx	lr

0000b580 <_stdout_hook_default>:
}
    b580:	f04f 30ff 	mov.w	r0, #4294967295
    b584:	4770      	bx	lr

0000b586 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    b586:	b084      	sub	sp, #16
    b588:	ab04      	add	r3, sp, #16
    b58a:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    b58e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    b592:	2b06      	cmp	r3, #6
    b594:	d001      	beq.n	b59a <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    b596:	b004      	add	sp, #16
    b598:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    b59a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b59e:	2201      	movs	r2, #1
    b5a0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    b5a4:	f3bf 8f4f 	dsb	sy
        __WFE();
    b5a8:	bf20      	wfe
    while (true)
    b5aa:	e7fd      	b.n	b5a8 <pm_power_state_set+0x22>

0000b5ac <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    b5ac:	b084      	sub	sp, #16
    b5ae:	ab04      	add	r3, sp, #16
    b5b0:	e903 0007 	stmdb	r3, {r0, r1, r2}
    b5b4:	2300      	movs	r3, #0
    b5b6:	f383 8811 	msr	BASEPRI, r3
    b5ba:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    b5be:	b004      	add	sp, #16
    b5c0:	4770      	bx	lr

0000b5c2 <check_buffer_size>:
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
    b5c2:	0049      	lsls	r1, r1, #1
	if (sequence->options) {
    b5c4:	6803      	ldr	r3, [r0, #0]
    b5c6:	b113      	cbz	r3, b5ce <check_buffer_size+0xc>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
    b5c8:	899b      	ldrh	r3, [r3, #12]
    b5ca:	fb03 1101 	mla	r1, r3, r1, r1
	if (sequence->buffer_size < needed_buffer_size) {
    b5ce:	68c3      	ldr	r3, [r0, #12]
    b5d0:	428b      	cmp	r3, r1
    b5d2:	d301      	bcc.n	b5d8 <check_buffer_size+0x16>
	return 0;
    b5d4:	2000      	movs	r0, #0
    b5d6:	4770      	bx	lr
		return -ENOMEM;
    b5d8:	f06f 000b 	mvn.w	r0, #11
}
    b5dc:	4770      	bx	lr

0000b5de <adc_context_on_timer_expired>:
{
    b5de:	b508      	push	{r3, lr}
	struct adc_context *ctx =
    b5e0:	3808      	subs	r0, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    b5e2:	f3bf 8f5b 	dmb	ish
    b5e6:	e850 3f00 	ldrex	r3, [r0]
    b5ea:	1c5a      	adds	r2, r3, #1
    b5ec:	e840 2100 	strex	r1, r2, [r0]
    b5f0:	2900      	cmp	r1, #0
    b5f2:	d1f8      	bne.n	b5e6 <adc_context_on_timer_expired+0x8>
    b5f4:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
    b5f8:	b11b      	cbz	r3, b602 <adc_context_on_timer_expired+0x24>
		ctx->status = -EBUSY;
    b5fa:	f06f 030f 	mvn.w	r3, #15
    b5fe:	6703      	str	r3, [r0, #112]	; 0x70
}
    b600:	bd08      	pop	{r3, pc}
		adc_context_start_sampling(ctx);
    b602:	f7f8 f981 	bl	3908 <adc_context_start_sampling>
    b606:	e7fb      	b.n	b600 <adc_context_on_timer_expired+0x22>

0000b608 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    b608:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    b60a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    b60e:	0089      	lsls	r1, r1, #2
    b610:	3140      	adds	r1, #64	; 0x40
}
    b612:	4408      	add	r0, r1
    b614:	4770      	bx	lr

0000b616 <get_sub_config>:
	const struct nrf_clock_control_config *config =
    b616:	6840      	ldr	r0, [r0, #4]
}
    b618:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    b61c:	4770      	bx	lr

0000b61e <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    b61e:	6900      	ldr	r0, [r0, #16]
}
    b620:	eb00 1041 	add.w	r0, r0, r1, lsl #5
    b624:	4770      	bx	lr

0000b626 <set_off_state>:
	__asm__ volatile(
    b626:	f04f 0320 	mov.w	r3, #32
    b62a:	f3ef 8211 	mrs	r2, BASEPRI
    b62e:	f383 8812 	msr	BASEPRI_MAX, r3
    b632:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    b636:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    b638:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    b63c:	d001      	beq.n	b642 <set_off_state+0x1c>
    b63e:	428b      	cmp	r3, r1
    b640:	d107      	bne.n	b652 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    b642:	2301      	movs	r3, #1
    b644:	6003      	str	r3, [r0, #0]
	int err = 0;
    b646:	2000      	movs	r0, #0
	__asm__ volatile(
    b648:	f382 8811 	msr	BASEPRI, r2
    b64c:	f3bf 8f6f 	isb	sy
}
    b650:	4770      	bx	lr
		err = -EPERM;
    b652:	f04f 30ff 	mov.w	r0, #4294967295
    b656:	e7f7      	b.n	b648 <set_off_state+0x22>

0000b658 <set_starting_state>:
{
    b658:	b410      	push	{r4}
	__asm__ volatile(
    b65a:	f04f 0320 	mov.w	r3, #32
    b65e:	f3ef 8211 	mrs	r2, BASEPRI
    b662:	f383 8812 	msr	BASEPRI_MAX, r3
    b666:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    b66a:	6803      	ldr	r3, [r0, #0]
    b66c:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    b670:	f003 0307 	and.w	r3, r3, #7
    b674:	2b01      	cmp	r3, #1
    b676:	d009      	beq.n	b68c <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
    b678:	428c      	cmp	r4, r1
    b67a:	d00a      	beq.n	b692 <set_starting_state+0x3a>
		err = -EPERM;
    b67c:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
    b680:	f382 8811 	msr	BASEPRI, r2
    b684:	f3bf 8f6f 	isb	sy
}
    b688:	bc10      	pop	{r4}
    b68a:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    b68c:	6001      	str	r1, [r0, #0]
	int err = 0;
    b68e:	2000      	movs	r0, #0
    b690:	e7f6      	b.n	b680 <set_starting_state+0x28>
		err = -EALREADY;
    b692:	f06f 0077 	mvn.w	r0, #119	; 0x77
    b696:	e7f3      	b.n	b680 <set_starting_state+0x28>

0000b698 <set_on_state>:
	__asm__ volatile(
    b698:	f04f 0320 	mov.w	r3, #32
    b69c:	f3ef 8211 	mrs	r2, BASEPRI
    b6a0:	f383 8812 	msr	BASEPRI_MAX, r3
    b6a4:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    b6a8:	6803      	ldr	r3, [r0, #0]
    b6aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    b6ae:	f043 0302 	orr.w	r3, r3, #2
    b6b2:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    b6b4:	f382 8811 	msr	BASEPRI, r2
    b6b8:	f3bf 8f6f 	isb	sy
}
    b6bc:	4770      	bx	lr

0000b6be <clkstarted_handle>:
{
    b6be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b6c0:	4606      	mov	r6, r0
    b6c2:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    b6c4:	f7ff ffa0 	bl	b608 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    b6c8:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    b6ca:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    b6cc:	2300      	movs	r3, #0
    b6ce:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    b6d2:	f7ff ffe1 	bl	b698 <set_on_state>
	if (callback) {
    b6d6:	b11d      	cbz	r5, b6e0 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    b6d8:	463a      	mov	r2, r7
    b6da:	4621      	mov	r1, r4
    b6dc:	4630      	mov	r0, r6
    b6de:	47a8      	blx	r5
}
    b6e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000b6e2 <async_start>:
{
    b6e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b6e6:	4606      	mov	r6, r0
    b6e8:	4690      	mov	r8, r2
    b6ea:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    b6ec:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    b6ee:	4629      	mov	r1, r5
    b6f0:	f7ff ff8a 	bl	b608 <get_sub_data>
    b6f4:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    b6f6:	9906      	ldr	r1, [sp, #24]
    b6f8:	3008      	adds	r0, #8
    b6fa:	f7ff ffad 	bl	b658 <set_starting_state>
	if (err < 0) {
    b6fe:	2800      	cmp	r0, #0
    b700:	db09      	blt.n	b716 <async_start+0x34>
	subdata->cb = cb;
    b702:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    b706:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    b708:	4629      	mov	r1, r5
    b70a:	4630      	mov	r0, r6
    b70c:	f7ff ff83 	bl	b616 <get_sub_config>
    b710:	6803      	ldr	r3, [r0, #0]
    b712:	4798      	blx	r3
	return 0;
    b714:	2000      	movs	r0, #0
}
    b716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000b71a <api_start>:
{
    b71a:	b510      	push	{r4, lr}
    b71c:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    b71e:	2480      	movs	r4, #128	; 0x80
    b720:	9400      	str	r4, [sp, #0]
    b722:	f7ff ffde 	bl	b6e2 <async_start>
}
    b726:	b002      	add	sp, #8
    b728:	bd10      	pop	{r4, pc}

0000b72a <onoff_started_callback>:
{
    b72a:	b510      	push	{r4, lr}
    b72c:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    b72e:	b2c9      	uxtb	r1, r1
    b730:	f7ff ff75 	bl	b61e <get_onoff_manager>
	notify(mgr, 0);
    b734:	2100      	movs	r1, #0
    b736:	47a0      	blx	r4
}
    b738:	bd10      	pop	{r4, pc}

0000b73a <hfclk_start>:
{
    b73a:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    b73c:	2001      	movs	r0, #1
    b73e:	f7fa f963 	bl	5a08 <nrfx_clock_start>
}
    b742:	bd08      	pop	{r3, pc}

0000b744 <lfclk_start>:
{
    b744:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    b746:	2000      	movs	r0, #0
    b748:	f7fa f95e 	bl	5a08 <nrfx_clock_start>
}
    b74c:	bd08      	pop	{r3, pc}

0000b74e <hfclk_stop>:
{
    b74e:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    b750:	2001      	movs	r0, #1
    b752:	f7fa f9bf 	bl	5ad4 <nrfx_clock_stop>
}
    b756:	bd08      	pop	{r3, pc}

0000b758 <lfclk_stop>:
{
    b758:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    b75a:	2000      	movs	r0, #0
    b75c:	f7fa f9ba 	bl	5ad4 <nrfx_clock_stop>
}
    b760:	bd08      	pop	{r3, pc}

0000b762 <api_stop>:
{
    b762:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    b764:	2280      	movs	r2, #128	; 0x80
    b766:	f7f8 fb6d 	bl	3e44 <stop>
}
    b76a:	bd08      	pop	{r3, pc}

0000b76c <blocking_start_callback>:
{
    b76c:	b508      	push	{r3, lr}
    b76e:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    b770:	f7fc fd68 	bl	8244 <z_impl_k_sem_give>
}
    b774:	bd08      	pop	{r3, pc}

0000b776 <get_pull>:
	if (flags & GPIO_PULL_UP) {
    b776:	f010 0f10 	tst.w	r0, #16
    b77a:	d104      	bne.n	b786 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    b77c:	f010 0f20 	tst.w	r0, #32
    b780:	d103      	bne.n	b78a <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    b782:	2000      	movs	r0, #0
    b784:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    b786:	2003      	movs	r0, #3
    b788:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    b78a:	2001      	movs	r0, #1
}
    b78c:	4770      	bx	lr

0000b78e <gpio_nrfx_port_get_raw>:
	return port->config;
    b78e:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    b790:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    b792:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    b796:	600b      	str	r3, [r1, #0]
}
    b798:	2000      	movs	r0, #0
    b79a:	4770      	bx	lr

0000b79c <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    b79c:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    b79e:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    b7a0:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    b7a4:	4042      	eors	r2, r0
    b7a6:	400a      	ands	r2, r1
    b7a8:	4042      	eors	r2, r0
    p_reg->OUT = value;
    b7aa:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    b7ae:	2000      	movs	r0, #0
    b7b0:	4770      	bx	lr

0000b7b2 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    b7b2:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    b7b4:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    b7b6:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
    b7ba:	2000      	movs	r0, #0
    b7bc:	4770      	bx	lr

0000b7be <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    b7be:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    b7c0:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    b7c2:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    b7c6:	2000      	movs	r0, #0
    b7c8:	4770      	bx	lr

0000b7ca <gpio_nrfx_port_toggle_bits>:
	return port->config;
    b7ca:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    b7cc:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    b7ce:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    b7d2:	404b      	eors	r3, r1
    p_reg->OUT = value;
    b7d4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    b7d8:	2000      	movs	r0, #0
    b7da:	4770      	bx	lr

0000b7dc <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    b7dc:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    b7e0:	d007      	beq.n	b7f2 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    b7e2:	f5b1 2fc0 	cmp.w	r1, #393216	; 0x60000
    b7e6:	d00d      	beq.n	b804 <get_trigger+0x28>
    b7e8:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
    b7ec:	d008      	beq.n	b800 <get_trigger+0x24>
    b7ee:	2001      	movs	r0, #1
}
    b7f0:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    b7f2:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
    b7f6:	d001      	beq.n	b7fc <get_trigger+0x20>
    b7f8:	2005      	movs	r0, #5
    b7fa:	4770      	bx	lr
    b7fc:	2004      	movs	r0, #4
    b7fe:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    b800:	2002      	movs	r0, #2
    b802:	4770      	bx	lr
    b804:	2003      	movs	r0, #3
    b806:	4770      	bx	lr

0000b808 <pwm_channel_map>:
{
    b808:	4602      	mov	r2, r0
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
    b80a:	2000      	movs	r0, #0
    b80c:	e001      	b.n	b812 <pwm_channel_map+0xa>
    b80e:	3001      	adds	r0, #1
    b810:	b2c0      	uxtb	r0, r0
    b812:	2803      	cmp	r0, #3
    b814:	d807      	bhi.n	b826 <pwm_channel_map+0x1e>
		if (output_pins[i] != NRFX_PWM_PIN_NOT_USED
    b816:	5c13      	ldrb	r3, [r2, r0]
    b818:	2bff      	cmp	r3, #255	; 0xff
    b81a:	d0f8      	beq.n	b80e <pwm_channel_map+0x6>
		    && (pwm == (output_pins[i] & PWM_NRFX_CH_PIN_MASK))) {
    b81c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    b820:	428b      	cmp	r3, r1
    b822:	d1f4      	bne.n	b80e <pwm_channel_map+0x6>
    b824:	e000      	b.n	b828 <pwm_channel_map+0x20>
	return NRF_PWM_CHANNEL_COUNT;
    b826:	2004      	movs	r0, #4
}
    b828:	4770      	bx	lr

0000b82a <pwm_channel_is_active>:
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
    b82a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    b82e:	8883      	ldrh	r3, [r0, #4]
	uint16_t pulse_cycle =
    b830:	f3c3 030e 	ubfx	r3, r3, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    b834:	b123      	cbz	r3, b840 <pwm_channel_is_active+0x16>
    b836:	898a      	ldrh	r2, [r1, #12]
    b838:	429a      	cmp	r2, r3
    b83a:	d803      	bhi.n	b844 <pwm_channel_is_active+0x1a>
    b83c:	2000      	movs	r0, #0
    b83e:	4770      	bx	lr
    b840:	2000      	movs	r0, #0
    b842:	4770      	bx	lr
    b844:	2001      	movs	r0, #1
}
    b846:	4770      	bx	lr

0000b848 <any_other_channel_is_active>:
{
    b848:	b570      	push	{r4, r5, r6, lr}
    b84a:	4605      	mov	r5, r0
    b84c:	460e      	mov	r6, r1
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
    b84e:	2400      	movs	r4, #0
    b850:	e001      	b.n	b856 <any_other_channel_is_active+0xe>
    b852:	3401      	adds	r4, #1
    b854:	b2e4      	uxtb	r4, r4
    b856:	2c03      	cmp	r4, #3
    b858:	d809      	bhi.n	b86e <any_other_channel_is_active+0x26>
		if (i != channel && pwm_channel_is_active(i, data)) {
    b85a:	42ac      	cmp	r4, r5
    b85c:	d0f9      	beq.n	b852 <any_other_channel_is_active+0xa>
    b85e:	4631      	mov	r1, r6
    b860:	4620      	mov	r0, r4
    b862:	f7ff ffe2 	bl	b82a <pwm_channel_is_active>
    b866:	4603      	mov	r3, r0
    b868:	2800      	cmp	r0, #0
    b86a:	d0f2      	beq.n	b852 <any_other_channel_is_active+0xa>
    b86c:	e000      	b.n	b870 <any_other_channel_is_active+0x28>
	return false;
    b86e:	2300      	movs	r3, #0
}
    b870:	4618      	mov	r0, r3
    b872:	bd70      	pop	{r4, r5, r6, pc}

0000b874 <endtx_isr>:
	return dev->config;
    b874:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b876:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    b878:	f04f 0120 	mov.w	r1, #32
    b87c:	f3ef 8211 	mrs	r2, BASEPRI
    b880:	f381 8812 	msr	BASEPRI_MAX, r1
    b884:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b888:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    b88c:	b131      	cbz	r1, b89c <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b88e:	2100      	movs	r1, #0
    b890:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    b894:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b898:	2101      	movs	r1, #1
    b89a:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    b89c:	f382 8811 	msr	BASEPRI, r2
    b8a0:	f3bf 8f6f 	isb	sy
}
    b8a4:	4770      	bx	lr

0000b8a6 <uarte_nrfx_isr_int>:
{
    b8a6:	b538      	push	{r3, r4, r5, lr}
    b8a8:	4604      	mov	r4, r0
	return dev->config;
    b8aa:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b8ac:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    b8ae:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    b8b2:	f413 7f80 	tst.w	r3, #256	; 0x100
    b8b6:	d002      	beq.n	b8be <uarte_nrfx_isr_int+0x18>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b8b8:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    b8bc:	b9db      	cbnz	r3, b8f6 <uarte_nrfx_isr_int+0x50>
	return dev->config;
    b8be:	6863      	ldr	r3, [r4, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    b8c0:	685b      	ldr	r3, [r3, #4]
    b8c2:	f013 0f10 	tst.w	r3, #16
    b8c6:	d015      	beq.n	b8f4 <uarte_nrfx_isr_int+0x4e>
	__asm__ volatile(
    b8c8:	f04f 0220 	mov.w	r2, #32
    b8cc:	f3ef 8311 	mrs	r3, BASEPRI
    b8d0:	f382 8812 	msr	BASEPRI_MAX, r2
    b8d4:	f3bf 8f6f 	isb	sy
    b8d8:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    b8dc:	b112      	cbz	r2, b8e4 <uarte_nrfx_isr_int+0x3e>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    b8de:	2200      	movs	r2, #0
    b8e0:	f8c5 2500 	str.w	r2, [r5, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    b8e4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    b8e8:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
	__asm__ volatile(
    b8ec:	f383 8811 	msr	BASEPRI, r3
    b8f0:	f3bf 8f6f 	isb	sy
}
    b8f4:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
    b8f6:	f7ff ffbd 	bl	b874 <endtx_isr>
    b8fa:	e7e0      	b.n	b8be <uarte_nrfx_isr_int+0x18>

0000b8fc <uarte_nrfx_configure>:
{
    b8fc:	b570      	push	{r4, r5, r6, lr}
    b8fe:	b082      	sub	sp, #8
    b900:	4605      	mov	r5, r0
    b902:	460c      	mov	r4, r1
	switch (cfg->stop_bits) {
    b904:	794b      	ldrb	r3, [r1, #5]
    b906:	2b01      	cmp	r3, #1
    b908:	d006      	beq.n	b918 <uarte_nrfx_configure+0x1c>
    b90a:	2b03      	cmp	r3, #3
    b90c:	d011      	beq.n	b932 <uarte_nrfx_configure+0x36>
    b90e:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    b912:	4618      	mov	r0, r3
    b914:	b002      	add	sp, #8
    b916:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    b918:	2300      	movs	r3, #0
    b91a:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    b91e:	79a3      	ldrb	r3, [r4, #6]
    b920:	2b03      	cmp	r3, #3
    b922:	d138      	bne.n	b996 <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
    b924:	79e3      	ldrb	r3, [r4, #7]
    b926:	b143      	cbz	r3, b93a <uarte_nrfx_configure+0x3e>
    b928:	2b01      	cmp	r3, #1
    b92a:	d010      	beq.n	b94e <uarte_nrfx_configure+0x52>
    b92c:	f06f 0385 	mvn.w	r3, #133	; 0x85
    b930:	e7ef      	b.n	b912 <uarte_nrfx_configure+0x16>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    b932:	2310      	movs	r3, #16
    b934:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
    b938:	e7f1      	b.n	b91e <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    b93a:	2300      	movs	r3, #0
    b93c:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
    b940:	7923      	ldrb	r3, [r4, #4]
    b942:	b143      	cbz	r3, b956 <uarte_nrfx_configure+0x5a>
    b944:	2b02      	cmp	r3, #2
    b946:	d022      	beq.n	b98e <uarte_nrfx_configure+0x92>
    b948:	f06f 0385 	mvn.w	r3, #133	; 0x85
    b94c:	e7e1      	b.n	b912 <uarte_nrfx_configure+0x16>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    b94e:	2301      	movs	r3, #1
    b950:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    b954:	e7f4      	b.n	b940 <uarte_nrfx_configure+0x44>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    b956:	2300      	movs	r3, #0
    b958:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    b95c:	6821      	ldr	r1, [r4, #0]
    b95e:	4628      	mov	r0, r5
    b960:	f7f9 f820 	bl	49a4 <baudrate_set>
    b964:	4603      	mov	r3, r0
    b966:	b9c8      	cbnz	r0, b99c <uarte_nrfx_configure+0xa0>
	return dev->config;
    b968:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
    b96a:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    b96c:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
    b970:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
    b974:	f89d 2004 	ldrb.w	r2, [sp, #4]
    b978:	4331      	orrs	r1, r6
    b97a:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    b97c:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	return dev->data;
    b980:	692a      	ldr	r2, [r5, #16]
	get_dev_data(dev)->uart_config = *cfg;
    b982:	3204      	adds	r2, #4
    b984:	e894 0003 	ldmia.w	r4, {r0, r1}
    b988:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
    b98c:	e7c1      	b.n	b912 <uarte_nrfx_configure+0x16>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    b98e:	230e      	movs	r3, #14
    b990:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
    b994:	e7e2      	b.n	b95c <uarte_nrfx_configure+0x60>
		return -ENOTSUP;
    b996:	f06f 0385 	mvn.w	r3, #133	; 0x85
    b99a:	e7ba      	b.n	b912 <uarte_nrfx_configure+0x16>
		return -ENOTSUP;
    b99c:	f06f 0385 	mvn.w	r3, #133	; 0x85
    b9a0:	e7b7      	b.n	b912 <uarte_nrfx_configure+0x16>

0000b9a2 <uarte_nrfx_config_get>:
{
    b9a2:	460b      	mov	r3, r1
	return dev->data;
    b9a4:	6902      	ldr	r2, [r0, #16]
	*cfg = get_dev_data(dev)->uart_config;
    b9a6:	6891      	ldr	r1, [r2, #8]
    b9a8:	6850      	ldr	r0, [r2, #4]
    b9aa:	e883 0003 	stmia.w	r3, {r0, r1}
}
    b9ae:	2000      	movs	r0, #0
    b9b0:	4770      	bx	lr

0000b9b2 <uarte_nrfx_err_check>:
	return dev->config;
    b9b2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b9b4:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    b9b6:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    b9ba:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    b9be:	4770      	bx	lr

0000b9c0 <is_tx_ready>:
	return dev->config;
    b9c0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b9c2:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    b9c4:	685b      	ldr	r3, [r3, #4]
    b9c6:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b9ca:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    b9ce:	b929      	cbnz	r1, b9dc <is_tx_ready+0x1c>
    b9d0:	b933      	cbnz	r3, b9e0 <is_tx_ready+0x20>
    b9d2:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    b9d6:	b92b      	cbnz	r3, b9e4 <is_tx_ready+0x24>
    b9d8:	2000      	movs	r0, #0
    b9da:	4770      	bx	lr
    b9dc:	2001      	movs	r0, #1
    b9de:	4770      	bx	lr
    b9e0:	2000      	movs	r0, #0
    b9e2:	4770      	bx	lr
    b9e4:	2001      	movs	r0, #1
}
    b9e6:	4770      	bx	lr

0000b9e8 <uarte_enable>:
	return dev->config;
    b9e8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b9ea:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    b9ec:	2208      	movs	r2, #8
    b9ee:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    b9f2:	4770      	bx	lr

0000b9f4 <tx_start>:
{
    b9f4:	b510      	push	{r4, lr}
	return dev->config;
    b9f6:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b9f8:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    b9fa:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    b9fe:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ba02:	2300      	movs	r3, #0
    ba04:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    ba08:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    ba0c:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
    ba10:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	return dev->config;
    ba14:	6843      	ldr	r3, [r0, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    ba16:	685b      	ldr	r3, [r3, #4]
    ba18:	f013 0f10 	tst.w	r3, #16
    ba1c:	d102      	bne.n	ba24 <tx_start+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ba1e:	2301      	movs	r3, #1
    ba20:	60a3      	str	r3, [r4, #8]
}
    ba22:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    ba24:	2101      	movs	r1, #1
    ba26:	f7ff ffdf 	bl	b9e8 <uarte_enable>
    p_reg->INTENSET = mask;
    ba2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    ba2e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    ba32:	e7f4      	b.n	ba1e <tx_start+0x2a>

0000ba34 <uarte_nrfx_poll_in>:
{
    ba34:	b410      	push	{r4}
	return dev->data;
    ba36:	6904      	ldr	r4, [r0, #16]
	return dev->config;
    ba38:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    ba3a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ba3c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    ba40:	b152      	cbz	r2, ba58 <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
    ba42:	7c62      	ldrb	r2, [r4, #17]
    ba44:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ba46:	2000      	movs	r0, #0
    ba48:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    ba4c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ba50:	2201      	movs	r2, #1
    ba52:	601a      	str	r2, [r3, #0]
}
    ba54:	bc10      	pop	{r4}
    ba56:	4770      	bx	lr
		return -1;
    ba58:	f04f 30ff 	mov.w	r0, #4294967295
    ba5c:	e7fa      	b.n	ba54 <uarte_nrfx_poll_in+0x20>

0000ba5e <wait_tx_ready>:
{
    ba5e:	b570      	push	{r4, r5, r6, lr}
    ba60:	4606      	mov	r6, r0
    ba62:	e014      	b.n	ba8e <wait_tx_ready+0x30>
		if (res) {
    ba64:	b17d      	cbz	r5, ba86 <wait_tx_ready+0x28>
	__asm__ volatile(
    ba66:	f04f 0320 	mov.w	r3, #32
    ba6a:	f3ef 8411 	mrs	r4, BASEPRI
    ba6e:	f383 8812 	msr	BASEPRI_MAX, r3
    ba72:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    ba76:	4630      	mov	r0, r6
    ba78:	f7ff ffa2 	bl	b9c0 <is_tx_ready>
    ba7c:	b9a0      	cbnz	r0, baa8 <wait_tx_ready+0x4a>
	__asm__ volatile(
    ba7e:	f384 8811 	msr	BASEPRI, r4
    ba82:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
    ba86:	2021      	movs	r0, #33	; 0x21
    ba88:	2100      	movs	r1, #0
    ba8a:	f7fd fefd 	bl	9888 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    ba8e:	2464      	movs	r4, #100	; 0x64
    ba90:	4630      	mov	r0, r6
    ba92:	f7ff ff95 	bl	b9c0 <is_tx_ready>
    ba96:	4605      	mov	r5, r0
    ba98:	2800      	cmp	r0, #0
    ba9a:	d1e3      	bne.n	ba64 <wait_tx_ready+0x6>
    ba9c:	2001      	movs	r0, #1
    ba9e:	f000 f8f8 	bl	bc92 <nrfx_busy_wait>
    baa2:	3c01      	subs	r4, #1
    baa4:	d1f4      	bne.n	ba90 <wait_tx_ready+0x32>
    baa6:	e7dd      	b.n	ba64 <wait_tx_ready+0x6>
}
    baa8:	4620      	mov	r0, r4
    baaa:	bd70      	pop	{r4, r5, r6, pc}

0000baac <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    baac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    baae:	4604      	mov	r4, r0
	return dev->config;
    bab0:	6846      	ldr	r6, [r0, #4]
	return config->uarte_regs;
    bab2:	6835      	ldr	r5, [r6, #0]
	return dev->data;
    bab4:	6907      	ldr	r7, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    bab6:	2100      	movs	r1, #0
    bab8:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    babc:	6038      	str	r0, [r7, #0]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
		return err;
	}
#else
	uarte_nrfx_pins_configure(dev, false);
    babe:	f7f9 f875 	bl	4bac <uarte_nrfx_pins_configure>
	return dev->data;
    bac2:	6921      	ldr	r1, [r4, #16]
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    bac4:	3104      	adds	r1, #4
    bac6:	4620      	mov	r0, r4
    bac8:	f7ff ff18 	bl	b8fc <uarte_nrfx_configure>
	if (err) {
    bacc:	4604      	mov	r4, r0
    bace:	bb68      	cbnz	r0, bb2c <uarte_instance_init+0x80>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    bad0:	6873      	ldr	r3, [r6, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    bad2:	f013 0f02 	tst.w	r3, #2
    bad6:	d12b      	bne.n	bb30 <uarte_instance_init+0x84>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    bad8:	2308      	movs	r3, #8
    bada:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    bade:	7a33      	ldrb	r3, [r6, #8]
    bae0:	b95b      	cbnz	r3, bafa <uarte_instance_init+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    bae2:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    bae6:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    baea:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    baee:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    baf2:	2301      	movs	r3, #1
    baf4:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    baf8:	602b      	str	r3, [r5, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    bafa:	6873      	ldr	r3, [r6, #4]
    bafc:	f013 0f02 	tst.w	r3, #2
    bb00:	d103      	bne.n	bb0a <uarte_instance_init+0x5e>
    p_reg->INTENSET = mask;
    bb02:	f44f 7380 	mov.w	r3, #256	; 0x100
    bb06:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    bb0a:	6873      	ldr	r3, [r6, #4]
    bb0c:	f013 0f10 	tst.w	r3, #16
    bb10:	d003      	beq.n	bb1a <uarte_instance_init+0x6e>
    bb12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    bb16:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    bb1a:	3710      	adds	r7, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    bb1c:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    bb20:	2300      	movs	r3, #0
    bb22:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    bb26:	2301      	movs	r3, #1
    bb28:	60ab      	str	r3, [r5, #8]
    bb2a:	60eb      	str	r3, [r5, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    bb2c:	4620      	mov	r0, r4
    bb2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    bb30:	4639      	mov	r1, r7
    bb32:	4628      	mov	r0, r5
    bb34:	f7f9 f816 	bl	4b64 <endtx_stoptx_ppi_init>
		if (err < 0) {
    bb38:	2800      	cmp	r0, #0
    bb3a:	dacd      	bge.n	bad8 <uarte_instance_init+0x2c>
			return err;
    bb3c:	4604      	mov	r4, r0
    bb3e:	e7f5      	b.n	bb2c <uarte_instance_init+0x80>

0000bb40 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    bb40:	b510      	push	{r4, lr}
    bb42:	4604      	mov	r4, r0
    bb44:	2200      	movs	r2, #0
    bb46:	2101      	movs	r1, #1
    bb48:	2002      	movs	r0, #2
    bb4a:	f7f7 f94d 	bl	2de8 <z_arm_irq_priority_set>
    bb4e:	2002      	movs	r0, #2
    bb50:	f7f7 f92c 	bl	2dac <arch_irq_enable>
    bb54:	2100      	movs	r1, #0
    bb56:	4620      	mov	r0, r4
    bb58:	f7ff ffa8 	bl	baac <uarte_instance_init>
    bb5c:	bd10      	pop	{r4, pc}

0000bb5e <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    bb5e:	b510      	push	{r4, lr}
    bb60:	4604      	mov	r4, r0
    bb62:	2200      	movs	r2, #0
    bb64:	2101      	movs	r1, #1
    bb66:	2028      	movs	r0, #40	; 0x28
    bb68:	f7f7 f93e 	bl	2de8 <z_arm_irq_priority_set>
    bb6c:	2028      	movs	r0, #40	; 0x28
    bb6e:	f7f7 f91d 	bl	2dac <arch_irq_enable>
    bb72:	2100      	movs	r1, #0
    bb74:	4620      	mov	r0, r4
    bb76:	f7ff ff99 	bl	baac <uarte_instance_init>
    bb7a:	bd10      	pop	{r4, pc}

0000bb7c <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    bb7c:	4770      	bx	lr

0000bb7e <counter_sub>:
	return (a - b) & COUNTER_MAX;
    bb7e:	1a40      	subs	r0, r0, r1
}
    bb80:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    bb84:	4770      	bx	lr

0000bb86 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    bb86:	f100 0350 	add.w	r3, r0, #80	; 0x50
    bb8a:	009b      	lsls	r3, r3, #2
    bb8c:	b29b      	uxth	r3, r3
    bb8e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    bb92:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    bb96:	2200      	movs	r2, #0
    bb98:	601a      	str	r2, [r3, #0]
    bb9a:	681b      	ldr	r3, [r3, #0]
}
    bb9c:	4770      	bx	lr

0000bb9e <absolute_time_to_cc>:
}
    bb9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    bba2:	4770      	bx	lr

0000bba4 <full_int_lock>:
	__asm__ volatile(
    bba4:	f04f 0320 	mov.w	r3, #32
    bba8:	f3ef 8011 	mrs	r0, BASEPRI
    bbac:	f383 8812 	msr	BASEPRI_MAX, r3
    bbb0:	f3bf 8f6f 	isb	sy
}
    bbb4:	4770      	bx	lr

0000bbb6 <full_int_unlock>:
	__asm__ volatile(
    bbb6:	f380 8811 	msr	BASEPRI, r0
    bbba:	f3bf 8f6f 	isb	sy
}
    bbbe:	4770      	bx	lr

0000bbc0 <set_absolute_alarm>:
{
    bbc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bbc2:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    bbc4:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    bbc8:	f7f9 fad6 	bl	5178 <get_comparator>
    bbcc:	4607      	mov	r7, r0
    bbce:	e019      	b.n	bc04 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    bbd0:	2013      	movs	r0, #19
    bbd2:	f000 f98e 	bl	bef2 <z_impl_k_busy_wait>
}
    bbd6:	e022      	b.n	bc1e <set_absolute_alarm+0x5e>
		event_clear(chan);
    bbd8:	4630      	mov	r0, r6
    bbda:	f7ff ffd4 	bl	bb86 <event_clear>
		event_enable(chan);
    bbde:	4630      	mov	r0, r6
    bbe0:	f7f9 fad2 	bl	5188 <event_enable>
		set_comparator(chan, cc_val);
    bbe4:	4629      	mov	r1, r5
    bbe6:	4630      	mov	r0, r6
    bbe8:	f7f9 fabc 	bl	5164 <set_comparator>
		now2 = counter();
    bbec:	f7f9 fae0 	bl	51b0 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    bbf0:	4284      	cmp	r4, r0
    bbf2:	d01e      	beq.n	bc32 <set_absolute_alarm+0x72>
    bbf4:	1c81      	adds	r1, r0, #2
    bbf6:	4628      	mov	r0, r5
    bbf8:	f7ff ffc1 	bl	bb7e <counter_sub>
	} while ((now2 != now) &&
    bbfc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    bc00:	d917      	bls.n	bc32 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    bc02:	462f      	mov	r7, r5
		now = counter();
    bc04:	f7f9 fad4 	bl	51b0 <counter>
    bc08:	4604      	mov	r4, r0
		set_comparator(chan, now);
    bc0a:	4601      	mov	r1, r0
    bc0c:	4630      	mov	r0, r6
    bc0e:	f7f9 faa9 	bl	5164 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    bc12:	4621      	mov	r1, r4
    bc14:	4638      	mov	r0, r7
    bc16:	f7ff ffb2 	bl	bb7e <counter_sub>
    bc1a:	2801      	cmp	r0, #1
    bc1c:	d0d8      	beq.n	bbd0 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    bc1e:	1ca7      	adds	r7, r4, #2
    bc20:	4639      	mov	r1, r7
    bc22:	4628      	mov	r0, r5
    bc24:	f7ff ffab 	bl	bb7e <counter_sub>
    bc28:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    bc2c:	d9d4      	bls.n	bbd8 <set_absolute_alarm+0x18>
			cc_val = now + 2;
    bc2e:	463d      	mov	r5, r7
    bc30:	e7d2      	b.n	bbd8 <set_absolute_alarm+0x18>
}
    bc32:	4628      	mov	r0, r5
    bc34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000bc36 <compare_set>:
{
    bc36:	b5f0      	push	{r4, r5, r6, r7, lr}
    bc38:	b083      	sub	sp, #12
    bc3a:	4604      	mov	r4, r0
    bc3c:	4617      	mov	r7, r2
    bc3e:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    bc40:	f7f9 fabc 	bl	51bc <compare_int_lock>
    bc44:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    bc46:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bc48:	9301      	str	r3, [sp, #4]
    bc4a:	9b08      	ldr	r3, [sp, #32]
    bc4c:	9300      	str	r3, [sp, #0]
    bc4e:	463a      	mov	r2, r7
    bc50:	462b      	mov	r3, r5
    bc52:	4620      	mov	r0, r4
    bc54:	f7f9 fba0 	bl	5398 <compare_set_nolocks>
    bc58:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    bc5a:	4631      	mov	r1, r6
    bc5c:	4620      	mov	r0, r4
    bc5e:	f7f9 fb11 	bl	5284 <compare_int_unlock>
}
    bc62:	4628      	mov	r0, r5
    bc64:	b003      	add	sp, #12
    bc66:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000bc68 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    bc68:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    bc6a:	2000      	movs	r0, #0
    bc6c:	f7f7 fd54 	bl	3718 <sys_arch_reboot>

0000bc70 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
    bc70:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    bc72:	f7fe ffe1 	bl	ac38 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
    bc76:	bd08      	pop	{r3, pc}

0000bc78 <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
    bc78:	b510      	push	{r4, lr}
    bc7a:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    bc7c:	f7f6 ffa6 	bl	2bcc <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    bc80:	f7f7 f862 	bl	2d48 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
    bc84:	4620      	mov	r0, r4
    bc86:	f7ff fff3 	bl	bc70 <hw_cc3xx_init_internal>
	return res;
}
    bc8a:	bd10      	pop	{r4, pc}

0000bc8c <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
    bc8c:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    bc8e:	4780      	blx	r0
}
    bc90:	bd08      	pop	{r3, pc}

0000bc92 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    bc92:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    bc94:	f000 f92d 	bl	bef2 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
    bc98:	bd08      	pop	{r3, pc}

0000bc9a <pin_is_task_output>:
{
    bc9a:	b510      	push	{r4, lr}
    bc9c:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    bc9e:	f7fa f847 	bl	5d30 <pin_is_output>
    bca2:	b128      	cbz	r0, bcb0 <pin_is_task_output+0x16>
    bca4:	4620      	mov	r0, r4
    bca6:	f7fa f82d 	bl	5d04 <pin_in_use_by_te>
    bcaa:	b118      	cbz	r0, bcb4 <pin_is_task_output+0x1a>
    bcac:	2001      	movs	r0, #1
    bcae:	e000      	b.n	bcb2 <pin_is_task_output+0x18>
    bcb0:	2000      	movs	r0, #0
}
    bcb2:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    bcb4:	2000      	movs	r0, #0
    bcb6:	e7fc      	b.n	bcb2 <pin_is_task_output+0x18>

0000bcb8 <pin_is_input>:
{
    bcb8:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    bcba:	f7fa f839 	bl	5d30 <pin_is_output>
    bcbe:	f080 0001 	eor.w	r0, r0, #1
}
    bcc2:	b2c0      	uxtb	r0, r0
    bcc4:	bd08      	pop	{r3, pc}

0000bcc6 <gpiote_polarity_to_trigger>:
}
    bcc6:	4770      	bx	lr

0000bcc8 <gpiote_trigger_to_polarity>:
}
    bcc8:	4770      	bx	lr

0000bcca <is_level>:
}
    bcca:	2803      	cmp	r0, #3
    bccc:	bf94      	ite	ls
    bcce:	2000      	movls	r0, #0
    bcd0:	2001      	movhi	r0, #1
    bcd2:	4770      	bx	lr

0000bcd4 <start_playback>:
{
    bcd4:	b410      	push	{r4}
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    bcd6:	2402      	movs	r4, #2
    bcd8:	720c      	strb	r4, [r1, #8]
    p_cb->flags = flags;
    bcda:	724a      	strb	r2, [r1, #9]
    if (p_cb->handler)
    bcdc:	6809      	ldr	r1, [r1, #0]
    bcde:	b181      	cbz	r1, bd02 <start_playback+0x2e>
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ0)
    bce0:	f012 0f04 	tst.w	r2, #4
    bce4:	d11c      	bne.n	bd20 <start_playback+0x4c>
        uint32_t int_mask = NRF_PWM_INT_LOOPSDONE_MASK |
    bce6:	2182      	movs	r1, #130	; 0x82
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ1)
    bce8:	f012 0f08 	tst.w	r2, #8
    bcec:	d001      	beq.n	bcf2 <start_playback+0x1e>
            int_mask |= NRF_PWM_INT_SEQEND1_MASK;
    bcee:	f041 0120 	orr.w	r1, r1, #32
        if (flags & NRFX_PWM_FLAG_NO_EVT_FINISHED)
    bcf2:	f012 0f10 	tst.w	r2, #16
    bcf6:	d001      	beq.n	bcfc <start_playback+0x28>
            int_mask &= ~NRF_PWM_INT_LOOPSDONE_MASK;
    bcf8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
        nrf_pwm_int_set(p_instance->p_registers, int_mask);
    bcfc:	6804      	ldr	r4, [r0, #0]
    p_reg->INTEN = mask;
    bcfe:	f8c4 1300 	str.w	r1, [r4, #768]	; 0x300
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_STOPPED);
    bd02:	6801      	ldr	r1, [r0, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    bd04:	2400      	movs	r4, #0
    bd06:	f8c1 4104 	str.w	r4, [r1, #260]	; 0x104
    bd0a:	f8d1 1104 	ldr.w	r1, [r1, #260]	; 0x104
    if (flags & NRFX_PWM_FLAG_START_VIA_TASK)
    bd0e:	f012 0f80 	tst.w	r2, #128	; 0x80
    bd12:	d107      	bne.n	bd24 <start_playback+0x50>
    nrf_pwm_task_trigger(p_instance->p_registers, starting_task);
    bd14:	6802      	ldr	r2, [r0, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    bd16:	2101      	movs	r1, #1
    bd18:	50d1      	str	r1, [r2, r3]
    return 0;
    bd1a:	2000      	movs	r0, #0
}
    bd1c:	bc10      	pop	{r4}
    bd1e:	4770      	bx	lr
            int_mask |= NRF_PWM_INT_SEQEND0_MASK;
    bd20:	2192      	movs	r1, #146	; 0x92
    bd22:	e7e1      	b.n	bce8 <start_playback+0x14>
            nrf_pwm_task_address_get(p_instance->p_registers, starting_task);
    bd24:	6800      	ldr	r0, [r0, #0]
    return ((uint32_t)p_reg + (uint32_t)task);
    bd26:	4418      	add	r0, r3
        return starting_task_address;
    bd28:	e7f8      	b.n	bd1c <start_playback+0x48>

0000bd2a <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    bd2a:	b508      	push	{r3, lr}
  _DoInit();
    bd2c:	f7fb fb68 	bl	7400 <_DoInit>
}
    bd30:	bd08      	pop	{r3, pc}

0000bd32 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    bd32:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    bd34:	f7ff fff9 	bl	bd2a <SEGGER_RTT_Init>

	return 0;
}
    bd38:	2000      	movs	r0, #0
    bd3a:	bd08      	pop	{r3, pc}

0000bd3c <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    bd3c:	b148      	cbz	r0, bd52 <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    bd3e:	68c3      	ldr	r3, [r0, #12]
    bd40:	8818      	ldrh	r0, [r3, #0]
    bd42:	f3c0 0008 	ubfx	r0, r0, #0, #9
    bd46:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    bd4a:	bf14      	ite	ne
    bd4c:	2000      	movne	r0, #0
    bd4e:	2001      	moveq	r0, #1
    bd50:	4770      	bx	lr
		return false;
    bd52:	2000      	movs	r0, #0
}
    bd54:	4770      	bx	lr

0000bd56 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    bd56:	6902      	ldr	r2, [r0, #16]
    bd58:	6943      	ldr	r3, [r0, #20]
    bd5a:	431a      	orrs	r2, r3
    bd5c:	f012 0203 	ands.w	r2, r2, #3
    bd60:	d10d      	bne.n	bd7e <create_free_list+0x28>
	slab->free_list = NULL;
    bd62:	2100      	movs	r1, #0
    bd64:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    bd66:	e005      	b.n	bd74 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    bd68:	6981      	ldr	r1, [r0, #24]
    bd6a:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    bd6c:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
    bd6e:	6901      	ldr	r1, [r0, #16]
    bd70:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    bd72:	3201      	adds	r2, #1
    bd74:	68c1      	ldr	r1, [r0, #12]
    bd76:	4291      	cmp	r1, r2
    bd78:	d8f6      	bhi.n	bd68 <create_free_list+0x12>
	return 0;
    bd7a:	2000      	movs	r0, #0
    bd7c:	4770      	bx	lr
		return -EINVAL;
    bd7e:	f06f 0015 	mvn.w	r0, #21
}
    bd82:	4770      	bx	lr

0000bd84 <k_mem_slab_init>:
{
    bd84:	b510      	push	{r4, lr}
    bd86:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    bd88:	60c3      	str	r3, [r0, #12]
	slab->block_size = block_size;
    bd8a:	6102      	str	r2, [r0, #16]
	slab->buffer = buffer;
    bd8c:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
    bd8e:	2300      	movs	r3, #0
    bd90:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    bd92:	6083      	str	r3, [r0, #8]
	rc = create_free_list(slab);
    bd94:	f7ff ffdf 	bl	bd56 <create_free_list>
	if (rc < 0) {
    bd98:	2800      	cmp	r0, #0
    bd9a:	db01      	blt.n	bda0 <k_mem_slab_init+0x1c>
	list->head = (sys_dnode_t *)list;
    bd9c:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    bd9e:	6064      	str	r4, [r4, #4]
}
    bda0:	bd10      	pop	{r4, pc}

0000bda2 <setup_thread_stack>:
{
    bda2:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    bda4:	3207      	adds	r2, #7
    bda6:	f022 0207 	bic.w	r2, r2, #7
    bdaa:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    bdae:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    bdb2:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
	new_thread->stack_info.size = stack_buf_size;
    bdb6:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	new_thread->stack_info.delta = delta;
    bdba:	2200      	movs	r2, #0
    bdbc:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
}
    bdc0:	18c8      	adds	r0, r1, r3
    bdc2:	bc10      	pop	{r4}
    bdc4:	4770      	bx	lr

0000bdc6 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    bdc6:	f3ef 8005 	mrs	r0, IPSR
}
    bdca:	3800      	subs	r0, #0
    bdcc:	bf18      	it	ne
    bdce:	2001      	movne	r0, #1
    bdd0:	4770      	bx	lr

0000bdd2 <z_impl_k_thread_start>:
{
    bdd2:	b508      	push	{r3, lr}
	z_sched_start(thread);
    bdd4:	f7fc ff58 	bl	8c88 <z_sched_start>
}
    bdd8:	bd08      	pop	{r3, pc}

0000bdda <z_init_thread_base>:
{
    bdda:	b410      	push	{r4}
	thread_base->pended_on = NULL;
    bddc:	2400      	movs	r4, #0
    bdde:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    bde0:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    bde2:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
    bde4:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
    bde6:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    bde8:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    bdea:	61c4      	str	r4, [r0, #28]
}
    bdec:	bc10      	pop	{r4}
    bdee:	4770      	bx	lr

0000bdf0 <z_pm_save_idle_exit>:
{
    bdf0:	b508      	push	{r3, lr}
	pm_system_resume();
    bdf2:	f7f6 fd53 	bl	289c <pm_system_resume>
	sys_clock_idle_exit();
    bdf6:	f7ff fec1 	bl	bb7c <sys_clock_idle_exit>
}
    bdfa:	bd08      	pop	{r3, pc}

0000bdfc <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    bdfc:	4288      	cmp	r0, r1
    bdfe:	da00      	bge.n	be02 <new_prio_for_inheritance+0x6>
    be00:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    be02:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    be06:	db01      	blt.n	be0c <new_prio_for_inheritance+0x10>
    be08:	4608      	mov	r0, r1
    be0a:	4770      	bx	lr
    be0c:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    be10:	4770      	bx	lr

0000be12 <adjust_owner_prio>:
{
    be12:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    be14:	6880      	ldr	r0, [r0, #8]
    be16:	f990 300e 	ldrsb.w	r3, [r0, #14]
    be1a:	428b      	cmp	r3, r1
    be1c:	d101      	bne.n	be22 <adjust_owner_prio+0x10>
	return false;
    be1e:	2000      	movs	r0, #0
}
    be20:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    be22:	f7fd f8e3 	bl	8fec <z_set_prio>
    be26:	e7fb      	b.n	be20 <adjust_owner_prio+0xe>

0000be28 <z_impl_k_mutex_init>:
{
    be28:	4603      	mov	r3, r0
	mutex->owner = NULL;
    be2a:	2000      	movs	r0, #0
    be2c:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    be2e:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    be30:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    be32:	605b      	str	r3, [r3, #4]
}
    be34:	4770      	bx	lr

0000be36 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    be36:	b15a      	cbz	r2, be50 <z_impl_k_sem_init+0x1a>
    be38:	428a      	cmp	r2, r1
    be3a:	d30c      	bcc.n	be56 <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
    be3c:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
    be3e:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
    be40:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
    be42:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
    be44:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
    be48:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
    be4a:	6143      	str	r3, [r0, #20]
	return 0;
    be4c:	2000      	movs	r0, #0
    be4e:	4770      	bx	lr
		return -EINVAL;
    be50:	f06f 0015 	mvn.w	r0, #21
    be54:	4770      	bx	lr
    be56:	f06f 0015 	mvn.w	r0, #21
}
    be5a:	4770      	bx	lr

0000be5c <thread_active_elsewhere>:
}
    be5c:	2000      	movs	r0, #0
    be5e:	4770      	bx	lr

0000be60 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    be60:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    be64:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    be68:	4283      	cmp	r3, r0
    be6a:	d001      	beq.n	be70 <z_sched_prio_cmp+0x10>
		return b2 - b1;
    be6c:	1ac0      	subs	r0, r0, r3
    be6e:	4770      	bx	lr
	return 0;
    be70:	2000      	movs	r0, #0
}
    be72:	4770      	bx	lr

0000be74 <z_reschedule_irqlock>:
{
    be74:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    be76:	4603      	mov	r3, r0
    be78:	b920      	cbnz	r0, be84 <z_reschedule_irqlock+0x10>
    be7a:	f3ef 8205 	mrs	r2, IPSR
    be7e:	b942      	cbnz	r2, be92 <z_reschedule_irqlock+0x1e>
    be80:	2201      	movs	r2, #1
    be82:	e000      	b.n	be86 <z_reschedule_irqlock+0x12>
    be84:	2200      	movs	r2, #0
	if (resched(key)) {
    be86:	b932      	cbnz	r2, be96 <z_reschedule_irqlock+0x22>
    be88:	f383 8811 	msr	BASEPRI, r3
    be8c:	f3bf 8f6f 	isb	sy
}
    be90:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    be92:	2200      	movs	r2, #0
    be94:	e7f7      	b.n	be86 <z_reschedule_irqlock+0x12>
    be96:	4618      	mov	r0, r3
    be98:	f7f6 fffc 	bl	2e94 <arch_swap>
	return ret;
    be9c:	e7f8      	b.n	be90 <z_reschedule_irqlock+0x1c>

0000be9e <z_priq_dumb_best>:
{
    be9e:	4603      	mov	r3, r0
	return list->head == list;
    bea0:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bea2:	4283      	cmp	r3, r0
    bea4:	d000      	beq.n	bea8 <z_priq_dumb_best+0xa>
}
    bea6:	4770      	bx	lr
	struct k_thread *thread = NULL;
    bea8:	2000      	movs	r0, #0
	return thread;
    beaa:	e7fc      	b.n	bea6 <z_priq_dumb_best+0x8>

0000beac <init_ready_q>:
	sys_dlist_init(&rq->runq);
    beac:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    beae:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    beb0:	6083      	str	r3, [r0, #8]
}
    beb2:	4770      	bx	lr

0000beb4 <remove_timeout>:
{
    beb4:	b538      	push	{r3, r4, r5, lr}
    beb6:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    beb8:	f7fd fe94 	bl	9be4 <next>
    bebc:	b148      	cbz	r0, bed2 <remove_timeout+0x1e>
    bebe:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    bec0:	6920      	ldr	r0, [r4, #16]
    bec2:	6965      	ldr	r5, [r4, #20]
    bec4:	6913      	ldr	r3, [r2, #16]
    bec6:	6951      	ldr	r1, [r2, #20]
    bec8:	181b      	adds	r3, r3, r0
    beca:	eb45 0101 	adc.w	r1, r5, r1
    bece:	6113      	str	r3, [r2, #16]
    bed0:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    bed2:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    bed4:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    bed6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    bed8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    beda:	2300      	movs	r3, #0
    bedc:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    bede:	6063      	str	r3, [r4, #4]
}
    bee0:	bd38      	pop	{r3, r4, r5, pc}

0000bee2 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    bee2:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    bee4:	f7fe f992 	bl	a20c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    bee8:	bd08      	pop	{r3, pc}

0000beea <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
    beea:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
    beec:	f7fe f98e 	bl	a20c <sys_clock_tick_get>
}
    bef0:	bd08      	pop	{r3, pc}

0000bef2 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    bef2:	b900      	cbnz	r0, bef6 <z_impl_k_busy_wait+0x4>
    bef4:	4770      	bx	lr
{
    bef6:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    bef8:	f7f7 fc24 	bl	3744 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    befc:	bd08      	pop	{r3, pc}

0000befe <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    befe:	b510      	push	{r4, lr}
    bf00:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    bf02:	f7fd ffa9 	bl	9e58 <z_abort_timeout>

	if (inactive) {
    bf06:	b9a0      	cbnz	r0, bf32 <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
    bf08:	6a63      	ldr	r3, [r4, #36]	; 0x24
    bf0a:	b10b      	cbz	r3, bf10 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    bf0c:	4620      	mov	r0, r4
    bf0e:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    bf10:	f104 0018 	add.w	r0, r4, #24
    bf14:	f7fd fa78 	bl	9408 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    bf18:	b158      	cbz	r0, bf32 <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
    bf1a:	f7fc fe5f 	bl	8bdc <z_ready_thread>
	__asm__ volatile(
    bf1e:	f04f 0320 	mov.w	r3, #32
    bf22:	f3ef 8011 	mrs	r0, BASEPRI
    bf26:	f383 8812 	msr	BASEPRI_MAX, r3
    bf2a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    bf2e:	f7ff ffa1 	bl	be74 <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
    bf32:	bd10      	pop	{r4, pc}

0000bf34 <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
    bf34:	b108      	cbz	r0, bf3a <poller_thread+0x6>
    bf36:	3860      	subs	r0, #96	; 0x60
    bf38:	4770      	bx	lr
}
    bf3a:	4770      	bx	lr

0000bf3c <signal_triggered_work>:
	twork->poll_result = -EAGAIN;
	k_work_submit_to_queue(twork->workq, &twork->work);
}

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
    bf3c:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
    bf3e:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
    bf40:	7823      	ldrb	r3, [r4, #0]
    bf42:	b173      	cbz	r3, bf62 <signal_triggered_work+0x26>
    bf44:	f854 5c04 	ldr.w	r5, [r4, #-4]
    bf48:	b15d      	cbz	r5, bf62 <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
    bf4a:	f1a4 0614 	sub.w	r6, r4, #20
    bf4e:	f104 0014 	add.w	r0, r4, #20
    bf52:	f7fd ff81 	bl	9e58 <z_abort_timeout>
		twork->poll_result = 0;
    bf56:	2300      	movs	r3, #0
    bf58:	62e3      	str	r3, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
    bf5a:	4631      	mov	r1, r6
    bf5c:	4628      	mov	r0, r5
    bf5e:	f7fe fd75 	bl	aa4c <k_work_submit_to_queue>
	}

	return 0;
}
    bf62:	2000      	movs	r0, #0
    bf64:	bd70      	pop	{r4, r5, r6, pc}

0000bf66 <signal_poll_event>:
{
    bf66:	b570      	push	{r4, r5, r6, lr}
    bf68:	4604      	mov	r4, r0
    bf6a:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
    bf6c:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
    bf6e:	b1d6      	cbz	r6, bfa6 <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
    bf70:	7873      	ldrb	r3, [r6, #1]
    bf72:	2b01      	cmp	r3, #1
    bf74:	d00d      	beq.n	bf92 <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
    bf76:	2b02      	cmp	r3, #2
    bf78:	d012      	beq.n	bfa0 <signal_poll_event+0x3a>
		poller->is_polling = false;
    bf7a:	2000      	movs	r0, #0
    bf7c:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
    bf7e:	2300      	movs	r3, #0
    bf80:	60a3      	str	r3, [r4, #8]
	event->state |= state;
    bf82:	68e3      	ldr	r3, [r4, #12]
    bf84:	f3c3 3145 	ubfx	r1, r3, #13, #6
    bf88:	430d      	orrs	r5, r1
    bf8a:	f365 3352 	bfi	r3, r5, #13, #6
    bf8e:	60e3      	str	r3, [r4, #12]
}
    bf90:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
    bf92:	f7fe facd 	bl	a530 <signal_poller>
		poller->is_polling = false;
    bf96:	2300      	movs	r3, #0
    bf98:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
    bf9a:	4298      	cmp	r0, r3
    bf9c:	daef      	bge.n	bf7e <signal_poll_event+0x18>
    bf9e:	e7f7      	b.n	bf90 <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
    bfa0:	f7ff ffcc 	bl	bf3c <signal_triggered_work>
    bfa4:	e7f7      	b.n	bf96 <signal_poll_event+0x30>
	int retcode = 0;
    bfa6:	2000      	movs	r0, #0
    bfa8:	e7e9      	b.n	bf7e <signal_poll_event+0x18>

0000bfaa <z_handle_obj_poll_events>:
{
    bfaa:	b508      	push	{r3, lr}
    bfac:	4603      	mov	r3, r0
	return list->head == list;
    bfae:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
    bfb0:	4283      	cmp	r3, r0
    bfb2:	d009      	beq.n	bfc8 <z_handle_obj_poll_events+0x1e>
	sys_dnode_t *const prev = node->prev;
    bfb4:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
    bfb6:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
    bfb8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    bfba:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    bfbc:	2300      	movs	r3, #0
    bfbe:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
    bfc0:	6043      	str	r3, [r0, #4]
	if (poll_event != NULL) {
    bfc2:	b108      	cbz	r0, bfc8 <z_handle_obj_poll_events+0x1e>
		(void) signal_poll_event(poll_event, state);
    bfc4:	f7ff ffcf 	bl	bf66 <signal_poll_event>
}
    bfc8:	bd08      	pop	{r3, pc}

0000bfca <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    bfca:	4770      	bx	lr

0000bfcc <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    bfcc:	f7f9 bbb8 	b.w	5740 <SystemInit>
