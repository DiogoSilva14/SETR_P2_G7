
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20002560 	.word	0x20002560
}
   4:	00002f55 	.word	0x00002f55
   8:	00007567 	.word	0x00007567
   c:	00002f29 	.word	0x00002f29
  10:	00002f29 	.word	0x00002f29
  14:	00002f29 	.word	0x00002f29
  18:	00002f29 	.word	0x00002f29
	...
  2c:	00002c31 	.word	0x00002c31
  30:	00002f29 	.word	0x00002f29
  34:	00000000 	.word	0x00000000
  38:	00002bdd 	.word	0x00002bdd
  3c:	00002f29 	.word	0x00002f29

00000040 <_irq_vector_table>:
  40:	00002ce9 00002ce9 00002ce9 00002ce9     .,...,...,...,..
  50:	00002ce9 00002ce9 00002ce9 00002ce9     .,...,...,...,..
  60:	00002ce9 00002ce9 00002ce9 00002ce9     .,...,...,...,..
  70:	00002ce9 00002ce9 00002ce9 00002ce9     .,...,...,...,..
  80:	00002ce9 00002ce9 00002ce9 00002ce9     .,...,...,...,..
  90:	00002ce9 00002ce9 00002ce9 00002ce9     .,...,...,...,..
  a0:	00002ce9 00002ce9 00002ce9 00002ce9     .,...,...,...,..
  b0:	00002ce9 00002ce9 00002ce9 00002ce9     .,...,...,...,..
  c0:	00002ce9 00002ce9 00002ce9 00002ce9     .,...,...,...,..
  d0:	00002ce9 00002ce9 00002ce9 00002ce9     .,...,...,...,..
  e0:	00002ce9 00002ce9 00002ce9 00002ce9     .,...,...,...,..
  f0:	00002ce9 00002ce9 00002ce9 00002ce9     .,...,...,...,..

Disassembly of section text:

00000100 <__aeabi_fmul>:
     100:	f04f 0cff 	mov.w	ip, #255	; 0xff
     104:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     108:	bf1e      	ittt	ne
     10a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     10e:	ea92 0f0c 	teqne	r2, ip
     112:	ea93 0f0c 	teqne	r3, ip
     116:	d06f      	beq.n	1f8 <CONFIG_IDLE_STACK_SIZE+0xb8>
     118:	441a      	add	r2, r3
     11a:	ea80 0c01 	eor.w	ip, r0, r1
     11e:	0240      	lsls	r0, r0, #9
     120:	bf18      	it	ne
     122:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     126:	d01e      	beq.n	166 <CONFIG_IDLE_STACK_SIZE+0x26>
     128:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     12c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     130:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     134:	fba0 3101 	umull	r3, r1, r0, r1
     138:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     13c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     140:	bf3e      	ittt	cc
     142:	0049      	lslcc	r1, r1, #1
     144:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     148:	005b      	lslcc	r3, r3, #1
     14a:	ea40 0001 	orr.w	r0, r0, r1
     14e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     152:	2afd      	cmp	r2, #253	; 0xfd
     154:	d81d      	bhi.n	192 <CONFIG_IDLE_STACK_SIZE+0x52>
     156:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     15a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     15e:	bf08      	it	eq
     160:	f020 0001 	biceq.w	r0, r0, #1
     164:	4770      	bx	lr
     166:	f090 0f00 	teq	r0, #0
     16a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     16e:	bf08      	it	eq
     170:	0249      	lsleq	r1, r1, #9
     172:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     176:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     17a:	3a7f      	subs	r2, #127	; 0x7f
     17c:	bfc2      	ittt	gt
     17e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     182:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     186:	4770      	bxgt	lr
     188:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     18c:	f04f 0300 	mov.w	r3, #0
     190:	3a01      	subs	r2, #1
     192:	dc5d      	bgt.n	250 <__data_size+0x48>
     194:	f112 0f19 	cmn.w	r2, #25
     198:	bfdc      	itt	le
     19a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     19e:	4770      	bxle	lr
     1a0:	f1c2 0200 	rsb	r2, r2, #0
     1a4:	0041      	lsls	r1, r0, #1
     1a6:	fa21 f102 	lsr.w	r1, r1, r2
     1aa:	f1c2 0220 	rsb	r2, r2, #32
     1ae:	fa00 fc02 	lsl.w	ip, r0, r2
     1b2:	ea5f 0031 	movs.w	r0, r1, rrx
     1b6:	f140 0000 	adc.w	r0, r0, #0
     1ba:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     1be:	bf08      	it	eq
     1c0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     1c4:	4770      	bx	lr
     1c6:	f092 0f00 	teq	r2, #0
     1ca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     1ce:	bf02      	ittt	eq
     1d0:	0040      	lsleq	r0, r0, #1
     1d2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     1d6:	3a01      	subeq	r2, #1
     1d8:	d0f9      	beq.n	1ce <CONFIG_IDLE_STACK_SIZE+0x8e>
     1da:	ea40 000c 	orr.w	r0, r0, ip
     1de:	f093 0f00 	teq	r3, #0
     1e2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     1e6:	bf02      	ittt	eq
     1e8:	0049      	lsleq	r1, r1, #1
     1ea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     1ee:	3b01      	subeq	r3, #1
     1f0:	d0f9      	beq.n	1e6 <CONFIG_IDLE_STACK_SIZE+0xa6>
     1f2:	ea41 010c 	orr.w	r1, r1, ip
     1f6:	e78f      	b.n	118 <__aeabi_fmul+0x18>
     1f8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     1fc:	ea92 0f0c 	teq	r2, ip
     200:	bf18      	it	ne
     202:	ea93 0f0c 	teqne	r3, ip
     206:	d00a      	beq.n	21e <__data_size+0x16>
     208:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     20c:	bf18      	it	ne
     20e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     212:	d1d8      	bne.n	1c6 <CONFIG_IDLE_STACK_SIZE+0x86>
     214:	ea80 0001 	eor.w	r0, r0, r1
     218:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     21c:	4770      	bx	lr
     21e:	f090 0f00 	teq	r0, #0
     222:	bf17      	itett	ne
     224:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     228:	4608      	moveq	r0, r1
     22a:	f091 0f00 	teqne	r1, #0
     22e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     232:	d014      	beq.n	25e <__data_size+0x56>
     234:	ea92 0f0c 	teq	r2, ip
     238:	d101      	bne.n	23e <__data_size+0x36>
     23a:	0242      	lsls	r2, r0, #9
     23c:	d10f      	bne.n	25e <__data_size+0x56>
     23e:	ea93 0f0c 	teq	r3, ip
     242:	d103      	bne.n	24c <__data_size+0x44>
     244:	024b      	lsls	r3, r1, #9
     246:	bf18      	it	ne
     248:	4608      	movne	r0, r1
     24a:	d108      	bne.n	25e <__data_size+0x56>
     24c:	ea80 0001 	eor.w	r0, r0, r1
     250:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     254:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     258:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     25c:	4770      	bx	lr
     25e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     262:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     266:	4770      	bx	lr

00000268 <__aeabi_drsub>:
     268:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     26c:	e002      	b.n	274 <__adddf3>
     26e:	bf00      	nop

00000270 <__aeabi_dsub>:
     270:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00000274 <__adddf3>:
     274:	b530      	push	{r4, r5, lr}
     276:	ea4f 0441 	mov.w	r4, r1, lsl #1
     27a:	ea4f 0543 	mov.w	r5, r3, lsl #1
     27e:	ea94 0f05 	teq	r4, r5
     282:	bf08      	it	eq
     284:	ea90 0f02 	teqeq	r0, r2
     288:	bf1f      	itttt	ne
     28a:	ea54 0c00 	orrsne.w	ip, r4, r0
     28e:	ea55 0c02 	orrsne.w	ip, r5, r2
     292:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     296:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     29a:	f000 80e2 	beq.w	462 <CONFIG_FLASH_SIZE+0x62>
     29e:	ea4f 5454 	mov.w	r4, r4, lsr #21
     2a2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     2a6:	bfb8      	it	lt
     2a8:	426d      	neglt	r5, r5
     2aa:	dd0c      	ble.n	2c6 <__adddf3+0x52>
     2ac:	442c      	add	r4, r5
     2ae:	ea80 0202 	eor.w	r2, r0, r2
     2b2:	ea81 0303 	eor.w	r3, r1, r3
     2b6:	ea82 0000 	eor.w	r0, r2, r0
     2ba:	ea83 0101 	eor.w	r1, r3, r1
     2be:	ea80 0202 	eor.w	r2, r0, r2
     2c2:	ea81 0303 	eor.w	r3, r1, r3
     2c6:	2d36      	cmp	r5, #54	; 0x36
     2c8:	bf88      	it	hi
     2ca:	bd30      	pophi	{r4, r5, pc}
     2cc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     2d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
     2d4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     2d8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     2dc:	d002      	beq.n	2e4 <__adddf3+0x70>
     2de:	4240      	negs	r0, r0
     2e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     2e4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     2e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
     2ec:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     2f0:	d002      	beq.n	2f8 <__adddf3+0x84>
     2f2:	4252      	negs	r2, r2
     2f4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     2f8:	ea94 0f05 	teq	r4, r5
     2fc:	f000 80a7 	beq.w	44e <CONFIG_FLASH_SIZE+0x4e>
     300:	f1a4 0401 	sub.w	r4, r4, #1
     304:	f1d5 0e20 	rsbs	lr, r5, #32
     308:	db0d      	blt.n	326 <__adddf3+0xb2>
     30a:	fa02 fc0e 	lsl.w	ip, r2, lr
     30e:	fa22 f205 	lsr.w	r2, r2, r5
     312:	1880      	adds	r0, r0, r2
     314:	f141 0100 	adc.w	r1, r1, #0
     318:	fa03 f20e 	lsl.w	r2, r3, lr
     31c:	1880      	adds	r0, r0, r2
     31e:	fa43 f305 	asr.w	r3, r3, r5
     322:	4159      	adcs	r1, r3
     324:	e00e      	b.n	344 <__adddf3+0xd0>
     326:	f1a5 0520 	sub.w	r5, r5, #32
     32a:	f10e 0e20 	add.w	lr, lr, #32
     32e:	2a01      	cmp	r2, #1
     330:	fa03 fc0e 	lsl.w	ip, r3, lr
     334:	bf28      	it	cs
     336:	f04c 0c02 	orrcs.w	ip, ip, #2
     33a:	fa43 f305 	asr.w	r3, r3, r5
     33e:	18c0      	adds	r0, r0, r3
     340:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     344:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     348:	d507      	bpl.n	35a <__adddf3+0xe6>
     34a:	f04f 0e00 	mov.w	lr, #0
     34e:	f1dc 0c00 	rsbs	ip, ip, #0
     352:	eb7e 0000 	sbcs.w	r0, lr, r0
     356:	eb6e 0101 	sbc.w	r1, lr, r1
     35a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     35e:	d31b      	bcc.n	398 <__adddf3+0x124>
     360:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     364:	d30c      	bcc.n	380 <__adddf3+0x10c>
     366:	0849      	lsrs	r1, r1, #1
     368:	ea5f 0030 	movs.w	r0, r0, rrx
     36c:	ea4f 0c3c 	mov.w	ip, ip, rrx
     370:	f104 0401 	add.w	r4, r4, #1
     374:	ea4f 5244 	mov.w	r2, r4, lsl #21
     378:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     37c:	f080 809a 	bcs.w	4b4 <CONFIG_FLASH_SIZE+0xb4>
     380:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     384:	bf08      	it	eq
     386:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     38a:	f150 0000 	adcs.w	r0, r0, #0
     38e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     392:	ea41 0105 	orr.w	r1, r1, r5
     396:	bd30      	pop	{r4, r5, pc}
     398:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     39c:	4140      	adcs	r0, r0
     39e:	eb41 0101 	adc.w	r1, r1, r1
     3a2:	3c01      	subs	r4, #1
     3a4:	bf28      	it	cs
     3a6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     3aa:	d2e9      	bcs.n	380 <__adddf3+0x10c>
     3ac:	f091 0f00 	teq	r1, #0
     3b0:	bf04      	itt	eq
     3b2:	4601      	moveq	r1, r0
     3b4:	2000      	moveq	r0, #0
     3b6:	fab1 f381 	clz	r3, r1
     3ba:	bf08      	it	eq
     3bc:	3320      	addeq	r3, #32
     3be:	f1a3 030b 	sub.w	r3, r3, #11
     3c2:	f1b3 0220 	subs.w	r2, r3, #32
     3c6:	da0c      	bge.n	3e2 <__adddf3+0x16e>
     3c8:	320c      	adds	r2, #12
     3ca:	dd08      	ble.n	3de <__adddf3+0x16a>
     3cc:	f102 0c14 	add.w	ip, r2, #20
     3d0:	f1c2 020c 	rsb	r2, r2, #12
     3d4:	fa01 f00c 	lsl.w	r0, r1, ip
     3d8:	fa21 f102 	lsr.w	r1, r1, r2
     3dc:	e00c      	b.n	3f8 <__adddf3+0x184>
     3de:	f102 0214 	add.w	r2, r2, #20
     3e2:	bfd8      	it	le
     3e4:	f1c2 0c20 	rsble	ip, r2, #32
     3e8:	fa01 f102 	lsl.w	r1, r1, r2
     3ec:	fa20 fc0c 	lsr.w	ip, r0, ip
     3f0:	bfdc      	itt	le
     3f2:	ea41 010c 	orrle.w	r1, r1, ip
     3f6:	4090      	lslle	r0, r2
     3f8:	1ae4      	subs	r4, r4, r3
     3fa:	bfa2      	ittt	ge
     3fc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     400:	4329      	orrge	r1, r5
     402:	bd30      	popge	{r4, r5, pc}
     404:	ea6f 0404 	mvn.w	r4, r4
     408:	3c1f      	subs	r4, #31
     40a:	da1c      	bge.n	446 <CONFIG_FLASH_SIZE+0x46>
     40c:	340c      	adds	r4, #12
     40e:	dc0e      	bgt.n	42e <CONFIG_FLASH_SIZE+0x2e>
     410:	f104 0414 	add.w	r4, r4, #20
     414:	f1c4 0220 	rsb	r2, r4, #32
     418:	fa20 f004 	lsr.w	r0, r0, r4
     41c:	fa01 f302 	lsl.w	r3, r1, r2
     420:	ea40 0003 	orr.w	r0, r0, r3
     424:	fa21 f304 	lsr.w	r3, r1, r4
     428:	ea45 0103 	orr.w	r1, r5, r3
     42c:	bd30      	pop	{r4, r5, pc}
     42e:	f1c4 040c 	rsb	r4, r4, #12
     432:	f1c4 0220 	rsb	r2, r4, #32
     436:	fa20 f002 	lsr.w	r0, r0, r2
     43a:	fa01 f304 	lsl.w	r3, r1, r4
     43e:	ea40 0003 	orr.w	r0, r0, r3
     442:	4629      	mov	r1, r5
     444:	bd30      	pop	{r4, r5, pc}
     446:	fa21 f004 	lsr.w	r0, r1, r4
     44a:	4629      	mov	r1, r5
     44c:	bd30      	pop	{r4, r5, pc}
     44e:	f094 0f00 	teq	r4, #0
     452:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     456:	bf06      	itte	eq
     458:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     45c:	3401      	addeq	r4, #1
     45e:	3d01      	subne	r5, #1
     460:	e74e      	b.n	300 <__adddf3+0x8c>
     462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     466:	bf18      	it	ne
     468:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     46c:	d029      	beq.n	4c2 <CONFIG_FLASH_SIZE+0xc2>
     46e:	ea94 0f05 	teq	r4, r5
     472:	bf08      	it	eq
     474:	ea90 0f02 	teqeq	r0, r2
     478:	d005      	beq.n	486 <CONFIG_FLASH_SIZE+0x86>
     47a:	ea54 0c00 	orrs.w	ip, r4, r0
     47e:	bf04      	itt	eq
     480:	4619      	moveq	r1, r3
     482:	4610      	moveq	r0, r2
     484:	bd30      	pop	{r4, r5, pc}
     486:	ea91 0f03 	teq	r1, r3
     48a:	bf1e      	ittt	ne
     48c:	2100      	movne	r1, #0
     48e:	2000      	movne	r0, #0
     490:	bd30      	popne	{r4, r5, pc}
     492:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     496:	d105      	bne.n	4a4 <CONFIG_FLASH_SIZE+0xa4>
     498:	0040      	lsls	r0, r0, #1
     49a:	4149      	adcs	r1, r1
     49c:	bf28      	it	cs
     49e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     4a2:	bd30      	pop	{r4, r5, pc}
     4a4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     4a8:	bf3c      	itt	cc
     4aa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     4ae:	bd30      	popcc	{r4, r5, pc}
     4b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     4b4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     4b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     4bc:	f04f 0000 	mov.w	r0, #0
     4c0:	bd30      	pop	{r4, r5, pc}
     4c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     4c6:	bf1a      	itte	ne
     4c8:	4619      	movne	r1, r3
     4ca:	4610      	movne	r0, r2
     4cc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     4d0:	bf1c      	itt	ne
     4d2:	460b      	movne	r3, r1
     4d4:	4602      	movne	r2, r0
     4d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     4da:	bf06      	itte	eq
     4dc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     4e0:	ea91 0f03 	teqeq	r1, r3
     4e4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     4e8:	bd30      	pop	{r4, r5, pc}
     4ea:	bf00      	nop

000004ec <__aeabi_ui2d>:
     4ec:	f090 0f00 	teq	r0, #0
     4f0:	bf04      	itt	eq
     4f2:	2100      	moveq	r1, #0
     4f4:	4770      	bxeq	lr
     4f6:	b530      	push	{r4, r5, lr}
     4f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
     4fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
     500:	f04f 0500 	mov.w	r5, #0
     504:	f04f 0100 	mov.w	r1, #0
     508:	e750      	b.n	3ac <__adddf3+0x138>
     50a:	bf00      	nop

0000050c <__aeabi_i2d>:
     50c:	f090 0f00 	teq	r0, #0
     510:	bf04      	itt	eq
     512:	2100      	moveq	r1, #0
     514:	4770      	bxeq	lr
     516:	b530      	push	{r4, r5, lr}
     518:	f44f 6480 	mov.w	r4, #1024	; 0x400
     51c:	f104 0432 	add.w	r4, r4, #50	; 0x32
     520:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     524:	bf48      	it	mi
     526:	4240      	negmi	r0, r0
     528:	f04f 0100 	mov.w	r1, #0
     52c:	e73e      	b.n	3ac <__adddf3+0x138>
     52e:	bf00      	nop

00000530 <__aeabi_f2d>:
     530:	0042      	lsls	r2, r0, #1
     532:	ea4f 01e2 	mov.w	r1, r2, asr #3
     536:	ea4f 0131 	mov.w	r1, r1, rrx
     53a:	ea4f 7002 	mov.w	r0, r2, lsl #28
     53e:	bf1f      	itttt	ne
     540:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     544:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     548:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     54c:	4770      	bxne	lr
     54e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     552:	bf08      	it	eq
     554:	4770      	bxeq	lr
     556:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     55a:	bf04      	itt	eq
     55c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     560:	4770      	bxeq	lr
     562:	b530      	push	{r4, r5, lr}
     564:	f44f 7460 	mov.w	r4, #896	; 0x380
     568:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     56c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     570:	e71c      	b.n	3ac <__adddf3+0x138>
     572:	bf00      	nop

00000574 <__aeabi_ul2d>:
     574:	ea50 0201 	orrs.w	r2, r0, r1
     578:	bf08      	it	eq
     57a:	4770      	bxeq	lr
     57c:	b530      	push	{r4, r5, lr}
     57e:	f04f 0500 	mov.w	r5, #0
     582:	e00a      	b.n	59a <__aeabi_l2d+0x16>

00000584 <__aeabi_l2d>:
     584:	ea50 0201 	orrs.w	r2, r0, r1
     588:	bf08      	it	eq
     58a:	4770      	bxeq	lr
     58c:	b530      	push	{r4, r5, lr}
     58e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     592:	d502      	bpl.n	59a <__aeabi_l2d+0x16>
     594:	4240      	negs	r0, r0
     596:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     59a:	f44f 6480 	mov.w	r4, #1024	; 0x400
     59e:	f104 0432 	add.w	r4, r4, #50	; 0x32
     5a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     5a6:	f43f aed8 	beq.w	35a <__adddf3+0xe6>
     5aa:	f04f 0203 	mov.w	r2, #3
     5ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     5b2:	bf18      	it	ne
     5b4:	3203      	addne	r2, #3
     5b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     5ba:	bf18      	it	ne
     5bc:	3203      	addne	r2, #3
     5be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     5c2:	f1c2 0320 	rsb	r3, r2, #32
     5c6:	fa00 fc03 	lsl.w	ip, r0, r3
     5ca:	fa20 f002 	lsr.w	r0, r0, r2
     5ce:	fa01 fe03 	lsl.w	lr, r1, r3
     5d2:	ea40 000e 	orr.w	r0, r0, lr
     5d6:	fa21 f102 	lsr.w	r1, r1, r2
     5da:	4414      	add	r4, r2
     5dc:	e6bd      	b.n	35a <__adddf3+0xe6>
     5de:	bf00      	nop

000005e0 <__aeabi_frsub>:
     5e0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     5e4:	e002      	b.n	5ec <__addsf3>
     5e6:	bf00      	nop

000005e8 <__aeabi_fsub>:
     5e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000005ec <__addsf3>:
     5ec:	0042      	lsls	r2, r0, #1
     5ee:	bf1f      	itttt	ne
     5f0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     5f4:	ea92 0f03 	teqne	r2, r3
     5f8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     5fc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     600:	d06a      	beq.n	6d8 <__addsf3+0xec>
     602:	ea4f 6212 	mov.w	r2, r2, lsr #24
     606:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     60a:	bfc1      	itttt	gt
     60c:	18d2      	addgt	r2, r2, r3
     60e:	4041      	eorgt	r1, r0
     610:	4048      	eorgt	r0, r1
     612:	4041      	eorgt	r1, r0
     614:	bfb8      	it	lt
     616:	425b      	neglt	r3, r3
     618:	2b19      	cmp	r3, #25
     61a:	bf88      	it	hi
     61c:	4770      	bxhi	lr
     61e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     622:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     626:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     62a:	bf18      	it	ne
     62c:	4240      	negne	r0, r0
     62e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     632:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     636:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     63a:	bf18      	it	ne
     63c:	4249      	negne	r1, r1
     63e:	ea92 0f03 	teq	r2, r3
     642:	d03f      	beq.n	6c4 <__addsf3+0xd8>
     644:	f1a2 0201 	sub.w	r2, r2, #1
     648:	fa41 fc03 	asr.w	ip, r1, r3
     64c:	eb10 000c 	adds.w	r0, r0, ip
     650:	f1c3 0320 	rsb	r3, r3, #32
     654:	fa01 f103 	lsl.w	r1, r1, r3
     658:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     65c:	d502      	bpl.n	664 <__addsf3+0x78>
     65e:	4249      	negs	r1, r1
     660:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     664:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     668:	d313      	bcc.n	692 <__addsf3+0xa6>
     66a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     66e:	d306      	bcc.n	67e <__addsf3+0x92>
     670:	0840      	lsrs	r0, r0, #1
     672:	ea4f 0131 	mov.w	r1, r1, rrx
     676:	f102 0201 	add.w	r2, r2, #1
     67a:	2afe      	cmp	r2, #254	; 0xfe
     67c:	d251      	bcs.n	722 <__addsf3+0x136>
     67e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     682:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     686:	bf08      	it	eq
     688:	f020 0001 	biceq.w	r0, r0, #1
     68c:	ea40 0003 	orr.w	r0, r0, r3
     690:	4770      	bx	lr
     692:	0049      	lsls	r1, r1, #1
     694:	eb40 0000 	adc.w	r0, r0, r0
     698:	3a01      	subs	r2, #1
     69a:	bf28      	it	cs
     69c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     6a0:	d2ed      	bcs.n	67e <__addsf3+0x92>
     6a2:	fab0 fc80 	clz	ip, r0
     6a6:	f1ac 0c08 	sub.w	ip, ip, #8
     6aa:	ebb2 020c 	subs.w	r2, r2, ip
     6ae:	fa00 f00c 	lsl.w	r0, r0, ip
     6b2:	bfaa      	itet	ge
     6b4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     6b8:	4252      	neglt	r2, r2
     6ba:	4318      	orrge	r0, r3
     6bc:	bfbc      	itt	lt
     6be:	40d0      	lsrlt	r0, r2
     6c0:	4318      	orrlt	r0, r3
     6c2:	4770      	bx	lr
     6c4:	f092 0f00 	teq	r2, #0
     6c8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     6cc:	bf06      	itte	eq
     6ce:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     6d2:	3201      	addeq	r2, #1
     6d4:	3b01      	subne	r3, #1
     6d6:	e7b5      	b.n	644 <__addsf3+0x58>
     6d8:	ea4f 0341 	mov.w	r3, r1, lsl #1
     6dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     6e0:	bf18      	it	ne
     6e2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     6e6:	d021      	beq.n	72c <__addsf3+0x140>
     6e8:	ea92 0f03 	teq	r2, r3
     6ec:	d004      	beq.n	6f8 <__addsf3+0x10c>
     6ee:	f092 0f00 	teq	r2, #0
     6f2:	bf08      	it	eq
     6f4:	4608      	moveq	r0, r1
     6f6:	4770      	bx	lr
     6f8:	ea90 0f01 	teq	r0, r1
     6fc:	bf1c      	itt	ne
     6fe:	2000      	movne	r0, #0
     700:	4770      	bxne	lr
     702:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     706:	d104      	bne.n	712 <__addsf3+0x126>
     708:	0040      	lsls	r0, r0, #1
     70a:	bf28      	it	cs
     70c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     710:	4770      	bx	lr
     712:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     716:	bf3c      	itt	cc
     718:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     71c:	4770      	bxcc	lr
     71e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     722:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     726:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     72a:	4770      	bx	lr
     72c:	ea7f 6222 	mvns.w	r2, r2, asr #24
     730:	bf16      	itet	ne
     732:	4608      	movne	r0, r1
     734:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     738:	4601      	movne	r1, r0
     73a:	0242      	lsls	r2, r0, #9
     73c:	bf06      	itte	eq
     73e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     742:	ea90 0f01 	teqeq	r0, r1
     746:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     74a:	4770      	bx	lr

0000074c <__aeabi_ui2f>:
     74c:	f04f 0300 	mov.w	r3, #0
     750:	e004      	b.n	75c <__aeabi_i2f+0x8>
     752:	bf00      	nop

00000754 <__aeabi_i2f>:
     754:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     758:	bf48      	it	mi
     75a:	4240      	negmi	r0, r0
     75c:	ea5f 0c00 	movs.w	ip, r0
     760:	bf08      	it	eq
     762:	4770      	bxeq	lr
     764:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     768:	4601      	mov	r1, r0
     76a:	f04f 0000 	mov.w	r0, #0
     76e:	e01c      	b.n	7aa <__aeabi_l2f+0x2a>

00000770 <__aeabi_ul2f>:
     770:	ea50 0201 	orrs.w	r2, r0, r1
     774:	bf08      	it	eq
     776:	4770      	bxeq	lr
     778:	f04f 0300 	mov.w	r3, #0
     77c:	e00a      	b.n	794 <__aeabi_l2f+0x14>
     77e:	bf00      	nop

00000780 <__aeabi_l2f>:
     780:	ea50 0201 	orrs.w	r2, r0, r1
     784:	bf08      	it	eq
     786:	4770      	bxeq	lr
     788:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     78c:	d502      	bpl.n	794 <__aeabi_l2f+0x14>
     78e:	4240      	negs	r0, r0
     790:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     794:	ea5f 0c01 	movs.w	ip, r1
     798:	bf02      	ittt	eq
     79a:	4684      	moveq	ip, r0
     79c:	4601      	moveq	r1, r0
     79e:	2000      	moveq	r0, #0
     7a0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     7a4:	bf08      	it	eq
     7a6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     7aa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     7ae:	fabc f28c 	clz	r2, ip
     7b2:	3a08      	subs	r2, #8
     7b4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     7b8:	db10      	blt.n	7dc <__aeabi_l2f+0x5c>
     7ba:	fa01 fc02 	lsl.w	ip, r1, r2
     7be:	4463      	add	r3, ip
     7c0:	fa00 fc02 	lsl.w	ip, r0, r2
     7c4:	f1c2 0220 	rsb	r2, r2, #32
     7c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     7cc:	fa20 f202 	lsr.w	r2, r0, r2
     7d0:	eb43 0002 	adc.w	r0, r3, r2
     7d4:	bf08      	it	eq
     7d6:	f020 0001 	biceq.w	r0, r0, #1
     7da:	4770      	bx	lr
     7dc:	f102 0220 	add.w	r2, r2, #32
     7e0:	fa01 fc02 	lsl.w	ip, r1, r2
     7e4:	f1c2 0220 	rsb	r2, r2, #32
     7e8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     7ec:	fa21 f202 	lsr.w	r2, r1, r2
     7f0:	eb43 0002 	adc.w	r0, r3, r2
     7f4:	bf08      	it	eq
     7f6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     7fa:	4770      	bx	lr

000007fc <__gesf2>:
     7fc:	f04f 3cff 	mov.w	ip, #4294967295
     800:	e006      	b.n	810 <__cmpsf2+0x4>
     802:	bf00      	nop

00000804 <__lesf2>:
     804:	f04f 0c01 	mov.w	ip, #1
     808:	e002      	b.n	810 <__cmpsf2+0x4>
     80a:	bf00      	nop

0000080c <__cmpsf2>:
     80c:	f04f 0c01 	mov.w	ip, #1
     810:	f84d cd04 	str.w	ip, [sp, #-4]!
     814:	ea4f 0240 	mov.w	r2, r0, lsl #1
     818:	ea4f 0341 	mov.w	r3, r1, lsl #1
     81c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     820:	bf18      	it	ne
     822:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     826:	d011      	beq.n	84c <__cmpsf2+0x40>
     828:	b001      	add	sp, #4
     82a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
     82e:	bf18      	it	ne
     830:	ea90 0f01 	teqne	r0, r1
     834:	bf58      	it	pl
     836:	ebb2 0003 	subspl.w	r0, r2, r3
     83a:	bf88      	it	hi
     83c:	17c8      	asrhi	r0, r1, #31
     83e:	bf38      	it	cc
     840:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
     844:	bf18      	it	ne
     846:	f040 0001 	orrne.w	r0, r0, #1
     84a:	4770      	bx	lr
     84c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     850:	d102      	bne.n	858 <__cmpsf2+0x4c>
     852:	ea5f 2c40 	movs.w	ip, r0, lsl #9
     856:	d105      	bne.n	864 <__cmpsf2+0x58>
     858:	ea7f 6c23 	mvns.w	ip, r3, asr #24
     85c:	d1e4      	bne.n	828 <__cmpsf2+0x1c>
     85e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
     862:	d0e1      	beq.n	828 <__cmpsf2+0x1c>
     864:	f85d 0b04 	ldr.w	r0, [sp], #4
     868:	4770      	bx	lr
     86a:	bf00      	nop

0000086c <__aeabi_cfrcmple>:
     86c:	4684      	mov	ip, r0
     86e:	4608      	mov	r0, r1
     870:	4661      	mov	r1, ip
     872:	e7ff      	b.n	874 <__aeabi_cfcmpeq>

00000874 <__aeabi_cfcmpeq>:
     874:	b50f      	push	{r0, r1, r2, r3, lr}
     876:	f7ff ffc9 	bl	80c <__cmpsf2>
     87a:	2800      	cmp	r0, #0
     87c:	bf48      	it	mi
     87e:	f110 0f00 	cmnmi.w	r0, #0
     882:	bd0f      	pop	{r0, r1, r2, r3, pc}

00000884 <__aeabi_fcmpeq>:
     884:	f84d ed08 	str.w	lr, [sp, #-8]!
     888:	f7ff fff4 	bl	874 <__aeabi_cfcmpeq>
     88c:	bf0c      	ite	eq
     88e:	2001      	moveq	r0, #1
     890:	2000      	movne	r0, #0
     892:	f85d fb08 	ldr.w	pc, [sp], #8
     896:	bf00      	nop

00000898 <__aeabi_fcmplt>:
     898:	f84d ed08 	str.w	lr, [sp, #-8]!
     89c:	f7ff ffea 	bl	874 <__aeabi_cfcmpeq>
     8a0:	bf34      	ite	cc
     8a2:	2001      	movcc	r0, #1
     8a4:	2000      	movcs	r0, #0
     8a6:	f85d fb08 	ldr.w	pc, [sp], #8
     8aa:	bf00      	nop

000008ac <__aeabi_fcmple>:
     8ac:	f84d ed08 	str.w	lr, [sp, #-8]!
     8b0:	f7ff ffe0 	bl	874 <__aeabi_cfcmpeq>
     8b4:	bf94      	ite	ls
     8b6:	2001      	movls	r0, #1
     8b8:	2000      	movhi	r0, #0
     8ba:	f85d fb08 	ldr.w	pc, [sp], #8
     8be:	bf00      	nop

000008c0 <__aeabi_fcmpge>:
     8c0:	f84d ed08 	str.w	lr, [sp, #-8]!
     8c4:	f7ff ffd2 	bl	86c <__aeabi_cfrcmple>
     8c8:	bf94      	ite	ls
     8ca:	2001      	movls	r0, #1
     8cc:	2000      	movhi	r0, #0
     8ce:	f85d fb08 	ldr.w	pc, [sp], #8
     8d2:	bf00      	nop

000008d4 <__aeabi_fcmpgt>:
     8d4:	f84d ed08 	str.w	lr, [sp, #-8]!
     8d8:	f7ff ffc8 	bl	86c <__aeabi_cfrcmple>
     8dc:	bf34      	ite	cc
     8de:	2001      	movcc	r0, #1
     8e0:	2000      	movcs	r0, #0
     8e2:	f85d fb08 	ldr.w	pc, [sp], #8
     8e6:	bf00      	nop

000008e8 <__aeabi_f2iz>:
     8e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
     8ec:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     8f0:	d30f      	bcc.n	912 <__aeabi_f2iz+0x2a>
     8f2:	f04f 039e 	mov.w	r3, #158	; 0x9e
     8f6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     8fa:	d90d      	bls.n	918 <__aeabi_f2iz+0x30>
     8fc:	ea4f 2300 	mov.w	r3, r0, lsl #8
     900:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     904:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     908:	fa23 f002 	lsr.w	r0, r3, r2
     90c:	bf18      	it	ne
     90e:	4240      	negne	r0, r0
     910:	4770      	bx	lr
     912:	f04f 0000 	mov.w	r0, #0
     916:	4770      	bx	lr
     918:	f112 0f61 	cmn.w	r2, #97	; 0x61
     91c:	d101      	bne.n	922 <__aeabi_f2iz+0x3a>
     91e:	0242      	lsls	r2, r0, #9
     920:	d105      	bne.n	92e <__aeabi_f2iz+0x46>
     922:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
     926:	bf08      	it	eq
     928:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     92c:	4770      	bx	lr
     92e:	f04f 0000 	mov.w	r0, #0
     932:	4770      	bx	lr

00000934 <__aeabi_f2uiz>:
     934:	0042      	lsls	r2, r0, #1
     936:	d20e      	bcs.n	956 <__aeabi_f2uiz+0x22>
     938:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     93c:	d30b      	bcc.n	956 <__aeabi_f2uiz+0x22>
     93e:	f04f 039e 	mov.w	r3, #158	; 0x9e
     942:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     946:	d409      	bmi.n	95c <__aeabi_f2uiz+0x28>
     948:	ea4f 2300 	mov.w	r3, r0, lsl #8
     94c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     950:	fa23 f002 	lsr.w	r0, r3, r2
     954:	4770      	bx	lr
     956:	f04f 0000 	mov.w	r0, #0
     95a:	4770      	bx	lr
     95c:	f112 0f61 	cmn.w	r2, #97	; 0x61
     960:	d101      	bne.n	966 <__aeabi_f2uiz+0x32>
     962:	0242      	lsls	r2, r0, #9
     964:	d102      	bne.n	96c <__aeabi_f2uiz+0x38>
     966:	f04f 30ff 	mov.w	r0, #4294967295
     96a:	4770      	bx	lr
     96c:	f04f 0000 	mov.w	r0, #0
     970:	4770      	bx	lr
     972:	bf00      	nop

00000974 <__aeabi_uldivmod>:
     974:	b953      	cbnz	r3, 98c <__aeabi_uldivmod+0x18>
     976:	b94a      	cbnz	r2, 98c <__aeabi_uldivmod+0x18>
     978:	2900      	cmp	r1, #0
     97a:	bf08      	it	eq
     97c:	2800      	cmpeq	r0, #0
     97e:	bf1c      	itt	ne
     980:	f04f 31ff 	movne.w	r1, #4294967295
     984:	f04f 30ff 	movne.w	r0, #4294967295
     988:	f000 b96c 	b.w	c64 <__aeabi_idiv0>
     98c:	f1ad 0c08 	sub.w	ip, sp, #8
     990:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     994:	f000 f806 	bl	9a4 <__udivmoddi4>
     998:	f8dd e004 	ldr.w	lr, [sp, #4]
     99c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     9a0:	b004      	add	sp, #16
     9a2:	4770      	bx	lr

000009a4 <__udivmoddi4>:
     9a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     9a8:	9e08      	ldr	r6, [sp, #32]
     9aa:	460d      	mov	r5, r1
     9ac:	4604      	mov	r4, r0
     9ae:	468e      	mov	lr, r1
     9b0:	2b00      	cmp	r3, #0
     9b2:	f040 8082 	bne.w	aba <__udivmoddi4+0x116>
     9b6:	428a      	cmp	r2, r1
     9b8:	4617      	mov	r7, r2
     9ba:	d946      	bls.n	a4a <__udivmoddi4+0xa6>
     9bc:	fab2 f282 	clz	r2, r2
     9c0:	b14a      	cbz	r2, 9d6 <__udivmoddi4+0x32>
     9c2:	f1c2 0120 	rsb	r1, r2, #32
     9c6:	fa05 f302 	lsl.w	r3, r5, r2
     9ca:	fa20 f101 	lsr.w	r1, r0, r1
     9ce:	4097      	lsls	r7, r2
     9d0:	ea41 0e03 	orr.w	lr, r1, r3
     9d4:	4094      	lsls	r4, r2
     9d6:	ea4f 4817 	mov.w	r8, r7, lsr #16
     9da:	0c23      	lsrs	r3, r4, #16
     9dc:	fbbe fcf8 	udiv	ip, lr, r8
     9e0:	b2b9      	uxth	r1, r7
     9e2:	fb08 ee1c 	mls	lr, r8, ip, lr
     9e6:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     9ea:	fb0c f001 	mul.w	r0, ip, r1
     9ee:	4298      	cmp	r0, r3
     9f0:	d90a      	bls.n	a08 <__udivmoddi4+0x64>
     9f2:	18fb      	adds	r3, r7, r3
     9f4:	f10c 35ff 	add.w	r5, ip, #4294967295
     9f8:	f080 8116 	bcs.w	c28 <__udivmoddi4+0x284>
     9fc:	4298      	cmp	r0, r3
     9fe:	f240 8113 	bls.w	c28 <__udivmoddi4+0x284>
     a02:	f1ac 0c02 	sub.w	ip, ip, #2
     a06:	443b      	add	r3, r7
     a08:	1a1b      	subs	r3, r3, r0
     a0a:	b2a4      	uxth	r4, r4
     a0c:	fbb3 f0f8 	udiv	r0, r3, r8
     a10:	fb08 3310 	mls	r3, r8, r0, r3
     a14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     a18:	fb00 f101 	mul.w	r1, r0, r1
     a1c:	42a1      	cmp	r1, r4
     a1e:	d909      	bls.n	a34 <__udivmoddi4+0x90>
     a20:	193c      	adds	r4, r7, r4
     a22:	f100 33ff 	add.w	r3, r0, #4294967295
     a26:	f080 8101 	bcs.w	c2c <__udivmoddi4+0x288>
     a2a:	42a1      	cmp	r1, r4
     a2c:	f240 80fe 	bls.w	c2c <__udivmoddi4+0x288>
     a30:	3802      	subs	r0, #2
     a32:	443c      	add	r4, r7
     a34:	1a64      	subs	r4, r4, r1
     a36:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     a3a:	2100      	movs	r1, #0
     a3c:	b11e      	cbz	r6, a46 <__udivmoddi4+0xa2>
     a3e:	40d4      	lsrs	r4, r2
     a40:	2300      	movs	r3, #0
     a42:	e9c6 4300 	strd	r4, r3, [r6]
     a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     a4a:	b902      	cbnz	r2, a4e <__udivmoddi4+0xaa>
     a4c:	deff      	udf	#255	; 0xff
     a4e:	fab2 f282 	clz	r2, r2
     a52:	2a00      	cmp	r2, #0
     a54:	d14f      	bne.n	af6 <__udivmoddi4+0x152>
     a56:	1bcb      	subs	r3, r1, r7
     a58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     a5c:	fa1f f887 	uxth.w	r8, r7
     a60:	2101      	movs	r1, #1
     a62:	fbb3 fcfe 	udiv	ip, r3, lr
     a66:	0c25      	lsrs	r5, r4, #16
     a68:	fb0e 331c 	mls	r3, lr, ip, r3
     a6c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     a70:	fb08 f30c 	mul.w	r3, r8, ip
     a74:	42ab      	cmp	r3, r5
     a76:	d907      	bls.n	a88 <__udivmoddi4+0xe4>
     a78:	197d      	adds	r5, r7, r5
     a7a:	f10c 30ff 	add.w	r0, ip, #4294967295
     a7e:	d202      	bcs.n	a86 <__udivmoddi4+0xe2>
     a80:	42ab      	cmp	r3, r5
     a82:	f200 80e7 	bhi.w	c54 <__udivmoddi4+0x2b0>
     a86:	4684      	mov	ip, r0
     a88:	1aed      	subs	r5, r5, r3
     a8a:	b2a3      	uxth	r3, r4
     a8c:	fbb5 f0fe 	udiv	r0, r5, lr
     a90:	fb0e 5510 	mls	r5, lr, r0, r5
     a94:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     a98:	fb08 f800 	mul.w	r8, r8, r0
     a9c:	45a0      	cmp	r8, r4
     a9e:	d907      	bls.n	ab0 <__udivmoddi4+0x10c>
     aa0:	193c      	adds	r4, r7, r4
     aa2:	f100 33ff 	add.w	r3, r0, #4294967295
     aa6:	d202      	bcs.n	aae <__udivmoddi4+0x10a>
     aa8:	45a0      	cmp	r8, r4
     aaa:	f200 80d7 	bhi.w	c5c <__udivmoddi4+0x2b8>
     aae:	4618      	mov	r0, r3
     ab0:	eba4 0408 	sub.w	r4, r4, r8
     ab4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     ab8:	e7c0      	b.n	a3c <__udivmoddi4+0x98>
     aba:	428b      	cmp	r3, r1
     abc:	d908      	bls.n	ad0 <__udivmoddi4+0x12c>
     abe:	2e00      	cmp	r6, #0
     ac0:	f000 80af 	beq.w	c22 <__udivmoddi4+0x27e>
     ac4:	2100      	movs	r1, #0
     ac6:	e9c6 0500 	strd	r0, r5, [r6]
     aca:	4608      	mov	r0, r1
     acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     ad0:	fab3 f183 	clz	r1, r3
     ad4:	2900      	cmp	r1, #0
     ad6:	d14b      	bne.n	b70 <__udivmoddi4+0x1cc>
     ad8:	42ab      	cmp	r3, r5
     ada:	d302      	bcc.n	ae2 <__udivmoddi4+0x13e>
     adc:	4282      	cmp	r2, r0
     ade:	f200 80b7 	bhi.w	c50 <__udivmoddi4+0x2ac>
     ae2:	1a84      	subs	r4, r0, r2
     ae4:	eb65 0303 	sbc.w	r3, r5, r3
     ae8:	2001      	movs	r0, #1
     aea:	469e      	mov	lr, r3
     aec:	2e00      	cmp	r6, #0
     aee:	d0aa      	beq.n	a46 <__udivmoddi4+0xa2>
     af0:	e9c6 4e00 	strd	r4, lr, [r6]
     af4:	e7a7      	b.n	a46 <__udivmoddi4+0xa2>
     af6:	f1c2 0c20 	rsb	ip, r2, #32
     afa:	fa01 f302 	lsl.w	r3, r1, r2
     afe:	4097      	lsls	r7, r2
     b00:	fa20 f00c 	lsr.w	r0, r0, ip
     b04:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     b08:	fa21 fc0c 	lsr.w	ip, r1, ip
     b0c:	4318      	orrs	r0, r3
     b0e:	fbbc f1fe 	udiv	r1, ip, lr
     b12:	0c05      	lsrs	r5, r0, #16
     b14:	fb0e cc11 	mls	ip, lr, r1, ip
     b18:	fa1f f887 	uxth.w	r8, r7
     b1c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     b20:	fb01 f308 	mul.w	r3, r1, r8
     b24:	42ab      	cmp	r3, r5
     b26:	fa04 f402 	lsl.w	r4, r4, r2
     b2a:	d909      	bls.n	b40 <__udivmoddi4+0x19c>
     b2c:	197d      	adds	r5, r7, r5
     b2e:	f101 3cff 	add.w	ip, r1, #4294967295
     b32:	f080 808b 	bcs.w	c4c <__udivmoddi4+0x2a8>
     b36:	42ab      	cmp	r3, r5
     b38:	f240 8088 	bls.w	c4c <__udivmoddi4+0x2a8>
     b3c:	3902      	subs	r1, #2
     b3e:	443d      	add	r5, r7
     b40:	1aeb      	subs	r3, r5, r3
     b42:	b285      	uxth	r5, r0
     b44:	fbb3 f0fe 	udiv	r0, r3, lr
     b48:	fb0e 3310 	mls	r3, lr, r0, r3
     b4c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     b50:	fb00 f308 	mul.w	r3, r0, r8
     b54:	42ab      	cmp	r3, r5
     b56:	d907      	bls.n	b68 <__udivmoddi4+0x1c4>
     b58:	197d      	adds	r5, r7, r5
     b5a:	f100 3cff 	add.w	ip, r0, #4294967295
     b5e:	d271      	bcs.n	c44 <__udivmoddi4+0x2a0>
     b60:	42ab      	cmp	r3, r5
     b62:	d96f      	bls.n	c44 <__udivmoddi4+0x2a0>
     b64:	3802      	subs	r0, #2
     b66:	443d      	add	r5, r7
     b68:	1aeb      	subs	r3, r5, r3
     b6a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     b6e:	e778      	b.n	a62 <__udivmoddi4+0xbe>
     b70:	f1c1 0c20 	rsb	ip, r1, #32
     b74:	408b      	lsls	r3, r1
     b76:	fa22 f70c 	lsr.w	r7, r2, ip
     b7a:	431f      	orrs	r7, r3
     b7c:	fa20 f40c 	lsr.w	r4, r0, ip
     b80:	fa05 f301 	lsl.w	r3, r5, r1
     b84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     b88:	fa25 f50c 	lsr.w	r5, r5, ip
     b8c:	431c      	orrs	r4, r3
     b8e:	0c23      	lsrs	r3, r4, #16
     b90:	fbb5 f9fe 	udiv	r9, r5, lr
     b94:	fa1f f887 	uxth.w	r8, r7
     b98:	fb0e 5519 	mls	r5, lr, r9, r5
     b9c:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     ba0:	fb09 fa08 	mul.w	sl, r9, r8
     ba4:	45aa      	cmp	sl, r5
     ba6:	fa02 f201 	lsl.w	r2, r2, r1
     baa:	fa00 f301 	lsl.w	r3, r0, r1
     bae:	d908      	bls.n	bc2 <__udivmoddi4+0x21e>
     bb0:	197d      	adds	r5, r7, r5
     bb2:	f109 30ff 	add.w	r0, r9, #4294967295
     bb6:	d247      	bcs.n	c48 <__udivmoddi4+0x2a4>
     bb8:	45aa      	cmp	sl, r5
     bba:	d945      	bls.n	c48 <__udivmoddi4+0x2a4>
     bbc:	f1a9 0902 	sub.w	r9, r9, #2
     bc0:	443d      	add	r5, r7
     bc2:	eba5 050a 	sub.w	r5, r5, sl
     bc6:	b2a4      	uxth	r4, r4
     bc8:	fbb5 f0fe 	udiv	r0, r5, lr
     bcc:	fb0e 5510 	mls	r5, lr, r0, r5
     bd0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     bd4:	fb00 f808 	mul.w	r8, r0, r8
     bd8:	45a0      	cmp	r8, r4
     bda:	d907      	bls.n	bec <__udivmoddi4+0x248>
     bdc:	193c      	adds	r4, r7, r4
     bde:	f100 35ff 	add.w	r5, r0, #4294967295
     be2:	d22d      	bcs.n	c40 <__udivmoddi4+0x29c>
     be4:	45a0      	cmp	r8, r4
     be6:	d92b      	bls.n	c40 <__udivmoddi4+0x29c>
     be8:	3802      	subs	r0, #2
     bea:	443c      	add	r4, r7
     bec:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     bf0:	eba4 0408 	sub.w	r4, r4, r8
     bf4:	fba0 8902 	umull	r8, r9, r0, r2
     bf8:	454c      	cmp	r4, r9
     bfa:	46c6      	mov	lr, r8
     bfc:	464d      	mov	r5, r9
     bfe:	d319      	bcc.n	c34 <__udivmoddi4+0x290>
     c00:	d016      	beq.n	c30 <__udivmoddi4+0x28c>
     c02:	b15e      	cbz	r6, c1c <__udivmoddi4+0x278>
     c04:	ebb3 020e 	subs.w	r2, r3, lr
     c08:	eb64 0405 	sbc.w	r4, r4, r5
     c0c:	fa04 fc0c 	lsl.w	ip, r4, ip
     c10:	40ca      	lsrs	r2, r1
     c12:	ea4c 0202 	orr.w	r2, ip, r2
     c16:	40cc      	lsrs	r4, r1
     c18:	e9c6 2400 	strd	r2, r4, [r6]
     c1c:	2100      	movs	r1, #0
     c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     c22:	4631      	mov	r1, r6
     c24:	4630      	mov	r0, r6
     c26:	e70e      	b.n	a46 <__udivmoddi4+0xa2>
     c28:	46ac      	mov	ip, r5
     c2a:	e6ed      	b.n	a08 <__udivmoddi4+0x64>
     c2c:	4618      	mov	r0, r3
     c2e:	e701      	b.n	a34 <__udivmoddi4+0x90>
     c30:	4543      	cmp	r3, r8
     c32:	d2e6      	bcs.n	c02 <__udivmoddi4+0x25e>
     c34:	ebb8 0e02 	subs.w	lr, r8, r2
     c38:	eb69 0507 	sbc.w	r5, r9, r7
     c3c:	3801      	subs	r0, #1
     c3e:	e7e0      	b.n	c02 <__udivmoddi4+0x25e>
     c40:	4628      	mov	r0, r5
     c42:	e7d3      	b.n	bec <__udivmoddi4+0x248>
     c44:	4660      	mov	r0, ip
     c46:	e78f      	b.n	b68 <__udivmoddi4+0x1c4>
     c48:	4681      	mov	r9, r0
     c4a:	e7ba      	b.n	bc2 <__udivmoddi4+0x21e>
     c4c:	4661      	mov	r1, ip
     c4e:	e777      	b.n	b40 <__udivmoddi4+0x19c>
     c50:	4608      	mov	r0, r1
     c52:	e74b      	b.n	aec <__udivmoddi4+0x148>
     c54:	f1ac 0c02 	sub.w	ip, ip, #2
     c58:	443d      	add	r5, r7
     c5a:	e715      	b.n	a88 <__udivmoddi4+0xe4>
     c5c:	3802      	subs	r0, #2
     c5e:	443c      	add	r4, r7
     c60:	e726      	b.n	ab0 <__udivmoddi4+0x10c>
     c62:	bf00      	nop

00000c64 <__aeabi_idiv0>:
     c64:	4770      	bx	lr
     c66:	bf00      	nop

00000c68 <thread_B_code>:
      release_time += thread_A_period;
    }
  }
}

void thread_B_code(void *argA , void *argB, void *argC){
     c68:	b508      	push	{r3, lr}
  /* Thread loop */
  while(1) {
    sem_take(SEM_AB);

    pwm_val = get_value();
     c6a:	4c05      	ldr	r4, [pc, #20]	; (c80 <thread_B_code+0x18>)
    sem_take(SEM_AB);
     c6c:	2002      	movs	r0, #2
     c6e:	f000 fa11 	bl	1094 <sem_take>
    pwm_val = get_value();
     c72:	f000 fbd1 	bl	1418 <get_value>
     c76:	6020      	str	r0, [r4, #0]

    sem_give(SEM_BC);     
     c78:	2003      	movs	r0, #3
     c7a:	f000 f9f7 	bl	106c <sem_give>
  while(1) {
     c7e:	e7f5      	b.n	c6c <thread_B_code+0x4>
     c80:	20000770 	.word	0x20000770

00000c84 <thread_C_code>:
  }
}

void thread_C_code(void *argA , void *argB, void *argC){
     c84:	b508      	push	{r3, lr}
	/* Thread loop */
  while(1) {
    sem_take(SEM_BC);

    pwm_duty_cycle(pwm_val);
     c86:	4c04      	ldr	r4, [pc, #16]	; (c98 <thread_C_code+0x14>)
    sem_take(SEM_BC);
     c88:	2003      	movs	r0, #3
     c8a:	f000 fa03 	bl	1094 <sem_take>
    pwm_duty_cycle(pwm_val);
     c8e:	6820      	ldr	r0, [r4, #0]
     c90:	f000 f95e 	bl	f50 <pwm_duty_cycle>
  while(1) {
     c94:	e7f8      	b.n	c88 <thread_C_code+0x4>
     c96:	bf00      	nop
     c98:	20000770 	.word	0x20000770

00000c9c <main>:
void main(void){
     c9c:	b538      	push	{r3, r4, r5, lr}
	init_drivers();
     c9e:	f000 fab3 	bl	1208 <init_drivers>
  init_automation();
     ca2:	f000 fba1 	bl	13e8 <init_automation>
	sem_init(SEM_AA, 1, 1);
     ca6:	2201      	movs	r2, #1
     ca8:	4611      	mov	r1, r2
     caa:	4610      	mov	r0, r2
     cac:	f000 f9c8 	bl	1040 <sem_init>
	sem_init(SEM_AB, 0, 1);
     cb0:	2201      	movs	r2, #1
     cb2:	2100      	movs	r1, #0
     cb4:	2002      	movs	r0, #2
     cb6:	f000 f9c3 	bl	1040 <sem_init>
	sem_init(SEM_BC, 0, 1);
     cba:	2201      	movs	r2, #1
     cbc:	2100      	movs	r1, #0
     cbe:	2003      	movs	r0, #3
     cc0:	f000 f9be 	bl	1040 <sem_init>
	thread_create(THREAD_A, thread_A_code);
     cc4:	491f      	ldr	r1, [pc, #124]	; (d44 <main+0xa8>)
     cc6:	2001      	movs	r0, #1
     cc8:	f000 fa06 	bl	10d8 <thread_create>
	thread_create(THREAD_B, thread_B_code);
     ccc:	491e      	ldr	r1, [pc, #120]	; (d48 <main+0xac>)
     cce:	2002      	movs	r0, #2
     cd0:	f000 fa02 	bl	10d8 <thread_create>
	thread_create(THREAD_C, thread_C_code);	
     cd4:	491d      	ldr	r1, [pc, #116]	; (d4c <main+0xb0>)
     cd6:	2003      	movs	r0, #3
     cd8:	f000 f9fe 	bl	10d8 <thread_create>
    print_time = get_uptime();
     cdc:	f006 fa83 	bl	71e6 <get_uptime>
     ce0:	4604      	mov	r4, r0
    print_menu();
     ce2:	f000 fbbf 	bl	1464 <print_menu>
    if(uart_rx_rdy()){
     ce6:	f000 fb03 	bl	12f0 <uart_rx_rdy>
     cea:	b118      	cbz	r0, cf4 <main+0x58>
      handle_option(get_char());
     cec:	f000 fb0a 	bl	1304 <get_char>
     cf0:	f000 fc3c 	bl	156c <handle_option>
    if(get_button_press(1)){
     cf4:	2001      	movs	r0, #1
     cf6:	f000 f99b 	bl	1030 <get_button_press>
     cfa:	b110      	cbz	r0, d02 <main+0x66>
      select_auto(true);
     cfc:	2001      	movs	r0, #1
     cfe:	f000 fd13 	bl	1728 <select_auto>
    if(get_button_press(2)){
     d02:	2002      	movs	r0, #2
     d04:	f000 f994 	bl	1030 <get_button_press>
     d08:	b110      	cbz	r0, d10 <main+0x74>
      change_manual(UP);
     d0a:	2001      	movs	r0, #1
     d0c:	f000 fd20 	bl	1750 <change_manual>
    if(get_button_press(3)){
     d10:	2003      	movs	r0, #3
     d12:	f000 f98d 	bl	1030 <get_button_press>
     d16:	b110      	cbz	r0, d1e <main+0x82>
      select_auto(false);
     d18:	2000      	movs	r0, #0
     d1a:	f000 fd05 	bl	1728 <select_auto>
    if(get_button_press(4)){
     d1e:	2004      	movs	r0, #4
     d20:	f000 f986 	bl	1030 <get_button_press>
     d24:	b110      	cbz	r0, d2c <main+0x90>
      change_manual(DOWN);
     d26:	2002      	movs	r0, #2
     d28:	f000 fd12 	bl	1750 <change_manual>
    while(get_uptime() < (print_time + PRINT_PERIOD)){
     d2c:	3464      	adds	r4, #100	; 0x64
     d2e:	2500      	movs	r5, #0
     d30:	f006 fa59 	bl	71e6 <get_uptime>
     d34:	42a0      	cmp	r0, r4
     d36:	eb71 0305 	sbcs.w	r3, r1, r5
     d3a:	dacf      	bge.n	cdc <main+0x40>
      sleep_ms(PRINT_PERIOD);
     d3c:	2064      	movs	r0, #100	; 0x64
     d3e:	f006 fa60 	bl	7202 <sleep_ms>
     d42:	e7f5      	b.n	d30 <main+0x94>
     d44:	0000715d 	.word	0x0000715d
     d48:	00000c69 	.word	0x00000c69
     d4c:	00000c85 	.word	0x00000c85

00000d50 <pressed_board_1>:

int err;

bool button_pressed[4];

void pressed_board_1(const struct device *dev, struct gpio_callback *cb, uint32_t pins){
     d50:	b508      	push	{r3, lr}
    if(verbose){
     d52:	4b05      	ldr	r3, [pc, #20]	; (d68 <pressed_board_1+0x18>)
     d54:	781b      	ldrb	r3, [r3, #0]
     d56:	b113      	cbz	r3, d5e <pressed_board_1+0xe>
        printk("Button 1 pressed\n");
     d58:	4804      	ldr	r0, [pc, #16]	; (d6c <pressed_board_1+0x1c>)
     d5a:	f006 fa96 	bl	728a <printk>
	}

	button_pressed[0] = true;
     d5e:	4b04      	ldr	r3, [pc, #16]	; (d70 <pressed_board_1+0x20>)
     d60:	2201      	movs	r2, #1
     d62:	701a      	strb	r2, [r3, #0]
}
     d64:	bd08      	pop	{r3, pc}
     d66:	bf00      	nop
     d68:	20000f14 	.word	0x20000f14
     d6c:	00008914 	.word	0x00008914
     d70:	20000f0e 	.word	0x20000f0e

00000d74 <pressed_board_2>:

void pressed_board_2(const struct device *dev, struct gpio_callback *cb, uint32_t pins){
     d74:	b508      	push	{r3, lr}
	if(verbose){
     d76:	4b05      	ldr	r3, [pc, #20]	; (d8c <pressed_board_2+0x18>)
     d78:	781b      	ldrb	r3, [r3, #0]
     d7a:	b113      	cbz	r3, d82 <pressed_board_2+0xe>
        printk("Button 2 pressed\n");
     d7c:	4804      	ldr	r0, [pc, #16]	; (d90 <pressed_board_2+0x1c>)
     d7e:	f006 fa84 	bl	728a <printk>
	}

	button_pressed[1] = true;
     d82:	4b04      	ldr	r3, [pc, #16]	; (d94 <pressed_board_2+0x20>)
     d84:	2201      	movs	r2, #1
     d86:	705a      	strb	r2, [r3, #1]
}
     d88:	bd08      	pop	{r3, pc}
     d8a:	bf00      	nop
     d8c:	20000f14 	.word	0x20000f14
     d90:	00008926 	.word	0x00008926
     d94:	20000f0e 	.word	0x20000f0e

00000d98 <pressed_board_3>:


void pressed_board_3(const struct device *dev, struct gpio_callback *cb, uint32_t pins){
     d98:	b508      	push	{r3, lr}
	if(verbose){
     d9a:	4b05      	ldr	r3, [pc, #20]	; (db0 <pressed_board_3+0x18>)
     d9c:	781b      	ldrb	r3, [r3, #0]
     d9e:	b113      	cbz	r3, da6 <pressed_board_3+0xe>
        printk("Button 3 pressed\n");
     da0:	4804      	ldr	r0, [pc, #16]	; (db4 <pressed_board_3+0x1c>)
     da2:	f006 fa72 	bl	728a <printk>
	}
    
	button_pressed[2] = true;	
     da6:	4b04      	ldr	r3, [pc, #16]	; (db8 <pressed_board_3+0x20>)
     da8:	2201      	movs	r2, #1
     daa:	709a      	strb	r2, [r3, #2]
}
     dac:	bd08      	pop	{r3, pc}
     dae:	bf00      	nop
     db0:	20000f14 	.word	0x20000f14
     db4:	00008938 	.word	0x00008938
     db8:	20000f0e 	.word	0x20000f0e

00000dbc <pressed_board_4>:

void pressed_board_4(const struct device *dev, struct gpio_callback *cb, uint32_t pins){
     dbc:	b508      	push	{r3, lr}
    if(verbose){
     dbe:	4b05      	ldr	r3, [pc, #20]	; (dd4 <pressed_board_4+0x18>)
     dc0:	781b      	ldrb	r3, [r3, #0]
     dc2:	b113      	cbz	r3, dca <pressed_board_4+0xe>
        printk("Button 4 pressed\n");
     dc4:	4804      	ldr	r0, [pc, #16]	; (dd8 <pressed_board_4+0x1c>)
     dc6:	f006 fa60 	bl	728a <printk>
	}
    
    button_pressed[3] = true;
     dca:	4b04      	ldr	r3, [pc, #16]	; (ddc <pressed_board_4+0x20>)
     dcc:	2201      	movs	r2, #1
     dce:	70da      	strb	r2, [r3, #3]
}
     dd0:	bd08      	pop	{r3, pc}
     dd2:	bf00      	nop
     dd4:	20000f14 	.word	0x20000f14
     dd8:	0000894a 	.word	0x0000894a
     ddc:	20000f0e 	.word	0x20000f0e

00000de0 <uart_cb>:

/* UART callback implementation */
/* Note that callback functions are executed in the scope of interrupt handlers. */
/* They run asynchronously after hardware/software interrupts and have a higher priority than all threads */
/* Should be kept as short and simple as possible. Heavier processing should be deferred to a task with suitable priority*/
static void uart_cb(const struct device *dev, struct uart_event *evt, void *user_data){
     de0:	b538      	push	{r3, r4, r5, lr}
     de2:	780b      	ldrb	r3, [r1, #0]
     de4:	460c      	mov	r4, r1
     de6:	2b06      	cmp	r3, #6
     de8:	d827      	bhi.n	e3a <uart_cb+0x5a>
     dea:	e8df f003 	tbb	[pc, r3]
     dee:	1212      	.short	0x1212
     df0:	13121204 	.word	0x13121204
     df4:	12          	.byte	0x12
     df5:	00          	.byte	0x00
			break;
			
		case UART_RX_RDY:
			//printk("UART_RX_RDY event \n\r");
					/* Just copy data to a buffer. Usually it is preferable to use e.g. a FIFO to communicate with a task that shall process the messages*/
					memcpy(rx_chars,&(rx_buf[evt->data.rx.offset]),evt->data.rx.len); 
     df6:	688b      	ldr	r3, [r1, #8]
     df8:	68ca      	ldr	r2, [r1, #12]
     dfa:	4d12      	ldr	r5, [pc, #72]	; (e44 <uart_cb+0x64>)
     dfc:	4912      	ldr	r1, [pc, #72]	; (e48 <uart_cb+0x68>)
     dfe:	4628      	mov	r0, r5
     e00:	4419      	add	r1, r3
     e02:	f006 fbdd 	bl	75c0 <memcpy>
					rx_chars[evt->data.rx.len]=0; /* Terminate the string */
     e06:	68e3      	ldr	r3, [r4, #12]
     e08:	2200      	movs	r2, #0
     e0a:	54ea      	strb	r2, [r5, r3]
					uart_rx_rdy_flag = 1;
     e0c:	4b0f      	ldr	r3, [pc, #60]	; (e4c <uart_cb+0x6c>)
     e0e:	2201      	movs	r2, #1
     e10:	601a      	str	r2, [r3, #0]
			
		default:
			printk("UART: unknown event \n\r");
			break;
	}
}
     e12:	bd38      	pop	{r3, r4, r5, pc}
			err =  uart_rx_enable(uart_dev ,rx_buf,sizeof(rx_buf),RX_TIMEOUT);
     e14:	4b0e      	ldr	r3, [pc, #56]	; (e50 <uart_cb+0x70>)
     e16:	6818      	ldr	r0, [r3, #0]
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
				(const struct uart_driver_api *)dev->api;

	return api->rx_enable(dev, buf, len, timeout);
     e18:	6883      	ldr	r3, [r0, #8]
     e1a:	490b      	ldr	r1, [pc, #44]	; (e48 <uart_cb+0x68>)
     e1c:	68dc      	ldr	r4, [r3, #12]
     e1e:	2201      	movs	r2, #1
     e20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     e24:	47a0      	blx	r4
     e26:	4b0b      	ldr	r3, [pc, #44]	; (e54 <uart_cb+0x74>)
     e28:	4601      	mov	r1, r0
     e2a:	6018      	str	r0, [r3, #0]
					if (err) {
     e2c:	2800      	cmp	r0, #0
     e2e:	d0f0      	beq.n	e12 <uart_cb+0x32>
}
     e30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
						printk("uart_rx_enable() error. Error code:%d\n\r",err);              
     e34:	4808      	ldr	r0, [pc, #32]	; (e58 <uart_cb+0x78>)
     e36:	f006 ba28 	b.w	728a <printk>
}
     e3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			printk("UART: unknown event \n\r");
     e3e:	4807      	ldr	r0, [pc, #28]	; (e5c <uart_cb+0x7c>)
     e40:	f006 ba23 	b.w	728a <printk>
     e44:	20000f13 	.word	0x20000f13
     e48:	20000f12 	.word	0x20000f12
     e4c:	200007fc 	.word	0x200007fc
     e50:	200007f8 	.word	0x200007f8
     e54:	200007a8 	.word	0x200007a8
     e58:	0000895c 	.word	0x0000895c
     e5c:	00008984 	.word	0x00008984

00000e60 <adc_sample>:
int adc_sample(void){
     e60:	b510      	push	{r4, lr}
     e62:	b086      	sub	sp, #24
	const struct adc_sequence sequence = {
     e64:	2214      	movs	r2, #20
     e66:	2100      	movs	r1, #0
     e68:	a801      	add	r0, sp, #4
     e6a:	f006 fbb4 	bl	75d6 <memset>
     e6e:	4a0f      	ldr	r2, [pc, #60]	; (eac <adc_sample+0x4c>)
     e70:	2302      	movs	r3, #2
     e72:	e9cd 2303 	strd	r2, r3, [sp, #12]
     e76:	9302      	str	r3, [sp, #8]
     e78:	230a      	movs	r3, #10
     e7a:	f88d 3014 	strb.w	r3, [sp, #20]
	if (adc_dev == NULL) {
     e7e:	4b0c      	ldr	r3, [pc, #48]	; (eb0 <adc_sample+0x50>)
     e80:	6818      	ldr	r0, [r3, #0]
     e82:	b938      	cbnz	r0, e94 <adc_sample+0x34>
            printk("adc_sample(): error, must bind to adc first \n\r");
     e84:	480b      	ldr	r0, [pc, #44]	; (eb4 <adc_sample+0x54>)
     e86:	f006 fa00 	bl	728a <printk>
            return -1;
     e8a:	f04f 34ff 	mov.w	r4, #4294967295
}
     e8e:	4620      	mov	r0, r4
     e90:	b006      	add	sp, #24
     e92:	bd10      	pop	{r4, pc}
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
     e94:	6883      	ldr	r3, [r0, #8]
     e96:	a901      	add	r1, sp, #4
     e98:	685b      	ldr	r3, [r3, #4]
     e9a:	4798      	blx	r3
	if (ret) {
     e9c:	4604      	mov	r4, r0
     e9e:	2800      	cmp	r0, #0
     ea0:	d0f5      	beq.n	e8e <adc_sample+0x2e>
            printk("adc_read() failed with code %d\n", ret);
     ea2:	4601      	mov	r1, r0
     ea4:	4804      	ldr	r0, [pc, #16]	; (eb8 <adc_sample+0x58>)
     ea6:	f006 f9f0 	bl	728a <printk>
     eaa:	e7f0      	b.n	e8e <adc_sample+0x2e>
     eac:	20000f0c 	.word	0x20000f0c
     eb0:	20000774 	.word	0x20000774
     eb4:	0000899b 	.word	0x0000899b
     eb8:	000089ca 	.word	0x000089ca

00000ebc <get_adc_buffer>:
}
     ebc:	4b01      	ldr	r3, [pc, #4]	; (ec4 <get_adc_buffer+0x8>)
     ebe:	8818      	ldrh	r0, [r3, #0]
     ec0:	4770      	bx	lr
     ec2:	bf00      	nop
     ec4:	20000f0c 	.word	0x20000f0c

00000ec8 <init_adc>:
void init_adc(){
     ec8:	b510      	push	{r4, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     eca:	480b      	ldr	r0, [pc, #44]	; (ef8 <init_adc+0x30>)
	adc_dev = device_get_binding(DT_LABEL(ADC_NID));
     ecc:	4c0b      	ldr	r4, [pc, #44]	; (efc <init_adc+0x34>)
     ece:	f004 fd31 	bl	5934 <z_impl_device_get_binding>
     ed2:	6020      	str	r0, [r4, #0]
	if (!adc_dev) {
     ed4:	b910      	cbnz	r0, edc <init_adc+0x14>
        printk("ADC device_get_binding() failed\n");
     ed6:	480a      	ldr	r0, [pc, #40]	; (f00 <init_adc+0x38>)
     ed8:	f006 f9d7 	bl	728a <printk>
    err = adc_channel_setup(adc_dev, &my_channel_cfg);
     edc:	6820      	ldr	r0, [r4, #0]
	return api->channel_setup(dev, channel_cfg);
     ede:	6883      	ldr	r3, [r0, #8]
     ee0:	4908      	ldr	r1, [pc, #32]	; (f04 <init_adc+0x3c>)
     ee2:	681b      	ldr	r3, [r3, #0]
     ee4:	4798      	blx	r3
    if (err) {
     ee6:	4601      	mov	r1, r0
     ee8:	b110      	cbz	r0, ef0 <init_adc+0x28>
        printk("adc_channel_setup() failed with error code %d\n", err);
     eea:	4807      	ldr	r0, [pc, #28]	; (f08 <init_adc+0x40>)
     eec:	f006 f9cd 	bl	728a <printk>
    NRF_SAADC->TASKS_CALIBRATEOFFSET = 1;
     ef0:	4b06      	ldr	r3, [pc, #24]	; (f0c <init_adc+0x44>)
     ef2:	2201      	movs	r2, #1
     ef4:	60da      	str	r2, [r3, #12]
}
     ef6:	bd10      	pop	{r4, pc}
     ef8:	000089ea 	.word	0x000089ea
     efc:	20000774 	.word	0x20000774
     f00:	000089f0 	.word	0x000089f0
     f04:	0000890c 	.word	0x0000890c
     f08:	00008a11 	.word	0x00008a11
     f0c:	40007000 	.word	0x40007000

00000f10 <init_pwm>:
int init_pwm(){
     f10:	b508      	push	{r3, lr}
     f12:	480a      	ldr	r0, [pc, #40]	; (f3c <init_pwm+0x2c>)
     f14:	f004 fd0e 	bl	5934 <z_impl_device_get_binding>
	pwm0_dev = device_get_binding(DT_LABEL(PWM0_NID));	
     f18:	4b09      	ldr	r3, [pc, #36]	; (f40 <init_pwm+0x30>)
     f1a:	6018      	str	r0, [r3, #0]
    if (pwm0_dev == NULL) {
     f1c:	b928      	cbnz	r0, f2a <init_pwm+0x1a>
		printk("Error: Failed to bind to PWM0\n r");
     f1e:	4809      	ldr	r0, [pc, #36]	; (f44 <init_pwm+0x34>)
     f20:	f006 f9b3 	bl	728a <printk>
		return -1;
     f24:	f04f 30ff 	mov.w	r0, #4294967295
}
     f28:	bd08      	pop	{r3, pc}
		if(verbose){
     f2a:	4b07      	ldr	r3, [pc, #28]	; (f48 <init_pwm+0x38>)
     f2c:	7818      	ldrb	r0, [r3, #0]
     f2e:	2800      	cmp	r0, #0
     f30:	d0fa      	beq.n	f28 <init_pwm+0x18>
			printk("Bind to PWM0 successful\n\r"); 
     f32:	4806      	ldr	r0, [pc, #24]	; (f4c <init_pwm+0x3c>)
     f34:	f006 f9a9 	bl	728a <printk>
		return 0;       
     f38:	2000      	movs	r0, #0
     f3a:	e7f5      	b.n	f28 <init_pwm+0x18>
     f3c:	00008a40 	.word	0x00008a40
     f40:	200007ac 	.word	0x200007ac
     f44:	00008a46 	.word	0x00008a46
     f48:	20000f14 	.word	0x20000f14
     f4c:	00008a67 	.word	0x00008a67

00000f50 <pwm_duty_cycle>:
void pwm_duty_cycle(float new_duty_cycle){
     f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f54:	4601      	mov	r1, r0
     f56:	b087      	sub	sp, #28
     f58:	482e      	ldr	r0, [pc, #184]	; (1014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>)
     f5a:	f7ff fb45 	bl	5e8 <__aeabi_fsub>
	if(verbose){
     f5e:	4b2e      	ldr	r3, [pc, #184]	; (1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>)
     f60:	781b      	ldrb	r3, [r3, #0]
     f62:	4604      	mov	r4, r0
     f64:	b12b      	cbz	r3, f72 <pwm_duty_cycle+0x22>
		printk("DUTY_CYCLE: %d \r", (int)(100 - new_duty_cycle));
     f66:	f7ff fcbf 	bl	8e8 <__aeabi_f2iz>
     f6a:	4601      	mov	r1, r0
     f6c:	482b      	ldr	r0, [pc, #172]	; (101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>)
     f6e:	f006 f98c 	bl	728a <printk>
	ret = pwm_pin_set_usec(pwm0_dev, PWM_OUTPUT_PIN,
     f72:	4b2b      	ldr	r3, [pc, #172]	; (1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>)
		PWM_PERIOD_USEC,(unsigned int)((PWM_PERIOD_USEC*(unsigned int)(100 - new_duty_cycle))/100), PWM_POLARITY_NORMAL);
     f74:	4620      	mov	r0, r4
	ret = pwm_pin_set_usec(pwm0_dev, PWM_OUTPUT_PIN,
     f76:	681f      	ldr	r7, [r3, #0]
		PWM_PERIOD_USEC,(unsigned int)((PWM_PERIOD_USEC*(unsigned int)(100 - new_duty_cycle))/100), PWM_POLARITY_NORMAL);
     f78:	f7ff fcdc 	bl	934 <__aeabi_f2uiz>
     f7c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
     f80:	fb05 f600 	mul.w	r6, r5, r0
	ret = pwm_pin_set_usec(pwm0_dev, PWM_OUTPUT_PIN,
     f84:	2064      	movs	r0, #100	; 0x64
     f86:	fbb6 f6f0 	udiv	r6, r6, r0
						uint64_t *cycles)
{
	struct pwm_driver_api *api;

	api = (struct pwm_driver_api *)dev->api;
	return api->get_cycles_per_sec(dev, pwm, cycles);
     f8a:	68bb      	ldr	r3, [r7, #8]
     f8c:	aa04      	add	r2, sp, #16
     f8e:	685b      	ldr	r3, [r3, #4]
     f90:	210d      	movs	r1, #13
     f92:	4638      	mov	r0, r7
     f94:	4798      	blx	r3
				   uint32_t period, uint32_t pulse,
				   pwm_flags_t flags)
{
	uint64_t period_cycles, pulse_cycles, cycles_per_sec;

	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
     f96:	9003      	str	r0, [sp, #12]
     f98:	b128      	cbz	r0, fa6 <pwm_duty_cycle+0x56>
		return -EIO;
     f9a:	f06f 0104 	mvn.w	r1, #4
		printk("Error %d setting PWM\n", ret);
     f9e:	4821      	ldr	r0, [pc, #132]	; (1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>)
     fa0:	f006 f973 	bl	728a <printk>
}
     fa4:	e033      	b.n	100e <CONFIG_FPROTECT_BLOCK_SIZE+0xe>
	}

	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
     fa6:	e9dd 4b04 	ldrd	r4, fp, [sp, #16]
     faa:	fba4 8905 	umull	r8, r9, r4, r5
     fae:	fb05 990b 	mla	r9, r5, fp, r9
     fb2:	4a1d      	ldr	r2, [pc, #116]	; (1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>)
     fb4:	2300      	movs	r3, #0
     fb6:	4640      	mov	r0, r8
     fb8:	4649      	mov	r1, r9
     fba:	f7ff fcdb 	bl	974 <__aeabi_uldivmod>
	if (period_cycles >= ((uint64_t)1 << 32)) {
     fbe:	4b1b      	ldr	r3, [pc, #108]	; (102c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>)
     fc0:	f04f 32ff 	mov.w	r2, #4294967295
     fc4:	454b      	cmp	r3, r9
     fc6:	bf08      	it	eq
     fc8:	4542      	cmpeq	r2, r8
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
     fca:	4682      	mov	sl, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
     fcc:	d202      	bcs.n	fd4 <pwm_duty_cycle+0x84>
		return -ENOTSUP;
     fce:	f06f 0185 	mvn.w	r1, #133	; 0x85
     fd2:	e7e4      	b.n	f9e <pwm_duty_cycle+0x4e>
	}

	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
     fd4:	fba6 4504 	umull	r4, r5, r6, r4
     fd8:	fb06 550b 	mla	r5, r6, fp, r5
     fdc:	4a12      	ldr	r2, [pc, #72]	; (1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>)
     fde:	2300      	movs	r3, #0
     fe0:	4620      	mov	r0, r4
     fe2:	4629      	mov	r1, r5
     fe4:	f7ff fcc6 	bl	974 <__aeabi_uldivmod>
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
     fe8:	4a10      	ldr	r2, [pc, #64]	; (102c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>)
     fea:	f04f 31ff 	mov.w	r1, #4294967295
     fee:	42aa      	cmp	r2, r5
     ff0:	bf08      	it	eq
     ff2:	42a1      	cmpeq	r1, r4
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
     ff4:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
     ff6:	d3ea      	bcc.n	fce <pwm_duty_cycle+0x7e>
	return api->pin_set(dev, pwm, period, pulse, flags);
     ff8:	68ba      	ldr	r2, [r7, #8]
     ffa:	9903      	ldr	r1, [sp, #12]
     ffc:	9100      	str	r1, [sp, #0]
     ffe:	6814      	ldr	r4, [r2, #0]
    1000:	210d      	movs	r1, #13
    1002:	4652      	mov	r2, sl
    1004:	4638      	mov	r0, r7
    1006:	47a0      	blx	r4
	if(ret){
    1008:	4601      	mov	r1, r0
    100a:	2800      	cmp	r0, #0
    100c:	d1c7      	bne.n	f9e <pwm_duty_cycle+0x4e>
}
    100e:	b007      	add	sp, #28
    1010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1014:	42c80000 	.word	0x42c80000
    1018:	20000f14 	.word	0x20000f14
    101c:	00008a81 	.word	0x00008a81
    1020:	200007ac 	.word	0x200007ac
    1024:	00008a92 	.word	0x00008a92
    1028:	000f4240 	.word	0x000f4240
    102c:	000f423f 	.word	0x000f423f

00001030 <get_button_press>:
	uint8_t val = button_pressed[button_num - 1];
    1030:	4a02      	ldr	r2, [pc, #8]	; (103c <get_button_press+0xc>)
    1032:	1e43      	subs	r3, r0, #1
	button_pressed[button_num - 1] = false;
    1034:	2100      	movs	r1, #0
	uint8_t val = button_pressed[button_num - 1];
    1036:	5cd0      	ldrb	r0, [r2, r3]
	button_pressed[button_num - 1] = false;
    1038:	54d1      	strb	r1, [r2, r3]
}
    103a:	4770      	bx	lr
    103c:	20000f0e 	.word	0x20000f0e

00001040 <sem_init>:
	if(semaph == SEM_AA){
    1040:	2801      	cmp	r0, #1
    1042:	d102      	bne.n	104a <sem_init+0xa>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
    1044:	4806      	ldr	r0, [pc, #24]	; (1060 <sem_init+0x20>)
    1046:	f006 bfc0 	b.w	7fca <z_impl_k_sem_init>
	}else if(semaph == SEM_AB){
    104a:	2802      	cmp	r0, #2
    104c:	d101      	bne.n	1052 <sem_init+0x12>
    104e:	4805      	ldr	r0, [pc, #20]	; (1064 <sem_init+0x24>)
    1050:	e7f9      	b.n	1046 <sem_init+0x6>
	}else if(semaph == SEM_BC){
    1052:	2803      	cmp	r0, #3
    1054:	d101      	bne.n	105a <sem_init+0x1a>
    1056:	4804      	ldr	r0, [pc, #16]	; (1068 <sem_init+0x28>)
    1058:	e7f5      	b.n	1046 <sem_init+0x6>
}
    105a:	f04f 30ff 	mov.w	r0, #4294967295
    105e:	4770      	bx	lr
    1060:	200007b0 	.word	0x200007b0
    1064:	200007c8 	.word	0x200007c8
    1068:	200007e0 	.word	0x200007e0

0000106c <sem_give>:
	if(semaph == SEM_AA){
    106c:	2801      	cmp	r0, #1
    106e:	d102      	bne.n	1076 <sem_give+0xa>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    1070:	4805      	ldr	r0, [pc, #20]	; (1088 <sem_give+0x1c>)
    1072:	f004 bf35 	b.w	5ee0 <z_impl_k_sem_give>
	}else if(semaph == SEM_AB){
    1076:	2802      	cmp	r0, #2
    1078:	d101      	bne.n	107e <sem_give+0x12>
    107a:	4804      	ldr	r0, [pc, #16]	; (108c <sem_give+0x20>)
    107c:	e7f9      	b.n	1072 <sem_give+0x6>
	}else if(semaph == SEM_BC){
    107e:	2803      	cmp	r0, #3
    1080:	d101      	bne.n	1086 <sem_give+0x1a>
    1082:	4803      	ldr	r0, [pc, #12]	; (1090 <sem_give+0x24>)
    1084:	e7f5      	b.n	1072 <sem_give+0x6>
}
    1086:	4770      	bx	lr
    1088:	200007b0 	.word	0x200007b0
    108c:	200007c8 	.word	0x200007c8
    1090:	200007e0 	.word	0x200007e0

00001094 <sem_take>:
	if(semaph == SEM_AA){
    1094:	2801      	cmp	r0, #1
    1096:	d106      	bne.n	10a6 <sem_take+0x12>
	return z_impl_k_sem_take(sem, timeout);
    1098:	480c      	ldr	r0, [pc, #48]	; (10cc <sem_take+0x38>)
    109a:	f04f 32ff 	mov.w	r2, #4294967295
    109e:	f04f 33ff 	mov.w	r3, #4294967295
    10a2:	f004 bf43 	b.w	5f2c <z_impl_k_sem_take>
	}else if(semaph == SEM_AB){
    10a6:	2802      	cmp	r0, #2
    10a8:	d105      	bne.n	10b6 <sem_take+0x22>
    10aa:	4809      	ldr	r0, [pc, #36]	; (10d0 <sem_take+0x3c>)
    10ac:	f04f 32ff 	mov.w	r2, #4294967295
    10b0:	f04f 33ff 	mov.w	r3, #4294967295
    10b4:	e7f5      	b.n	10a2 <sem_take+0xe>
	}else if(semaph == SEM_BC){
    10b6:	2803      	cmp	r0, #3
    10b8:	d105      	bne.n	10c6 <sem_take+0x32>
    10ba:	4806      	ldr	r0, [pc, #24]	; (10d4 <sem_take+0x40>)
    10bc:	f04f 32ff 	mov.w	r2, #4294967295
    10c0:	f04f 33ff 	mov.w	r3, #4294967295
    10c4:	e7ed      	b.n	10a2 <sem_take+0xe>
}
    10c6:	f04f 30ff 	mov.w	r0, #4294967295
    10ca:	4770      	bx	lr
    10cc:	200007b0 	.word	0x200007b0
    10d0:	200007c8 	.word	0x200007c8
    10d4:	200007e0 	.word	0x200007e0

000010d8 <thread_create>:
void thread_create(uint8_t thread_num, void (*fun)()){
    10d8:	b530      	push	{r4, r5, lr}
	if(thread_num == THREAD_A){
    10da:	2801      	cmp	r0, #1
void thread_create(uint8_t thread_num, void (*fun)()){
    10dc:	b089      	sub	sp, #36	; 0x24
    10de:	460b      	mov	r3, r1
	if(thread_num == THREAD_A){
    10e0:	d111      	bne.n	1106 <thread_create+0x2e>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    10e2:	2400      	movs	r4, #0
    10e4:	2500      	movs	r5, #0
    10e6:	2200      	movs	r2, #0
    10e8:	e9cd 4506 	strd	r4, r5, [sp, #24]
    10ec:	e9cd 0203 	strd	r0, r2, [sp, #12]
    10f0:	4917      	ldr	r1, [pc, #92]	; (1150 <thread_create+0x78>)
    10f2:	4818      	ldr	r0, [pc, #96]	; (1154 <thread_create+0x7c>)
    10f4:	9200      	str	r2, [sp, #0]
    10f6:	e9cd 2201 	strd	r2, r2, [sp, #4]
    10fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
    10fe:	f004 fd8b 	bl	5c18 <z_impl_k_thread_create>
}
    1102:	b009      	add	sp, #36	; 0x24
    1104:	bd30      	pop	{r4, r5, pc}
	}else if(thread_num == THREAD_B){
    1106:	2802      	cmp	r0, #2
    1108:	d10f      	bne.n	112a <thread_create+0x52>
    110a:	2000      	movs	r0, #0
    110c:	2100      	movs	r1, #0
    110e:	2200      	movs	r2, #0
    1110:	e9cd 0106 	strd	r0, r1, [sp, #24]
    1114:	2101      	movs	r1, #1
    1116:	e9cd 1203 	strd	r1, r2, [sp, #12]
    111a:	e9cd 2201 	strd	r2, r2, [sp, #4]
    111e:	9200      	str	r2, [sp, #0]
    1120:	490d      	ldr	r1, [pc, #52]	; (1158 <thread_create+0x80>)
    1122:	480e      	ldr	r0, [pc, #56]	; (115c <thread_create+0x84>)
    1124:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1128:	e7e9      	b.n	10fe <thread_create+0x26>
	}else if(thread_num == THREAD_C){
    112a:	2803      	cmp	r0, #3
    112c:	d1e9      	bne.n	1102 <thread_create+0x2a>
    112e:	2000      	movs	r0, #0
    1130:	2100      	movs	r1, #0
    1132:	2200      	movs	r2, #0
    1134:	e9cd 0106 	strd	r0, r1, [sp, #24]
    1138:	2101      	movs	r1, #1
    113a:	e9cd 1203 	strd	r1, r2, [sp, #12]
    113e:	e9cd 2201 	strd	r2, r2, [sp, #4]
    1142:	9200      	str	r2, [sp, #0]
    1144:	4906      	ldr	r1, [pc, #24]	; (1160 <thread_create+0x88>)
    1146:	4807      	ldr	r0, [pc, #28]	; (1164 <thread_create+0x8c>)
    1148:	f44f 6280 	mov.w	r2, #1024	; 0x400
    114c:	e7d7      	b.n	10fe <thread_create+0x26>
    114e:	bf00      	nop
    1150:	20001500 	.word	0x20001500
    1154:	20000278 	.word	0x20000278
    1158:	20001920 	.word	0x20001920
    115c:	200002f8 	.word	0x200002f8
    1160:	20001d40 	.word	0x20001d40
    1164:	20000378 	.word	0x20000378

00001168 <init_uart>:
void init_uart(){
    1168:	b538      	push	{r3, r4, r5, lr}
    116a:	481d      	ldr	r0, [pc, #116]	; (11e0 <init_uart+0x78>)
	uart_dev= device_get_binding(DT_LABEL(UART_NID));
    116c:	4d1d      	ldr	r5, [pc, #116]	; (11e4 <init_uart+0x7c>)
    116e:	f004 fbe1 	bl	5934 <z_impl_device_get_binding>
    1172:	6028      	str	r0, [r5, #0]
    if (uart_dev == NULL) {
    1174:	b928      	cbnz	r0, 1182 <init_uart+0x1a>
        printk("device_get_binding() error for device %s!\n\r", DT_LABEL(UART_NID));
    1176:	491a      	ldr	r1, [pc, #104]	; (11e0 <init_uart+0x78>)
    1178:	481b      	ldr	r0, [pc, #108]	; (11e8 <init_uart+0x80>)
}
    117a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        printk("uart_rx_enable() error. Error code:%d\n\r",err);
    117e:	f006 b884 	b.w	728a <printk>
					const struct uart_config *cfg)
{
	const struct uart_driver_api *api =
				(const struct uart_driver_api *)dev->api;

	if (api->configure == NULL) {
    1182:	6883      	ldr	r3, [r0, #8]
    1184:	4c19      	ldr	r4, [pc, #100]	; (11ec <init_uart+0x84>)
    1186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1188:	b93b      	cbnz	r3, 119a <init_uart+0x32>
    err = uart_configure(uart_dev, &uart_cfg);
    118a:	f06f 0357 	mvn.w	r3, #87	; 0x57
    118e:	6023      	str	r3, [r4, #0]
}
    1190:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        printk("uart_configure() error. Invalid configuration\n\r");
    1194:	4816      	ldr	r0, [pc, #88]	; (11f0 <init_uart+0x88>)
    1196:	f006 b878 	b.w	728a <printk>
		return -ENOSYS;
	}
	return api->configure(dev, cfg);
    119a:	4916      	ldr	r1, [pc, #88]	; (11f4 <init_uart+0x8c>)
    119c:	4798      	blx	r3
    err = uart_configure(uart_dev, &uart_cfg);
    119e:	6020      	str	r0, [r4, #0]
    if (err == -ENOSYS) { /* If invalid configuration */
    11a0:	3058      	adds	r0, #88	; 0x58
    11a2:	d0f5      	beq.n	1190 <init_uart+0x28>
    err = uart_callback_set(uart_dev, uart_cb, NULL);
    11a4:	6828      	ldr	r0, [r5, #0]
	if (api->callback_set == NULL) {
    11a6:	6883      	ldr	r3, [r0, #8]
    11a8:	681b      	ldr	r3, [r3, #0]
    11aa:	b923      	cbnz	r3, 11b6 <init_uart+0x4e>
    11ac:	f06f 0157 	mvn.w	r1, #87	; 0x57
    11b0:	6021      	str	r1, [r4, #0]
        printk("uart_callback_set() error. Error code:%d\n\r",err);
    11b2:	4811      	ldr	r0, [pc, #68]	; (11f8 <init_uart+0x90>)
    11b4:	e7e1      	b.n	117a <init_uart+0x12>
	return api->callback_set(dev, callback, user_data);
    11b6:	4911      	ldr	r1, [pc, #68]	; (11fc <init_uart+0x94>)
    11b8:	2200      	movs	r2, #0
    11ba:	4798      	blx	r3
    11bc:	4601      	mov	r1, r0
    err = uart_callback_set(uart_dev, uart_cb, NULL);
    11be:	6020      	str	r0, [r4, #0]
    if (err) {
    11c0:	2800      	cmp	r0, #0
    11c2:	d1f6      	bne.n	11b2 <init_uart+0x4a>
    err =  uart_rx_enable(uart_dev ,rx_buf,sizeof(rx_buf),RX_TIMEOUT);
    11c4:	6828      	ldr	r0, [r5, #0]
	return api->rx_enable(dev, buf, len, timeout);
    11c6:	6883      	ldr	r3, [r0, #8]
    11c8:	490d      	ldr	r1, [pc, #52]	; (1200 <init_uart+0x98>)
    11ca:	68dd      	ldr	r5, [r3, #12]
    11cc:	2201      	movs	r2, #1
    11ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    11d2:	47a8      	blx	r5
    11d4:	4601      	mov	r1, r0
    11d6:	6020      	str	r0, [r4, #0]
    if (err) {
    11d8:	b108      	cbz	r0, 11de <init_uart+0x76>
        printk("uart_rx_enable() error. Error code:%d\n\r",err);
    11da:	480a      	ldr	r0, [pc, #40]	; (1204 <init_uart+0x9c>)
    11dc:	e7cd      	b.n	117a <init_uart+0x12>
}
    11de:	bd38      	pop	{r3, r4, r5, pc}
    11e0:	00008aa8 	.word	0x00008aa8
    11e4:	200007f8 	.word	0x200007f8
    11e8:	00008aaf 	.word	0x00008aaf
    11ec:	200007a8 	.word	0x200007a8
    11f0:	00008adb 	.word	0x00008adb
    11f4:	000086d8 	.word	0x000086d8
    11f8:	00008b0b 	.word	0x00008b0b
    11fc:	00000de1 	.word	0x00000de1
    1200:	20000f12 	.word	0x20000f12
    1204:	0000895c 	.word	0x0000895c

00001208 <init_drivers>:
uint8_t init_drivers(){
    1208:	b510      	push	{r4, lr}
    120a:	482f      	ldr	r0, [pc, #188]	; (12c8 <init_drivers+0xc0>)
    120c:	f004 fb92 	bl	5934 <z_impl_device_get_binding>
    1210:	4604      	mov	r4, r0
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
    1212:	210b      	movs	r1, #11
    1214:	f005 ffc5 	bl	71a2 <z_impl_gpio_pin_configure.constprop.0>
	if (ret < 0) {
    1218:	2800      	cmp	r0, #0
    121a:	da01      	bge.n	1220 <init_drivers+0x18>
		return -1;
    121c:	20ff      	movs	r0, #255	; 0xff
}
    121e:	bd10      	pop	{r4, pc}
    1220:	210c      	movs	r1, #12
    1222:	4620      	mov	r0, r4
    1224:	f005 ffbd 	bl	71a2 <z_impl_gpio_pin_configure.constprop.0>
	if (ret < 0) {
    1228:	2800      	cmp	r0, #0
    122a:	dbf7      	blt.n	121c <init_drivers+0x14>
    122c:	2118      	movs	r1, #24
    122e:	4620      	mov	r0, r4
    1230:	f005 ffb7 	bl	71a2 <z_impl_gpio_pin_configure.constprop.0>
	if (ret < 0) {
    1234:	2800      	cmp	r0, #0
    1236:	dbf1      	blt.n	121c <init_drivers+0x14>
    1238:	2119      	movs	r1, #25
    123a:	4620      	mov	r0, r4
    123c:	f005 ffb1 	bl	71a2 <z_impl_gpio_pin_configure.constprop.0>
	if (ret < 0) {
    1240:	2800      	cmp	r0, #0
    1242:	dbeb      	blt.n	121c <init_drivers+0x14>
    ret = gpio_pin_interrupt_configure(dev, BUT1, GPIO_INT_EDGE_TO_ACTIVE | GPIO_INT_DEBOUNCE);
    1244:	210b      	movs	r1, #11
    1246:	4620      	mov	r0, r4
    1248:	f005 ffba 	bl	71c0 <gpio_pin_interrupt_configure.constprop.0>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    124c:	491f      	ldr	r1, [pc, #124]	; (12cc <init_drivers+0xc4>)
    124e:	4b20      	ldr	r3, [pc, #128]	; (12d0 <init_drivers+0xc8>)
    1250:	604b      	str	r3, [r1, #4]
	gpio_add_callback(dev, &button_board_data1);
    1252:	4620      	mov	r0, r4
	callback->pin_mask = pin_mask;
    1254:	f44f 6300 	mov.w	r3, #2048	; 0x800
    1258:	608b      	str	r3, [r1, #8]
    125a:	f005 ff9a 	bl	7192 <gpio_add_callback>
	ret = gpio_pin_interrupt_configure(dev, BUT2, GPIO_INT_EDGE_TO_ACTIVE | GPIO_INT_DEBOUNCE);
    125e:	210c      	movs	r1, #12
    1260:	4620      	mov	r0, r4
    1262:	f005 ffad 	bl	71c0 <gpio_pin_interrupt_configure.constprop.0>
	callback->handler = handler;
    1266:	491b      	ldr	r1, [pc, #108]	; (12d4 <init_drivers+0xcc>)
    1268:	4b1b      	ldr	r3, [pc, #108]	; (12d8 <init_drivers+0xd0>)
    126a:	604b      	str	r3, [r1, #4]
	gpio_add_callback(dev, &button_board_data2);
    126c:	4620      	mov	r0, r4
	callback->pin_mask = pin_mask;
    126e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1272:	608b      	str	r3, [r1, #8]
    1274:	f005 ff8d 	bl	7192 <gpio_add_callback>
	ret = gpio_pin_interrupt_configure(dev, BUT3, GPIO_INT_EDGE_TO_ACTIVE | GPIO_INT_DEBOUNCE);
    1278:	2118      	movs	r1, #24
    127a:	4620      	mov	r0, r4
    127c:	f005 ffa0 	bl	71c0 <gpio_pin_interrupt_configure.constprop.0>
	callback->handler = handler;
    1280:	4916      	ldr	r1, [pc, #88]	; (12dc <init_drivers+0xd4>)
    1282:	4b17      	ldr	r3, [pc, #92]	; (12e0 <init_drivers+0xd8>)
    1284:	604b      	str	r3, [r1, #4]
	gpio_add_callback(dev, &button_board_data3);
    1286:	4620      	mov	r0, r4
	callback->pin_mask = pin_mask;
    1288:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    128c:	608b      	str	r3, [r1, #8]
    128e:	f005 ff80 	bl	7192 <gpio_add_callback>
	ret = gpio_pin_interrupt_configure(dev, BUT4, GPIO_INT_EDGE_TO_ACTIVE | GPIO_INT_DEBOUNCE);
    1292:	2119      	movs	r1, #25
    1294:	4620      	mov	r0, r4
    1296:	f005 ff93 	bl	71c0 <gpio_pin_interrupt_configure.constprop.0>
	callback->handler = handler;
    129a:	4912      	ldr	r1, [pc, #72]	; (12e4 <init_drivers+0xdc>)
    129c:	4b12      	ldr	r3, [pc, #72]	; (12e8 <init_drivers+0xe0>)
    129e:	604b      	str	r3, [r1, #4]
	gpio_add_callback(dev, &button_board_data4);
    12a0:	4620      	mov	r0, r4
	callback->pin_mask = pin_mask;
    12a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    12a6:	608b      	str	r3, [r1, #8]
    12a8:	f005 ff73 	bl	7192 <gpio_add_callback>
        button_pressed[i] = false;
    12ac:	4b0f      	ldr	r3, [pc, #60]	; (12ec <init_drivers+0xe4>)
    12ae:	2400      	movs	r4, #0
    12b0:	701c      	strb	r4, [r3, #0]
    12b2:	705c      	strb	r4, [r3, #1]
    12b4:	709c      	strb	r4, [r3, #2]
    12b6:	70dc      	strb	r4, [r3, #3]
    init_adc();
    12b8:	f7ff fe06 	bl	ec8 <init_adc>
	init_uart();
    12bc:	f7ff ff54 	bl	1168 <init_uart>
	init_pwm();
    12c0:	f7ff fe26 	bl	f10 <init_pwm>
    return 0;
    12c4:	4620      	mov	r0, r4
    12c6:	e7aa      	b.n	121e <init_drivers+0x16>
    12c8:	00008b36 	.word	0x00008b36
    12cc:	20000778 	.word	0x20000778
    12d0:	00000d51 	.word	0x00000d51
    12d4:	20000784 	.word	0x20000784
    12d8:	00000d75 	.word	0x00000d75
    12dc:	20000790 	.word	0x20000790
    12e0:	00000d99 	.word	0x00000d99
    12e4:	2000079c 	.word	0x2000079c
    12e8:	00000dbd 	.word	0x00000dbd
    12ec:	20000f0e 	.word	0x20000f0e

000012f0 <uart_rx_rdy>:

bool uart_rx_rdy(){
	if(uart_rx_rdy_flag){
    12f0:	4b03      	ldr	r3, [pc, #12]	; (1300 <uart_rx_rdy+0x10>)
    12f2:	6818      	ldr	r0, [r3, #0]
    12f4:	b110      	cbz	r0, 12fc <uart_rx_rdy+0xc>
		uart_rx_rdy_flag = 0;
    12f6:	2200      	movs	r2, #0
    12f8:	601a      	str	r2, [r3, #0]
		return true;
    12fa:	2001      	movs	r0, #1
	}else{
		return false;
	}
}
    12fc:	4770      	bx	lr
    12fe:	bf00      	nop
    1300:	200007fc 	.word	0x200007fc

00001304 <get_char>:

char get_char(){
	return rx_buf[0];
    1304:	4b01      	ldr	r3, [pc, #4]	; (130c <get_char+0x8>)
    1306:	7818      	ldrb	r0, [r3, #0]
    1308:	4770      	bx	lr
    130a:	bf00      	nop
    130c:	20000f12 	.word	0x20000f12

00001310 <PI_init>:

long unsigned int last_ms = 0;
float controller_setpoint = 0;


void PI_init(float setpoint){
    1310:	b508      	push	{r3, lr}
    controller_setpoint = setpoint;
    1312:	4b03      	ldr	r3, [pc, #12]	; (1320 <PI_init+0x10>)
    1314:	6018      	str	r0, [r3, #0]
    last_ms = get_uptime();
    1316:	f005 ff66 	bl	71e6 <get_uptime>
    131a:	4b02      	ldr	r3, [pc, #8]	; (1324 <PI_init+0x14>)
    131c:	6018      	str	r0, [r3, #0]
}
    131e:	bd08      	pop	{r3, pc}
    1320:	20000800 	.word	0x20000800
    1324:	2000080c 	.word	0x2000080c

00001328 <PI_loop>:

float PI_loop(float temp){
    static float last_error = 0;
    static float last_integral = 0;
    
    float error = controller_setpoint - temp;
    1328:	4b24      	ldr	r3, [pc, #144]	; (13bc <PI_loop+0x94>)
float PI_loop(float temp){
    132a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    132e:	4601      	mov	r1, r0
    float error = controller_setpoint - temp;
    1330:	6818      	ldr	r0, [r3, #0]
    
    float delta_ms = (float)(get_uptime()- last_ms);
    1332:	4e23      	ldr	r6, [pc, #140]	; (13c0 <PI_loop+0x98>)
    last_ms = get_uptime();
    
    float new_integral = last_integral + Ki*(error + last_error)*delta_ms/2;
    1334:	f8df 8094 	ldr.w	r8, [pc, #148]	; 13cc <PI_loop+0xa4>
    float error = controller_setpoint - temp;
    1338:	f7ff f956 	bl	5e8 <__aeabi_fsub>
    133c:	4605      	mov	r5, r0
    float delta_ms = (float)(get_uptime()- last_ms);
    133e:	f005 ff52 	bl	71e6 <get_uptime>
    1342:	6833      	ldr	r3, [r6, #0]
    1344:	1ac0      	subs	r0, r0, r3
    1346:	f161 0100 	sbc.w	r1, r1, #0
    134a:	f7ff fa19 	bl	780 <__aeabi_l2f>
    134e:	4604      	mov	r4, r0
    last_ms = get_uptime();
    1350:	f005 ff49 	bl	71e6 <get_uptime>
    1354:	6030      	str	r0, [r6, #0]
    float new_integral = last_integral + Ki*(error + last_error)*delta_ms/2;
    1356:	4e1b      	ldr	r6, [pc, #108]	; (13c4 <PI_loop+0x9c>)
    1358:	f8d8 7000 	ldr.w	r7, [r8]
    135c:	6831      	ldr	r1, [r6, #0]
    135e:	4628      	mov	r0, r5
    1360:	f7ff f944 	bl	5ec <__addsf3>
    1364:	4621      	mov	r1, r4
    1366:	f7fe fecb 	bl	100 <__aeabi_fmul>
    136a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    136e:	f7fe fec7 	bl	100 <__aeabi_fmul>
    1372:	4639      	mov	r1, r7
    1374:	f7ff f93a 	bl	5ec <__addsf3>
    
    if(new_integral > 100){
    1378:	4913      	ldr	r1, [pc, #76]	; (13c8 <PI_loop+0xa0>)
    float new_integral = last_integral + Ki*(error + last_error)*delta_ms/2;
    137a:	4604      	mov	r4, r0
    if(new_integral > 100){
    137c:	f7ff faaa 	bl	8d4 <__aeabi_fcmpgt>
    1380:	b928      	cbnz	r0, 138e <PI_loop+0x66>
        new_integral = last_integral;
    }else if(new_integral <= 0){
    1382:	2100      	movs	r1, #0
    1384:	4620      	mov	r0, r4
    1386:	f7ff fa91 	bl	8ac <__aeabi_fcmple>
    138a:	b900      	cbnz	r0, 138e <PI_loop+0x66>
    float new_integral = last_integral + Ki*(error + last_error)*delta_ms/2;
    138c:	4627      	mov	r7, r4
        new_integral = last_integral;
    }
    
    float output = Kp*error + new_integral;
    138e:	4629      	mov	r1, r5
    1390:	4638      	mov	r0, r7
    1392:	f7ff f92b 	bl	5ec <__addsf3>
    
    last_integral = new_integral;
    1396:	f8c8 7000 	str.w	r7, [r8]
    last_error = error;
    139a:	6035      	str	r5, [r6, #0]
    
    if(output < 0){
    139c:	2100      	movs	r1, #0
    float output = Kp*error + new_integral;
    139e:	4604      	mov	r4, r0
    if(output < 0){
    13a0:	f7ff fa7a 	bl	898 <__aeabi_fcmplt>
    13a4:	b940      	cbnz	r0, 13b8 <PI_loop+0x90>
        output = 0;
    }else if(output > 100){
    13a6:	4908      	ldr	r1, [pc, #32]	; (13c8 <PI_loop+0xa0>)
    13a8:	4620      	mov	r0, r4
    13aa:	f7ff fa93 	bl	8d4 <__aeabi_fcmpgt>
    13ae:	b100      	cbz	r0, 13b2 <PI_loop+0x8a>
        output = 100;
    13b0:	4c05      	ldr	r4, [pc, #20]	; (13c8 <PI_loop+0xa0>)
    }
    
    return output;
}
    13b2:	4620      	mov	r0, r4
    13b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        output = 0;
    13b8:	2400      	movs	r4, #0
    return output;
    13ba:	e7fa      	b.n	13b2 <PI_loop+0x8a>
    13bc:	20000800 	.word	0x20000800
    13c0:	2000080c 	.word	0x2000080c
    13c4:	20000804 	.word	0x20000804
    13c8:	42c80000 	.word	0x42c80000
    13cc:	20000808 	.word	0x20000808

000013d0 <PI_change_setpoint>:

void PI_change_setpoint(float new_setpoint){
    controller_setpoint = new_setpoint;
    13d0:	4b01      	ldr	r3, [pc, #4]	; (13d8 <PI_change_setpoint+0x8>)
    13d2:	6018      	str	r0, [r3, #0]
}
    13d4:	4770      	bx	lr
    13d6:	bf00      	nop
    13d8:	20000800 	.word	0x20000800

000013dc <get_setpoint>:

float get_setpoint(){
    return controller_setpoint;
    13dc:	4b01      	ldr	r3, [pc, #4]	; (13e4 <get_setpoint+0x8>)
    13de:	6818      	ldr	r0, [r3, #0]
    13e0:	4770      	bx	lr
    13e2:	bf00      	nop
    13e4:	20000800 	.word	0x20000800

000013e8 <init_automation>:
float manual_pwm_vals[] = {0, 25, 50, 75, 100};
int8_t pwm_head = 0;
float controller_out = 0;

void init_automation(){
    for(int i=0; i < 24; i++){
    13e8:	4a09      	ldr	r2, [pc, #36]	; (1410 <init_automation+0x28>)
void init_automation(){
    13ea:	b508      	push	{r3, lr}
    13ec:	4611      	mov	r1, r2
    13ee:	2300      	movs	r3, #0
        auto_values[i] = i*4; // test vals
    13f0:	f802 3b01 	strb.w	r3, [r2], #1
    for(int i=0; i < 24; i++){
    13f4:	3304      	adds	r3, #4
    13f6:	b2db      	uxtb	r3, r3
    13f8:	2b60      	cmp	r3, #96	; 0x60
    13fa:	d1f9      	bne.n	13f0 <init_automation+0x8>
    }

    current_hour = 0;
    13fc:	4b05      	ldr	r3, [pc, #20]	; (1414 <init_automation+0x2c>)

    PI_init(auto_values[current_hour]);
    13fe:	7808      	ldrb	r0, [r1, #0]
    current_hour = 0;
    1400:	2200      	movs	r2, #0
    1402:	701a      	strb	r2, [r3, #0]
    PI_init(auto_values[current_hour]);
    1404:	f7ff f9a2 	bl	74c <__aeabi_ui2f>
}
    1408:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    PI_init(auto_values[current_hour]);
    140c:	f7ff bf80 	b.w	1310 <PI_init>
    1410:	20000f16 	.word	0x20000f16
    1414:	20000f2e 	.word	0x20000f2e

00001418 <get_value>:

float get_value(){
    1418:	b508      	push	{r3, lr}
    if(auto_state){
    141a:	4b0d      	ldr	r3, [pc, #52]	; (1450 <get_value+0x38>)
    141c:	781b      	ldrb	r3, [r3, #0]
    141e:	b17b      	cbz	r3, 1440 <get_value+0x28>
        controller_out = PI_loop(((float)get_adc_buffer()-200)/8);
    1420:	f7ff fd4c 	bl	ebc <get_adc_buffer>
    1424:	f7ff f992 	bl	74c <__aeabi_ui2f>
    1428:	490a      	ldr	r1, [pc, #40]	; (1454 <get_value+0x3c>)
    142a:	f7ff f8dd 	bl	5e8 <__aeabi_fsub>
    142e:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
    1432:	f7fe fe65 	bl	100 <__aeabi_fmul>
    1436:	f7ff ff77 	bl	1328 <PI_loop>
    143a:	4b07      	ldr	r3, [pc, #28]	; (1458 <get_value+0x40>)
    143c:	6018      	str	r0, [r3, #0]
        return controller_out;
    }else{
        return manual_pwm_vals[pwm_head]; 
    }
}
    143e:	bd08      	pop	{r3, pc}
        return manual_pwm_vals[pwm_head]; 
    1440:	4b06      	ldr	r3, [pc, #24]	; (145c <get_value+0x44>)
    1442:	f993 2000 	ldrsb.w	r2, [r3]
    1446:	4b06      	ldr	r3, [pc, #24]	; (1460 <get_value+0x48>)
    1448:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    144c:	e7f7      	b.n	143e <get_value+0x26>
    144e:	bf00      	nop
    1450:	20000f15 	.word	0x20000f15
    1454:	43480000 	.word	0x43480000
    1458:	20000810 	.word	0x20000810
    145c:	20000f2f 	.word	0x20000f2f
    1460:	200000b0 	.word	0x200000b0

00001464 <print_menu>:

void print_menu(){
    1464:	b508      	push	{r3, lr}
    printf("\033[2J\033[;H. \033[2J");
    1466:	482d      	ldr	r0, [pc, #180]	; (151c <print_menu+0xb8>)
    1468:	f001 fec0 	bl	31ec <printf>
    printf("\033[;H");
    146c:	482c      	ldr	r0, [pc, #176]	; (1520 <print_menu+0xbc>)
    146e:	f001 febd 	bl	31ec <printf>
    printf("====================\n");
    1472:	482c      	ldr	r0, [pc, #176]	; (1524 <print_menu+0xc0>)
    1474:	f001 feba 	bl	31ec <printf>
    printf(" MODE: ");
    1478:	482b      	ldr	r0, [pc, #172]	; (1528 <print_menu+0xc4>)
    147a:	f001 feb7 	bl	31ec <printf>
    if(auto_state){
    147e:	4b2b      	ldr	r3, [pc, #172]	; (152c <print_menu+0xc8>)
    1480:	781b      	ldrb	r3, [r3, #0]
    1482:	2b00      	cmp	r3, #0
    1484:	d048      	beq.n	1518 <print_menu+0xb4>
        printf("AUTO\n");
    1486:	482a      	ldr	r0, [pc, #168]	; (1530 <print_menu+0xcc>)
    }else{
        printf("MANUAL\n");
    1488:	f001 feb0 	bl	31ec <printf>
    }
    printf(" PWM: %f \n", get_value());
    148c:	f7ff ffc4 	bl	1418 <get_value>
    1490:	f7ff f84e 	bl	530 <__aeabi_f2d>
    1494:	4602      	mov	r2, r0
    1496:	460b      	mov	r3, r1
    1498:	4826      	ldr	r0, [pc, #152]	; (1534 <print_menu+0xd0>)
    149a:	f001 fea7 	bl	31ec <printf>
    printf(" ADC: %d\n", get_adc_buffer());
    149e:	f7ff fd0d 	bl	ebc <get_adc_buffer>
    14a2:	4601      	mov	r1, r0
    14a4:	4824      	ldr	r0, [pc, #144]	; (1538 <print_menu+0xd4>)
    14a6:	f001 fea1 	bl	31ec <printf>
    printf(" DIODE VAL: %f\n", ((float)get_adc_buffer()-200)/8);
    14aa:	f7ff fd07 	bl	ebc <get_adc_buffer>
    14ae:	f7ff f94d 	bl	74c <__aeabi_ui2f>
    14b2:	4922      	ldr	r1, [pc, #136]	; (153c <print_menu+0xd8>)
    14b4:	f7ff f898 	bl	5e8 <__aeabi_fsub>
    14b8:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
    14bc:	f7fe fe20 	bl	100 <__aeabi_fmul>
    14c0:	f7ff f836 	bl	530 <__aeabi_f2d>
    14c4:	4602      	mov	r2, r0
    14c6:	460b      	mov	r3, r1
    14c8:	481d      	ldr	r0, [pc, #116]	; (1540 <print_menu+0xdc>)
    14ca:	f001 fe8f 	bl	31ec <printf>
    printf(" SETPOINT: %f\n", get_setpoint());
    14ce:	f7ff ff85 	bl	13dc <get_setpoint>
    14d2:	f7ff f82d 	bl	530 <__aeabi_f2d>
    14d6:	4602      	mov	r2, r0
    14d8:	460b      	mov	r3, r1
    14da:	481a      	ldr	r0, [pc, #104]	; (1544 <print_menu+0xe0>)
    14dc:	f001 fe86 	bl	31ec <printf>
    printf(" CONTROLLER OUT: %f\n", controller_out);
    14e0:	4b19      	ldr	r3, [pc, #100]	; (1548 <print_menu+0xe4>)
    14e2:	6818      	ldr	r0, [r3, #0]
    14e4:	f7ff f824 	bl	530 <__aeabi_f2d>
    14e8:	4602      	mov	r2, r0
    14ea:	460b      	mov	r3, r1
    14ec:	4817      	ldr	r0, [pc, #92]	; (154c <print_menu+0xe8>)
    14ee:	f001 fe7d 	bl	31ec <printf>
    printf(" Current Hour: %d \n", current_hour);
    14f2:	4b17      	ldr	r3, [pc, #92]	; (1550 <print_menu+0xec>)
    14f4:	4817      	ldr	r0, [pc, #92]	; (1554 <print_menu+0xf0>)
    14f6:	7819      	ldrb	r1, [r3, #0]
    14f8:	f001 fe78 	bl	31ec <printf>
    printf(" 1 - Show table\n");
    14fc:	4816      	ldr	r0, [pc, #88]	; (1558 <print_menu+0xf4>)
    14fe:	f001 fe75 	bl	31ec <printf>
    printf(" 2 - Change value\n");
    1502:	4816      	ldr	r0, [pc, #88]	; (155c <print_menu+0xf8>)
    1504:	f001 fe72 	bl	31ec <printf>
    printf(" 3 - Change hour\n");
    1508:	4815      	ldr	r0, [pc, #84]	; (1560 <print_menu+0xfc>)
    150a:	f001 fe6f 	bl	31ec <printf>
    printf(" Select option: ");
}
    150e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    printf(" Select option: ");
    1512:	4814      	ldr	r0, [pc, #80]	; (1564 <print_menu+0x100>)
    1514:	f001 be6a 	b.w	31ec <printf>
        printf("MANUAL\n");
    1518:	4813      	ldr	r0, [pc, #76]	; (1568 <print_menu+0x104>)
    151a:	e7b5      	b.n	1488 <print_menu+0x24>
    151c:	00008b3d 	.word	0x00008b3d
    1520:	00008b4c 	.word	0x00008b4c
    1524:	00008b51 	.word	0x00008b51
    1528:	00008b67 	.word	0x00008b67
    152c:	20000f15 	.word	0x20000f15
    1530:	00008b6f 	.word	0x00008b6f
    1534:	00008b7d 	.word	0x00008b7d
    1538:	00008b88 	.word	0x00008b88
    153c:	43480000 	.word	0x43480000
    1540:	00008b92 	.word	0x00008b92
    1544:	00008ba2 	.word	0x00008ba2
    1548:	20000810 	.word	0x20000810
    154c:	00008bb1 	.word	0x00008bb1
    1550:	20000f2e 	.word	0x20000f2e
    1554:	00008bc6 	.word	0x00008bc6
    1558:	00008bda 	.word	0x00008bda
    155c:	00008beb 	.word	0x00008beb
    1560:	00008bfe 	.word	0x00008bfe
    1564:	00008c10 	.word	0x00008c10
    1568:	00008b75 	.word	0x00008b75

0000156c <handle_option>:

void handle_option(uint8_t option){
    uint8_t new_hour = 0;

    switch(option){
    156c:	2832      	cmp	r0, #50	; 0x32
void handle_option(uint8_t option){
    156e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch(option){
    1572:	d02e      	beq.n	15d2 <handle_option+0x66>
    1574:	2833      	cmp	r0, #51	; 0x33
    1576:	d07f      	beq.n	1678 <handle_option+0x10c>
    1578:	2831      	cmp	r0, #49	; 0x31
    157a:	f040 80b8 	bne.w	16ee <handle_option+0x182>
        case '1':
            printf("====================\n");
    157e:	485e      	ldr	r0, [pc, #376]	; (16f8 <handle_option+0x18c>)
    1580:	4d5e      	ldr	r5, [pc, #376]	; (16fc <handle_option+0x190>)
            printf("HOUR | VALUE\n");

            for(int i=0; i < 24; i++){
                printf(" %d : %d \n", i, auto_values[i]);
    1582:	4e5f      	ldr	r6, [pc, #380]	; (1700 <handle_option+0x194>)
            printf("====================\n");
    1584:	f001 fe32 	bl	31ec <printf>
            printf("HOUR | VALUE\n");
    1588:	485e      	ldr	r0, [pc, #376]	; (1704 <handle_option+0x198>)
    158a:	f001 fe2f 	bl	31ec <printf>
            for(int i=0; i < 24; i++){
    158e:	2400      	movs	r4, #0
                printf(" %d : %d \n", i, auto_values[i]);
    1590:	4621      	mov	r1, r4
    1592:	f815 2b01 	ldrb.w	r2, [r5], #1
    1596:	4630      	mov	r0, r6
            for(int i=0; i < 24; i++){
    1598:	3401      	adds	r4, #1
                printf(" %d : %d \n", i, auto_values[i]);
    159a:	f001 fe27 	bl	31ec <printf>
            for(int i=0; i < 24; i++){
    159e:	2c18      	cmp	r4, #24
    15a0:	d1f6      	bne.n	1590 <handle_option+0x24>
            }

            printf("Press ENTER to continue \n");
    15a2:	4859      	ldr	r0, [pc, #356]	; (1708 <handle_option+0x19c>)
    15a4:	f001 fe22 	bl	31ec <printf>

            while(!(uart_rx_rdy() && get_char() == '\r')){
    15a8:	f7ff fea2 	bl	12f0 <uart_rx_rdy>
    15ac:	b168      	cbz	r0, 15ca <handle_option+0x5e>
    15ae:	f7ff fea9 	bl	1304 <get_char>
    15b2:	280d      	cmp	r0, #13
    15b4:	d109      	bne.n	15ca <handle_option+0x5e>
        default:
            printf("ERROR: Option not available\n");
            break;
    }

    PI_change_setpoint(auto_values[current_hour]);
    15b6:	4b55      	ldr	r3, [pc, #340]	; (170c <handle_option+0x1a0>)
    15b8:	4a50      	ldr	r2, [pc, #320]	; (16fc <handle_option+0x190>)
    15ba:	781b      	ldrb	r3, [r3, #0]
    15bc:	5cd0      	ldrb	r0, [r2, r3]
    15be:	f7ff f8c5 	bl	74c <__aeabi_ui2f>
}
    15c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    PI_change_setpoint(auto_values[current_hour]);
    15c6:	f7ff bf03 	b.w	13d0 <PI_change_setpoint>
                sleep_ms(PRINT_PERIOD);
    15ca:	2064      	movs	r0, #100	; 0x64
    15cc:	f005 fe19 	bl	7202 <sleep_ms>
    15d0:	e7ea      	b.n	15a8 <handle_option+0x3c>
            printf("Hour to change: \n");
    15d2:	484f      	ldr	r0, [pc, #316]	; (1710 <handle_option+0x1a4>)
                printf("\r%d  ", hour_to_change);
    15d4:	4e4f      	ldr	r6, [pc, #316]	; (1714 <handle_option+0x1a8>)
            printf("Hour to change: \n");
    15d6:	f001 fe09 	bl	31ec <printf>
            char pressed = 'a';
    15da:	2561      	movs	r5, #97	; 0x61
            uint8_t hour_to_change = 0;
    15dc:	2400      	movs	r4, #0
                printf("\r%d  ", hour_to_change);
    15de:	4621      	mov	r1, r4
    15e0:	4630      	mov	r0, r6
    15e2:	f001 fe03 	bl	31ec <printf>
                if(uart_rx_rdy()){
    15e6:	f7ff fe83 	bl	12f0 <uart_rx_rdy>
    15ea:	b148      	cbz	r0, 1600 <handle_option+0x94>
                    pressed = get_char();
    15ec:	f7ff fe8a 	bl	1304 <get_char>
                    if(pressed == 'u'){
    15f0:	2875      	cmp	r0, #117	; 0x75
                    pressed = get_char();
    15f2:	4605      	mov	r5, r0
                    if(pressed == 'u'){
    15f4:	d138      	bne.n	1668 <handle_option+0xfc>
                        hour_to_change++;
    15f6:	3401      	adds	r4, #1
                        hour_to_change--;
    15f8:	b2e4      	uxtb	r4, r4
                    hour_to_change = 0;
    15fa:	2c18      	cmp	r4, #24
    15fc:	bf28      	it	cs
    15fe:	2400      	movcs	r4, #0
                sleep_ms(PRINT_PERIOD);
    1600:	2064      	movs	r0, #100	; 0x64
    1602:	f005 fdfe 	bl	7202 <sleep_ms>
            while(pressed != '\r'){
    1606:	2d0d      	cmp	r5, #13
    1608:	d1e9      	bne.n	15de <handle_option+0x72>
            printf("\nCurrent value: %d. New value ? \n", auto_values[hour_to_change]);
    160a:	4f3c      	ldr	r7, [pc, #240]	; (16fc <handle_option+0x190>)
    160c:	4842      	ldr	r0, [pc, #264]	; (1718 <handle_option+0x1ac>)
    160e:	5d39      	ldrb	r1, [r7, r4]
                printf("\r%d  ", new_val);
    1610:	f8df 8100 	ldr.w	r8, [pc, #256]	; 1714 <handle_option+0x1a8>
            printf("\nCurrent value: %d. New value ? \n", auto_values[hour_to_change]);
    1614:	f001 fdea 	bl	31ec <printf>
            int new_val = 0;
    1618:	2500      	movs	r5, #0
            pressed = 'a';
    161a:	2661      	movs	r6, #97	; 0x61
                printf("\r%d  ", new_val);
    161c:	4629      	mov	r1, r5
    161e:	4640      	mov	r0, r8
    1620:	f001 fde4 	bl	31ec <printf>
                if(uart_rx_rdy()){
    1624:	f7ff fe64 	bl	12f0 <uart_rx_rdy>
    1628:	b138      	cbz	r0, 163a <handle_option+0xce>
                    pressed = get_char();
    162a:	f7ff fe6b 	bl	1304 <get_char>
                    if(pressed == 'u'){
    162e:	2875      	cmp	r0, #117	; 0x75
                    pressed = get_char();
    1630:	4606      	mov	r6, r0
                    if(pressed == 'u'){
    1632:	d11d      	bne.n	1670 <handle_option+0x104>
                        new_val = new_val + 1;
    1634:	3501      	adds	r5, #1
                if(new_val < 0){
    1636:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
                sleep_ms(PRINT_PERIOD);
    163a:	2064      	movs	r0, #100	; 0x64
    163c:	f005 fde1 	bl	7202 <sleep_ms>
            while(pressed != '\r'){
    1640:	2e0d      	cmp	r6, #13
    1642:	d1eb      	bne.n	161c <handle_option+0xb0>
            printf("Value changed successfully!\n");
    1644:	4835      	ldr	r0, [pc, #212]	; (171c <handle_option+0x1b0>)
            auto_values[hour_to_change] = new_val;
    1646:	553d      	strb	r5, [r7, r4]
            printf("Value changed successfully!\n");
    1648:	f001 fdd0 	bl	31ec <printf>
            printf("Press ENTER to continue \n");
    164c:	482e      	ldr	r0, [pc, #184]	; (1708 <handle_option+0x19c>)
    164e:	f001 fdcd 	bl	31ec <printf>
            while(!(uart_rx_rdy() && get_char() == '\r')){
    1652:	f7ff fe4d 	bl	12f0 <uart_rx_rdy>
    1656:	b118      	cbz	r0, 1660 <handle_option+0xf4>
    1658:	f7ff fe54 	bl	1304 <get_char>
    165c:	280d      	cmp	r0, #13
    165e:	d0aa      	beq.n	15b6 <handle_option+0x4a>
                sleep_ms(PRINT_PERIOD);
    1660:	2064      	movs	r0, #100	; 0x64
    1662:	f005 fdce 	bl	7202 <sleep_ms>
    1666:	e7f4      	b.n	1652 <handle_option+0xe6>
                    }else if(pressed == 'd'){
    1668:	2864      	cmp	r0, #100	; 0x64
    166a:	d1c9      	bne.n	1600 <handle_option+0x94>
                        hour_to_change--;
    166c:	3c01      	subs	r4, #1
    166e:	e7c3      	b.n	15f8 <handle_option+0x8c>
                    }else if(pressed == 'd'){
    1670:	2864      	cmp	r0, #100	; 0x64
    1672:	d1e2      	bne.n	163a <handle_option+0xce>
                        new_val = new_val - 1;
    1674:	3d01      	subs	r5, #1
    1676:	e7de      	b.n	1636 <handle_option+0xca>
            printf("Current hour: %d. New hour? \n", current_hour);
    1678:	4e24      	ldr	r6, [pc, #144]	; (170c <handle_option+0x1a0>)
    167a:	4829      	ldr	r0, [pc, #164]	; (1720 <handle_option+0x1b4>)
    167c:	7831      	ldrb	r1, [r6, #0]
                printf("\r%d  ", new_hour);
    167e:	4f25      	ldr	r7, [pc, #148]	; (1714 <handle_option+0x1a8>)
            printf("Current hour: %d. New hour? \n", current_hour);
    1680:	f001 fdb4 	bl	31ec <printf>
            pressed = 'a';
    1684:	2561      	movs	r5, #97	; 0x61
    uint8_t new_hour = 0;
    1686:	2400      	movs	r4, #0
                printf("\r%d  ", new_hour);
    1688:	4621      	mov	r1, r4
    168a:	4638      	mov	r0, r7
    168c:	f001 fdae 	bl	31ec <printf>
                if(uart_rx_rdy()){
    1690:	f7ff fe2e 	bl	12f0 <uart_rx_rdy>
    1694:	b148      	cbz	r0, 16aa <handle_option+0x13e>
                    pressed = get_char();
    1696:	f7ff fe35 	bl	1304 <get_char>
                    if(pressed == 'u'){
    169a:	2875      	cmp	r0, #117	; 0x75
                    pressed = get_char();
    169c:	4605      	mov	r5, r0
                    if(pressed == 'u'){
    169e:	d122      	bne.n	16e6 <handle_option+0x17a>
                        new_hour++;
    16a0:	3401      	adds	r4, #1
                        new_hour--;
    16a2:	b2e4      	uxtb	r4, r4
                    new_hour = 0;
    16a4:	2c18      	cmp	r4, #24
    16a6:	bf28      	it	cs
    16a8:	2400      	movcs	r4, #0
                sleep_ms(PRINT_PERIOD);
    16aa:	2064      	movs	r0, #100	; 0x64
    16ac:	f005 fda9 	bl	7202 <sleep_ms>
            while(pressed != '\r'){
    16b0:	2d0d      	cmp	r5, #13
    16b2:	d1e9      	bne.n	1688 <handle_option+0x11c>
            PI_change_setpoint(auto_values[current_hour]);
    16b4:	4b11      	ldr	r3, [pc, #68]	; (16fc <handle_option+0x190>)
            current_hour = new_hour;
    16b6:	7034      	strb	r4, [r6, #0]
            PI_change_setpoint(auto_values[current_hour]);
    16b8:	5d18      	ldrb	r0, [r3, r4]
    16ba:	f7ff f847 	bl	74c <__aeabi_ui2f>
    16be:	f7ff fe87 	bl	13d0 <PI_change_setpoint>
            printf("Value changed successfully!\n");
    16c2:	4816      	ldr	r0, [pc, #88]	; (171c <handle_option+0x1b0>)
    16c4:	f001 fd92 	bl	31ec <printf>
            printf("Press ENTER to continue \n");
    16c8:	480f      	ldr	r0, [pc, #60]	; (1708 <handle_option+0x19c>)
    16ca:	f001 fd8f 	bl	31ec <printf>
            while(!(uart_rx_rdy() && get_char() == '\r')){
    16ce:	f7ff fe0f 	bl	12f0 <uart_rx_rdy>
    16d2:	b120      	cbz	r0, 16de <handle_option+0x172>
    16d4:	f7ff fe16 	bl	1304 <get_char>
    16d8:	280d      	cmp	r0, #13
    16da:	f43f af6c 	beq.w	15b6 <handle_option+0x4a>
                sleep_ms(PRINT_PERIOD);
    16de:	2064      	movs	r0, #100	; 0x64
    16e0:	f005 fd8f 	bl	7202 <sleep_ms>
    16e4:	e7f3      	b.n	16ce <handle_option+0x162>
                    }else if(pressed == 'd'){
    16e6:	2864      	cmp	r0, #100	; 0x64
    16e8:	d1df      	bne.n	16aa <handle_option+0x13e>
                        new_hour--;
    16ea:	3c01      	subs	r4, #1
    16ec:	e7d9      	b.n	16a2 <handle_option+0x136>
            printf("ERROR: Option not available\n");
    16ee:	480d      	ldr	r0, [pc, #52]	; (1724 <handle_option+0x1b8>)
    16f0:	f001 fd7c 	bl	31ec <printf>
            break;
    16f4:	e75f      	b.n	15b6 <handle_option+0x4a>
    16f6:	bf00      	nop
    16f8:	00008b51 	.word	0x00008b51
    16fc:	20000f16 	.word	0x20000f16
    1700:	00008c2f 	.word	0x00008c2f
    1704:	00008c21 	.word	0x00008c21
    1708:	00008c3a 	.word	0x00008c3a
    170c:	20000f2e 	.word	0x20000f2e
    1710:	00008c54 	.word	0x00008c54
    1714:	00008c66 	.word	0x00008c66
    1718:	00008c6c 	.word	0x00008c6c
    171c:	00008c8e 	.word	0x00008c8e
    1720:	00008cab 	.word	0x00008cab
    1724:	00008cc9 	.word	0x00008cc9

00001728 <select_auto>:

void select_auto(bool option){
    1728:	b508      	push	{r3, lr}
    auto_state = option;
    172a:	4b06      	ldr	r3, [pc, #24]	; (1744 <select_auto+0x1c>)
    PI_change_setpoint(auto_values[current_hour]);
    172c:	4a06      	ldr	r2, [pc, #24]	; (1748 <select_auto+0x20>)
    auto_state = option;
    172e:	7018      	strb	r0, [r3, #0]
    PI_change_setpoint(auto_values[current_hour]);
    1730:	4b06      	ldr	r3, [pc, #24]	; (174c <select_auto+0x24>)
    1732:	781b      	ldrb	r3, [r3, #0]
    1734:	5cd0      	ldrb	r0, [r2, r3]
    1736:	f7ff f809 	bl	74c <__aeabi_ui2f>
}
    173a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    PI_change_setpoint(auto_values[current_hour]);
    173e:	f7ff be47 	b.w	13d0 <PI_change_setpoint>
    1742:	bf00      	nop
    1744:	20000f15 	.word	0x20000f15
    1748:	20000f16 	.word	0x20000f16
    174c:	20000f2e 	.word	0x20000f2e

00001750 <change_manual>:

void change_manual(uint8_t direction){
    if(direction == UP){
    1750:	4a08      	ldr	r2, [pc, #32]	; (1774 <change_manual+0x24>)
    1752:	f992 3000 	ldrsb.w	r3, [r2]
    1756:	2801      	cmp	r0, #1
        pwm_head++;
    1758:	bf0c      	ite	eq
    175a:	3301      	addeq	r3, #1
    }else{
        pwm_head--;
    175c:	f103 33ff 	addne.w	r3, r3, #4294967295
    1760:	b25b      	sxtb	r3, r3
    }

    if(pwm_head > 4){
    1762:	2b04      	cmp	r3, #4
    1764:	dd02      	ble.n	176c <change_manual+0x1c>
        pwm_head = 4;
    1766:	2304      	movs	r3, #4
    }else if(pwm_head < 0){
        pwm_head = 0;
    1768:	7013      	strb	r3, [r2, #0]
    }
    176a:	4770      	bx	lr
    }else if(pwm_head < 0){
    176c:	2b00      	cmp	r3, #0
        pwm_head = 0;
    176e:	bfb8      	it	lt
    1770:	2300      	movlt	r3, #0
    1772:	e7f9      	b.n	1768 <change_manual+0x18>
    1774:	20000f2f 	.word	0x20000f2f

00001778 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    1778:	680b      	ldr	r3, [r1, #0]
    177a:	3301      	adds	r3, #1
    177c:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    177e:	4b01      	ldr	r3, [pc, #4]	; (1784 <char_out+0xc>)
    1780:	681b      	ldr	r3, [r3, #0]
    1782:	4718      	bx	r3
    1784:	200000c4 	.word	0x200000c4

00001788 <__printk_hook_install>:
	_char_out = fn;
    1788:	4b01      	ldr	r3, [pc, #4]	; (1790 <__printk_hook_install+0x8>)
    178a:	6018      	str	r0, [r3, #0]
}
    178c:	4770      	bx	lr
    178e:	bf00      	nop
    1790:	200000c4 	.word	0x200000c4

00001794 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    1794:	b507      	push	{r0, r1, r2, lr}
    1796:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    1798:	2100      	movs	r1, #0
{
    179a:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    179c:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    179e:	4803      	ldr	r0, [pc, #12]	; (17ac <vprintk+0x18>)
    17a0:	a901      	add	r1, sp, #4
    17a2:	f000 f8eb 	bl	197c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    17a6:	b003      	add	sp, #12
    17a8:	f85d fb04 	ldr.w	pc, [sp], #4
    17ac:	00001779 	.word	0x00001779

000017b0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    17b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    17b4:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    17b8:	f019 0808 	ands.w	r8, r9, #8
{
    17bc:	4604      	mov	r4, r0
    17be:	4693      	mov	fp, r2
	if (processing) {
    17c0:	d00d      	beq.n	17de <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    17c2:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    17c4:	bf0c      	ite	eq
    17c6:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    17ca:	f049 0920 	orrne.w	r9, r9, #32
    17ce:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    17d2:	f38b 8811 	msr	BASEPRI, fp
    17d6:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    17da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    17de:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    17e2:	2902      	cmp	r1, #2
    17e4:	d107      	bne.n	17f6 <process_event+0x46>
			evt = process_recheck(mgr);
    17e6:	4620      	mov	r0, r4
    17e8:	f005 fd5c 	bl	72a4 <process_recheck>
		if (evt == EVT_NOP) {
    17ec:	2800      	cmp	r0, #0
    17ee:	d0f0      	beq.n	17d2 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    17f0:	2801      	cmp	r0, #1
    17f2:	8b23      	ldrh	r3, [r4, #24]
    17f4:	d150      	bne.n	1898 <process_event+0xe8>
			res = mgr->last_res;
    17f6:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    17f8:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    17fa:	2f00      	cmp	r7, #0
    17fc:	da15      	bge.n	182a <process_event+0x7a>
		*clients = mgr->clients;
    17fe:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1800:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    1804:	e9c4 8800 	strd	r8, r8, [r4]
    1808:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    180c:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    180e:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1810:	8b21      	ldrh	r1, [r4, #24]
    1812:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1816:	45ca      	cmp	sl, r9
    1818:	d002      	beq.n	1820 <process_event+0x70>
		if (do_monitors
    181a:	68a3      	ldr	r3, [r4, #8]
    181c:	2b00      	cmp	r3, #0
    181e:	d15c      	bne.n	18da <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
    1820:	b90d      	cbnz	r5, 1826 <process_event+0x76>
		    || (transit != NULL)) {
    1822:	2e00      	cmp	r6, #0
    1824:	d074      	beq.n	1910 <process_event+0x160>
    1826:	2300      	movs	r3, #0
    1828:	e058      	b.n	18dc <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    182a:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    182e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1830:	2a01      	cmp	r2, #1
    1832:	d820      	bhi.n	1876 <process_event+0xc6>
		*clients = mgr->clients;
    1834:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    1838:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    183a:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
    183c:	b289      	uxth	r1, r1
	list->tail = NULL;
    183e:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1842:	d10c      	bne.n	185e <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1844:	2d00      	cmp	r5, #0
    1846:	462b      	mov	r3, r5
    1848:	bf38      	it	cc
    184a:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    184c:	b12b      	cbz	r3, 185a <process_event+0xaa>
				mgr->refs += 1U;
    184e:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1850:	681b      	ldr	r3, [r3, #0]
    1852:	3201      	adds	r2, #1
    1854:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1856:	2b00      	cmp	r3, #0
    1858:	d1f8      	bne.n	184c <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    185a:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    185e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1860:	4620      	mov	r0, r4
    1862:	f005 fd1f 	bl	72a4 <process_recheck>
    1866:	4606      	mov	r6, r0
    1868:	2800      	cmp	r0, #0
    186a:	d0d1      	beq.n	1810 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    186c:	8b23      	ldrh	r3, [r4, #24]
    186e:	f043 0320 	orr.w	r3, r3, #32
    1872:	8323      	strh	r3, [r4, #24]
    1874:	e7cb      	b.n	180e <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1876:	2b04      	cmp	r3, #4
    1878:	d10c      	bne.n	1894 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    187a:	f021 0107 	bic.w	r1, r1, #7
    187e:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1880:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1882:	4620      	mov	r0, r4
    1884:	f005 fd0e 	bl	72a4 <process_recheck>
    1888:	4605      	mov	r5, r0
    188a:	2800      	cmp	r0, #0
    188c:	d0bf      	beq.n	180e <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    188e:	f041 0120 	orr.w	r1, r1, #32
    1892:	8321      	strh	r1, [r4, #24]
    1894:	2500      	movs	r5, #0
    1896:	e7ba      	b.n	180e <process_event+0x5e>
		} else if (evt == EVT_START) {
    1898:	2803      	cmp	r0, #3
    189a:	d109      	bne.n	18b0 <process_event+0x100>
			transit = mgr->transitions->start;
    189c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    189e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    18a2:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    18a4:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    18a8:	8323      	strh	r3, [r4, #24]
}
    18aa:	2500      	movs	r5, #0
		res = 0;
    18ac:	462f      	mov	r7, r5
    18ae:	e7af      	b.n	1810 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    18b0:	2804      	cmp	r0, #4
    18b2:	d106      	bne.n	18c2 <process_event+0x112>
			transit = mgr->transitions->stop;
    18b4:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    18b6:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    18ba:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    18bc:	f043 0304 	orr.w	r3, r3, #4
    18c0:	e7f2      	b.n	18a8 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
    18c2:	2805      	cmp	r0, #5
    18c4:	d106      	bne.n	18d4 <process_event+0x124>
			transit = mgr->transitions->reset;
    18c6:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    18c8:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    18cc:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    18ce:	f043 0305 	orr.w	r3, r3, #5
    18d2:	e7e9      	b.n	18a8 <process_event+0xf8>
    18d4:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    18d6:	462e      	mov	r6, r5
    18d8:	e7e8      	b.n	18ac <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
    18da:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    18dc:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    18e0:	8321      	strh	r1, [r4, #24]
    18e2:	f38b 8811 	msr	BASEPRI, fp
    18e6:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    18ea:	bb03      	cbnz	r3, 192e <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
    18ec:	2d00      	cmp	r5, #0
    18ee:	d133      	bne.n	1958 <process_event+0x1a8>
			if (transit != NULL) {
    18f0:	b116      	cbz	r6, 18f8 <process_event+0x148>
				transit(mgr, transition_complete);
    18f2:	4921      	ldr	r1, [pc, #132]	; (1978 <process_event+0x1c8>)
    18f4:	4620      	mov	r0, r4
    18f6:	47b0      	blx	r6
	__asm__ volatile(
    18f8:	f04f 0320 	mov.w	r3, #32
    18fc:	f3ef 8b11 	mrs	fp, BASEPRI
    1900:	f383 8812 	msr	BASEPRI_MAX, r3
    1904:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1908:	8b23      	ldrh	r3, [r4, #24]
    190a:	f023 0308 	bic.w	r3, r3, #8
    190e:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1910:	8b23      	ldrh	r3, [r4, #24]
    1912:	06da      	lsls	r2, r3, #27
    1914:	d528      	bpl.n	1968 <process_event+0x1b8>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1916:	f023 0310 	bic.w	r3, r3, #16
    191a:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    191c:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    191e:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    1922:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    1926:	2900      	cmp	r1, #0
    1928:	f47f af5b 	bne.w	17e2 <process_event+0x32>
out:
    192c:	e751      	b.n	17d2 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    192e:	68a1      	ldr	r1, [r4, #8]
    1930:	2900      	cmp	r1, #0
    1932:	d0db      	beq.n	18ec <process_event+0x13c>
	return node->next;
    1934:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    1936:	f8d1 b004 	ldr.w	fp, [r1, #4]
    193a:	2b00      	cmp	r3, #0
    193c:	bf38      	it	cc
    193e:	2300      	movcc	r3, #0
    1940:	4699      	mov	r9, r3
    1942:	4652      	mov	r2, sl
    1944:	463b      	mov	r3, r7
    1946:	4620      	mov	r0, r4
    1948:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    194a:	f1b9 0f00 	cmp.w	r9, #0
    194e:	d0cd      	beq.n	18ec <process_event+0x13c>
    1950:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1954:	4649      	mov	r1, r9
    1956:	e7ee      	b.n	1936 <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    1958:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    195a:	463b      	mov	r3, r7
    195c:	4652      	mov	r2, sl
    195e:	4620      	mov	r0, r4
    1960:	682d      	ldr	r5, [r5, #0]
    1962:	f005 fcbb 	bl	72dc <notify_one>
    1966:	e7c1      	b.n	18ec <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1968:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    196c:	bf1e      	ittt	ne
    196e:	f023 0320 	bicne.w	r3, r3, #32
    1972:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    1974:	2102      	movne	r1, #2
    1976:	e7d2      	b.n	191e <process_event+0x16e>
    1978:	00007309 	.word	0x00007309

0000197c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    197c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1980:	b0a5      	sub	sp, #148	; 0x94
    1982:	4688      	mov	r8, r1
    1984:	9003      	str	r0, [sp, #12]
    1986:	4691      	mov	r9, r2
    1988:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    198a:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    198c:	f899 0000 	ldrb.w	r0, [r9]
    1990:	b910      	cbnz	r0, 1998 <cbvprintf+0x1c>
			OUTC(' ');
			--width;
		}
	}

	return count;
    1992:	4628      	mov	r0, r5
    1994:	f000 be15 	b.w	25c2 <cbvprintf+0xc46>
		if (*fp != '%') {
    1998:	f109 0301 	add.w	r3, r9, #1
    199c:	2825      	cmp	r0, #37	; 0x25
    199e:	9309      	str	r3, [sp, #36]	; 0x24
    19a0:	d007      	beq.n	19b2 <cbvprintf+0x36>
			OUTC(*fp++);
    19a2:	4641      	mov	r1, r8
			OUTC('%');
    19a4:	9b03      	ldr	r3, [sp, #12]
    19a6:	4798      	blx	r3
    19a8:	2800      	cmp	r0, #0
    19aa:	f2c0 860a 	blt.w	25c2 <cbvprintf+0xc46>
    19ae:	3501      	adds	r5, #1
		if (bps == NULL) {
    19b0:	e245      	b.n	1e3e <cbvprintf+0x4c2>
		} state = {
    19b2:	2218      	movs	r2, #24
    19b4:	2100      	movs	r1, #0
    19b6:	a816      	add	r0, sp, #88	; 0x58
    19b8:	f005 fe0d 	bl	75d6 <memset>
	if (*sp == '%') {
    19bc:	f899 3001 	ldrb.w	r3, [r9, #1]
    19c0:	2b25      	cmp	r3, #37	; 0x25
    19c2:	d079      	beq.n	1ab8 <cbvprintf+0x13c>
    19c4:	2200      	movs	r2, #0
    19c6:	9809      	ldr	r0, [sp, #36]	; 0x24
    19c8:	4616      	mov	r6, r2
    19ca:	4696      	mov	lr, r2
    19cc:	4617      	mov	r7, r2
    19ce:	4694      	mov	ip, r2
    19d0:	4601      	mov	r1, r0
		switch (*sp) {
    19d2:	f810 3b01 	ldrb.w	r3, [r0], #1
    19d6:	2b2b      	cmp	r3, #43	; 0x2b
    19d8:	f000 809e 	beq.w	1b18 <cbvprintf+0x19c>
    19dc:	f200 8095 	bhi.w	1b0a <cbvprintf+0x18e>
    19e0:	2b20      	cmp	r3, #32
    19e2:	f000 809b 	beq.w	1b1c <cbvprintf+0x1a0>
    19e6:	2b23      	cmp	r3, #35	; 0x23
    19e8:	f000 809b 	beq.w	1b22 <cbvprintf+0x1a6>
    19ec:	f1bc 0f00 	cmp.w	ip, #0
    19f0:	d005      	beq.n	19fe <cbvprintf+0x82>
    19f2:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    19f6:	f040 0004 	orr.w	r0, r0, #4
    19fa:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    19fe:	b12f      	cbz	r7, 1a0c <cbvprintf+0x90>
    1a00:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    1a04:	f040 0008 	orr.w	r0, r0, #8
    1a08:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    1a0c:	f1be 0f00 	cmp.w	lr, #0
    1a10:	d005      	beq.n	1a1e <cbvprintf+0xa2>
    1a12:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    1a16:	f040 0010 	orr.w	r0, r0, #16
    1a1a:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    1a1e:	b12e      	cbz	r6, 1a2c <cbvprintf+0xb0>
    1a20:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    1a24:	f040 0020 	orr.w	r0, r0, #32
    1a28:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    1a2c:	b12a      	cbz	r2, 1a3a <cbvprintf+0xbe>
    1a2e:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
    1a32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    1a36:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
	if (conv->flag_zero && conv->flag_dash) {
    1a3a:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
    1a3e:	f002 0044 	and.w	r0, r2, #68	; 0x44
    1a42:	2844      	cmp	r0, #68	; 0x44
    1a44:	d103      	bne.n	1a4e <cbvprintf+0xd2>
		conv->flag_zero = false;
    1a46:	f36f 1286 	bfc	r2, #6, #1
    1a4a:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
	conv->width_present = true;
    1a4e:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
	if (*sp == '*') {
    1a52:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    1a54:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    1a58:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
	if (*sp == '*') {
    1a5c:	d17c      	bne.n	1b58 <cbvprintf+0x1dc>
		conv->width_star = true;
    1a5e:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
    1a62:	f042 0201 	orr.w	r2, r2, #1
    1a66:	1c4b      	adds	r3, r1, #1
    1a68:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
	conv->prec_present = (*sp == '.');
    1a6c:	781a      	ldrb	r2, [r3, #0]
    1a6e:	2a2e      	cmp	r2, #46	; 0x2e
    1a70:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
    1a74:	bf0c      	ite	eq
    1a76:	2101      	moveq	r1, #1
    1a78:	2100      	movne	r1, #0
    1a7a:	f361 0241 	bfi	r2, r1, #1, #1
    1a7e:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
	if (!conv->prec_present) {
    1a82:	d175      	bne.n	1b70 <cbvprintf+0x1f4>
	if (*sp == '*') {
    1a84:	785a      	ldrb	r2, [r3, #1]
    1a86:	2a2a      	cmp	r2, #42	; 0x2a
    1a88:	d06b      	beq.n	1b62 <cbvprintf+0x1e6>
    1a8a:	3301      	adds	r3, #1
	size_t val = 0;
    1a8c:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    1a8e:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    1a90:	4618      	mov	r0, r3
    1a92:	f810 2b01 	ldrb.w	r2, [r0], #1
    1a96:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1a9a:	2f09      	cmp	r7, #9
    1a9c:	f240 80aa 	bls.w	1bf4 <cbvprintf+0x278>
	conv->unsupported |= ((conv->prec_value < 0)
    1aa0:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
	conv->prec_value = prec;
    1aa4:	911a      	str	r1, [sp, #104]	; 0x68
	conv->unsupported |= ((conv->prec_value < 0)
    1aa6:	f3c2 0040 	ubfx	r0, r2, #1, #1
    1aaa:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    1aae:	f361 0241 	bfi	r2, r1, #1, #1
    1ab2:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
	return sp;
    1ab6:	e05b      	b.n	1b70 <cbvprintf+0x1f4>
		conv->specifier = *sp++;
    1ab8:	f109 0202 	add.w	r2, r9, #2
    1abc:	9209      	str	r2, [sp, #36]	; 0x24
    1abe:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
		if (conv->width_star) {
    1ac2:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
    1ac6:	07de      	lsls	r6, r3, #31
    1ac8:	f140 816f 	bpl.w	1daa <cbvprintf+0x42e>
			width = va_arg(ap, int);
    1acc:	f854 2b04 	ldr.w	r2, [r4], #4
    1ad0:	9208      	str	r2, [sp, #32]
			if (width < 0) {
    1ad2:	2a00      	cmp	r2, #0
    1ad4:	da08      	bge.n	1ae8 <cbvprintf+0x16c>
				conv->flag_dash = true;
    1ad6:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
    1ada:	f042 0204 	orr.w	r2, r2, #4
    1ade:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
				width = -width;
    1ae2:	9a08      	ldr	r2, [sp, #32]
    1ae4:	4252      	negs	r2, r2
		int width = -1;
    1ae6:	9208      	str	r2, [sp, #32]
		if (conv->prec_star) {
    1ae8:	0758      	lsls	r0, r3, #29
    1aea:	f140 8166 	bpl.w	1dba <cbvprintf+0x43e>
			int arg = va_arg(ap, int);
    1aee:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
    1af2:	2f00      	cmp	r7, #0
    1af4:	f280 8165 	bge.w	1dc2 <cbvprintf+0x446>
				conv->prec_present = false;
    1af8:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
    1afc:	f36f 0341 	bfc	r3, #1, #1
    1b00:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
		int precision = -1;
    1b04:	f04f 37ff 	mov.w	r7, #4294967295
    1b08:	e15b      	b.n	1dc2 <cbvprintf+0x446>
		switch (*sp) {
    1b0a:	2b2d      	cmp	r3, #45	; 0x2d
    1b0c:	d00b      	beq.n	1b26 <cbvprintf+0x1aa>
    1b0e:	2b30      	cmp	r3, #48	; 0x30
    1b10:	f47f af6c 	bne.w	19ec <cbvprintf+0x70>
			conv->flag_zero = true;
    1b14:	2201      	movs	r2, #1
	} while (loop);
    1b16:	e75b      	b.n	19d0 <cbvprintf+0x54>
			conv->flag_plus = true;
    1b18:	2701      	movs	r7, #1
    1b1a:	e759      	b.n	19d0 <cbvprintf+0x54>
			conv->flag_space = true;
    1b1c:	f04f 0e01 	mov.w	lr, #1
    1b20:	e756      	b.n	19d0 <cbvprintf+0x54>
			conv->flag_hash = true;
    1b22:	2601      	movs	r6, #1
    1b24:	e754      	b.n	19d0 <cbvprintf+0x54>
		switch (*sp) {
    1b26:	f04f 0c01 	mov.w	ip, #1
    1b2a:	e751      	b.n	19d0 <cbvprintf+0x54>
		val = 10U * val + *sp++ - '0';
    1b2c:	fb0c 0202 	mla	r2, ip, r2, r0
    1b30:	3a30      	subs	r2, #48	; 0x30
    1b32:	4633      	mov	r3, r6
    1b34:	461e      	mov	r6, r3
    1b36:	f816 0b01 	ldrb.w	r0, [r6], #1
    1b3a:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1b3e:	2f09      	cmp	r7, #9
    1b40:	d9f4      	bls.n	1b2c <cbvprintf+0x1b0>
	if (sp != wp) {
    1b42:	4299      	cmp	r1, r3
    1b44:	d092      	beq.n	1a6c <cbvprintf+0xf0>
		conv->unsupported |= ((conv->width_value < 0)
    1b46:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
		conv->width_value = width;
    1b4a:	9219      	str	r2, [sp, #100]	; 0x64
				      || (width != (size_t)conv->width_value));
    1b4c:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    1b4e:	f362 0141 	bfi	r1, r2, #1, #1
    1b52:	f88d 1060 	strb.w	r1, [sp, #96]	; 0x60
    1b56:	e789      	b.n	1a6c <cbvprintf+0xf0>
    1b58:	460b      	mov	r3, r1
	size_t val = 0;
    1b5a:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1b5c:	f04f 0c0a 	mov.w	ip, #10
    1b60:	e7e8      	b.n	1b34 <cbvprintf+0x1b8>
		conv->prec_star = true;
    1b62:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
    1b66:	f042 0204 	orr.w	r2, r2, #4
    1b6a:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
		return ++sp;
    1b6e:	3302      	adds	r3, #2
	switch (*sp) {
    1b70:	4619      	mov	r1, r3
    1b72:	f811 2b01 	ldrb.w	r2, [r1], #1
    1b76:	2a6c      	cmp	r2, #108	; 0x6c
    1b78:	d05c      	beq.n	1c34 <cbvprintf+0x2b8>
    1b7a:	d840      	bhi.n	1bfe <cbvprintf+0x282>
    1b7c:	2a68      	cmp	r2, #104	; 0x68
    1b7e:	d046      	beq.n	1c0e <cbvprintf+0x292>
    1b80:	2a6a      	cmp	r2, #106	; 0x6a
    1b82:	d061      	beq.n	1c48 <cbvprintf+0x2cc>
    1b84:	2a4c      	cmp	r2, #76	; 0x4c
    1b86:	d067      	beq.n	1c58 <cbvprintf+0x2dc>
    1b88:	4619      	mov	r1, r3
	conv->specifier = *sp++;
    1b8a:	460b      	mov	r3, r1
    1b8c:	f813 2b01 	ldrb.w	r2, [r3], #1
    1b90:	9309      	str	r3, [sp, #36]	; 0x24
	switch (conv->specifier) {
    1b92:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    1b94:	f88d 2063 	strb.w	r2, [sp, #99]	; 0x63
	switch (conv->specifier) {
    1b98:	f200 80df 	bhi.w	1d5a <cbvprintf+0x3de>
    1b9c:	2a57      	cmp	r2, #87	; 0x57
    1b9e:	d868      	bhi.n	1c72 <cbvprintf+0x2f6>
    1ba0:	2a41      	cmp	r2, #65	; 0x41
    1ba2:	d004      	beq.n	1bae <cbvprintf+0x232>
    1ba4:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    1ba8:	2b02      	cmp	r3, #2
    1baa:	f200 80d6 	bhi.w	1d5a <cbvprintf+0x3de>
		conv->specifier_cat = SPECIFIER_FP;
    1bae:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
			|| (conv->specifier == 'A');
    1bb2:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
    1bb6:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
    1bb8:	f1a2 0a41 	sub.w	sl, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
    1bbc:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
    1bc0:	f1da 0200 	rsbs	r2, sl, #0
		conv->specifier_a = (conv->specifier == 'a')
    1bc4:	f89d 1061 	ldrb.w	r1, [sp, #97]	; 0x61
		conv->specifier_cat = SPECIFIER_FP;
    1bc8:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
			|| (conv->specifier == 'A');
    1bcc:	eb42 020a 	adc.w	r2, r2, sl
		conv->specifier_a = (conv->specifier == 'a')
    1bd0:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
    1bd4:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
    1bd6:	f88d 1061 	strb.w	r1, [sp, #97]	; 0x61
		if (conv->specifier_a
    1bda:	b2cb      	uxtb	r3, r1
    1bdc:	f100 80e3 	bmi.w	1da6 <cbvprintf+0x42a>
		if (conv->length_mod == LENGTH_L) {
    1be0:	f003 0278 	and.w	r2, r3, #120	; 0x78
    1be4:	2a18      	cmp	r2, #24
    1be6:	f040 80b5 	bne.w	1d54 <cbvprintf+0x3d8>
			conv->length_mod = LENGTH_NONE;
    1bea:	f36f 03c6 	bfc	r3, #3, #4
    1bee:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
    1bf2:	e09c      	b.n	1d2e <cbvprintf+0x3b2>
		val = 10U * val + *sp++ - '0';
    1bf4:	fb06 2101 	mla	r1, r6, r1, r2
    1bf8:	3930      	subs	r1, #48	; 0x30
    1bfa:	4603      	mov	r3, r0
    1bfc:	e748      	b.n	1a90 <cbvprintf+0x114>
	switch (*sp) {
    1bfe:	2a74      	cmp	r2, #116	; 0x74
    1c00:	d026      	beq.n	1c50 <cbvprintf+0x2d4>
    1c02:	2a7a      	cmp	r2, #122	; 0x7a
    1c04:	d1c0      	bne.n	1b88 <cbvprintf+0x20c>
		conv->length_mod = LENGTH_Z;
    1c06:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
    1c0a:	2206      	movs	r2, #6
    1c0c:	e00d      	b.n	1c2a <cbvprintf+0x2ae>
		if (*++sp == 'h') {
    1c0e:	785a      	ldrb	r2, [r3, #1]
    1c10:	2a68      	cmp	r2, #104	; 0x68
    1c12:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
    1c16:	d106      	bne.n	1c26 <cbvprintf+0x2aa>
			conv->length_mod = LENGTH_HH;
    1c18:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    1c1a:	f361 02c6 	bfi	r2, r1, #3, #4
    1c1e:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
			++sp;
    1c22:	1c99      	adds	r1, r3, #2
    1c24:	e7b1      	b.n	1b8a <cbvprintf+0x20e>
			conv->length_mod = LENGTH_H;
    1c26:	4613      	mov	r3, r2
    1c28:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    1c2a:	f362 03c6 	bfi	r3, r2, #3, #4
    1c2e:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
		break;
    1c32:	e7aa      	b.n	1b8a <cbvprintf+0x20e>
		if (*++sp == 'l') {
    1c34:	785a      	ldrb	r2, [r3, #1]
    1c36:	2a6c      	cmp	r2, #108	; 0x6c
    1c38:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
    1c3c:	d101      	bne.n	1c42 <cbvprintf+0x2c6>
			conv->length_mod = LENGTH_LL;
    1c3e:	2104      	movs	r1, #4
    1c40:	e7eb      	b.n	1c1a <cbvprintf+0x29e>
			conv->length_mod = LENGTH_L;
    1c42:	4613      	mov	r3, r2
    1c44:	2203      	movs	r2, #3
    1c46:	e7f0      	b.n	1c2a <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_J;
    1c48:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
    1c4c:	2205      	movs	r2, #5
    1c4e:	e7ec      	b.n	1c2a <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_T;
    1c50:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
    1c54:	2207      	movs	r2, #7
    1c56:	e7e8      	b.n	1c2a <cbvprintf+0x2ae>
		conv->unsupported = true;
    1c58:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    1c5c:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    1c60:	f023 0302 	bic.w	r3, r3, #2
    1c64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1c68:	f043 0302 	orr.w	r3, r3, #2
    1c6c:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
		break;
    1c70:	e78b      	b.n	1b8a <cbvprintf+0x20e>
    1c72:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    1c76:	2b20      	cmp	r3, #32
    1c78:	d86f      	bhi.n	1d5a <cbvprintf+0x3de>
    1c7a:	a101      	add	r1, pc, #4	; (adr r1, 1c80 <cbvprintf+0x304>)
    1c7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    1c80:	00001d33 	.word	0x00001d33
    1c84:	00001d5b 	.word	0x00001d5b
    1c88:	00001d5b 	.word	0x00001d5b
    1c8c:	00001d5b 	.word	0x00001d5b
    1c90:	00001d5b 	.word	0x00001d5b
    1c94:	00001d5b 	.word	0x00001d5b
    1c98:	00001d5b 	.word	0x00001d5b
    1c9c:	00001d5b 	.word	0x00001d5b
    1ca0:	00001d5b 	.word	0x00001d5b
    1ca4:	00001baf 	.word	0x00001baf
    1ca8:	00001d5b 	.word	0x00001d5b
    1cac:	00001d33 	.word	0x00001d33
    1cb0:	00001d05 	.word	0x00001d05
    1cb4:	00001baf 	.word	0x00001baf
    1cb8:	00001baf 	.word	0x00001baf
    1cbc:	00001baf 	.word	0x00001baf
    1cc0:	00001d5b 	.word	0x00001d5b
    1cc4:	00001d05 	.word	0x00001d05
    1cc8:	00001d5b 	.word	0x00001d5b
    1ccc:	00001d5b 	.word	0x00001d5b
    1cd0:	00001d5b 	.word	0x00001d5b
    1cd4:	00001d5b 	.word	0x00001d5b
    1cd8:	00001d69 	.word	0x00001d69
    1cdc:	00001d33 	.word	0x00001d33
    1ce0:	00001d89 	.word	0x00001d89
    1ce4:	00001d5b 	.word	0x00001d5b
    1ce8:	00001d5b 	.word	0x00001d5b
    1cec:	00001d89 	.word	0x00001d89
    1cf0:	00001d5b 	.word	0x00001d5b
    1cf4:	00001d33 	.word	0x00001d33
    1cf8:	00001d5b 	.word	0x00001d5b
    1cfc:	00001d5b 	.word	0x00001d5b
    1d00:	00001d33 	.word	0x00001d33
		conv->specifier_cat = SPECIFIER_SINT;
    1d04:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
    1d08:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
    1d0a:	f361 0302 	bfi	r3, r1, #0, #3
    1d0e:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
		if (conv->length_mod == LENGTH_UPPER_L) {
    1d12:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
    1d16:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1d1a:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
    1d1c:	bf02      	ittt	eq
    1d1e:	f89d 1060 	ldrbeq.w	r1, [sp, #96]	; 0x60
    1d22:	f041 0101 	orreq.w	r1, r1, #1
    1d26:	f88d 1060 	strbeq.w	r1, [sp, #96]	; 0x60
		if (conv->specifier == 'c') {
    1d2a:	2a63      	cmp	r2, #99	; 0x63
    1d2c:	d005      	beq.n	1d3a <cbvprintf+0x3be>
	bool unsupported = false;
    1d2e:	2300      	movs	r3, #0
    1d30:	e006      	b.n	1d40 <cbvprintf+0x3c4>
		conv->specifier_cat = SPECIFIER_UINT;
    1d32:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
    1d36:	2102      	movs	r1, #2
    1d38:	e7e7      	b.n	1d0a <cbvprintf+0x38e>
			unsupported = (conv->length_mod != LENGTH_NONE);
    1d3a:	3b00      	subs	r3, #0
    1d3c:	bf18      	it	ne
    1d3e:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    1d40:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
    1d44:	f3c2 0140 	ubfx	r1, r2, #1, #1
    1d48:	430b      	orrs	r3, r1
    1d4a:	f363 0241 	bfi	r2, r3, #1, #1
    1d4e:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
	return sp;
    1d52:	e6b6      	b.n	1ac2 <cbvprintf+0x146>
		} else if ((conv->length_mod != LENGTH_NONE)
    1d54:	f013 0f38 	tst.w	r3, #56	; 0x38
    1d58:	d0e9      	beq.n	1d2e <cbvprintf+0x3b2>
			conv->invalid = true;
    1d5a:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
    1d5e:	f043 0301 	orr.w	r3, r3, #1
    1d62:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
    1d66:	e7e2      	b.n	1d2e <cbvprintf+0x3b2>
		conv->specifier_cat = SPECIFIER_PTR;
    1d68:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
    1d6c:	2203      	movs	r2, #3
    1d6e:	f362 0302 	bfi	r3, r2, #0, #3
    1d72:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
		if (conv->length_mod == LENGTH_UPPER_L) {
    1d76:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
    1d7a:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1d7e:	f1a3 0740 	sub.w	r7, r3, #64	; 0x40
    1d82:	427b      	negs	r3, r7
    1d84:	417b      	adcs	r3, r7
    1d86:	e7db      	b.n	1d40 <cbvprintf+0x3c4>
		conv->specifier_cat = SPECIFIER_PTR;
    1d88:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
    1d8c:	2203      	movs	r2, #3
    1d8e:	f362 0302 	bfi	r3, r2, #0, #3
    1d92:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
		if (conv->length_mod != LENGTH_NONE) {
    1d96:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
    1d9a:	f013 0f78 	tst.w	r3, #120	; 0x78
    1d9e:	bf14      	ite	ne
    1da0:	2301      	movne	r3, #1
    1da2:	2300      	moveq	r3, #0
    1da4:	e7cc      	b.n	1d40 <cbvprintf+0x3c4>
			unsupported = true;
    1da6:	2301      	movs	r3, #1
    1da8:	e7ca      	b.n	1d40 <cbvprintf+0x3c4>
		} else if (conv->width_present) {
    1daa:	f99d 2060 	ldrsb.w	r2, [sp, #96]	; 0x60
    1dae:	2a00      	cmp	r2, #0
			width = conv->width_value;
    1db0:	bfb4      	ite	lt
    1db2:	9a19      	ldrlt	r2, [sp, #100]	; 0x64
		int width = -1;
    1db4:	f04f 32ff 	movge.w	r2, #4294967295
    1db8:	e695      	b.n	1ae6 <cbvprintf+0x16a>
		} else if (conv->prec_present) {
    1dba:	0799      	lsls	r1, r3, #30
    1dbc:	f57f aea2 	bpl.w	1b04 <cbvprintf+0x188>
			precision = conv->prec_value;
    1dc0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
		conv->pad0_value = 0;
    1dc2:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    1dc4:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
		    && (conv->specifier_cat == SPECIFIER_FP)
    1dc8:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    1dcc:	f003 0307 	and.w	r3, r3, #7
    1dd0:	2b04      	cmp	r3, #4
    1dd2:	d109      	bne.n	1de8 <cbvprintf+0x46c>
		    && !conv->prec_present) {
    1dd4:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
    1dd8:	079a      	lsls	r2, r3, #30
    1dda:	d405      	bmi.n	1de8 <cbvprintf+0x46c>
			if (conv->specifier_a) {
    1ddc:	f99d 3061 	ldrsb.w	r3, [sp, #97]	; 0x61
				precision = 6;
    1de0:	2b00      	cmp	r3, #0
    1de2:	bfb4      	ite	lt
    1de4:	270d      	movlt	r7, #13
    1de6:	2706      	movge	r7, #6
			= (enum specifier_cat_enum)conv->specifier_cat;
    1de8:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
			= (enum length_mod_enum)conv->length_mod;
    1dec:	f89d 1061 	ldrb.w	r1, [sp, #97]	; 0x61
		enum specifier_cat_enum specifier_cat
    1df0:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    1df4:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    1df6:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    1dfa:	d136      	bne.n	1e6a <cbvprintf+0x4ee>
			switch (length_mod) {
    1dfc:	1ecb      	subs	r3, r1, #3
    1dfe:	2b04      	cmp	r3, #4
    1e00:	d820      	bhi.n	1e44 <cbvprintf+0x4c8>
    1e02:	e8df f003 	tbb	[pc, r3]
    1e06:	0703      	.short	0x0703
    1e08:	1f07      	.short	0x1f07
    1e0a:	1f          	.byte	0x1f
    1e0b:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    1e0c:	f854 2b04 	ldr.w	r2, [r4], #4
				value->sint = (short)value->sint;
    1e10:	17d3      	asrs	r3, r2, #31
    1e12:	e004      	b.n	1e1e <cbvprintf+0x4a2>
					(sint_value_type)va_arg(ap, intmax_t);
    1e14:	3407      	adds	r4, #7
    1e16:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    1e1a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->sint = (short)value->sint;
    1e1e:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
		if (conv->invalid || conv->unsupported) {
    1e22:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
    1e26:	07b3      	lsls	r3, r6, #30
    1e28:	d055      	beq.n	1ed6 <cbvprintf+0x55a>
			OUTS(sp, fp);
    1e2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1e2c:	9803      	ldr	r0, [sp, #12]
    1e2e:	464a      	mov	r2, r9
    1e30:	4641      	mov	r1, r8
    1e32:	f005 fb6e 	bl	7512 <outs>
    1e36:	2800      	cmp	r0, #0
    1e38:	f2c0 83c3 	blt.w	25c2 <cbvprintf+0xc46>
    1e3c:	4405      	add	r5, r0
			while (pad_len-- > 0) {
    1e3e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    1e42:	e5a3      	b.n	198c <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1e44:	f854 2b04 	ldr.w	r2, [r4], #4
			if (length_mod == LENGTH_HH) {
    1e48:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1e4a:	ea4f 73e2 	mov.w	r3, r2, asr #31
    1e4e:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
			if (length_mod == LENGTH_HH) {
    1e52:	d105      	bne.n	1e60 <cbvprintf+0x4e4>
				value->uint = (unsigned char)value->uint;
    1e54:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
				value->uint = (unsigned short)value->uint;
    1e58:	9316      	str	r3, [sp, #88]	; 0x58
    1e5a:	2300      	movs	r3, #0
    1e5c:	9317      	str	r3, [sp, #92]	; 0x5c
    1e5e:	e7e0      	b.n	1e22 <cbvprintf+0x4a6>
			} else if (length_mod == LENGTH_H) {
    1e60:	2902      	cmp	r1, #2
    1e62:	d1de      	bne.n	1e22 <cbvprintf+0x4a6>
				value->sint = (short)value->sint;
    1e64:	f9bd 2058 	ldrsh.w	r2, [sp, #88]	; 0x58
    1e68:	e7d2      	b.n	1e10 <cbvprintf+0x494>
		} else if (specifier_cat == SPECIFIER_UINT) {
    1e6a:	2b02      	cmp	r3, #2
    1e6c:	d123      	bne.n	1eb6 <cbvprintf+0x53a>
			switch (length_mod) {
    1e6e:	1ecb      	subs	r3, r1, #3
    1e70:	2b04      	cmp	r3, #4
    1e72:	d813      	bhi.n	1e9c <cbvprintf+0x520>
    1e74:	e8df f003 	tbb	[pc, r3]
    1e78:	120a0a03 	.word	0x120a0a03
    1e7c:	12          	.byte	0x12
    1e7d:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    1e7e:	6822      	ldr	r2, [r4, #0]
    1e80:	9216      	str	r2, [sp, #88]	; 0x58
    1e82:	2300      	movs	r3, #0
    1e84:	1d20      	adds	r0, r4, #4
    1e86:	9317      	str	r3, [sp, #92]	; 0x5c
					(uint_value_type)va_arg(ap, size_t);
    1e88:	4604      	mov	r4, r0
    1e8a:	e7ca      	b.n	1e22 <cbvprintf+0x4a6>
					(uint_value_type)va_arg(ap,
    1e8c:	3407      	adds	r4, #7
    1e8e:	f024 0007 	bic.w	r0, r4, #7
				value->uint =
    1e92:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    1e96:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
				break;
    1e9a:	e7f5      	b.n	1e88 <cbvprintf+0x50c>
					(uint_value_type)va_arg(ap, size_t);
    1e9c:	f854 3b04 	ldr.w	r3, [r4], #4
    1ea0:	9316      	str	r3, [sp, #88]	; 0x58
			if (length_mod == LENGTH_HH) {
    1ea2:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    1ea4:	f04f 0300 	mov.w	r3, #0
    1ea8:	9317      	str	r3, [sp, #92]	; 0x5c
			if (length_mod == LENGTH_HH) {
    1eaa:	d0d3      	beq.n	1e54 <cbvprintf+0x4d8>
			} else if (length_mod == LENGTH_H) {
    1eac:	2902      	cmp	r1, #2
    1eae:	d1b8      	bne.n	1e22 <cbvprintf+0x4a6>
				value->uint = (unsigned short)value->uint;
    1eb0:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
    1eb4:	e7d0      	b.n	1e58 <cbvprintf+0x4dc>
		} else if (specifier_cat == SPECIFIER_FP) {
    1eb6:	2b04      	cmp	r3, #4
    1eb8:	d107      	bne.n	1eca <cbvprintf+0x54e>
			if (length_mod == LENGTH_UPPER_L) {
    1eba:	3407      	adds	r4, #7
    1ebc:	f024 0407 	bic.w	r4, r4, #7
    1ec0:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
    1ec4:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    1ec8:	e7ab      	b.n	1e22 <cbvprintf+0x4a6>
		} else if (specifier_cat == SPECIFIER_PTR) {
    1eca:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    1ecc:	bf04      	itt	eq
    1ece:	f854 3b04 	ldreq.w	r3, [r4], #4
    1ed2:	9316      	streq	r3, [sp, #88]	; 0x58
    1ed4:	e7a5      	b.n	1e22 <cbvprintf+0x4a6>
		switch (conv->specifier) {
    1ed6:	f89d 9063 	ldrb.w	r9, [sp, #99]	; 0x63
    1eda:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
    1ede:	d8ae      	bhi.n	1e3e <cbvprintf+0x4c2>
    1ee0:	f1b9 0f57 	cmp.w	r9, #87	; 0x57
    1ee4:	f200 80a6 	bhi.w	2034 <cbvprintf+0x6b8>
    1ee8:	f1b9 0f25 	cmp.w	r9, #37	; 0x25
    1eec:	f000 80ec 	beq.w	20c8 <cbvprintf+0x74c>
    1ef0:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
    1ef4:	d9a3      	bls.n	1e3e <cbvprintf+0x4c2>
    1ef6:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
    1efa:	d003      	beq.n	1f04 <cbvprintf+0x588>
    1efc:	f1a9 0345 	sub.w	r3, r9, #69	; 0x45
    1f00:	2b02      	cmp	r3, #2
    1f02:	d89c      	bhi.n	1e3e <cbvprintf+0x4c2>
	} u = {
    1f04:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
	if ((u.u64 & SIGN_MASK) != 0U) {
    1f08:	2a00      	cmp	r2, #0
    1f0a:	f173 0100 	sbcs.w	r1, r3, #0
    1f0e:	f2c0 81d3 	blt.w	22b8 <cbvprintf+0x93c>
	} else if (conv->flag_plus) {
    1f12:	0731      	lsls	r1, r6, #28
    1f14:	f100 81d2 	bmi.w	22bc <cbvprintf+0x940>
		*sign = ' ';
    1f18:	f016 0610 	ands.w	r6, r6, #16
    1f1c:	bf18      	it	ne
    1f1e:	2620      	movne	r6, #32
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    1f20:	f3c3 5b0a 	ubfx	fp, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    1f24:	f3c3 0313 	ubfx	r3, r3, #0, #20
    1f28:	9206      	str	r2, [sp, #24]
    1f2a:	9307      	str	r3, [sp, #28]
    1f2c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    1f30:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
	bool is_subnormal = (expo == 0) && (fract != 0);
    1f34:	f1bb 0f00 	cmp.w	fp, #0
    1f38:	f040 81c2 	bne.w	22c0 <cbvprintf+0x944>
    1f3c:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
    1f40:	4313      	orrs	r3, r2
    1f42:	bf14      	ite	ne
    1f44:	f04f 0c01 	movne.w	ip, #1
    1f48:	f04f 0c00 	moveq.w	ip, #0
	fract <<= EXPONENT_BITS;
    1f4c:	9907      	ldr	r1, [sp, #28]
    1f4e:	02cb      	lsls	r3, r1, #11
    1f50:	9906      	ldr	r1, [sp, #24]
    1f52:	02ca      	lsls	r2, r1, #11
    1f54:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
	if ((expo | fract) != 0) {
    1f58:	4658      	mov	r0, fp
    1f5a:	ea4b 0102 	orr.w	r1, fp, r2
    1f5e:	910c      	str	r1, [sp, #48]	; 0x30
    1f60:	17c1      	asrs	r1, r0, #31
    1f62:	4319      	orrs	r1, r3
    1f64:	910d      	str	r1, [sp, #52]	; 0x34
    1f66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
		c = 'f';
    1f6a:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
    1f6e:	bf08      	it	eq
    1f70:	f04f 0966 	moveq.w	r9, #102	; 0x66
	if ((expo | fract) != 0) {
    1f74:	4301      	orrs	r1, r0
	fract &= ~SIGN_MASK;
    1f76:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
	if ((expo | fract) != 0) {
    1f7a:	f000 8214 	beq.w	23a6 <cbvprintf+0xa2a>
		if (is_subnormal) {
    1f7e:	f1bc 0f00 	cmp.w	ip, #0
    1f82:	f040 81d4 	bne.w	232e <cbvprintf+0x9b2>
		fract |= BIT_63;
    1f86:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1f88:	9304      	str	r3, [sp, #16]
    1f8a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1f8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1f90:	9305      	str	r3, [sp, #20]
    1f92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    1f96:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
    1f9a:	2300      	movs	r3, #0
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
    1f9c:	f2ab 3bfe 	subw	fp, fp, #1022	; 0x3fe
		fract |= BIT_63;
    1fa0:	461a      	mov	r2, r3
		fract *= 5U;
    1fa2:	2105      	movs	r1, #5
	while (expo < -2) {
    1fa4:	f11b 0f02 	cmn.w	fp, #2
    1fa8:	f2c0 81ca 	blt.w	2340 <cbvprintf+0x9c4>
    1fac:	b11b      	cbz	r3, 1fb6 <cbvprintf+0x63a>
    1fae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1fb2:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
	while (expo > 0) {
    1fb6:	f1bb 0f00 	cmp.w	fp, #0
    1fba:	e9dd 3112 	ldrd	r3, r1, [sp, #72]	; 0x48
    1fbe:	f300 81da 	bgt.w	2376 <cbvprintf+0x9fa>
	fract >>= (4 - expo);
    1fc2:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1fc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1fc6:	f1cb 0004 	rsb	r0, fp, #4
    1fca:	f10b 0b1c 	add.w	fp, fp, #28
    1fce:	fa01 fb0b 	lsl.w	fp, r1, fp
    1fd2:	f1a0 0c20 	sub.w	ip, r0, #32
    1fd6:	40c3      	lsrs	r3, r0
    1fd8:	fa21 fc0c 	lsr.w	ip, r1, ip
    1fdc:	ea43 030b 	orr.w	r3, r3, fp
    1fe0:	ea43 030c 	orr.w	r3, r3, ip
    1fe4:	40c1      	lsrs	r1, r0
    1fe6:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
	if ((c == 'g') || (c == 'G')) {
    1fea:	f009 03df 	and.w	r3, r9, #223	; 0xdf
    1fee:	2b47      	cmp	r3, #71	; 0x47
    1ff0:	f040 81e0 	bne.w	23b4 <cbvprintf+0xa38>
		if (decexp < (-4 + 1) || decexp > precision) {
    1ff4:	1cd0      	adds	r0, r2, #3
    1ff6:	db02      	blt.n	1ffe <cbvprintf+0x682>
    1ff8:	4297      	cmp	r7, r2
    1ffa:	f280 81d7 	bge.w	23ac <cbvprintf+0xa30>
			c += 'e' - 'g';  /* e or E */
    1ffe:	f1a9 0902 	sub.w	r9, r9, #2
			if (precision > 0) {
    2002:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
    2004:	fa5f f989 	uxtb.w	r9, r9
			if (precision > 0) {
    2008:	dd00      	ble.n	200c <cbvprintf+0x690>
				precision--;
    200a:	3f01      	subs	r7, #1
		if (!conv->flag_hash && (precision > 0)) {
    200c:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
    2010:	0699      	lsls	r1, r3, #26
    2012:	f100 81cf 	bmi.w	23b4 <cbvprintf+0xa38>
    2016:	2f00      	cmp	r7, #0
    2018:	bfd4      	ite	le
    201a:	2300      	movle	r3, #0
    201c:	2301      	movgt	r3, #1
	if (c == 'f') {
    201e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
	bool prune_zero = false;
    2022:	930e      	str	r3, [sp, #56]	; 0x38
	if (c == 'f') {
    2024:	f040 81c8 	bne.w	23b8 <cbvprintf+0xa3c>
		if (decimals < 0) {
    2028:	18bb      	adds	r3, r7, r2
    202a:	f140 81c6 	bpl.w	23ba <cbvprintf+0xa3e>
			decimals = 0;
    202e:	f04f 0a00 	mov.w	sl, #0
    2032:	e1c6      	b.n	23c2 <cbvprintf+0xa46>
    2034:	f1a9 0358 	sub.w	r3, r9, #88	; 0x58
    2038:	2b20      	cmp	r3, #32
    203a:	f63f af00 	bhi.w	1e3e <cbvprintf+0x4c2>
    203e:	a201      	add	r2, pc, #4	; (adr r2, 2044 <cbvprintf+0x6c8>)
    2040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2044:	00002259 	.word	0x00002259
    2048:	00001e3f 	.word	0x00001e3f
    204c:	00001e3f 	.word	0x00001e3f
    2050:	00001e3f 	.word	0x00001e3f
    2054:	00001e3f 	.word	0x00001e3f
    2058:	00001e3f 	.word	0x00001e3f
    205c:	00001e3f 	.word	0x00001e3f
    2060:	00001e3f 	.word	0x00001e3f
    2064:	00001e3f 	.word	0x00001e3f
    2068:	00001f05 	.word	0x00001f05
    206c:	00001e3f 	.word	0x00001e3f
    2070:	000020f5 	.word	0x000020f5
    2074:	000021f9 	.word	0x000021f9
    2078:	00001f05 	.word	0x00001f05
    207c:	00001f05 	.word	0x00001f05
    2080:	00001f05 	.word	0x00001f05
    2084:	00001e3f 	.word	0x00001e3f
    2088:	000021f9 	.word	0x000021f9
    208c:	00001e3f 	.word	0x00001e3f
    2090:	00001e3f 	.word	0x00001e3f
    2094:	00001e3f 	.word	0x00001e3f
    2098:	00001e3f 	.word	0x00001e3f
    209c:	0000228f 	.word	0x0000228f
    20a0:	00002259 	.word	0x00002259
    20a4:	0000225d 	.word	0x0000225d
    20a8:	00001e3f 	.word	0x00001e3f
    20ac:	00001e3f 	.word	0x00001e3f
    20b0:	000020cf 	.word	0x000020cf
    20b4:	00001e3f 	.word	0x00001e3f
    20b8:	00002259 	.word	0x00002259
    20bc:	00001e3f 	.word	0x00001e3f
    20c0:	00001e3f 	.word	0x00001e3f
    20c4:	00002259 	.word	0x00002259
			OUTC('%');
    20c8:	4641      	mov	r1, r8
    20ca:	4648      	mov	r0, r9
    20cc:	e46a      	b.n	19a4 <cbvprintf+0x28>
			if (precision >= 0) {
    20ce:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
    20d0:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
			if (precision >= 0) {
    20d4:	db0a      	blt.n	20ec <cbvprintf+0x770>
				len = strnlen(bps, precision);
    20d6:	4639      	mov	r1, r7
    20d8:	4648      	mov	r0, r9
    20da:	f005 fa5c 	bl	7596 <strnlen>
			bpe = bps + len;
    20de:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
    20e2:	2600      	movs	r6, #0
		if (bps == NULL) {
    20e4:	f1b9 0f00 	cmp.w	r9, #0
    20e8:	d10c      	bne.n	2104 <cbvprintf+0x788>
    20ea:	e6a8      	b.n	1e3e <cbvprintf+0x4c2>
				len = strlen(bps);
    20ec:	4648      	mov	r0, r9
    20ee:	f005 fa4b 	bl	7588 <strlen>
    20f2:	e7f4      	b.n	20de <cbvprintf+0x762>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    20f4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    20f6:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
		char sign = 0;
    20fa:	2600      	movs	r6, #0
			bpe = buf + 1;
    20fc:	f10d 0a75 	add.w	sl, sp, #117	; 0x75
				bps = encode_float(value->dbl, conv, precision,
    2100:	f10d 0974 	add.w	r9, sp, #116	; 0x74
		size_t nj_len = (bpe - bps);
    2104:	ebaa 0209 	sub.w	r2, sl, r9
		if (sign != 0) {
    2108:	b106      	cbz	r6, 210c <cbvprintf+0x790>
			nj_len += 1U;
    210a:	3201      	adds	r2, #1
		if (conv->altform_0c) {
    210c:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
    2110:	06c3      	lsls	r3, r0, #27
    2112:	f140 824b 	bpl.w	25ac <cbvprintf+0xc30>
			nj_len += 2U;
    2116:	3202      	adds	r2, #2
		nj_len += conv->pad0_value;
    2118:	9919      	ldr	r1, [sp, #100]	; 0x64
		if (width > 0) {
    211a:	9b08      	ldr	r3, [sp, #32]
		if (conv->pad_fp) {
    211c:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
    211e:	440a      	add	r2, r1
			nj_len += conv->pad0_pre_exp;
    2120:	bf44      	itt	mi
    2122:	991a      	ldrmi	r1, [sp, #104]	; 0x68
    2124:	1852      	addmi	r2, r2, r1
		if (width > 0) {
    2126:	2b00      	cmp	r3, #0
    2128:	dd25      	ble.n	2176 <cbvprintf+0x7fa>
			width -= (int)nj_len;
    212a:	1a9b      	subs	r3, r3, r2
			if (!conv->flag_dash) {
    212c:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
    2130:	0751      	lsls	r1, r2, #29
    2132:	f3c2 0b80 	ubfx	fp, r2, #2, #1
    2136:	f100 824b 	bmi.w	25d0 <cbvprintf+0xc54>
				if (conv->flag_zero) {
    213a:	0657      	lsls	r7, r2, #25
    213c:	f140 8244 	bpl.w	25c8 <cbvprintf+0xc4c>
					if (sign != 0) {
    2140:	2e00      	cmp	r6, #0
    2142:	f000 8243 	beq.w	25cc <cbvprintf+0xc50>
    2146:	9308      	str	r3, [sp, #32]
						OUTC(sign);
    2148:	4641      	mov	r1, r8
    214a:	9b03      	ldr	r3, [sp, #12]
    214c:	4630      	mov	r0, r6
    214e:	4798      	blx	r3
    2150:	2800      	cmp	r0, #0
    2152:	f2c0 8236 	blt.w	25c2 <cbvprintf+0xc46>
    2156:	9b08      	ldr	r3, [sp, #32]
    2158:	3501      	adds	r5, #1
						sign = 0;
    215a:	465e      	mov	r6, fp
					pad = '0';
    215c:	2730      	movs	r7, #48	; 0x30
    215e:	9308      	str	r3, [sp, #32]
    2160:	eb03 0b05 	add.w	fp, r3, r5
    2164:	9b08      	ldr	r3, [sp, #32]
    2166:	ebab 0503 	sub.w	r5, fp, r3
				while (width-- > 0) {
    216a:	2b00      	cmp	r3, #0
    216c:	f103 33ff 	add.w	r3, r3, #4294967295
    2170:	9308      	str	r3, [sp, #32]
    2172:	f300 821f 	bgt.w	25b4 <cbvprintf+0xc38>
		if (sign != 0) {
    2176:	b13e      	cbz	r6, 2188 <cbvprintf+0x80c>
			OUTC(sign);
    2178:	9b03      	ldr	r3, [sp, #12]
    217a:	4641      	mov	r1, r8
    217c:	4630      	mov	r0, r6
    217e:	4798      	blx	r3
    2180:	2800      	cmp	r0, #0
    2182:	f2c0 821e 	blt.w	25c2 <cbvprintf+0xc46>
    2186:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    2188:	f89d 2062 	ldrb.w	r2, [sp, #98]	; 0x62
    218c:	0656      	lsls	r6, r2, #25
    218e:	f140 827d 	bpl.w	268c <cbvprintf+0xd10>
			if (conv->specifier_a) {
    2192:	f99d 2061 	ldrsb.w	r2, [sp, #97]	; 0x61
    2196:	2a00      	cmp	r2, #0
    2198:	f2c0 821c 	blt.w	25d4 <cbvprintf+0xc58>
    219c:	eba5 0509 	sub.w	r5, r5, r9
				while (isdigit((int)*cp)) {
    21a0:	f899 0000 	ldrb.w	r0, [r9]
    21a4:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    21a8:	2a09      	cmp	r2, #9
    21aa:	464f      	mov	r7, r9
    21ac:	eb05 0b09 	add.w	fp, r5, r9
    21b0:	f109 0901 	add.w	r9, r9, #1
    21b4:	f240 823e 	bls.w	2634 <cbvprintf+0xcb8>
				if (!conv->pad_postdp) {
    21b8:	f89d 2062 	ldrb.w	r2, [sp, #98]	; 0x62
				pad_len = conv->pad0_value;
    21bc:	9e19      	ldr	r6, [sp, #100]	; 0x64
				if (!conv->pad_postdp) {
    21be:	0690      	lsls	r0, r2, #26
    21c0:	d408      	bmi.n	21d4 <cbvprintf+0x858>
    21c2:	eb06 090b 	add.w	r9, r6, fp
					while (pad_len-- > 0) {
    21c6:	2e00      	cmp	r6, #0
    21c8:	eba9 0b06 	sub.w	fp, r9, r6
    21cc:	f106 36ff 	add.w	r6, r6, #4294967295
    21d0:	f300 8237 	bgt.w	2642 <cbvprintf+0xcc6>
				if (*cp == '.') {
    21d4:	7838      	ldrb	r0, [r7, #0]
    21d6:	282e      	cmp	r0, #46	; 0x2e
    21d8:	d10b      	bne.n	21f2 <cbvprintf+0x876>
					OUTC(*cp++);
    21da:	9b03      	ldr	r3, [sp, #12]
    21dc:	4641      	mov	r1, r8
    21de:	4798      	blx	r3
						OUTC('0');
    21e0:	2800      	cmp	r0, #0
    21e2:	f2c0 81ee 	blt.w	25c2 <cbvprintf+0xc46>
					while (pad_len-- > 0) {
    21e6:	2e00      	cmp	r6, #0
						OUTC('0');
    21e8:	f10b 0b01 	add.w	fp, fp, #1
					while (pad_len-- > 0) {
    21ec:	f300 8231 	bgt.w	2652 <cbvprintf+0xcd6>
					OUTC(*cp++);
    21f0:	3701      	adds	r7, #1
    21f2:	ebab 0b07 	sub.w	fp, fp, r7
    21f6:	e237      	b.n	2668 <cbvprintf+0xcec>
			if (conv->flag_plus) {
    21f8:	0730      	lsls	r0, r6, #28
    21fa:	d42b      	bmi.n	2254 <cbvprintf+0x8d8>
				sign = ' ';
    21fc:	f016 0610 	ands.w	r6, r6, #16
    2200:	bf18      	it	ne
    2202:	2620      	movne	r6, #32
			sint = value->sint;
    2204:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
			if (sint < 0) {
    2208:	2a00      	cmp	r2, #0
    220a:	f173 0100 	sbcs.w	r1, r3, #0
    220e:	da05      	bge.n	221c <cbvprintf+0x8a0>
				value->uint = (uint_value_type)-sint;
    2210:	4252      	negs	r2, r2
    2212:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    2216:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
				sign = '-';
    221a:	262d      	movs	r6, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
    221c:	f10d 038d 	add.w	r3, sp, #141	; 0x8d
    2220:	9300      	str	r3, [sp, #0]
    2222:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
    2226:	ab1d      	add	r3, sp, #116	; 0x74
    2228:	aa18      	add	r2, sp, #96	; 0x60
    222a:	f005 f927 	bl	747c <encode_uint>
    222e:	4681      	mov	r9, r0
			if (precision >= 0) {
    2230:	2f00      	cmp	r7, #0
    2232:	f10d 038d 	add.w	r3, sp, #141	; 0x8d
    2236:	db0b      	blt.n	2250 <cbvprintf+0x8d4>
				conv->flag_zero = false;
    2238:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
				size_t len = bpe - bps;
    223c:	eba3 0209 	sub.w	r2, r3, r9
				conv->flag_zero = false;
    2240:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
    2244:	4297      	cmp	r7, r2
				conv->flag_zero = false;
    2246:	f88d 1060 	strb.w	r1, [sp, #96]	; 0x60
				if (len < (size_t)precision) {
    224a:	d901      	bls.n	2250 <cbvprintf+0x8d4>
					conv->pad0_value = precision - (int)len;
    224c:	1abf      	subs	r7, r7, r2
    224e:	9719      	str	r7, [sp, #100]	; 0x64
		const char *bpe = buf + sizeof(buf);
    2250:	469a      	mov	sl, r3
    2252:	e747      	b.n	20e4 <cbvprintf+0x768>
				sign = '+';
    2254:	262b      	movs	r6, #43	; 0x2b
    2256:	e7d5      	b.n	2204 <cbvprintf+0x888>
		switch (conv->specifier) {
    2258:	2600      	movs	r6, #0
    225a:	e7df      	b.n	221c <cbvprintf+0x8a0>
			if (value->ptr != NULL) {
    225c:	9816      	ldr	r0, [sp, #88]	; 0x58
    225e:	2800      	cmp	r0, #0
    2260:	f000 819e 	beq.w	25a0 <cbvprintf+0xc24>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    2264:	f10d 038d 	add.w	r3, sp, #141	; 0x8d
    2268:	9300      	str	r3, [sp, #0]
    226a:	aa18      	add	r2, sp, #96	; 0x60
    226c:	ab1d      	add	r3, sp, #116	; 0x74
    226e:	2100      	movs	r1, #0
    2270:	f005 f904 	bl	747c <encode_uint>
				conv->altform_0c = true;
    2274:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
    2278:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    227c:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    2280:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    2284:	4681      	mov	r9, r0
				conv->altform_0c = true;
    2286:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
		char sign = 0;
    228a:	2600      	movs	r6, #0
				goto prec_int_pad0;
    228c:	e7d0      	b.n	2230 <cbvprintf+0x8b4>
				store_count(conv, value->ptr, count);
    228e:	9b16      	ldr	r3, [sp, #88]	; 0x58
	switch ((enum length_mod_enum)conv->length_mod) {
    2290:	2907      	cmp	r1, #7
    2292:	f63f add4 	bhi.w	1e3e <cbvprintf+0x4c2>
    2296:	e8df f001 	tbb	[pc, r1]
    229a:	040d      	.short	0x040d
    229c:	08080d06 	.word	0x08080d06
    22a0:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    22a2:	701d      	strb	r5, [r3, #0]
		break;
    22a4:	e5cb      	b.n	1e3e <cbvprintf+0x4c2>
		*(short *)dp = (short)count;
    22a6:	801d      	strh	r5, [r3, #0]
		break;
    22a8:	e5c9      	b.n	1e3e <cbvprintf+0x4c2>
		*(intmax_t *)dp = (intmax_t)count;
    22aa:	4628      	mov	r0, r5
    22ac:	17e9      	asrs	r1, r5, #31
    22ae:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    22b2:	e5c4      	b.n	1e3e <cbvprintf+0x4c2>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    22b4:	601d      	str	r5, [r3, #0]
		break;
    22b6:	e5c2      	b.n	1e3e <cbvprintf+0x4c2>
		*sign = '-';
    22b8:	262d      	movs	r6, #45	; 0x2d
    22ba:	e631      	b.n	1f20 <cbvprintf+0x5a4>
		*sign = '+';
    22bc:	262b      	movs	r6, #43	; 0x2b
    22be:	e62f      	b.n	1f20 <cbvprintf+0x5a4>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
    22c0:	f240 73ff 	movw	r3, #2047	; 0x7ff
    22c4:	459b      	cmp	fp, r3
    22c6:	d12d      	bne.n	2324 <cbvprintf+0x9a8>
		if (fract == 0) {
    22c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    22cc:	4313      	orrs	r3, r2
    22ce:	f1a9 0941 	sub.w	r9, r9, #65	; 0x41
    22d2:	d118      	bne.n	2306 <cbvprintf+0x98a>
			if (isupper((int)c)) {
    22d4:	f1b9 0f19 	cmp.w	r9, #25
				*buf++ = 'I';
    22d8:	bf95      	itete	ls
    22da:	f644 6349 	movwls	r3, #20041	; 0x4e49
				*buf++ = 'i';
    22de:	f646 6369 	movwhi	r3, #28265	; 0x6e69
				*buf++ = 'I';
    22e2:	f8ad 3074 	strhls.w	r3, [sp, #116]	; 0x74
				*buf++ = 'i';
    22e6:	f8ad 3074 	strhhi.w	r3, [sp, #116]	; 0x74
				*buf++ = 'F';
    22ea:	bf94      	ite	ls
    22ec:	2346      	movls	r3, #70	; 0x46
				*buf++ = 'f';
    22ee:	2366      	movhi	r3, #102	; 0x66
				*buf++ = 'n';
    22f0:	f88d 3076 	strb.w	r3, [sp, #118]	; 0x76
		conv->flag_zero = false;
    22f4:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
    22f8:	f36f 1386 	bfc	r3, #6, #1
    22fc:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
		*bpe = buf;
    2300:	f10d 0a77 	add.w	sl, sp, #119	; 0x77
		return bps;
    2304:	e6fc      	b.n	2100 <cbvprintf+0x784>
			if (isupper((int)c)) {
    2306:	f1b9 0f19 	cmp.w	r9, #25
				*buf++ = 'N';
    230a:	bf95      	itete	ls
    230c:	f244 134e 	movwls	r3, #16718	; 0x414e
				*buf++ = 'n';
    2310:	f246 136e 	movwhi	r3, #24942	; 0x616e
				*buf++ = 'N';
    2314:	f8ad 3074 	strhls.w	r3, [sp, #116]	; 0x74
				*buf++ = 'n';
    2318:	f8ad 3074 	strhhi.w	r3, [sp, #116]	; 0x74
				*buf++ = 'N';
    231c:	bf94      	ite	ls
    231e:	234e      	movls	r3, #78	; 0x4e
				*buf++ = 'n';
    2320:	236e      	movhi	r3, #110	; 0x6e
    2322:	e7e5      	b.n	22f0 <cbvprintf+0x974>
	bool is_subnormal = (expo == 0) && (fract != 0);
    2324:	f04f 0c00 	mov.w	ip, #0
    2328:	e610      	b.n	1f4c <cbvprintf+0x5d0>
				expo--;
    232a:	f10b 3bff 	add.w	fp, fp, #4294967295
			while (((fract <<= 1) & BIT_63) == 0) {
    232e:	1892      	adds	r2, r2, r2
    2330:	415b      	adcs	r3, r3
    2332:	2a00      	cmp	r2, #0
    2334:	f173 0100 	sbcs.w	r1, r3, #0
    2338:	daf7      	bge.n	232a <cbvprintf+0x9ae>
    233a:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
    233e:	e622      	b.n	1f86 <cbvprintf+0x60a>
			fract >>= 1;
    2340:	9b04      	ldr	r3, [sp, #16]
    2342:	9805      	ldr	r0, [sp, #20]
    2344:	085b      	lsrs	r3, r3, #1
    2346:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    234a:	0840      	lsrs	r0, r0, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    234c:	f1b0 3f33 	cmp.w	r0, #858993459	; 0x33333333
    2350:	46dc      	mov	ip, fp
			fract >>= 1;
    2352:	e9cd 3004 	strd	r3, r0, [sp, #16]
			expo++;
    2356:	f10b 0b01 	add.w	fp, fp, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    235a:	d2f1      	bcs.n	2340 <cbvprintf+0x9c4>
		fract *= 5U;
    235c:	fba3 ab01 	umull	sl, fp, r3, r1
    2360:	e9cd ab04 	strd	sl, fp, [sp, #16]
    2364:	9b05      	ldr	r3, [sp, #20]
    2366:	4348      	muls	r0, r1
    2368:	18c3      	adds	r3, r0, r3
    236a:	9305      	str	r3, [sp, #20]
		expo++;
    236c:	f10c 0b02 	add.w	fp, ip, #2
		decexp--;
    2370:	3a01      	subs	r2, #1
    2372:	2301      	movs	r3, #1
    2374:	e616      	b.n	1fa4 <cbvprintf+0x628>
		fract += 2;
    2376:	3302      	adds	r3, #2
    2378:	f141 0100 	adc.w	r1, r1, #0
		_ldiv5(&fract);
    237c:	a812      	add	r0, sp, #72	; 0x48
		fract += 2;
    237e:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
    2382:	920e      	str	r2, [sp, #56]	; 0x38
		_ldiv5(&fract);
    2384:	f005 f843 	bl	740e <_ldiv5>
		decexp++;
    2388:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    238a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
		expo--;
    238e:	f10b 3bff 	add.w	fp, fp, #4294967295
		decexp++;
    2392:	3201      	adds	r2, #1
			fract <<= 1;
    2394:	1800      	adds	r0, r0, r0
    2396:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
    2398:	2800      	cmp	r0, #0
    239a:	f171 0300 	sbcs.w	r3, r1, #0
			expo--;
    239e:	f10b 3bff 	add.w	fp, fp, #4294967295
		} while (!(fract & BIT_63));
    23a2:	daf7      	bge.n	2394 <cbvprintf+0xa18>
    23a4:	e605      	b.n	1fb2 <cbvprintf+0x636>
    23a6:	2200      	movs	r2, #0
    23a8:	4693      	mov	fp, r2
    23aa:	e60a      	b.n	1fc2 <cbvprintf+0x646>
			precision -= decexp;
    23ac:	1abf      	subs	r7, r7, r2
			c = 'f';
    23ae:	f04f 0966 	mov.w	r9, #102	; 0x66
    23b2:	e62b      	b.n	200c <cbvprintf+0x690>
	bool prune_zero = false;
    23b4:	2300      	movs	r3, #0
    23b6:	e632      	b.n	201e <cbvprintf+0x6a2>
		decimals = precision + 1;
    23b8:	1c7b      	adds	r3, r7, #1
	if (decimals > 16) {
    23ba:	2b10      	cmp	r3, #16
    23bc:	bfa8      	it	ge
    23be:	2310      	movge	r3, #16
    23c0:	469a      	mov	sl, r3
    23c2:	2110      	movs	r1, #16
    23c4:	9111      	str	r1, [sp, #68]	; 0x44
	uint64_t round = BIT64(59); /* 0.5 */
    23c6:	2000      	movs	r0, #0
    23c8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    23cc:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
	while (decimals--) {
    23d0:	f10a 3aff 	add.w	sl, sl, #4294967295
    23d4:	f1ba 3fff 	cmp.w	sl, #4294967295
    23d8:	e9dd 1014 	ldrd	r1, r0, [sp, #80]	; 0x50
    23dc:	d11f      	bne.n	241e <cbvprintf+0xaa2>
	fract += round;
    23de:	9b12      	ldr	r3, [sp, #72]	; 0x48
    23e0:	18cb      	adds	r3, r1, r3
    23e2:	930a      	str	r3, [sp, #40]	; 0x28
    23e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    23e6:	eb40 0303 	adc.w	r3, r0, r3
    23ea:	930b      	str	r3, [sp, #44]	; 0x2c
	if (fract >= BIT64(60)) {
    23ec:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
    23f0:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
    23f4:	f04f 30ff 	mov.w	r0, #4294967295
    23f8:	4559      	cmp	r1, fp
    23fa:	bf08      	it	eq
    23fc:	4550      	cmpeq	r0, sl
    23fe:	d31a      	bcc.n	2436 <cbvprintf+0xaba>
	fract += round;
    2400:	4650      	mov	r0, sl
    2402:	4659      	mov	r1, fp
    2404:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
	if (c == 'f') {
    2408:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
    240c:	d153      	bne.n	24b6 <cbvprintf+0xb3a>
		if (decexp > 0) {
    240e:	2a00      	cmp	r2, #0
    2410:	dc20      	bgt.n	2454 <cbvprintf+0xad8>
			*buf++ = '0';
    2412:	2330      	movs	r3, #48	; 0x30
    2414:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
    2418:	f10d 0a75 	add.w	sl, sp, #117	; 0x75
    241c:	e02b      	b.n	2476 <cbvprintf+0xafa>
	*v >>= 1;
    241e:	0849      	lsrs	r1, r1, #1
    2420:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
    2424:	0840      	lsrs	r0, r0, #1
    2426:	e9cd 1014 	strd	r1, r0, [sp, #80]	; 0x50
	_ldiv5(v);
    242a:	a814      	add	r0, sp, #80	; 0x50
    242c:	920f      	str	r2, [sp, #60]	; 0x3c
    242e:	f004 ffee 	bl	740e <_ldiv5>
    2432:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
}
    2434:	e7cc      	b.n	23d0 <cbvprintf+0xa54>
	*v >>= 1;
    2436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2438:	920f      	str	r2, [sp, #60]	; 0x3c
    243a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    243c:	085b      	lsrs	r3, r3, #1
    243e:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
    2442:	0851      	lsrs	r1, r2, #1
	_ldiv5(v);
    2444:	a812      	add	r0, sp, #72	; 0x48
	*v >>= 1;
    2446:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
	_ldiv5(v);
    244a:	f004 ffe0 	bl	740e <_ldiv5>
		decexp++;
    244e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    2450:	3201      	adds	r2, #1
    2452:	e7d9      	b.n	2408 <cbvprintf+0xa8c>
	char *buf = bps;
    2454:	f10d 0a74 	add.w	sl, sp, #116	; 0x74
			while (decexp > 0 && digit_count > 0) {
    2458:	9911      	ldr	r1, [sp, #68]	; 0x44
    245a:	2900      	cmp	r1, #0
    245c:	dd09      	ble.n	2472 <cbvprintf+0xaf6>
				*buf++ = _get_digit(&fract, &digit_count);
    245e:	a911      	add	r1, sp, #68	; 0x44
    2460:	a812      	add	r0, sp, #72	; 0x48
    2462:	920f      	str	r2, [sp, #60]	; 0x3c
    2464:	f004 fff3 	bl	744e <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    2468:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
				*buf++ = _get_digit(&fract, &digit_count);
    246a:	f80a 0b01 	strb.w	r0, [sl], #1
			while (decexp > 0 && digit_count > 0) {
    246e:	3a01      	subs	r2, #1
    2470:	d1f2      	bne.n	2458 <cbvprintf+0xadc>
			conv->pad0_value = decexp;
    2472:	9219      	str	r2, [sp, #100]	; 0x64
			decexp = 0;
    2474:	2200      	movs	r2, #0
		if (conv->flag_hash || (precision > 0)) {
    2476:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
    247a:	0688      	lsls	r0, r1, #26
    247c:	d401      	bmi.n	2482 <cbvprintf+0xb06>
    247e:	2f00      	cmp	r7, #0
    2480:	dd3f      	ble.n	2502 <cbvprintf+0xb86>
			*buf++ = '.';
    2482:	4653      	mov	r3, sl
    2484:	212e      	movs	r1, #46	; 0x2e
    2486:	f803 1b01 	strb.w	r1, [r3], #1
		if (decexp < 0 && precision > 0) {
    248a:	b192      	cbz	r2, 24b2 <cbvprintf+0xb36>
    248c:	2f00      	cmp	r7, #0
    248e:	dd75      	ble.n	257c <cbvprintf+0xc00>
			conv->pad0_value = -decexp;
    2490:	4251      	negs	r1, r2
    2492:	42b9      	cmp	r1, r7
    2494:	bfa8      	it	ge
    2496:	4639      	movge	r1, r7
			conv->pad_postdp = (conv->pad0_value > 0);
    2498:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
			conv->pad0_value = -decexp;
    249c:	9119      	str	r1, [sp, #100]	; 0x64
			conv->pad_postdp = (conv->pad0_value > 0);
    249e:	2900      	cmp	r1, #0
			precision -= conv->pad0_value;
    24a0:	eba7 0701 	sub.w	r7, r7, r1
			conv->pad_postdp = (conv->pad0_value > 0);
    24a4:	bfd4      	ite	le
    24a6:	2100      	movle	r1, #0
    24a8:	2101      	movgt	r1, #1
    24aa:	f361 1045 	bfi	r0, r1, #5, #1
    24ae:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
			*buf++ = '.';
    24b2:	469a      	mov	sl, r3
    24b4:	e020      	b.n	24f8 <cbvprintf+0xb7c>
		*buf = _get_digit(&fract, &digit_count);
    24b6:	a911      	add	r1, sp, #68	; 0x44
    24b8:	a812      	add	r0, sp, #72	; 0x48
    24ba:	920f      	str	r2, [sp, #60]	; 0x3c
    24bc:	f004 ffc7 	bl	744e <_get_digit>
		if (*buf++ != '0') {
    24c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		if (conv->flag_hash || (precision > 0)) {
    24c2:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
		*buf = _get_digit(&fract, &digit_count);
    24c6:	f88d 0074 	strb.w	r0, [sp, #116]	; 0x74
		if (*buf++ != '0') {
    24ca:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    24cc:	bf18      	it	ne
    24ce:	f102 32ff 	addne.w	r2, r2, #4294967295
		if (conv->flag_hash || (precision > 0)) {
    24d2:	0699      	lsls	r1, r3, #26
    24d4:	d401      	bmi.n	24da <cbvprintf+0xb5e>
    24d6:	2f00      	cmp	r7, #0
    24d8:	dd52      	ble.n	2580 <cbvprintf+0xc04>
			*buf++ = '.';
    24da:	232e      	movs	r3, #46	; 0x2e
    24dc:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
    24e0:	f10d 0376 	add.w	r3, sp, #118	; 0x76
    24e4:	e7e5      	b.n	24b2 <cbvprintf+0xb36>
		*buf++ = _get_digit(&fract, &digit_count);
    24e6:	a911      	add	r1, sp, #68	; 0x44
    24e8:	a812      	add	r0, sp, #72	; 0x48
    24ea:	920f      	str	r2, [sp, #60]	; 0x3c
    24ec:	f004 ffaf 	bl	744e <_get_digit>
    24f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    24f2:	f80a 0b01 	strb.w	r0, [sl], #1
		precision--;
    24f6:	3f01      	subs	r7, #1
	while (precision > 0 && digit_count > 0) {
    24f8:	2f00      	cmp	r7, #0
    24fa:	dd02      	ble.n	2502 <cbvprintf+0xb86>
    24fc:	9911      	ldr	r1, [sp, #68]	; 0x44
    24fe:	2900      	cmp	r1, #0
    2500:	dcf1      	bgt.n	24e6 <cbvprintf+0xb6a>
	if (prune_zero) {
    2502:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2504:	2b00      	cmp	r3, #0
    2506:	d13e      	bne.n	2586 <cbvprintf+0xc0a>
	conv->pad0_pre_exp = precision;
    2508:	971a      	str	r7, [sp, #104]	; 0x68
	if ((c == 'e') || (c == 'E')) {
    250a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
    250e:	2945      	cmp	r1, #69	; 0x45
    2510:	d122      	bne.n	2558 <cbvprintf+0xbdc>
		if (decexp < 0) {
    2512:	2a00      	cmp	r2, #0
		*buf++ = c;
    2514:	4650      	mov	r0, sl
			decexp = -decexp;
    2516:	bfba      	itte	lt
    2518:	4252      	neglt	r2, r2
			*buf++ = '-';
    251a:	212d      	movlt	r1, #45	; 0x2d
			*buf++ = '+';
    251c:	212b      	movge	r1, #43	; 0x2b
		if (decexp >= 100) {
    251e:	2a63      	cmp	r2, #99	; 0x63
		*buf++ = c;
    2520:	f800 9b02 	strb.w	r9, [r0], #2
			*buf++ = '-';
    2524:	f88a 1001 	strb.w	r1, [sl, #1]
		if (decexp >= 100) {
    2528:	dd0a      	ble.n	2540 <cbvprintf+0xbc4>
			*buf++ = (decexp / 100) + '0';
    252a:	2764      	movs	r7, #100	; 0x64
    252c:	fb92 f1f7 	sdiv	r1, r2, r7
    2530:	f101 0c30 	add.w	ip, r1, #48	; 0x30
    2534:	f10a 0003 	add.w	r0, sl, #3
    2538:	f88a c002 	strb.w	ip, [sl, #2]
			decexp %= 100;
    253c:	fb07 2211 	mls	r2, r7, r1, r2
		*buf++ = (decexp / 10) + '0';
    2540:	270a      	movs	r7, #10
    2542:	4682      	mov	sl, r0
    2544:	fb92 f1f7 	sdiv	r1, r2, r7
		*buf++ = (decexp % 10) + '0';
    2548:	fb07 2211 	mls	r2, r7, r1, r2
		*buf++ = (decexp / 10) + '0';
    254c:	f101 0c30 	add.w	ip, r1, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    2550:	3230      	adds	r2, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    2552:	f80a cb02 	strb.w	ip, [sl], #2
		*buf++ = (decexp % 10) + '0';
    2556:	7042      	strb	r2, [r0, #1]
		|| (conv->pad0_pre_exp > 0);
    2558:	9a19      	ldr	r2, [sp, #100]	; 0x64
    255a:	2a00      	cmp	r2, #0
    255c:	dc1e      	bgt.n	259c <cbvprintf+0xc20>
    255e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    2560:	2a00      	cmp	r2, #0
    2562:	bfd4      	ite	le
    2564:	2200      	movle	r2, #0
    2566:	2201      	movgt	r2, #1
	conv->pad_fp = (conv->pad0_value > 0)
    2568:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
    256c:	f362 1186 	bfi	r1, r2, #6, #1
	*buf = 0;
    2570:	2200      	movs	r2, #0
	conv->pad_fp = (conv->pad0_value > 0)
    2572:	f88d 1062 	strb.w	r1, [sp, #98]	; 0x62
	*buf = 0;
    2576:	f88a 2000 	strb.w	r2, [sl]
	return bps;
    257a:	e5c1      	b.n	2100 <cbvprintf+0x784>
			*buf++ = '.';
    257c:	469a      	mov	sl, r3
    257e:	e7c0      	b.n	2502 <cbvprintf+0xb86>
		if (*buf++ != '0') {
    2580:	f10d 0a75 	add.w	sl, sp, #117	; 0x75
    2584:	e7bd      	b.n	2502 <cbvprintf+0xb86>
		conv->pad0_pre_exp = 0;
    2586:	2100      	movs	r1, #0
    2588:	911a      	str	r1, [sp, #104]	; 0x68
		while (*--buf == '0') {
    258a:	4650      	mov	r0, sl
    258c:	f81a 1d01 	ldrb.w	r1, [sl, #-1]!
    2590:	2930      	cmp	r1, #48	; 0x30
    2592:	d0fa      	beq.n	258a <cbvprintf+0xc0e>
		if (*buf != '.') {
    2594:	292e      	cmp	r1, #46	; 0x2e
    2596:	bf18      	it	ne
    2598:	4682      	movne	sl, r0
    259a:	e7b6      	b.n	250a <cbvprintf+0xb8e>
		|| (conv->pad0_pre_exp > 0);
    259c:	2201      	movs	r2, #1
    259e:	e7e3      	b.n	2568 <cbvprintf+0xbec>
			bpe = bps + 5;
    25a0:	f8df a138 	ldr.w	sl, [pc, #312]	; 26dc <cbvprintf+0xd60>
		char sign = 0;
    25a4:	4606      	mov	r6, r0
			bps = "(nil)";
    25a6:	f1aa 0905 	sub.w	r9, sl, #5
    25aa:	e5ab      	b.n	2104 <cbvprintf+0x788>
		} else if (conv->altform_0) {
    25ac:	0707      	lsls	r7, r0, #28
			nj_len += 1U;
    25ae:	bf48      	it	mi
    25b0:	3201      	addmi	r2, #1
    25b2:	e5b1      	b.n	2118 <cbvprintf+0x79c>
					OUTC(pad);
    25b4:	9b03      	ldr	r3, [sp, #12]
    25b6:	4641      	mov	r1, r8
    25b8:	4638      	mov	r0, r7
    25ba:	4798      	blx	r3
    25bc:	2800      	cmp	r0, #0
    25be:	f6bf add1 	bge.w	2164 <cbvprintf+0x7e8>
#undef OUTS
#undef OUTC
}
    25c2:	b025      	add	sp, #148	; 0x94
    25c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    25c8:	2720      	movs	r7, #32
    25ca:	e5c8      	b.n	215e <cbvprintf+0x7e2>
					pad = '0';
    25cc:	2730      	movs	r7, #48	; 0x30
    25ce:	e5c6      	b.n	215e <cbvprintf+0x7e2>
			width -= (int)nj_len;
    25d0:	9308      	str	r3, [sp, #32]
    25d2:	e5d0      	b.n	2176 <cbvprintf+0x7fa>
    25d4:	eba5 0b09 	sub.w	fp, r5, r9
    25d8:	464e      	mov	r6, r9
    25da:	eb0b 0509 	add.w	r5, fp, r9
				while (*cp != 'p') {
    25de:	f819 0b01 	ldrb.w	r0, [r9], #1
    25e2:	2870      	cmp	r0, #112	; 0x70
    25e4:	d120      	bne.n	2628 <cbvprintf+0xcac>
			while (pad_len-- > 0) {
    25e6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    25e8:	eb02 0905 	add.w	r9, r2, r5
    25ec:	eba9 0205 	sub.w	r2, r9, r5
    25f0:	2a00      	cmp	r2, #0
    25f2:	dc43      	bgt.n	267c <cbvprintf+0xd00>
			OUTS(cp, bpe);
    25f4:	4653      	mov	r3, sl
    25f6:	4632      	mov	r2, r6
			OUTS(bps, bpe);
    25f8:	9803      	ldr	r0, [sp, #12]
    25fa:	4641      	mov	r1, r8
    25fc:	f004 ff89 	bl	7512 <outs>
    2600:	2800      	cmp	r0, #0
    2602:	dbde      	blt.n	25c2 <cbvprintf+0xc46>
    2604:	9b08      	ldr	r3, [sp, #32]
    2606:	4428      	add	r0, r5
    2608:	4403      	add	r3, r0
			while (pad_len-- > 0) {
    260a:	4605      	mov	r5, r0
    260c:	469a      	mov	sl, r3
		while (width > 0) {
    260e:	ebaa 0305 	sub.w	r3, sl, r5
    2612:	2b00      	cmp	r3, #0
    2614:	f77f ac13 	ble.w	1e3e <cbvprintf+0x4c2>
			OUTC(' ');
    2618:	9b03      	ldr	r3, [sp, #12]
    261a:	4641      	mov	r1, r8
    261c:	2020      	movs	r0, #32
    261e:	4798      	blx	r3
    2620:	2800      	cmp	r0, #0
    2622:	dbce      	blt.n	25c2 <cbvprintf+0xc46>
    2624:	3501      	adds	r5, #1
			--width;
    2626:	e7f2      	b.n	260e <cbvprintf+0xc92>
					OUTC(*cp++);
    2628:	9b03      	ldr	r3, [sp, #12]
    262a:	4641      	mov	r1, r8
    262c:	4798      	blx	r3
    262e:	2800      	cmp	r0, #0
    2630:	dad2      	bge.n	25d8 <cbvprintf+0xc5c>
    2632:	e7c6      	b.n	25c2 <cbvprintf+0xc46>
					OUTC(*cp++);
    2634:	9b03      	ldr	r3, [sp, #12]
    2636:	4641      	mov	r1, r8
    2638:	4798      	blx	r3
    263a:	2800      	cmp	r0, #0
    263c:	f6bf adb0 	bge.w	21a0 <cbvprintf+0x824>
    2640:	e7bf      	b.n	25c2 <cbvprintf+0xc46>
						OUTC('0');
    2642:	9b03      	ldr	r3, [sp, #12]
    2644:	4641      	mov	r1, r8
    2646:	2030      	movs	r0, #48	; 0x30
    2648:	4798      	blx	r3
    264a:	2800      	cmp	r0, #0
    264c:	f6bf adbb 	bge.w	21c6 <cbvprintf+0x84a>
    2650:	e7b7      	b.n	25c2 <cbvprintf+0xc46>
						OUTC('0');
    2652:	9b03      	ldr	r3, [sp, #12]
    2654:	4641      	mov	r1, r8
    2656:	2030      	movs	r0, #48	; 0x30
    2658:	4798      	blx	r3
    265a:	3e01      	subs	r6, #1
    265c:	e5c0      	b.n	21e0 <cbvprintf+0x864>
					OUTC(*cp++);
    265e:	9b03      	ldr	r3, [sp, #12]
    2660:	4641      	mov	r1, r8
    2662:	4798      	blx	r3
    2664:	2800      	cmp	r0, #0
    2666:	dbac      	blt.n	25c2 <cbvprintf+0xc46>
    2668:	463e      	mov	r6, r7
    266a:	eb0b 0507 	add.w	r5, fp, r7
				while (isdigit((int)*cp)) {
    266e:	f817 0b01 	ldrb.w	r0, [r7], #1
    2672:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    2676:	2a09      	cmp	r2, #9
    2678:	d9f1      	bls.n	265e <cbvprintf+0xce2>
    267a:	e7b4      	b.n	25e6 <cbvprintf+0xc6a>
				OUTC('0');
    267c:	9b03      	ldr	r3, [sp, #12]
    267e:	4641      	mov	r1, r8
    2680:	2030      	movs	r0, #48	; 0x30
    2682:	4798      	blx	r3
    2684:	2800      	cmp	r0, #0
    2686:	db9c      	blt.n	25c2 <cbvprintf+0xc46>
    2688:	3501      	adds	r5, #1
    268a:	e7af      	b.n	25ec <cbvprintf+0xc70>
			if (conv->altform_0c | conv->altform_0) {
    268c:	06d1      	lsls	r1, r2, #27
    268e:	d401      	bmi.n	2694 <cbvprintf+0xd18>
    2690:	0712      	lsls	r2, r2, #28
    2692:	d506      	bpl.n	26a2 <cbvprintf+0xd26>
				OUTC('0');
    2694:	9b03      	ldr	r3, [sp, #12]
    2696:	4641      	mov	r1, r8
    2698:	2030      	movs	r0, #48	; 0x30
    269a:	4798      	blx	r3
    269c:	2800      	cmp	r0, #0
    269e:	db90      	blt.n	25c2 <cbvprintf+0xc46>
    26a0:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    26a2:	f89d 2062 	ldrb.w	r2, [sp, #98]	; 0x62
    26a6:	06d3      	lsls	r3, r2, #27
    26a8:	d507      	bpl.n	26ba <cbvprintf+0xd3e>
				OUTC(conv->specifier);
    26aa:	f89d 0063 	ldrb.w	r0, [sp, #99]	; 0x63
    26ae:	9b03      	ldr	r3, [sp, #12]
    26b0:	4641      	mov	r1, r8
    26b2:	4798      	blx	r3
    26b4:	2800      	cmp	r0, #0
    26b6:	db84      	blt.n	25c2 <cbvprintf+0xc46>
    26b8:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    26ba:	9e19      	ldr	r6, [sp, #100]	; 0x64
    26bc:	442e      	add	r6, r5
    26be:	1b72      	subs	r2, r6, r5
    26c0:	2a00      	cmp	r2, #0
    26c2:	dc02      	bgt.n	26ca <cbvprintf+0xd4e>
			OUTS(bps, bpe);
    26c4:	4653      	mov	r3, sl
    26c6:	464a      	mov	r2, r9
    26c8:	e796      	b.n	25f8 <cbvprintf+0xc7c>
				OUTC('0');
    26ca:	9b03      	ldr	r3, [sp, #12]
    26cc:	4641      	mov	r1, r8
    26ce:	2030      	movs	r0, #48	; 0x30
    26d0:	4798      	blx	r3
    26d2:	2800      	cmp	r0, #0
    26d4:	f6ff af75 	blt.w	25c2 <cbvprintf+0xc46>
    26d8:	3501      	adds	r5, #1
    26da:	e7f0      	b.n	26be <cbvprintf+0xd42>
    26dc:	00008ceb 	.word	0x00008ceb

000026e0 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    26e0:	b508      	push	{r3, lr}
    26e2:	f04f 0220 	mov.w	r2, #32
    26e6:	f3ef 8311 	mrs	r3, BASEPRI
    26ea:	f382 8812 	msr	BASEPRI_MAX, r2
    26ee:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    26f2:	f000 fdbf 	bl	3274 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    26f6:	4803      	ldr	r0, [pc, #12]	; (2704 <sys_reboot+0x24>)
    26f8:	f004 fdc7 	bl	728a <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    26fc:	f000 f9e6 	bl	2acc <arch_cpu_idle>
    2700:	e7fc      	b.n	26fc <sys_reboot+0x1c>
    2702:	bf00      	nop
    2704:	00008cec 	.word	0x00008cec

00002708 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    2708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    270c:	4605      	mov	r5, r0
    270e:	f04f 0320 	mov.w	r3, #32
    2712:	f3ef 8611 	mrs	r6, BASEPRI
    2716:	f383 8812 	msr	BASEPRI_MAX, r3
    271a:	f3bf 8f6f 	isb	sy
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    271e:	4b10      	ldr	r3, [pc, #64]	; (2760 <pm_state_notify+0x58>)
    2720:	681c      	ldr	r4, [r3, #0]
    2722:	2c00      	cmp	r4, #0
    2724:	bf38      	it	cc
    2726:	2400      	movcc	r4, #0
    2728:	b19c      	cbz	r4, 2752 <pm_state_notify+0x4a>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_states[_current_cpu->id].state);
    272a:	4f0e      	ldr	r7, [pc, #56]	; (2764 <pm_state_notify+0x5c>)
    272c:	f8df 8038 	ldr.w	r8, [pc, #56]	; 2768 <pm_state_notify+0x60>
    2730:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    2734:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    2738:	2d00      	cmp	r5, #0
    273a:	bf08      	it	eq
    273c:	4613      	moveq	r3, r2
		if (callback) {
    273e:	b12b      	cbz	r3, 274c <pm_state_notify+0x44>
			callback(z_power_states[_current_cpu->id].state);
    2740:	f898 2014 	ldrb.w	r2, [r8, #20]
    2744:	fb09 f202 	mul.w	r2, r9, r2
    2748:	5cb8      	ldrb	r0, [r7, r2]
    274a:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    274c:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    274e:	2c00      	cmp	r4, #0
    2750:	d1f0      	bne.n	2734 <pm_state_notify+0x2c>
	__asm__ volatile(
    2752:	f386 8811 	msr	BASEPRI, r6
    2756:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    275a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    275e:	bf00      	nop
    2760:	20000814 	.word	0x20000814
    2764:	20000820 	.word	0x20000820
    2768:	20000eb4 	.word	0x20000eb4

0000276c <atomic_test_and_set_bit.constprop.0>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    276c:	f000 031f 	and.w	r3, r0, #31
    2770:	2201      	movs	r2, #1
    2772:	409a      	lsls	r2, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2774:	4b0a      	ldr	r3, [pc, #40]	; (27a0 <atomic_test_and_set_bit.constprop.0+0x34>)
    2776:	f3bf 8f5b 	dmb	ish
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    277a:	0940      	lsrs	r0, r0, #5
    277c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2780:	e850 3f00 	ldrex	r3, [r0]
    2784:	ea43 0102 	orr.w	r1, r3, r2
    2788:	e840 1c00 	strex	ip, r1, [r0]
    278c:	f1bc 0f00 	cmp.w	ip, #0
    2790:	d1f6      	bne.n	2780 <atomic_test_and_set_bit.constprop.0+0x14>
    2792:	f3bf 8f5b 	dmb	ish

	return (old & mask) != 0;
    2796:	421a      	tst	r2, r3
}
    2798:	bf14      	ite	ne
    279a:	2001      	movne	r0, #1
    279c:	2000      	moveq	r0, #0
    279e:	4770      	bx	lr
    27a0:	2000082c 	.word	0x2000082c

000027a4 <pm_system_resume>:

void pm_system_resume(void)
{
    27a4:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
    27a6:	4b1d      	ldr	r3, [pc, #116]	; (281c <pm_system_resume+0x78>)
    27a8:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    27aa:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    27ae:	f005 031f 	and.w	r3, r5, #31
    27b2:	2201      	movs	r2, #1
    27b4:	409a      	lsls	r2, r3
    27b6:	4b1a      	ldr	r3, [pc, #104]	; (2820 <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    27b8:	0969      	lsrs	r1, r5, #5
{
    27ba:	b085      	sub	sp, #20
    27bc:	43d0      	mvns	r0, r2
    27be:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    27c2:	e853 1f00 	ldrex	r1, [r3]
    27c6:	ea01 0400 	and.w	r4, r1, r0
    27ca:	e843 4c00 	strex	ip, r4, [r3]
    27ce:	f1bc 0f00 	cmp.w	ip, #0
    27d2:	d1f6      	bne.n	27c2 <pm_system_resume+0x1e>
    27d4:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    27d8:	4211      	tst	r1, r2
    27da:	d017      	beq.n	280c <pm_system_resume+0x68>
		exit_pos_ops(z_power_states[id]);
    27dc:	4c11      	ldr	r4, [pc, #68]	; (2824 <pm_system_resume+0x80>)
    27de:	220c      	movs	r2, #12
    27e0:	fb02 4205 	mla	r2, r2, r5, r4
    27e4:	ca07      	ldmia	r2, {r0, r1, r2}
    27e6:	ab01      	add	r3, sp, #4
    27e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    27ec:	4a0e      	ldr	r2, [pc, #56]	; (2828 <pm_system_resume+0x84>)
    27ee:	b17a      	cbz	r2, 2810 <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
    27f0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    27f4:	f004 ff10 	bl	7618 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    27f8:	2000      	movs	r0, #0
    27fa:	f7ff ff85 	bl	2708 <pm_state_notify>
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    27fe:	230c      	movs	r3, #12
    2800:	436b      	muls	r3, r5
    2802:	2200      	movs	r2, #0
    2804:	18e1      	adds	r1, r4, r3
    2806:	50e2      	str	r2, [r4, r3]
    2808:	e9c1 2201 	strd	r2, r2, [r1, #4]
			0, 0};
	}
}
    280c:	b005      	add	sp, #20
    280e:	bd30      	pop	{r4, r5, pc}
    2810:	f382 8811 	msr	BASEPRI, r2
    2814:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    2818:	e7ee      	b.n	27f8 <pm_system_resume+0x54>
    281a:	bf00      	nop
    281c:	20000eb4 	.word	0x20000eb4
    2820:	2000081c 	.word	0x2000081c
    2824:	20000820 	.word	0x20000820
    2828:	00007619 	.word	0x00007619

0000282c <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    282c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    2830:	4b37      	ldr	r3, [pc, #220]	; (2910 <pm_system_suspend+0xe4>)
    2832:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 2928 <pm_system_suspend+0xfc>
    2836:	7d1c      	ldrb	r4, [r3, #20]
{
    2838:	b088      	sub	sp, #32
    283a:	4607      	mov	r7, r0

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
    283c:	4620      	mov	r0, r4
    283e:	f7ff ff95 	bl	276c <atomic_test_and_set_bit.constprop.0>
    2842:	b960      	cbnz	r0, 285e <pm_system_suspend+0x32>
		z_power_states[id] = pm_policy_next_state(id, ticks);
    2844:	466e      	mov	r6, sp
    2846:	463a      	mov	r2, r7
    2848:	4621      	mov	r1, r4
    284a:	4630      	mov	r0, r6
    284c:	f004 fe78 	bl	7540 <pm_policy_next_state>
    2850:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    2854:	250c      	movs	r5, #12
    2856:	fb05 8504 	mla	r5, r5, r4, r8
    285a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
    285e:	230c      	movs	r3, #12
    2860:	4363      	muls	r3, r4
    2862:	eb08 0203 	add.w	r2, r8, r3
    2866:	f818 0003 	ldrb.w	r0, [r8, r3]
    286a:	0965      	lsrs	r5, r4, #5
    286c:	f004 061f 	and.w	r6, r4, #31
    2870:	b3c8      	cbz	r0, 28e6 <pm_system_suspend+0xba>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    2872:	1c7b      	adds	r3, r7, #1
    2874:	d00f      	beq.n	2896 <pm_system_suspend+0x6a>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    2876:	f8d2 e008 	ldr.w	lr, [r2, #8]
    287a:	4826      	ldr	r0, [pc, #152]	; (2914 <pm_system_suspend+0xe8>)
    287c:	4a26      	ldr	r2, [pc, #152]	; (2918 <pm_system_suspend+0xec>)
    287e:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    2882:	2100      	movs	r1, #0
    2884:	2300      	movs	r3, #0
    2886:	fbec 010e 	umlal	r0, r1, ip, lr
    288a:	f7fe f873 	bl	974 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    288e:	2101      	movs	r1, #1
    2890:	1a38      	subs	r0, r7, r0
    2892:	f005 fccf 	bl	8234 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    2896:	f003 fbcd 	bl	6034 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    289a:	2001      	movs	r0, #1
    289c:	f7ff ff34 	bl	2708 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    28a0:	f3bf 8f5b 	dmb	ish
    28a4:	4b1d      	ldr	r3, [pc, #116]	; (291c <pm_system_suspend+0xf0>)
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    28a6:	2201      	movs	r2, #1
    28a8:	40b2      	lsls	r2, r6
    28aa:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    28ae:	e853 1f00 	ldrex	r1, [r3]
    28b2:	4311      	orrs	r1, r2
    28b4:	e843 1000 	strex	r0, r1, [r3]
    28b8:	2800      	cmp	r0, #0
    28ba:	d1f8      	bne.n	28ae <pm_system_suspend+0x82>
    28bc:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
    28c0:	230c      	movs	r3, #12
    28c2:	fb03 8404 	mla	r4, r3, r4, r8
    28c6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    28ca:	ab05      	add	r3, sp, #20
    28cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    28d0:	4a13      	ldr	r2, [pc, #76]	; (2920 <pm_system_suspend+0xf4>)
    28d2:	b11a      	cbz	r2, 28dc <pm_system_suspend+0xb0>
		pm_power_state_set(info);
    28d4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    28d8:	f004 fe8b 	bl	75f2 <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
    28dc:	f7ff ff62 	bl	27a4 <pm_system_resume>
	k_sched_unlock();
    28e0:	f003 fd82 	bl	63e8 <k_sched_unlock>
	bool ret = true;
    28e4:	2001      	movs	r0, #1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    28e6:	4a0f      	ldr	r2, [pc, #60]	; (2924 <pm_system_suspend+0xf8>)
    28e8:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    28ec:	2301      	movs	r3, #1
    28ee:	40b3      	lsls	r3, r6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    28f0:	43db      	mvns	r3, r3
    28f2:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    28f6:	e855 2f00 	ldrex	r2, [r5]
    28fa:	401a      	ands	r2, r3
    28fc:	e845 2100 	strex	r1, r2, [r5]
    2900:	2900      	cmp	r1, #0
    2902:	d1f8      	bne.n	28f6 <pm_system_suspend+0xca>
    2904:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
    2908:	b008      	add	sp, #32
    290a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    290e:	bf00      	nop
    2910:	20000eb4 	.word	0x20000eb4
    2914:	000f423f 	.word	0x000f423f
    2918:	000f4240 	.word	0x000f4240
    291c:	2000081c 	.word	0x2000081c
    2920:	000075f3 	.word	0x000075f3
    2924:	2000082c 	.word	0x2000082c
    2928:	20000820 	.word	0x20000820

0000292c <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    292c:	4801      	ldr	r0, [pc, #4]	; (2934 <nrf_cc3xx_platform_abort_init+0x8>)
    292e:	f004 ba83 	b.w	6e38 <nrf_cc3xx_platform_set_abort>
    2932:	bf00      	nop
    2934:	000086e0 	.word	0x000086e0

00002938 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2938:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    293a:	b1d0      	cbz	r0, 2972 <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    293c:	6843      	ldr	r3, [r0, #4]
    293e:	2b04      	cmp	r3, #4
    2940:	d111      	bne.n	2966 <mutex_unlock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2942:	2200      	movs	r2, #0
    2944:	6803      	ldr	r3, [r0, #0]
    2946:	f3bf 8f5b 	dmb	ish
    294a:	e853 1f00 	ldrex	r1, [r3]
    294e:	2901      	cmp	r1, #1
    2950:	d103      	bne.n	295a <mutex_unlock_platform+0x22>
    2952:	e843 2000 	strex	r0, r2, [r3]
    2956:	2800      	cmp	r0, #0
    2958:	d1f7      	bne.n	294a <mutex_unlock_platform+0x12>
    295a:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    295e:	4807      	ldr	r0, [pc, #28]	; (297c <mutex_unlock_platform+0x44>)
    2960:	bf08      	it	eq
    2962:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    2964:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2966:	b13b      	cbz	r3, 2978 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    2968:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    296a:	f003 fa73 	bl	5e54 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    296e:	2000      	movs	r0, #0
    2970:	e7f8      	b.n	2964 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2972:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    2976:	e7f5      	b.n	2964 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2978:	4801      	ldr	r0, [pc, #4]	; (2980 <mutex_unlock_platform+0x48>)
    297a:	e7f3      	b.n	2964 <mutex_unlock_platform+0x2c>
    297c:	ffff8fe9 	.word	0xffff8fe9
    2980:	ffff8fea 	.word	0xffff8fea

00002984 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2984:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    2986:	4604      	mov	r4, r0
    2988:	b918      	cbnz	r0, 2992 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    298a:	4b0d      	ldr	r3, [pc, #52]	; (29c0 <mutex_free_platform+0x3c>)
    298c:	480d      	ldr	r0, [pc, #52]	; (29c4 <mutex_free_platform+0x40>)
    298e:	685b      	ldr	r3, [r3, #4]
    2990:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    2992:	6861      	ldr	r1, [r4, #4]
    2994:	2908      	cmp	r1, #8
    2996:	d00d      	beq.n	29b4 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2998:	f031 0304 	bics.w	r3, r1, #4
    299c:	d00a      	beq.n	29b4 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    299e:	f011 0102 	ands.w	r1, r1, #2
    29a2:	d008      	beq.n	29b6 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    29a4:	4808      	ldr	r0, [pc, #32]	; (29c8 <mutex_free_platform+0x44>)
    29a6:	4621      	mov	r1, r4
    29a8:	f005 facd 	bl	7f46 <k_mem_slab_free>
        mutex->mutex = NULL;
    29ac:	2300      	movs	r3, #0
    29ae:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    29b0:	2300      	movs	r3, #0
    29b2:	6063      	str	r3, [r4, #4]
}
    29b4:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    29b6:	6820      	ldr	r0, [r4, #0]
    29b8:	2214      	movs	r2, #20
    29ba:	f004 fe0c 	bl	75d6 <memset>
    29be:	e7f7      	b.n	29b0 <mutex_free_platform+0x2c>
    29c0:	200001a8 	.word	0x200001a8
    29c4:	00008d15 	.word	0x00008d15
    29c8:	20000830 	.word	0x20000830

000029cc <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    29cc:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    29ce:	4604      	mov	r4, r0
    29d0:	b918      	cbnz	r0, 29da <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    29d2:	4b16      	ldr	r3, [pc, #88]	; (2a2c <mutex_init_platform+0x60>)
    29d4:	4816      	ldr	r0, [pc, #88]	; (2a30 <mutex_init_platform+0x64>)
    29d6:	685b      	ldr	r3, [r3, #4]
    29d8:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    29da:	6863      	ldr	r3, [r4, #4]
    29dc:	2b04      	cmp	r3, #4
    29de:	d023      	beq.n	2a28 <mutex_init_platform+0x5c>
    29e0:	2b08      	cmp	r3, #8
    29e2:	d021      	beq.n	2a28 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    29e4:	b9cb      	cbnz	r3, 2a1a <mutex_init_platform+0x4e>
    29e6:	6823      	ldr	r3, [r4, #0]
    29e8:	b9bb      	cbnz	r3, 2a1a <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    29ea:	4812      	ldr	r0, [pc, #72]	; (2a34 <mutex_init_platform+0x68>)
    29ec:	f04f 32ff 	mov.w	r2, #4294967295
    29f0:	f04f 33ff 	mov.w	r3, #4294967295
    29f4:	4621      	mov	r1, r4
    29f6:	f003 f8ad 	bl	5b54 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    29fa:	b908      	cbnz	r0, 2a00 <mutex_init_platform+0x34>
    29fc:	6823      	ldr	r3, [r4, #0]
    29fe:	b91b      	cbnz	r3, 2a08 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    2a00:	4b0a      	ldr	r3, [pc, #40]	; (2a2c <mutex_init_platform+0x60>)
    2a02:	480d      	ldr	r0, [pc, #52]	; (2a38 <mutex_init_platform+0x6c>)
    2a04:	685b      	ldr	r3, [r3, #4]
    2a06:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2a08:	6820      	ldr	r0, [r4, #0]
    2a0a:	2214      	movs	r2, #20
    2a0c:	2100      	movs	r1, #0
    2a0e:	f004 fde2 	bl	75d6 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    2a12:	6863      	ldr	r3, [r4, #4]
    2a14:	f043 0302 	orr.w	r3, r3, #2
    2a18:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    2a1a:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    2a1c:	f005 face 	bl	7fbc <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    2a20:	6863      	ldr	r3, [r4, #4]
    2a22:	f043 0301 	orr.w	r3, r3, #1
    2a26:	6063      	str	r3, [r4, #4]
}
    2a28:	bd10      	pop	{r4, pc}
    2a2a:	bf00      	nop
    2a2c:	200001a8 	.word	0x200001a8
    2a30:	00008d15 	.word	0x00008d15
    2a34:	20000830 	.word	0x20000830
    2a38:	00008d3b 	.word	0x00008d3b

00002a3c <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2a3c:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    2a3e:	b308      	cbz	r0, 2a84 <mutex_lock_platform+0x48>
    switch (mutex->flags) {
    2a40:	6843      	ldr	r3, [r0, #4]
    2a42:	2b04      	cmp	r3, #4
    2a44:	d110      	bne.n	2a68 <mutex_lock_platform+0x2c>
    2a46:	2201      	movs	r2, #1
    2a48:	6803      	ldr	r3, [r0, #0]
    2a4a:	f3bf 8f5b 	dmb	ish
    2a4e:	e853 1f00 	ldrex	r1, [r3]
    2a52:	2900      	cmp	r1, #0
    2a54:	d103      	bne.n	2a5e <mutex_lock_platform+0x22>
    2a56:	e843 2000 	strex	r0, r2, [r3]
    2a5a:	2800      	cmp	r0, #0
    2a5c:	d1f7      	bne.n	2a4e <mutex_lock_platform+0x12>
    2a5e:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2a62:	d10b      	bne.n	2a7c <mutex_lock_platform+0x40>
    2a64:	2000      	movs	r0, #0
}
    2a66:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2a68:	b153      	cbz	r3, 2a80 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    2a6a:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    2a6c:	f04f 32ff 	mov.w	r2, #4294967295
    2a70:	f04f 33ff 	mov.w	r3, #4294967295
    2a74:	f003 f970 	bl	5d58 <z_impl_k_mutex_lock>
        if (ret == 0) {
    2a78:	2800      	cmp	r0, #0
    2a7a:	d0f3      	beq.n	2a64 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2a7c:	4803      	ldr	r0, [pc, #12]	; (2a8c <mutex_lock_platform+0x50>)
    2a7e:	e7f2      	b.n	2a66 <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2a80:	4803      	ldr	r0, [pc, #12]	; (2a90 <mutex_lock_platform+0x54>)
    2a82:	e7f0      	b.n	2a66 <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2a84:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    2a88:	e7ed      	b.n	2a66 <mutex_lock_platform+0x2a>
    2a8a:	bf00      	nop
    2a8c:	ffff8fe9 	.word	0xffff8fe9
    2a90:	ffff8fea 	.word	0xffff8fea

00002a94 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    2a94:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    2a96:	4906      	ldr	r1, [pc, #24]	; (2ab0 <nrf_cc3xx_platform_mutex_init+0x1c>)
    2a98:	4806      	ldr	r0, [pc, #24]	; (2ab4 <nrf_cc3xx_platform_mutex_init+0x20>)
    2a9a:	2340      	movs	r3, #64	; 0x40
    2a9c:	2214      	movs	r2, #20
    2a9e:	f005 fa37 	bl	7f10 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    2aa2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    2aa6:	4904      	ldr	r1, [pc, #16]	; (2ab8 <nrf_cc3xx_platform_mutex_init+0x24>)
    2aa8:	4804      	ldr	r0, [pc, #16]	; (2abc <nrf_cc3xx_platform_mutex_init+0x28>)
    2aaa:	f004 ba27 	b.w	6efc <nrf_cc3xx_platform_set_mutexes>
    2aae:	bf00      	nop
    2ab0:	2000084c 	.word	0x2000084c
    2ab4:	20000830 	.word	0x20000830
    2ab8:	000086f8 	.word	0x000086f8
    2abc:	000086e8 	.word	0x000086e8

00002ac0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    2ac0:	4901      	ldr	r1, [pc, #4]	; (2ac8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    2ac2:	2210      	movs	r2, #16
	str	r2, [r1]
    2ac4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    2ac6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2ac8:	e000ed10 	.word	0xe000ed10

00002acc <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2acc:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    2ace:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    2ad0:	f380 8811 	msr	BASEPRI, r0
	isb
    2ad4:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    2ad8:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    2adc:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    2ade:	b662      	cpsie	i
	isb
    2ae0:	f3bf 8f6f 	isb	sy

	bx	lr
    2ae4:	4770      	bx	lr
    2ae6:	bf00      	nop

00002ae8 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    2ae8:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    2aea:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    2aec:	f381 8811 	msr	BASEPRI, r1

	wfe
    2af0:	bf20      	wfe

	msr	BASEPRI, r0
    2af2:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    2af6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    2af8:	4770      	bx	lr
    2afa:	bf00      	nop

00002afc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2afc:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2afe:	2b00      	cmp	r3, #0
    2b00:	db08      	blt.n	2b14 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2b02:	2201      	movs	r2, #1
    2b04:	f000 001f 	and.w	r0, r0, #31
    2b08:	fa02 f000 	lsl.w	r0, r2, r0
    2b0c:	095b      	lsrs	r3, r3, #5
    2b0e:	4a02      	ldr	r2, [pc, #8]	; (2b18 <arch_irq_enable+0x1c>)
    2b10:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    2b14:	4770      	bx	lr
    2b16:	bf00      	nop
    2b18:	e000e100 	.word	0xe000e100

00002b1c <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    2b1c:	4b05      	ldr	r3, [pc, #20]	; (2b34 <arch_irq_is_enabled+0x18>)
    2b1e:	0942      	lsrs	r2, r0, #5
    2b20:	f000 001f 	and.w	r0, r0, #31
    2b24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2b28:	2301      	movs	r3, #1
    2b2a:	fa03 f000 	lsl.w	r0, r3, r0
}
    2b2e:	4010      	ands	r0, r2
    2b30:	4770      	bx	lr
    2b32:	bf00      	nop
    2b34:	e000e100 	.word	0xe000e100

00002b38 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2b38:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2b3a:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2b3c:	bfa8      	it	ge
    2b3e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    2b42:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2b46:	bfb8      	it	lt
    2b48:	4b06      	ldrlt	r3, [pc, #24]	; (2b64 <z_arm_irq_priority_set+0x2c>)
    2b4a:	ea4f 1141 	mov.w	r1, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2b4e:	bfac      	ite	ge
    2b50:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2b54:	f000 000f 	andlt.w	r0, r0, #15
    2b58:	b2c9      	uxtb	r1, r1
    2b5a:	bfb4      	ite	lt
    2b5c:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2b5e:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    2b62:	4770      	bx	lr
    2b64:	e000ed14 	.word	0xe000ed14

00002b68 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2b68:	bf30      	wfi
    b z_SysNmiOnReset
    2b6a:	f7ff bffd 	b.w	2b68 <z_SysNmiOnReset>
    2b6e:	bf00      	nop

00002b70 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2b70:	4a0b      	ldr	r2, [pc, #44]	; (2ba0 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    2b72:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2b74:	4b0b      	ldr	r3, [pc, #44]	; (2ba4 <z_arm_prep_c+0x34>)
    2b76:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    2b7a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2b7c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2b80:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2b84:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2b88:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2b8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2b90:	f002 ff42 	bl	5a18 <z_bss_zero>
	z_data_copy();
    2b94:	f003 fd72 	bl	667c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2b98:	f000 f9d0 	bl	2f3c <z_arm_interrupt_init>
	z_cstart();
    2b9c:	f002 ff46 	bl	5a2c <z_cstart>
    2ba0:	00000000 	.word	0x00000000
    2ba4:	e000ed00 	.word	0xe000ed00

00002ba8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2ba8:	4a09      	ldr	r2, [pc, #36]	; (2bd0 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    2baa:	490a      	ldr	r1, [pc, #40]	; (2bd4 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    2bac:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    2bae:	6809      	ldr	r1, [r1, #0]
    2bb0:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2bb2:	4909      	ldr	r1, [pc, #36]	; (2bd8 <arch_swap+0x30>)
	_current->arch.basepri = key;
    2bb4:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2bb6:	684b      	ldr	r3, [r1, #4]
    2bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2bbc:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    2bbe:	2300      	movs	r3, #0
    2bc0:	f383 8811 	msr	BASEPRI, r3
    2bc4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2bc8:	6893      	ldr	r3, [r2, #8]
}
    2bca:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    2bcc:	4770      	bx	lr
    2bce:	bf00      	nop
    2bd0:	20000eb4 	.word	0x20000eb4
    2bd4:	00008880 	.word	0x00008880
    2bd8:	e000ed00 	.word	0xe000ed00

00002bdc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2bdc:	4912      	ldr	r1, [pc, #72]	; (2c28 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    2bde:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2be0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    2be4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    2be6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    2bea:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2bee:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    2bf0:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2bf4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2bf8:	4f0c      	ldr	r7, [pc, #48]	; (2c2c <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2bfa:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    2bfe:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    2c00:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    2c02:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2c04:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    2c06:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2c08:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2c0a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    2c0e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    2c10:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    2c12:	f000 fa29 	bl	3068 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    2c16:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    2c1a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    2c1e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2c22:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    2c26:	4770      	bx	lr
    ldr r1, =_kernel
    2c28:	20000eb4 	.word	0x20000eb4
    ldr v4, =_SCS_ICSR
    2c2c:	e000ed04 	.word	0xe000ed04

00002c30 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    2c30:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2c34:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2c36:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2c3a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    2c3e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2c40:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2c44:	2902      	cmp	r1, #2
    beq _oops
    2c46:	d0ff      	beq.n	2c48 <_oops>

00002c48 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2c48:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    2c4a:	f004 fc84 	bl	7556 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    2c4e:	bd01      	pop	{r0, pc}

00002c50 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    2c50:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    2c54:	9b00      	ldr	r3, [sp, #0]
    2c56:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    2c5a:	490a      	ldr	r1, [pc, #40]	; (2c84 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    2c5c:	9b01      	ldr	r3, [sp, #4]
    2c5e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    2c62:	9b02      	ldr	r3, [sp, #8]
    2c64:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    2c68:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    2c6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2c70:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    2c74:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    2c78:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    2c7a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    2c7c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    2c7e:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    2c80:	4770      	bx	lr
    2c82:	bf00      	nop
    2c84:	000073fb 	.word	0x000073fb

00002c88 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    2c88:	4a0b      	ldr	r2, [pc, #44]	; (2cb8 <z_check_thread_stack_fail+0x30>)
{
    2c8a:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    2c8c:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    2c8e:	b190      	cbz	r0, 2cb6 <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    2c90:	f113 0f16 	cmn.w	r3, #22
    2c94:	6e80      	ldr	r0, [r0, #104]	; 0x68
    2c96:	d005      	beq.n	2ca4 <z_check_thread_stack_fail+0x1c>
    2c98:	f1a0 0220 	sub.w	r2, r0, #32
    2c9c:	429a      	cmp	r2, r3
    2c9e:	d806      	bhi.n	2cae <z_check_thread_stack_fail+0x26>
    2ca0:	4283      	cmp	r3, r0
    2ca2:	d204      	bcs.n	2cae <z_check_thread_stack_fail+0x26>
    2ca4:	4281      	cmp	r1, r0
    2ca6:	bf2c      	ite	cs
    2ca8:	2100      	movcs	r1, #0
    2caa:	2101      	movcc	r1, #1
    2cac:	e000      	b.n	2cb0 <z_check_thread_stack_fail+0x28>
    2cae:	2100      	movs	r1, #0
    2cb0:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    2cb2:	bf08      	it	eq
    2cb4:	2000      	moveq	r0, #0
}
    2cb6:	4770      	bx	lr
    2cb8:	20000eb4 	.word	0x20000eb4

00002cbc <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    2cbc:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    2cbe:	4b09      	ldr	r3, [pc, #36]	; (2ce4 <arch_switch_to_main_thread+0x28>)
    2cc0:	6098      	str	r0, [r3, #8]
{
    2cc2:	460d      	mov	r5, r1
    2cc4:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    2cc6:	f000 f9cf 	bl	3068 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    2cca:	4620      	mov	r0, r4
    2ccc:	f385 8809 	msr	PSP, r5
    2cd0:	2100      	movs	r1, #0
    2cd2:	b663      	cpsie	if
    2cd4:	f381 8811 	msr	BASEPRI, r1
    2cd8:	f3bf 8f6f 	isb	sy
    2cdc:	2200      	movs	r2, #0
    2cde:	2300      	movs	r3, #0
    2ce0:	f004 fb8b 	bl	73fa <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2ce4:	20000eb4 	.word	0x20000eb4

00002ce8 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2ce8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    2cea:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    2cec:	4a0b      	ldr	r2, [pc, #44]	; (2d1c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    2cee:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    2cf0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    2cf2:	bf1e      	ittt	ne
	movne	r1, #0
    2cf4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    2cf6:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    2cf8:	f005 f959 	blne	7fae <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    2cfc:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    2cfe:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    2d02:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    2d06:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    2d0a:	4905      	ldr	r1, [pc, #20]	; (2d20 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2d0c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    2d0e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2d10:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    2d12:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    2d16:	4903      	ldr	r1, [pc, #12]	; (2d24 <_isr_wrapper+0x3c>)
	bx r1
    2d18:	4708      	bx	r1
    2d1a:	0000      	.short	0x0000
	ldr r2, =_kernel
    2d1c:	20000eb4 	.word	0x20000eb4
	ldr r1, =_sw_isr_table
    2d20:	00008518 	.word	0x00008518
	ldr r1, =z_arm_int_exit
    2d24:	00002d29 	.word	0x00002d29

00002d28 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    2d28:	4b04      	ldr	r3, [pc, #16]	; (2d3c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    2d2a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    2d2c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    2d2e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    2d30:	d003      	beq.n	2d3a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    2d32:	4903      	ldr	r1, [pc, #12]	; (2d40 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    2d34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    2d38:	600a      	str	r2, [r1, #0]

00002d3a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    2d3a:	4770      	bx	lr
	ldr r3, =_kernel
    2d3c:	20000eb4 	.word	0x20000eb4
	ldr r1, =_SCS_ICSR
    2d40:	e000ed04 	.word	0xe000ed04

00002d44 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    2d44:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2d46:	4b19      	ldr	r3, [pc, #100]	; (2dac <mem_manage_fault+0x68>)
{
    2d48:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2d4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2d4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2d4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    2d50:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2d52:	0790      	lsls	r0, r2, #30
    2d54:	d519      	bpl.n	2d8a <mem_manage_fault+0x46>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    2d56:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2d58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2d5a:	0612      	lsls	r2, r2, #24
    2d5c:	d515      	bpl.n	2d8a <mem_manage_fault+0x46>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    2d5e:	b119      	cbz	r1, 2d68 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2d60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2d62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    2d66:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    2d68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2d6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2d6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2d6e:	06d1      	lsls	r1, r2, #27
    2d70:	d40e      	bmi.n	2d90 <mem_manage_fault+0x4c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    2d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2d74:	079a      	lsls	r2, r3, #30
    2d76:	d40b      	bmi.n	2d90 <mem_manage_fault+0x4c>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2d78:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2d7a:	4a0c      	ldr	r2, [pc, #48]	; (2dac <mem_manage_fault+0x68>)
    2d7c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2d7e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    2d82:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    2d84:	2300      	movs	r3, #0
    2d86:	7023      	strb	r3, [r4, #0]

	return reason;
}
    2d88:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
    2d8a:	f06f 0015 	mvn.w	r0, #21
    2d8e:	e7eb      	b.n	2d68 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    2d90:	4b06      	ldr	r3, [pc, #24]	; (2dac <mem_manage_fault+0x68>)
    2d92:	685b      	ldr	r3, [r3, #4]
    2d94:	051b      	lsls	r3, r3, #20
    2d96:	d5ef      	bpl.n	2d78 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    2d98:	4629      	mov	r1, r5
    2d9a:	f7ff ff75 	bl	2c88 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    2d9e:	2800      	cmp	r0, #0
    2da0:	d0ea      	beq.n	2d78 <mem_manage_fault+0x34>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    2da2:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    2da6:	2002      	movs	r0, #2
    2da8:	e7e7      	b.n	2d7a <mem_manage_fault+0x36>
    2daa:	bf00      	nop
    2dac:	e000ed00 	.word	0xe000ed00

00002db0 <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2db0:	4b0d      	ldr	r3, [pc, #52]	; (2de8 <bus_fault.isra.0+0x38>)
    2db2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2db4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2db6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2db8:	0592      	lsls	r2, r2, #22
    2dba:	d508      	bpl.n	2dce <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    2dbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2dbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2dc0:	0412      	lsls	r2, r2, #16
    2dc2:	d504      	bpl.n	2dce <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    2dc4:	b118      	cbz	r0, 2dce <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2dc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2dc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    2dcc:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2dce:	4b06      	ldr	r3, [pc, #24]	; (2de8 <bus_fault.isra.0+0x38>)
    2dd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2dd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2dd4:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    2dd6:	bf58      	it	pl
    2dd8:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2dda:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    2ddc:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2dde:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    2de2:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2de4:	7008      	strb	r0, [r1, #0]

	return reason;
}
    2de6:	4770      	bx	lr
    2de8:	e000ed00 	.word	0xe000ed00

00002dec <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2dec:	4b07      	ldr	r3, [pc, #28]	; (2e0c <usage_fault.isra.0+0x20>)
    2dee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    2df0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    2df2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2df4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2df6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2df8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2dfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2dfc:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    2e00:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    2e04:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    2e06:	2000      	movs	r0, #0
    2e08:	4770      	bx	lr
    2e0a:	bf00      	nop
    2e0c:	e000ed00 	.word	0xe000ed00

00002e10 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    2e10:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2e12:	4b3e      	ldr	r3, [pc, #248]	; (2f0c <z_arm_fault+0xfc>)
    2e14:	685b      	ldr	r3, [r3, #4]
{
    2e16:	b08a      	sub	sp, #40	; 0x28
    2e18:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
    2e1e:	2600      	movs	r6, #0
    2e20:	f386 8811 	msr	BASEPRI, r6
    2e24:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    2e28:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    2e2c:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    2e30:	d111      	bne.n	2e56 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    2e32:	f002 010c 	and.w	r1, r2, #12
    2e36:	2908      	cmp	r1, #8
    2e38:	d00d      	beq.n	2e56 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    2e3a:	0712      	lsls	r2, r2, #28
    2e3c:	d401      	bmi.n	2e42 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    2e3e:	4605      	mov	r5, r0
			*nested_exc = true;
    2e40:	2601      	movs	r6, #1
	*recoverable = false;
    2e42:	2200      	movs	r2, #0
    2e44:	3b03      	subs	r3, #3
    2e46:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    2e4a:	2b03      	cmp	r3, #3
    2e4c:	d857      	bhi.n	2efe <z_arm_fault+0xee>
    2e4e:	e8df f003 	tbb	[pc, r3]
    2e52:	4e04      	.short	0x4e04
    2e54:	4b52      	.short	0x4b52
		return NULL;
    2e56:	4635      	mov	r5, r6
    2e58:	e7f3      	b.n	2e42 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2e5a:	4b2c      	ldr	r3, [pc, #176]	; (2f0c <z_arm_fault+0xfc>)
    2e5c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    2e5e:	f014 0402 	ands.w	r4, r4, #2
    2e62:	d14c      	bne.n	2efe <z_arm_fault+0xee>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    2e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2e66:	2a00      	cmp	r2, #0
    2e68:	db18      	blt.n	2e9c <z_arm_fault+0x8c>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    2e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2e6c:	005b      	lsls	r3, r3, #1
    2e6e:	d515      	bpl.n	2e9c <z_arm_fault+0x8c>
	uint16_t fault_insn = *(ret_addr - 1);
    2e70:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    2e72:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    2e76:	f64d 7302 	movw	r3, #57090	; 0xdf02
    2e7a:	429a      	cmp	r2, r3
    2e7c:	d00d      	beq.n	2e9a <z_arm_fault+0x8a>
		} else if (SCB_MMFSR != 0) {
    2e7e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2e82:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    2e86:	781b      	ldrb	r3, [r3, #0]
    2e88:	b303      	cbz	r3, 2ecc <z_arm_fault+0xbc>
			reason = mem_manage_fault(esf, 1, recoverable);
    2e8a:	f10d 0207 	add.w	r2, sp, #7
    2e8e:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    2e90:	4628      	mov	r0, r5
    2e92:	f7ff ff57 	bl	2d44 <mem_manage_fault>
    2e96:	4604      	mov	r4, r0
		break;
    2e98:	e000      	b.n	2e9c <z_arm_fault+0x8c>
			reason = esf->basic.r0;
    2e9a:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    2e9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2ea0:	b993      	cbnz	r3, 2ec8 <z_arm_fault+0xb8>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    2ea2:	2220      	movs	r2, #32
    2ea4:	4629      	mov	r1, r5
    2ea6:	a802      	add	r0, sp, #8
    2ea8:	f004 fb8a 	bl	75c0 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    2eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2eae:	b346      	cbz	r6, 2f02 <z_arm_fault+0xf2>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    2eb0:	f3c3 0208 	ubfx	r2, r3, #0, #9
    2eb4:	b922      	cbnz	r2, 2ec0 <z_arm_fault+0xb0>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    2eb6:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2eba:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2ebe:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    2ec0:	a902      	add	r1, sp, #8
    2ec2:	4620      	mov	r0, r4
    2ec4:	f004 fb45 	bl	7552 <z_arm_fatal_error>
}
    2ec8:	b00a      	add	sp, #40	; 0x28
    2eca:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    2ecc:	4b10      	ldr	r3, [pc, #64]	; (2f10 <z_arm_fault+0x100>)
    2ece:	781b      	ldrb	r3, [r3, #0]
    2ed0:	b12b      	cbz	r3, 2ede <z_arm_fault+0xce>
			reason = bus_fault(esf, 1, recoverable);
    2ed2:	f10d 0107 	add.w	r1, sp, #7
    2ed6:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    2ed8:	f7ff ff6a 	bl	2db0 <bus_fault.isra.0>
    2edc:	e7db      	b.n	2e96 <z_arm_fault+0x86>
		} else if (SCB_UFSR != 0) {
    2ede:	4b0d      	ldr	r3, [pc, #52]	; (2f14 <z_arm_fault+0x104>)
    2ee0:	881b      	ldrh	r3, [r3, #0]
    2ee2:	b29b      	uxth	r3, r3
    2ee4:	2b00      	cmp	r3, #0
    2ee6:	d0d9      	beq.n	2e9c <z_arm_fault+0x8c>
		reason = usage_fault(esf);
    2ee8:	f7ff ff80 	bl	2dec <usage_fault.isra.0>
    2eec:	e7d3      	b.n	2e96 <z_arm_fault+0x86>
		reason = mem_manage_fault(esf, 0, recoverable);
    2eee:	f10d 0207 	add.w	r2, sp, #7
    2ef2:	2100      	movs	r1, #0
    2ef4:	e7cc      	b.n	2e90 <z_arm_fault+0x80>
		reason = bus_fault(esf, 0, recoverable);
    2ef6:	f10d 0107 	add.w	r1, sp, #7
    2efa:	2000      	movs	r0, #0
    2efc:	e7ec      	b.n	2ed8 <z_arm_fault+0xc8>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2efe:	2400      	movs	r4, #0
    2f00:	e7cc      	b.n	2e9c <z_arm_fault+0x8c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2f02:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    2f06:	f023 0301 	bic.w	r3, r3, #1
    2f0a:	e7d8      	b.n	2ebe <z_arm_fault+0xae>
    2f0c:	e000ed00 	.word	0xe000ed00
    2f10:	e000ed29 	.word	0xe000ed29
    2f14:	e000ed2a 	.word	0xe000ed2a

00002f18 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2f18:	4a02      	ldr	r2, [pc, #8]	; (2f24 <z_arm_fault_init+0xc>)
    2f1a:	6953      	ldr	r3, [r2, #20]
    2f1c:	f043 0310 	orr.w	r3, r3, #16
    2f20:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    2f22:	4770      	bx	lr
    2f24:	e000ed00 	.word	0xe000ed00

00002f28 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    2f28:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    2f2c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    2f30:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    2f32:	4672      	mov	r2, lr
	bl z_arm_fault
    2f34:	f7ff ff6c 	bl	2e10 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2f38:	bd01      	pop	{r0, pc}
    2f3a:	bf00      	nop

00002f3c <z_arm_interrupt_init>:
    2f3c:	4804      	ldr	r0, [pc, #16]	; (2f50 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    2f3e:	2300      	movs	r3, #0
    2f40:	2120      	movs	r1, #32
    2f42:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2f44:	3301      	adds	r3, #1
    2f46:	2b30      	cmp	r3, #48	; 0x30
    2f48:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    2f4c:	d1f9      	bne.n	2f42 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    2f4e:	4770      	bx	lr
    2f50:	e000e100 	.word	0xe000e100

00002f54 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    2f54:	2000      	movs	r0, #0
    msr CONTROL, r0
    2f56:	f380 8814 	msr	CONTROL, r0
    isb
    2f5a:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    2f5e:	f005 fa45 	bl	83ec <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    2f62:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    2f64:	490d      	ldr	r1, [pc, #52]	; (2f9c <__start+0x48>)
    str r0, [r1]
    2f66:	6008      	str	r0, [r1, #0]
    dsb
    2f68:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2f6c:	480c      	ldr	r0, [pc, #48]	; (2fa0 <__start+0x4c>)
    msr msp, r0
    2f6e:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    2f72:	f000 f829 	bl	2fc8 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2f76:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2f78:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    2f7c:	4809      	ldr	r0, [pc, #36]	; (2fa4 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    2f7e:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    2f82:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2f84:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    2f88:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    2f8c:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    2f8e:	4308      	orrs	r0, r1
    msr CONTROL, r0
    2f90:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    2f94:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    2f98:	f7ff fdea 	bl	2b70 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    2f9c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2fa0:	20002560 	.word	0x20002560
    ldr r0, =z_interrupt_stacks
    2fa4:	200026e0 	.word	0x200026e0

00002fa8 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    2fa8:	4a06      	ldr	r2, [pc, #24]	; (2fc4 <z_arm_clear_arm_mpu_config+0x1c>)
    2faa:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
    2fac:	2300      	movs	r3, #0
	int num_regions =
    2fae:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    2fb2:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    2fb4:	428b      	cmp	r3, r1
    2fb6:	d100      	bne.n	2fba <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
    2fb8:	4770      	bx	lr
  MPU->RNR = rnr;
    2fba:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    2fbc:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
    2fbe:	3301      	adds	r3, #1
    2fc0:	e7f8      	b.n	2fb4 <z_arm_clear_arm_mpu_config+0xc>
    2fc2:	bf00      	nop
    2fc4:	e000ed90 	.word	0xe000ed90

00002fc8 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    2fc8:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    2fca:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    2fcc:	2300      	movs	r3, #0
    2fce:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    2fd2:	f7ff ffe9 	bl	2fa8 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    2fd6:	4b14      	ldr	r3, [pc, #80]	; (3028 <z_arm_init_arch_hw_at_boot+0x60>)
    2fd8:	f04f 32ff 	mov.w	r2, #4294967295
    2fdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    2fe0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    2fe4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    2fe8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    2fec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    2ff0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    2ff4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    2ff8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    2ffc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3000:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    3004:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    3008:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    300c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    3010:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    3014:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    3018:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    301c:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    301e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3022:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    3026:	bd08      	pop	{r3, pc}
    3028:	e000e100 	.word	0xe000e100

0000302c <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    302c:	4b06      	ldr	r3, [pc, #24]	; (3048 <z_impl_k_thread_abort+0x1c>)
    302e:	689b      	ldr	r3, [r3, #8]
    3030:	4283      	cmp	r3, r0
    3032:	d107      	bne.n	3044 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3034:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    3038:	b123      	cbz	r3, 3044 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    303a:	4a04      	ldr	r2, [pc, #16]	; (304c <z_impl_k_thread_abort+0x20>)
    303c:	6853      	ldr	r3, [r2, #4]
    303e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3042:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    3044:	f003 bab6 	b.w	65b4 <z_thread_abort>
    3048:	20000eb4 	.word	0x20000eb4
    304c:	e000ed00 	.word	0xe000ed00

00003050 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    3050:	4b02      	ldr	r3, [pc, #8]	; (305c <z_arm_configure_static_mpu_regions+0xc>)
    3052:	4a03      	ldr	r2, [pc, #12]	; (3060 <z_arm_configure_static_mpu_regions+0x10>)
    3054:	4803      	ldr	r0, [pc, #12]	; (3064 <z_arm_configure_static_mpu_regions+0x14>)
    3056:	2101      	movs	r1, #1
    3058:	f000 b868 	b.w	312c <arm_core_mpu_configure_static_mpu_regions>
    305c:	20040000 	.word	0x20040000
    3060:	20000000 	.word	0x20000000
    3064:	0000870c 	.word	0x0000870c

00003068 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    3068:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    306a:	4b05      	ldr	r3, [pc, #20]	; (3080 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    306c:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    306e:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    3070:	4a04      	ldr	r2, [pc, #16]	; (3084 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    3072:	2120      	movs	r1, #32
    3074:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    3078:	4618      	mov	r0, r3
    307a:	2101      	movs	r1, #1
    307c:	f000 b860 	b.w	3140 <arm_core_mpu_configure_dynamic_mpu_regions>
    3080:	20000d4c 	.word	0x20000d4c
    3084:	150b0000 	.word	0x150b0000

00003088 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    3088:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    308a:	4f1e      	ldr	r7, [pc, #120]	; (3104 <mpu_configure_regions+0x7c>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    308c:	2600      	movs	r6, #0
    308e:	428e      	cmp	r6, r1
    3090:	db01      	blt.n	3096 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    3092:	4610      	mov	r0, r2
    3094:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    3096:	6844      	ldr	r4, [r0, #4]
    3098:	b384      	cbz	r4, 30fc <mpu_configure_regions+0x74>
		if (do_sanity_check &&
    309a:	b153      	cbz	r3, 30b2 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    309c:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    30a0:	ea14 0f0c 	tst.w	r4, ip
    30a4:	d118      	bne.n	30d8 <mpu_configure_regions+0x50>
		&&
    30a6:	2c1f      	cmp	r4, #31
    30a8:	d916      	bls.n	30d8 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    30aa:	6805      	ldr	r5, [r0, #0]
		&&
    30ac:	ea1c 0f05 	tst.w	ip, r5
    30b0:	d112      	bne.n	30d8 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    30b2:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    30b4:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    30b6:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    30ba:	b2d2      	uxtb	r2, r2
    30bc:	d90f      	bls.n	30de <mpu_configure_regions+0x56>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    30be:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    30c2:	d80e      	bhi.n	30e2 <mpu_configure_regions+0x5a>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    30c4:	3c01      	subs	r4, #1
    30c6:	fab4 f484 	clz	r4, r4
    30ca:	f1c4 041f 	rsb	r4, r4, #31
    30ce:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    30d0:	2a07      	cmp	r2, #7
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    30d2:	ea4c 0404 	orr.w	r4, ip, r4
    30d6:	d906      	bls.n	30e6 <mpu_configure_regions+0x5e>
			return -EINVAL;
    30d8:	f06f 0215 	mvn.w	r2, #21
    30dc:	e7d9      	b.n	3092 <mpu_configure_regions+0xa>
		return REGION_32B;
    30de:	2408      	movs	r4, #8
    30e0:	e7f6      	b.n	30d0 <mpu_configure_regions+0x48>
		return REGION_4G;
    30e2:	243e      	movs	r4, #62	; 0x3e
    30e4:	e7f4      	b.n	30d0 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    30e6:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    30ea:	4315      	orrs	r5, r2
    30ec:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    30f0:	f044 0401 	orr.w	r4, r4, #1
    30f4:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    30f6:	60fd      	str	r5, [r7, #12]
		reg_index++;
    30f8:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    30fa:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
    30fc:	3601      	adds	r6, #1
    30fe:	300c      	adds	r0, #12
    3100:	e7c5      	b.n	308e <mpu_configure_regions+0x6>
    3102:	bf00      	nop
    3104:	e000ed90 	.word	0xe000ed90

00003108 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    3108:	4b03      	ldr	r3, [pc, #12]	; (3118 <arm_core_mpu_enable+0x10>)
    310a:	2205      	movs	r2, #5
    310c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    310e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3112:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    3116:	4770      	bx	lr
    3118:	e000ed90 	.word	0xe000ed90

0000311c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    311c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    3120:	4b01      	ldr	r3, [pc, #4]	; (3128 <arm_core_mpu_disable+0xc>)
    3122:	2200      	movs	r2, #0
    3124:	605a      	str	r2, [r3, #4]
}
    3126:	4770      	bx	lr
    3128:	e000ed90 	.word	0xe000ed90

0000312c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    312c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    312e:	4c03      	ldr	r4, [pc, #12]	; (313c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    3130:	2301      	movs	r3, #1
    3132:	7822      	ldrb	r2, [r4, #0]
    3134:	f7ff ffa8 	bl	3088 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    3138:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    313a:	bd10      	pop	{r4, pc}
    313c:	20000f30 	.word	0x20000f30

00003140 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    3140:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    3142:	4a08      	ldr	r2, [pc, #32]	; (3164 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
    3144:	2300      	movs	r3, #0
    3146:	7812      	ldrb	r2, [r2, #0]
    3148:	f7ff ff9e 	bl	3088 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    314c:	f110 0f16 	cmn.w	r0, #22
    3150:	d003      	beq.n	315a <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
    3152:	4b05      	ldr	r3, [pc, #20]	; (3168 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
    3154:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    3156:	2807      	cmp	r0, #7
    3158:	dd00      	ble.n	315c <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    315a:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    315c:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    315e:	611a      	str	r2, [r3, #16]
    3160:	3001      	adds	r0, #1
    3162:	e7f8      	b.n	3156 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    3164:	20000f30 	.word	0x20000f30
    3168:	e000ed90 	.word	0xe000ed90

0000316c <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    316c:	4913      	ldr	r1, [pc, #76]	; (31bc <z_arm_mpu_init+0x50>)
    316e:	6808      	ldr	r0, [r1, #0]
    3170:	2808      	cmp	r0, #8
{
    3172:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    3174:	d81e      	bhi.n	31b4 <z_arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    3176:	f7ff ffd1 	bl	311c <arm_core_mpu_disable>
    317a:	4c11      	ldr	r4, [pc, #68]	; (31c0 <z_arm_mpu_init+0x54>)
    317c:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    317e:	2200      	movs	r2, #0
    3180:	4290      	cmp	r0, r2
    3182:	f101 010c 	add.w	r1, r1, #12
    3186:	d105      	bne.n	3194 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    3188:	4b0e      	ldr	r3, [pc, #56]	; (31c4 <z_arm_mpu_init+0x58>)
    318a:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    318c:	f7ff ffbc 	bl	3108 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    3190:	2000      	movs	r0, #0
}
    3192:	bd10      	pop	{r4, pc}
    3194:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3196:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    319a:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    319e:	4313      	orrs	r3, r2
    31a0:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    31a4:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    31a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
    31aa:	f043 0301 	orr.w	r3, r3, #1
    31ae:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    31b0:	3201      	adds	r2, #1
    31b2:	e7e5      	b.n	3180 <z_arm_mpu_init+0x14>
		return -1;
    31b4:	f04f 30ff 	mov.w	r0, #4294967295
    31b8:	e7eb      	b.n	3192 <z_arm_mpu_init+0x26>
    31ba:	bf00      	nop
    31bc:	00008718 	.word	0x00008718
    31c0:	e000ed90 	.word	0xe000ed90
    31c4:	20000f30 	.word	0x20000f30

000031c8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    31c8:	4b01      	ldr	r3, [pc, #4]	; (31d0 <__stdout_hook_install+0x8>)
    31ca:	6018      	str	r0, [r3, #0]
}
    31cc:	4770      	bx	lr
    31ce:	bf00      	nop
    31d0:	200000e8 	.word	0x200000e8

000031d4 <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    31d4:	3902      	subs	r1, #2
    31d6:	2901      	cmp	r1, #1
    31d8:	d802      	bhi.n	31e0 <z_impl_zephyr_fputc+0xc>
    31da:	4b03      	ldr	r3, [pc, #12]	; (31e8 <z_impl_zephyr_fputc+0x14>)
    31dc:	681b      	ldr	r3, [r3, #0]
    31de:	4718      	bx	r3
}
    31e0:	f04f 30ff 	mov.w	r0, #4294967295
    31e4:	4770      	bx	lr
    31e6:	bf00      	nop
    31e8:	200000e8 	.word	0x200000e8

000031ec <printf>:

	return r;
}

int printf(const char *ZRESTRICT format, ...)
{
    31ec:	b40f      	push	{r0, r1, r2, r3}
    31ee:	b507      	push	{r0, r1, r2, lr}
    31f0:	ab04      	add	r3, sp, #16
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    31f2:	2102      	movs	r1, #2
{
    31f4:	f853 2b04 	ldr.w	r2, [r3], #4
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    31f8:	4804      	ldr	r0, [pc, #16]	; (320c <printf+0x20>)
	va_start(vargs, format);
    31fa:	9301      	str	r3, [sp, #4]
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    31fc:	f7fe fbbe 	bl	197c <cbvprintf>
	va_end(vargs);

	return r;
}
    3200:	b003      	add	sp, #12
    3202:	f85d eb04 	ldr.w	lr, [sp], #4
    3206:	b004      	add	sp, #16
    3208:	4770      	bx	lr
    320a:	bf00      	nop
    320c:	000075ef 	.word	0x000075ef

00003210 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    3210:	f04f 0320 	mov.w	r3, #32
    3214:	f3ef 8111 	mrs	r1, BASEPRI
    3218:	f383 8812 	msr	BASEPRI_MAX, r3
    321c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    3220:	4a0f      	ldr	r2, [pc, #60]	; (3260 <nordicsemi_nrf52_init+0x50>)
    3222:	2301      	movs	r3, #1
    3224:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    3228:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    322c:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3230:	4a0c      	ldr	r2, [pc, #48]	; (3264 <nordicsemi_nrf52_init+0x54>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    3232:	6812      	ldr	r2, [r2, #0]
    3234:	2a08      	cmp	r2, #8
    3236:	d108      	bne.n	324a <nordicsemi_nrf52_init+0x3a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    3238:	4a0b      	ldr	r2, [pc, #44]	; (3268 <nordicsemi_nrf52_init+0x58>)
    323a:	6812      	ldr	r2, [r2, #0]
            {
                switch(var2)
    323c:	2a05      	cmp	r2, #5
    323e:	d804      	bhi.n	324a <nordicsemi_nrf52_init+0x3a>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    3240:	480a      	ldr	r0, [pc, #40]	; (326c <nordicsemi_nrf52_init+0x5c>)
    3242:	5c82      	ldrb	r2, [r0, r2]
    3244:	b10a      	cbz	r2, 324a <nordicsemi_nrf52_init+0x3a>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    3246:	4a0a      	ldr	r2, [pc, #40]	; (3270 <nordicsemi_nrf52_init+0x60>)
    3248:	6013      	str	r3, [r2, #0]
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    324a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    324e:	2201      	movs	r2, #1
    3250:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    3254:	f381 8811 	msr	BASEPRI, r1
    3258:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    325c:	2000      	movs	r0, #0
    325e:	4770      	bx	lr
    3260:	4001e000 	.word	0x4001e000
    3264:	10000130 	.word	0x10000130
    3268:	10000134 	.word	0x10000134
    326c:	00008d77 	.word	0x00008d77
    3270:	40000638 	.word	0x40000638

00003274 <sys_arch_reboot>:
    *p_gpregret = val;
    3274:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3278:	b2c0      	uxtb	r0, r0
    327a:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    327e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3282:	4905      	ldr	r1, [pc, #20]	; (3298 <sys_arch_reboot+0x24>)
    3284:	4b05      	ldr	r3, [pc, #20]	; (329c <sys_arch_reboot+0x28>)
    3286:	68ca      	ldr	r2, [r1, #12]
    3288:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    328c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    328e:	60cb      	str	r3, [r1, #12]
    3290:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    3294:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3296:	e7fd      	b.n	3294 <sys_arch_reboot+0x20>
    3298:	e000ed00 	.word	0xe000ed00
    329c:	05fa0004 	.word	0x05fa0004

000032a0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    32a0:	b120      	cbz	r0, 32ac <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    32a2:	4b03      	ldr	r3, [pc, #12]	; (32b0 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    32a4:	0180      	lsls	r0, r0, #6
    32a6:	f043 0301 	orr.w	r3, r3, #1
    32aa:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    32ac:	4770      	bx	lr
    32ae:	bf00      	nop
    32b0:	000086d0 	.word	0x000086d0

000032b4 <adc_context_start_sampling.isra.0>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
    32b4:	4a05      	ldr	r2, [pc, #20]	; (32cc <adc_context_start_sampling.isra.0+0x18>)
    32b6:	2301      	movs	r3, #1
    32b8:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
    32bc:	b108      	cbz	r0, 32c2 <adc_context_start_sampling.isra.0+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    32be:	60d3      	str	r3, [r2, #12]
}
    32c0:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    32c2:	6013      	str	r3, [r2, #0]
    32c4:	4a02      	ldr	r2, [pc, #8]	; (32d0 <adc_context_start_sampling.isra.0+0x1c>)
    32c6:	6013      	str	r3, [r2, #0]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
    32c8:	4770      	bx	lr
    32ca:	bf00      	nop
    32cc:	40007000 	.word	0x40007000
    32d0:	40007004 	.word	0x40007004

000032d4 <adc_nrfx_channel_setup>:
	uint8_t channel_id = channel_cfg->channel_id;
    32d4:	7908      	ldrb	r0, [r1, #4]
{
    32d6:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
    32d8:	f000 041f 	and.w	r4, r0, #31
	if (channel_id >= SAADC_CH_NUM) {
    32dc:	2c07      	cmp	r4, #7
    32de:	d81f      	bhi.n	3320 <adc_nrfx_channel_setup+0x4c>
	switch (channel_cfg->gain) {
    32e0:	780b      	ldrb	r3, [r1, #0]
    32e2:	2b09      	cmp	r3, #9
    32e4:	d81c      	bhi.n	3320 <adc_nrfx_channel_setup+0x4c>
    32e6:	e8df f003 	tbb	[pc, r3]
    32ea:	0606      	.short	0x0606
    32ec:	1b060606 	.word	0x1b060606
    32f0:	201b1e05 	.word	0x201b1e05
		config.gain = NRF_SAADC_GAIN1;
    32f4:	2305      	movs	r3, #5
	switch (channel_cfg->reference) {
    32f6:	784a      	ldrb	r2, [r1, #1]
    32f8:	2a03      	cmp	r2, #3
    32fa:	d018      	beq.n	332e <adc_nrfx_channel_setup+0x5a>
    32fc:	2a04      	cmp	r2, #4
    32fe:	d10f      	bne.n	3320 <adc_nrfx_channel_setup+0x4c>
    3300:	2500      	movs	r5, #0
	switch (channel_cfg->acquisition_time) {
    3302:	884a      	ldrh	r2, [r1, #2]
    3304:	f244 060a 	movw	r6, #16394	; 0x400a
    3308:	42b2      	cmp	r2, r6
    330a:	d044      	beq.n	3396 <adc_nrfx_channel_setup+0xc2>
    330c:	d811      	bhi.n	3332 <adc_nrfx_channel_setup+0x5e>
    330e:	f244 0603 	movw	r6, #16387	; 0x4003
    3312:	42b2      	cmp	r2, r6
    3314:	d03b      	beq.n	338e <adc_nrfx_channel_setup+0xba>
    3316:	f244 0605 	movw	r6, #16389	; 0x4005
    331a:	42b2      	cmp	r2, r6
    331c:	d039      	beq.n	3392 <adc_nrfx_channel_setup+0xbe>
    331e:	b3d2      	cbz	r2, 3396 <adc_nrfx_channel_setup+0xc2>
    3320:	f06f 0015 	mvn.w	r0, #21
    3324:	e032      	b.n	338c <adc_nrfx_channel_setup+0xb8>
		config.gain = NRF_SAADC_GAIN2;
    3326:	2306      	movs	r3, #6
		break;
    3328:	e7e5      	b.n	32f6 <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN4;
    332a:	2307      	movs	r3, #7
		break;
    332c:	e7e3      	b.n	32f6 <adc_nrfx_channel_setup+0x22>
		config.reference = NRF_SAADC_REFERENCE_VDD4;
    332e:	2501      	movs	r5, #1
    3330:	e7e7      	b.n	3302 <adc_nrfx_channel_setup+0x2e>
	switch (channel_cfg->acquisition_time) {
    3332:	f244 0614 	movw	r6, #16404	; 0x4014
    3336:	42b2      	cmp	r2, r6
    3338:	d02f      	beq.n	339a <adc_nrfx_channel_setup+0xc6>
    333a:	f244 0628 	movw	r6, #16424	; 0x4028
    333e:	42b2      	cmp	r2, r6
    3340:	d02d      	beq.n	339e <adc_nrfx_channel_setup+0xca>
    3342:	f244 060f 	movw	r6, #16399	; 0x400f
    3346:	42b2      	cmp	r2, r6
    3348:	d1ea      	bne.n	3320 <adc_nrfx_channel_setup+0x4c>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
    334a:	2203      	movs	r2, #3
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    334c:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
    3350:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    3352:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
    3356:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    335a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
    335e:	0122      	lsls	r2, r4, #4
    3360:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3364:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
    p_reg->CH[channel].PSELP = pselp;
    3368:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
    336a:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
    336e:	0123      	lsls	r3, r4, #4
    3370:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3374:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
    3378:	798a      	ldrb	r2, [r1, #6]
    337a:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
    337e:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
    3382:	4b08      	ldr	r3, [pc, #32]	; (33a4 <adc_nrfx_channel_setup+0xd0>)
    3384:	441c      	add	r4, r3
    3386:	794b      	ldrb	r3, [r1, #5]
    3388:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
}
    338c:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->acquisition_time) {
    338e:	2200      	movs	r2, #0
    3390:	e7dc      	b.n	334c <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_5US;
    3392:	2201      	movs	r2, #1
    3394:	e7da      	b.n	334c <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
    3396:	2202      	movs	r2, #2
    3398:	e7d8      	b.n	334c <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
    339a:	2204      	movs	r2, #4
    339c:	e7d6      	b.n	334c <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
    339e:	2205      	movs	r2, #5
    33a0:	e7d4      	b.n	334c <adc_nrfx_channel_setup+0x78>
    33a2:	bf00      	nop
    33a4:	20000000 	.word	0x20000000

000033a8 <start_read.isra.0>:
	}

	return 0;
}

static int start_read(const struct device *dev,
    33a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    33aa:	4605      	mov	r5, r0
		      const struct adc_sequence *sequence)
{
	int error;
	uint32_t selected_channels = sequence->channels;
    33ac:	6840      	ldr	r0, [r0, #4]
	uint8_t channel_id;

	/* Signal an error if channel selection is invalid (no channels or
	 * a non-existing one is selected).
	 */
	if (!selected_channels ||
    33ae:	b910      	cbnz	r0, 33b6 <start_read.isra.0+0xe>
				channel_id,
				NRF_SAADC_INPUT_DISABLED);
		}
	} while (++channel_id < SAADC_CH_NUM);

	error = set_resolution(sequence);
    33b0:	f06f 0015 	mvn.w	r0, #21
    33b4:	e09c      	b.n	34f0 <start_read.isra.0+0x148>
	if (!selected_channels ||
    33b6:	f030 02ff 	bics.w	r2, r0, #255	; 0xff
    33ba:	d1f9      	bne.n	33b0 <start_read.isra.0+0x8>
    p_reg->CH[channel].PSELP = pselp;
    33bc:	4c57      	ldr	r4, [pc, #348]	; (351c <start_read.isra.0+0x174>)
			if (m_data.positive_inputs[channel_id] == 0U) {
    33be:	4f58      	ldr	r7, [pc, #352]	; (3520 <start_read.isra.0+0x178>)
	active_channels = 0U;
    33c0:	4611      	mov	r1, r2
		if (selected_channels & BIT(channel_id)) {
    33c2:	fa20 f302 	lsr.w	r3, r0, r2
    33c6:	f013 0301 	ands.w	r3, r3, #1
    33ca:	d033      	beq.n	3434 <start_read.isra.0+0x8c>
			if (m_data.positive_inputs[channel_id] == 0U) {
    33cc:	18bb      	adds	r3, r7, r2
    33ce:	f893 c0a8 	ldrb.w	ip, [r3, #168]	; 0xa8
    33d2:	f1bc 0f00 	cmp.w	ip, #0
    33d6:	d0eb      	beq.n	33b0 <start_read.isra.0+0x8>

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
    33d8:	eb04 1e02 	add.w	lr, r4, r2, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
    33dc:	7c6e      	ldrb	r6, [r5, #17]
    33de:	f8de 3518 	ldr.w	r3, [lr, #1304]	; 0x518
    33e2:	3e00      	subs	r6, #0
    33e4:	bf18      	it	ne
    33e6:	2601      	movne	r6, #1
    33e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    33ec:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
    33f0:	f8ce 3518 	str.w	r3, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
    33f4:	f102 0351 	add.w	r3, r2, #81	; 0x51
    33f8:	011b      	lsls	r3, r3, #4
			++active_channels;
    33fa:	3101      	adds	r1, #1
    33fc:	f844 c003 	str.w	ip, [r4, r3]
    3400:	b2c9      	uxtb	r1, r1
	} while (++channel_id < SAADC_CH_NUM);
    3402:	3201      	adds	r2, #1
    3404:	2a08      	cmp	r2, #8
    3406:	d1dc      	bne.n	33c2 <start_read.isra.0+0x1a>
	switch (sequence->resolution) {
    3408:	7c2b      	ldrb	r3, [r5, #16]
    340a:	3b08      	subs	r3, #8
    340c:	2b06      	cmp	r3, #6
    340e:	d8cf      	bhi.n	33b0 <start_read.isra.0+0x8>
    3410:	a201      	add	r2, pc, #4	; (adr r2, 3418 <start_read.isra.0+0x70>)
    3412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3416:	bf00      	nop
    3418:	000034fd 	.word	0x000034fd
    341c:	000033b1 	.word	0x000033b1
    3420:	0000343f 	.word	0x0000343f
    3424:	000033b1 	.word	0x000033b1
    3428:	000034f5 	.word	0x000034f5
    342c:	000033b1 	.word	0x000033b1
    3430:	000034f9 	.word	0x000034f9
    3434:	f102 0651 	add.w	r6, r2, #81	; 0x51
    3438:	0136      	lsls	r6, r6, #4
    343a:	51a3      	str	r3, [r4, r6]
}
    343c:	e7e1      	b.n	3402 <start_read.isra.0+0x5a>
	error = set_resolution(sequence);
    343e:	2201      	movs	r2, #1
    p_reg->RESOLUTION = resolution;
    3440:	4b36      	ldr	r3, [pc, #216]	; (351c <start_read.isra.0+0x174>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    3442:	2901      	cmp	r1, #1
    3444:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
	if (error) {
		return error;
	}

	error = set_oversampling(sequence, active_channels);
    3448:	7c6a      	ldrb	r2, [r5, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    344a:	d959      	bls.n	3500 <start_read.isra.0+0x158>
    344c:	2a00      	cmp	r2, #0
    344e:	d1af      	bne.n	33b0 <start_read.isra.0+0x8>
    p_reg->OVERSAMPLE = oversample;
    3450:	f8c3 25f4 	str.w	r2, [r3, #1524]	; 0x5f4
	if (sequence->options) {
    3454:	682a      	ldr	r2, [r5, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
    3456:	004b      	lsls	r3, r1, #1
	if (sequence->options) {
    3458:	b112      	cbz	r2, 3460 <start_read.isra.0+0xb8>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
    345a:	8992      	ldrh	r2, [r2, #12]
    345c:	fb02 3303 	mla	r3, r2, r3, r3
	if (sequence->buffer_size < needed_buffer_size) {
    3460:	68ea      	ldr	r2, [r5, #12]
    3462:	429a      	cmp	r2, r3
    3464:	d356      	bcc.n	3514 <start_read.isra.0+0x16c>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    3466:	4b2d      	ldr	r3, [pc, #180]	; (351c <start_read.isra.0+0x174>)
    3468:	68aa      	ldr	r2, [r5, #8]
    346a:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
    346e:	462f      	mov	r7, r5
    p_reg->RESULT.MAXCNT = size;
    3470:	f8c3 1630 	str.w	r1, [r3, #1584]	; 0x630
    3474:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    3476:	4c2a      	ldr	r4, [pc, #168]	; (3520 <start_read.isra.0+0x178>)
    3478:	f104 067c 	add.w	r6, r4, #124	; 0x7c
    347c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    347e:	683b      	ldr	r3, [r7, #0]
    3480:	6033      	str	r3, [r6, #0]
	ctx->status = 0;

	if (sequence->options) {
    3482:	682b      	ldr	r3, [r5, #0]
	ctx->status = 0;
    3484:	2600      	movs	r6, #0
    3486:	6726      	str	r6, [r4, #112]	; 0x70
	if (sequence->options) {
    3488:	2b00      	cmp	r3, #0
    348a:	d03c      	beq.n	3506 <start_read.isra.0+0x15e>
		ctx->options = *sequence->options;
    348c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    348e:	f104 0590 	add.w	r5, r4, #144	; 0x90
    3492:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
    3496:	67e5      	str	r5, [r4, #124]	; 0x7c
		ctx->sampling_index = 0U;
    3498:	f8a4 60a0 	strh.w	r6, [r4, #160]	; 0xa0

		if (ctx->options.interval_us != 0U) {
    349c:	b398      	cbz	r0, 3506 <start_read.isra.0+0x15e>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    349e:	f3bf 8f5b 	dmb	ish
    34a2:	e854 3f00 	ldrex	r3, [r4]
    34a6:	e844 6200 	strex	r2, r6, [r4]
    34aa:	2a00      	cmp	r2, #0
    34ac:	d1f9      	bne.n	34a2 <start_read.isra.0+0xfa>
    34ae:	f3bf 8f5b 	dmb	ish
		} else {
			return (t * to_hz + off) / from_hz;
    34b2:	481c      	ldr	r0, [pc, #112]	; (3524 <start_read.isra.0+0x17c>)
    34b4:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
    34b8:	4a1b      	ldr	r2, [pc, #108]	; (3528 <start_read.isra.0+0x180>)
    34ba:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    34be:	2100      	movs	r1, #0
    34c0:	2300      	movs	r3, #0
    34c2:	fbe5 0106 	umlal	r0, r1, r5, r6
    34c6:	f7fd fa55 	bl	974 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
    34ca:	2200      	movs	r2, #0
    34cc:	e9cd 0100 	strd	r0, r1, [sp]
    34d0:	2300      	movs	r3, #0
    34d2:	f104 0008 	add.w	r0, r4, #8
    34d6:	f003 fa8d 	bl	69f4 <z_impl_k_timer_start>
	if (ctx->asynchronous) {
    34da:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    34de:	b9bb      	cbnz	r3, 3510 <start_read.isra.0+0x168>
	return z_impl_k_sem_take(sem, timeout);
    34e0:	4812      	ldr	r0, [pc, #72]	; (352c <start_read.isra.0+0x184>)
    34e2:	f04f 32ff 	mov.w	r2, #4294967295
    34e6:	f04f 33ff 	mov.w	r3, #4294967295
    34ea:	f002 fd1f 	bl	5f2c <z_impl_k_sem_take>
	return ctx->status;
    34ee:	6f20      	ldr	r0, [r4, #112]	; 0x70

	adc_context_start_read(&m_data.ctx, sequence);

	error = adc_context_wait_for_completion(&m_data.ctx);
	return error;
}
    34f0:	b003      	add	sp, #12
    34f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
    34f4:	2202      	movs	r2, #2
		break;
    34f6:	e7a3      	b.n	3440 <start_read.isra.0+0x98>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
    34f8:	2203      	movs	r2, #3
		break;
    34fa:	e7a1      	b.n	3440 <start_read.isra.0+0x98>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
    34fc:	2200      	movs	r2, #0
    34fe:	e79f      	b.n	3440 <start_read.isra.0+0x98>
	switch (sequence->oversampling) {
    3500:	2a08      	cmp	r2, #8
    3502:	d9a5      	bls.n	3450 <start_read.isra.0+0xa8>
    3504:	e754      	b.n	33b0 <start_read.isra.0+0x8>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
    3506:	f894 008e 	ldrb.w	r0, [r4, #142]	; 0x8e
    350a:	f7ff fed3 	bl	32b4 <adc_context_start_sampling.isra.0>
    350e:	e7e4      	b.n	34da <start_read.isra.0+0x132>
		return 0;
    3510:	2000      	movs	r0, #0
	return error;
    3512:	e7ed      	b.n	34f0 <start_read.isra.0+0x148>
		return -ENOMEM;
    3514:	f06f 000b 	mvn.w	r0, #11
    3518:	e7ea      	b.n	34f0 <start_read.isra.0+0x148>
    351a:	bf00      	nop
    351c:	40007000 	.word	0x40007000
    3520:	20000000 	.word	0x20000000
    3524:	000f423f 	.word	0x000f423f
    3528:	000f4240 	.word	0x000f4240
    352c:	20000058 	.word	0x20000058

00003530 <adc_nrfx_read_async>:
#ifdef CONFIG_ADC_ASYNC
/* Implementation of the ADC driver API function: adc_read_async. */
static int adc_nrfx_read_async(const struct device *dev,
			       const struct adc_sequence *sequence,
			       struct k_poll_signal *async)
{
    3530:	b570      	push	{r4, r5, r6, lr}
    3532:	460c      	mov	r4, r1
    3534:	4616      	mov	r6, r2
    3536:	4d0d      	ldr	r5, [pc, #52]	; (356c <adc_nrfx_read_async+0x3c>)
    3538:	f04f 32ff 	mov.w	r2, #4294967295
    353c:	f04f 33ff 	mov.w	r3, #4294967295
    3540:	f105 0040 	add.w	r0, r5, #64	; 0x40
    3544:	f002 fcf2 	bl	5f2c <z_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
    3548:	2301      	movs	r3, #1
	int error;

	adc_context_lock(&m_data.ctx, true, async);
	error = start_read(dev, sequence);
    354a:	4620      	mov	r0, r4
    354c:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
	ctx->signal = signal;
    3550:	676e      	str	r6, [r5, #116]	; 0x74
    3552:	f7ff ff29 	bl	33a8 <start_read.isra.0>
	if (ctx->asynchronous && (status == 0)) {
    3556:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    355a:	4604      	mov	r4, r0
    355c:	b103      	cbz	r3, 3560 <adc_nrfx_read_async+0x30>
    355e:	b110      	cbz	r0, 3566 <adc_nrfx_read_async+0x36>
	z_impl_k_sem_give(sem);
    3560:	4803      	ldr	r0, [pc, #12]	; (3570 <adc_nrfx_read_async+0x40>)
    3562:	f002 fcbd 	bl	5ee0 <z_impl_k_sem_give>
	adc_context_release(&m_data.ctx, error);

	return error;
}
    3566:	4620      	mov	r0, r4
    3568:	bd70      	pop	{r4, r5, r6, pc}
    356a:	bf00      	nop
    356c:	20000000 	.word	0x20000000
    3570:	20000040 	.word	0x20000040

00003574 <init_saadc>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3574:	4b0d      	ldr	r3, [pc, #52]	; (35ac <init_saadc+0x38>)
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
    3576:	b510      	push	{r4, lr}
    3578:	2400      	movs	r4, #0
    357a:	601c      	str	r4, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    357c:	681b      	ldr	r3, [r3, #0]
    357e:	4b0c      	ldr	r3, [pc, #48]	; (35b0 <init_saadc+0x3c>)
    3580:	601c      	str	r4, [r3, #0]
    3582:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3584:	4b0b      	ldr	r3, [pc, #44]	; (35b4 <init_saadc+0x40>)
    3586:	2212      	movs	r2, #18
    3588:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
    358c:	2007      	movs	r0, #7
    358e:	f7ff fab5 	bl	2afc <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3592:	4622      	mov	r2, r4
    3594:	2101      	movs	r1, #1
    3596:	2007      	movs	r0, #7
    3598:	f7ff face 	bl	2b38 <z_arm_irq_priority_set>
		/* coverity[OVERRUN] */
		return (unsigned int) arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_COUNT_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_count_get(sem);
    359c:	4806      	ldr	r0, [pc, #24]	; (35b8 <init_saadc+0x44>)
	if (!k_sem_count_get(&ctx->lock)) {
    359e:	6c83      	ldr	r3, [r0, #72]	; 0x48
    35a0:	b913      	cbnz	r3, 35a8 <init_saadc+0x34>
	z_impl_k_sem_give(sem);
    35a2:	3040      	adds	r0, #64	; 0x40
    35a4:	f002 fc9c 	bl	5ee0 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
    35a8:	2000      	movs	r0, #0
    35aa:	bd10      	pop	{r4, pc}
    35ac:	40007104 	.word	0x40007104
    35b0:	40007110 	.word	0x40007110
    35b4:	40007000 	.word	0x40007000
    35b8:	20000000 	.word	0x20000000

000035bc <saadc_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    35bc:	4b34      	ldr	r3, [pc, #208]	; (3690 <saadc_irq_handler+0xd4>)
    35be:	681a      	ldr	r2, [r3, #0]
{
    35c0:	b510      	push	{r4, lr}
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
    35c2:	2a00      	cmp	r2, #0
    35c4:	d055      	beq.n	3672 <saadc_irq_handler+0xb6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    35c6:	2200      	movs	r2, #0
    35c8:	601a      	str	r2, [r3, #0]
    35ca:	681b      	ldr	r3, [r3, #0]
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
    35cc:	4c31      	ldr	r4, [pc, #196]	; (3694 <saadc_irq_handler+0xd8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    35ce:	4b32      	ldr	r3, [pc, #200]	; (3698 <saadc_irq_handler+0xdc>)
    35d0:	2101      	movs	r1, #1
    35d2:	6019      	str	r1, [r3, #0]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
    35d4:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
    35d8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    35da:	b3db      	cbz	r3, 3654 <saadc_irq_handler+0x98>
		adc_sequence_callback callback = ctx->options.callback;
    35dc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
    35e0:	b143      	cbz	r3, 35f4 <saadc_irq_handler+0x38>
			action = callback(dev,
    35e2:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
    35e6:	f104 017c 	add.w	r1, r4, #124	; 0x7c
    35ea:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
    35ec:	2801      	cmp	r0, #1
    35ee:	d014      	beq.n	361a <saadc_irq_handler+0x5e>
    35f0:	2802      	cmp	r0, #2
    35f2:	d029      	beq.n	3648 <saadc_irq_handler+0x8c>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
    35f4:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
    35f8:	f8b4 209c 	ldrh.w	r2, [r4, #156]	; 0x9c
    35fc:	429a      	cmp	r2, r3
    35fe:	d923      	bls.n	3648 <saadc_irq_handler+0x8c>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
    3600:	3301      	adds	r3, #1
    3602:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
    3606:	4b25      	ldr	r3, [pc, #148]	; (369c <saadc_irq_handler+0xe0>)
    3608:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
    360c:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
    3610:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
    3612:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    3616:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
    361a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    361e:	b92b      	cbnz	r3, 362c <saadc_irq_handler+0x70>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
    3620:	f894 008e 	ldrb.w	r0, [r4, #142]	; 0x8e
}
    3624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3628:	f7ff be44 	b.w	32b4 <adc_context_start_sampling.isra.0>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    362c:	f3bf 8f5b 	dmb	ish
    3630:	e854 3f00 	ldrex	r3, [r4]
    3634:	1e5a      	subs	r2, r3, #1
    3636:	e844 2100 	strex	r1, r2, [r4]
    363a:	2900      	cmp	r1, #0
    363c:	d1f8      	bne.n	3630 <saadc_irq_handler+0x74>
    363e:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
    3642:	2b01      	cmp	r3, #1
    3644:	dcec      	bgt.n	3620 <saadc_irq_handler+0x64>
    3646:	bd10      	pop	{r4, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
    3648:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    364c:	b113      	cbz	r3, 3654 <saadc_irq_handler+0x98>
	z_impl_k_timer_stop(timer);
    364e:	4814      	ldr	r0, [pc, #80]	; (36a0 <saadc_irq_handler+0xe4>)
    3650:	f004 fe20 	bl	8294 <z_impl_k_timer_stop>
	if (ctx->asynchronous) {
    3654:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    3658:	b14b      	cbz	r3, 366e <saadc_irq_handler+0xb2>
		if (ctx->signal) {
    365a:	6f60      	ldr	r0, [r4, #116]	; 0x74
    365c:	b110      	cbz	r0, 3664 <saadc_irq_handler+0xa8>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    365e:	2100      	movs	r1, #0
    3660:	f003 fa28 	bl	6ab4 <z_impl_k_poll_signal_raise>
	z_impl_k_sem_give(sem);
    3664:	480f      	ldr	r0, [pc, #60]	; (36a4 <saadc_irq_handler+0xe8>)
    3666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    366a:	f002 bc39 	b.w	5ee0 <z_impl_k_sem_give>
    366e:	480e      	ldr	r0, [pc, #56]	; (36a8 <saadc_irq_handler+0xec>)
    3670:	e7f9      	b.n	3666 <saadc_irq_handler+0xaa>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3672:	4b0e      	ldr	r3, [pc, #56]	; (36ac <saadc_irq_handler+0xf0>)
    3674:	6819      	ldr	r1, [r3, #0]
	} else if (nrf_saadc_event_check(NRF_SAADC,
    3676:	2900      	cmp	r1, #0
    3678:	d0e5      	beq.n	3646 <saadc_irq_handler+0x8a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    367a:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    367c:	4a06      	ldr	r2, [pc, #24]	; (3698 <saadc_irq_handler+0xdc>)
    367e:	681b      	ldr	r3, [r3, #0]
    3680:	2301      	movs	r3, #1
    3682:	6013      	str	r3, [r2, #0]
    3684:	f842 3c08 	str.w	r3, [r2, #-8]
    3688:	f842 3c04 	str.w	r3, [r2, #-4]
}
    368c:	e7db      	b.n	3646 <saadc_irq_handler+0x8a>
    368e:	bf00      	nop
    3690:	40007104 	.word	0x40007104
    3694:	20000000 	.word	0x20000000
    3698:	40007008 	.word	0x40007008
    369c:	40007000 	.word	0x40007000
    36a0:	20000008 	.word	0x20000008
    36a4:	20000040 	.word	0x20000040
    36a8:	20000058 	.word	0x20000058
    36ac:	40007110 	.word	0x40007110

000036b0 <adc_nrfx_read>:
{
    36b0:	b538      	push	{r3, r4, r5, lr}
    36b2:	460c      	mov	r4, r1
	return z_impl_k_sem_take(sem, timeout);
    36b4:	4d0c      	ldr	r5, [pc, #48]	; (36e8 <adc_nrfx_read+0x38>)
    36b6:	f04f 32ff 	mov.w	r2, #4294967295
    36ba:	f04f 33ff 	mov.w	r3, #4294967295
    36be:	f105 0040 	add.w	r0, r5, #64	; 0x40
    36c2:	f002 fc33 	bl	5f2c <z_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
    36c6:	2300      	movs	r3, #0
	error = start_read(dev, sequence);
    36c8:	4620      	mov	r0, r4
    36ca:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
	ctx->signal = signal;
    36ce:	676b      	str	r3, [r5, #116]	; 0x74
    36d0:	f7ff fe6a 	bl	33a8 <start_read.isra.0>
	if (ctx->asynchronous && (status == 0)) {
    36d4:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    36d8:	4604      	mov	r4, r0
    36da:	b103      	cbz	r3, 36de <adc_nrfx_read+0x2e>
    36dc:	b110      	cbz	r0, 36e4 <adc_nrfx_read+0x34>
	z_impl_k_sem_give(sem);
    36de:	4803      	ldr	r0, [pc, #12]	; (36ec <adc_nrfx_read+0x3c>)
    36e0:	f002 fbfe 	bl	5ee0 <z_impl_k_sem_give>
}
    36e4:	4620      	mov	r0, r4
    36e6:	bd38      	pop	{r3, r4, r5, pc}
    36e8:	20000000 	.word	0x20000000
    36ec:	20000040 	.word	0x20000040

000036f0 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    36f0:	4a0e      	ldr	r2, [pc, #56]	; (372c <onoff_stop+0x3c>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    36f2:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    36f4:	1a84      	subs	r4, r0, r2
    36f6:	10a3      	asrs	r3, r4, #2
    36f8:	4c0d      	ldr	r4, [pc, #52]	; (3730 <onoff_stop+0x40>)
    36fa:	435c      	muls	r4, r3
{
    36fc:	4605      	mov	r5, r0
    36fe:	b2e4      	uxtb	r4, r4
	err = set_off_state(&subdata->flags, ctx);
    3700:	200c      	movs	r0, #12
    3702:	fb00 2004 	mla	r0, r0, r4, r2
{
    3706:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
    3708:	2140      	movs	r1, #64	; 0x40
    370a:	4408      	add	r0, r1
    370c:	f003 ffaf 	bl	766e <set_off_state>
	if (err < 0) {
    3710:	1e01      	subs	r1, r0, #0
    3712:	db05      	blt.n	3720 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
    3714:	4b07      	ldr	r3, [pc, #28]	; (3734 <onoff_stop+0x44>)
    3716:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    371a:	6863      	ldr	r3, [r4, #4]
    371c:	4798      	blx	r3
	return 0;
    371e:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    3720:	4628      	mov	r0, r5
    3722:	4633      	mov	r3, r6
}
    3724:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    3728:	4718      	bx	r3
    372a:	bf00      	nop
    372c:	20000d68 	.word	0x20000d68
    3730:	b6db6db7 	.word	0xb6db6db7
    3734:	00008760 	.word	0x00008760

00003738 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    373c:	4e10      	ldr	r6, [pc, #64]	; (3780 <onoff_start+0x48>)
    373e:	1b84      	subs	r4, r0, r6
    3740:	10a3      	asrs	r3, r4, #2
    3742:	4c10      	ldr	r4, [pc, #64]	; (3784 <onoff_start+0x4c>)
    3744:	435c      	muls	r4, r3
    3746:	b2e4      	uxtb	r4, r4
	err = set_starting_state(&subdata->flags, ctx);
    3748:	250c      	movs	r5, #12
    374a:	4365      	muls	r5, r4
{
    374c:	4680      	mov	r8, r0
	err = set_starting_state(&subdata->flags, ctx);
    374e:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
    3752:	460f      	mov	r7, r1
	err = set_starting_state(&subdata->flags, ctx);
    3754:	4430      	add	r0, r6
    3756:	2140      	movs	r1, #64	; 0x40
    3758:	f003 ffa2 	bl	76a0 <set_starting_state>
	if (err < 0) {
    375c:	1e01      	subs	r1, r0, #0
    375e:	db09      	blt.n	3774 <onoff_start+0x3c>
	subdata->cb = cb;
    3760:	4a09      	ldr	r2, [pc, #36]	; (3788 <onoff_start+0x50>)
    3762:	1973      	adds	r3, r6, r5
	subdata->user_data = user_data;
    3764:	e9c3 270e 	strd	r2, r7, [r3, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    3768:	4b08      	ldr	r3, [pc, #32]	; (378c <onoff_start+0x54>)
    376a:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    376e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    3772:	4718      	bx	r3
		notify(mgr, err);
    3774:	4640      	mov	r0, r8
    3776:	463b      	mov	r3, r7
}
    3778:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    377c:	4718      	bx	r3
    377e:	bf00      	nop
    3780:	20000d68 	.word	0x20000d68
    3784:	b6db6db7 	.word	0xb6db6db7
    3788:	00007703 	.word	0x00007703
    378c:	00008760 	.word	0x00008760

00003790 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3790:	2200      	movs	r2, #0
{
    3792:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3794:	2101      	movs	r1, #1
{
    3796:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3798:	4610      	mov	r0, r2
    379a:	f7ff f9cd 	bl	2b38 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    379e:	2000      	movs	r0, #0
    37a0:	f7ff f9ac 	bl	2afc <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    37a4:	480f      	ldr	r0, [pc, #60]	; (37e4 <clk_init+0x54>)
    37a6:	f001 fb69 	bl	4e7c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    37aa:	4b0f      	ldr	r3, [pc, #60]	; (37e8 <clk_init+0x58>)
    37ac:	4298      	cmp	r0, r3
    37ae:	d115      	bne.n	37dc <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    37b0:	f004 fae8 	bl	7d84 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    37b4:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    37b6:	490d      	ldr	r1, [pc, #52]	; (37ec <clk_init+0x5c>)
    37b8:	4630      	mov	r0, r6
    37ba:	f003 fdc2 	bl	7342 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    37be:	2800      	cmp	r0, #0
    37c0:	db0b      	blt.n	37da <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    37c2:	2501      	movs	r5, #1
    37c4:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
    37c6:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    37c8:	4908      	ldr	r1, [pc, #32]	; (37ec <clk_init+0x5c>)
    37ca:	f104 001c 	add.w	r0, r4, #28
    37ce:	f003 fdb8 	bl	7342 <onoff_manager_init>
		if (err < 0) {
    37d2:	2800      	cmp	r0, #0
    37d4:	db01      	blt.n	37da <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    37d6:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    37d8:	2000      	movs	r0, #0
}
    37da:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    37dc:	f06f 0004 	mvn.w	r0, #4
    37e0:	e7fb      	b.n	37da <clk_init+0x4a>
    37e2:	bf00      	nop
    37e4:	00003825 	.word	0x00003825
    37e8:	0bad0000 	.word	0x0bad0000
    37ec:	00008770 	.word	0x00008770

000037f0 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    37f0:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    37f2:	230c      	movs	r3, #12
    37f4:	4809      	ldr	r0, [pc, #36]	; (381c <clkstarted_handle.constprop.0+0x2c>)
    37f6:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    37f8:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    37fa:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    37fc:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    3800:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    3802:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    3804:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    3806:	4418      	add	r0, r3
    3808:	f003 ff68 	bl	76dc <set_on_state>
	if (callback) {
    380c:	b12d      	cbz	r5, 381a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    380e:	4632      	mov	r2, r6
    3810:	462b      	mov	r3, r5
    3812:	4803      	ldr	r0, [pc, #12]	; (3820 <clkstarted_handle.constprop.0+0x30>)
}
    3814:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    3818:	4718      	bx	r3
}
    381a:	bd70      	pop	{r4, r5, r6, pc}
    381c:	20000d68 	.word	0x20000d68
    3820:	00008470 	.word	0x00008470

00003824 <clock_event_handler>:
	switch (event) {
    3824:	b110      	cbz	r0, 382c <clock_event_handler+0x8>
    3826:	2801      	cmp	r0, #1
    3828:	d004      	beq.n	3834 <clock_event_handler+0x10>
    382a:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    382c:	4b03      	ldr	r3, [pc, #12]	; (383c <clock_event_handler+0x18>)
    382e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3830:	075b      	lsls	r3, r3, #29
    3832:	d101      	bne.n	3838 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    3834:	f7ff bfdc 	b.w	37f0 <clkstarted_handle.constprop.0>
}
    3838:	4770      	bx	lr
    383a:	bf00      	nop
    383c:	20000d68 	.word	0x20000d68

00003840 <generic_hfclk_start>:
{
    3840:	b508      	push	{r3, lr}
	__asm__ volatile(
    3842:	f04f 0320 	mov.w	r3, #32
    3846:	f3ef 8111 	mrs	r1, BASEPRI
    384a:	f383 8812 	msr	BASEPRI_MAX, r3
    384e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    3852:	4a12      	ldr	r2, [pc, #72]	; (389c <generic_hfclk_start+0x5c>)
    3854:	6813      	ldr	r3, [r2, #0]
    3856:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    385a:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    385e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    3860:	d00c      	beq.n	387c <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3862:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3866:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    386a:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    386e:	f013 0301 	ands.w	r3, r3, #1
    3872:	d003      	beq.n	387c <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    3874:	480a      	ldr	r0, [pc, #40]	; (38a0 <generic_hfclk_start+0x60>)
    3876:	f003 ff31 	bl	76dc <set_on_state>
			already_started = true;
    387a:	2301      	movs	r3, #1
	__asm__ volatile(
    387c:	f381 8811 	msr	BASEPRI, r1
    3880:	f3bf 8f6f 	isb	sy
	if (already_started) {
    3884:	b123      	cbz	r3, 3890 <generic_hfclk_start+0x50>
}
    3886:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    388a:	2000      	movs	r0, #0
    388c:	f7ff bfb0 	b.w	37f0 <clkstarted_handle.constprop.0>
}
    3890:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    3894:	2001      	movs	r0, #1
    3896:	f001 bb01 	b.w	4e9c <nrfx_clock_start>
    389a:	bf00      	nop
    389c:	20000db8 	.word	0x20000db8
    38a0:	20000da8 	.word	0x20000da8

000038a4 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    38a4:	4b09      	ldr	r3, [pc, #36]	; (38cc <generic_hfclk_stop+0x28>)
    38a6:	f3bf 8f5b 	dmb	ish
    38aa:	e853 2f00 	ldrex	r2, [r3]
    38ae:	f022 0102 	bic.w	r1, r2, #2
    38b2:	e843 1000 	strex	r0, r1, [r3]
    38b6:	2800      	cmp	r0, #0
    38b8:	d1f7      	bne.n	38aa <generic_hfclk_stop+0x6>
    38ba:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    38be:	07d3      	lsls	r3, r2, #31
    38c0:	d402      	bmi.n	38c8 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    38c2:	2001      	movs	r0, #1
    38c4:	f001 bb1c 	b.w	4f00 <nrfx_clock_stop>
}
    38c8:	4770      	bx	lr
    38ca:	bf00      	nop
    38cc:	20000db8 	.word	0x20000db8

000038d0 <api_blocking_start>:
{
    38d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    38d2:	2200      	movs	r2, #0
    38d4:	2301      	movs	r3, #1
    38d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    38da:	ab04      	add	r3, sp, #16
    38dc:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    38e0:	4a09      	ldr	r2, [pc, #36]	; (3908 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    38e2:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    38e6:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    38e8:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    38ec:	f003 ff2f 	bl	774e <api_start>
	if (err < 0) {
    38f0:	2800      	cmp	r0, #0
    38f2:	db05      	blt.n	3900 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    38f4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    38f8:	2300      	movs	r3, #0
    38fa:	4668      	mov	r0, sp
    38fc:	f002 fb16 	bl	5f2c <z_impl_k_sem_take>
}
    3900:	b007      	add	sp, #28
    3902:	f85d fb04 	ldr.w	pc, [sp], #4
    3906:	bf00      	nop
    3908:	00007721 	.word	0x00007721

0000390c <z_nrf_clock_control_lf_on>:
{
    390c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3910:	493a      	ldr	r1, [pc, #232]	; (39fc <z_nrf_clock_control_lf_on+0xf0>)
    3912:	f3bf 8f5b 	dmb	ish
    3916:	4606      	mov	r6, r0
    3918:	2201      	movs	r2, #1
    391a:	e851 3f00 	ldrex	r3, [r1]
    391e:	e841 2000 	strex	r0, r2, [r1]
    3922:	2800      	cmp	r0, #0
    3924:	d1f9      	bne.n	391a <z_nrf_clock_control_lf_on+0xe>
    3926:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    392a:	b933      	cbnz	r3, 393a <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    392c:	4934      	ldr	r1, [pc, #208]	; (3a00 <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
    392e:	4835      	ldr	r0, [pc, #212]	; (3a04 <z_nrf_clock_control_lf_on+0xf8>)
    3930:	604b      	str	r3, [r1, #4]
    3932:	60cb      	str	r3, [r1, #12]
    3934:	608a      	str	r2, [r1, #8]
    3936:	f003 fd17 	bl	7368 <onoff_request>
	switch (start_mode) {
    393a:	1e73      	subs	r3, r6, #1
    393c:	2b01      	cmp	r3, #1
    393e:	d832      	bhi.n	39a6 <z_nrf_clock_control_lf_on+0x9a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    3940:	2e01      	cmp	r6, #1
    3942:	d107      	bne.n	3954 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    3944:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3948:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    394c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    3950:	2b01      	cmp	r3, #1
    3952:	d028      	beq.n	39a6 <z_nrf_clock_control_lf_on+0x9a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3954:	f004 fb20 	bl	7f98 <k_is_in_isr>
    3958:	4604      	mov	r4, r0
    395a:	b918      	cbnz	r0, 3964 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
    395c:	4b2a      	ldr	r3, [pc, #168]	; (3a08 <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
    395e:	781b      	ldrb	r3, [r3, #0]
    3960:	2b00      	cmp	r3, #0
    3962:	d144      	bne.n	39ee <z_nrf_clock_control_lf_on+0xe2>
	__asm__ volatile(
    3964:	f04f 0320 	mov.w	r3, #32
    3968:	f3ef 8511 	mrs	r5, BASEPRI
    396c:	f383 8812 	msr	BASEPRI_MAX, r3
    3970:	f3bf 8f6f 	isb	sy
    3974:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3976:	4f25      	ldr	r7, [pc, #148]	; (3a0c <z_nrf_clock_control_lf_on+0x100>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3978:	f8df 8094 	ldr.w	r8, [pc, #148]	; 3a10 <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    397c:	f8df 9094 	ldr.w	r9, [pc, #148]	; 3a14 <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3980:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3984:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3988:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    398c:	03d2      	lsls	r2, r2, #15
    398e:	d50c      	bpl.n	39aa <z_nrf_clock_control_lf_on+0x9e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    3990:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    3994:	2b01      	cmp	r3, #1
    3996:	d001      	beq.n	399c <z_nrf_clock_control_lf_on+0x90>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    3998:	2e01      	cmp	r6, #1
    399a:	d106      	bne.n	39aa <z_nrf_clock_control_lf_on+0x9e>
	if (isr_mode) {
    399c:	b30c      	cbz	r4, 39e2 <z_nrf_clock_control_lf_on+0xd6>
	__asm__ volatile(
    399e:	f385 8811 	msr	BASEPRI, r5
    39a2:	f3bf 8f6f 	isb	sy
}
    39a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    39aa:	b1ac      	cbz	r4, 39d8 <z_nrf_clock_control_lf_on+0xcc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    39ac:	4628      	mov	r0, r5
    39ae:	f7ff f89b 	bl	2ae8 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    39b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    39b6:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    39ba:	2b00      	cmp	r3, #0
    39bc:	d1e0      	bne.n	3980 <z_nrf_clock_control_lf_on+0x74>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    39be:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    39c0:	2900      	cmp	r1, #0
    39c2:	d0dd      	beq.n	3980 <z_nrf_clock_control_lf_on+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    39c4:	603b      	str	r3, [r7, #0]
    39c6:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    39c8:	2301      	movs	r3, #1
    39ca:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    39ce:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    39d2:	f8c9 3000 	str.w	r3, [r9]
}
    39d6:	e7d3      	b.n	3980 <z_nrf_clock_control_lf_on+0x74>
	return z_impl_k_sleep(timeout);
    39d8:	2100      	movs	r1, #0
    39da:	2021      	movs	r0, #33	; 0x21
    39dc:	f002 fdba 	bl	6554 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    39e0:	e7e7      	b.n	39b2 <z_nrf_clock_control_lf_on+0xa6>
    p_reg->INTENSET = mask;
    39e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    39e6:	2202      	movs	r2, #2
    39e8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    39ec:	e7db      	b.n	39a6 <z_nrf_clock_control_lf_on+0x9a>
    p_reg->INTENCLR = mask;
    39ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    39f2:	2202      	movs	r2, #2
    39f4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    39f8:	4605      	mov	r5, r0
}
    39fa:	e7bc      	b.n	3976 <z_nrf_clock_control_lf_on+0x6a>
    39fc:	20000dbc 	.word	0x20000dbc
    3a00:	20000d58 	.word	0x20000d58
    3a04:	20000d84 	.word	0x20000d84
    3a08:	20001341 	.word	0x20001341
    3a0c:	40000104 	.word	0x40000104
    3a10:	e000e100 	.word	0xe000e100
    3a14:	40000008 	.word	0x40000008

00003a18 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    3a18:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    3a1a:	4b08      	ldr	r3, [pc, #32]	; (3a3c <uart_console_init+0x24>)
    3a1c:	4808      	ldr	r0, [pc, #32]	; (3a40 <uart_console_init+0x28>)
    3a1e:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    3a20:	f004 fa51 	bl	7ec6 <z_device_ready>
    3a24:	b138      	cbz	r0, 3a36 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    3a26:	4807      	ldr	r0, [pc, #28]	; (3a44 <uart_console_init+0x2c>)
    3a28:	f7ff fbce 	bl	31c8 <__stdout_hook_install>
	__printk_hook_install(console_out);
    3a2c:	4805      	ldr	r0, [pc, #20]	; (3a44 <uart_console_init+0x2c>)
    3a2e:	f7fd feab 	bl	1788 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    3a32:	2000      	movs	r0, #0
}
    3a34:	bd08      	pop	{r3, pc}
		return -ENODEV;
    3a36:	f06f 0012 	mvn.w	r0, #18
    3a3a:	e7fb      	b.n	3a34 <uart_console_init+0x1c>
    3a3c:	20000dc0 	.word	0x20000dc0
    3a40:	000084d0 	.word	0x000084d0
    3a44:	00003a49 	.word	0x00003a49

00003a48 <console_out>:
	if ('\n' == c) {
    3a48:	280a      	cmp	r0, #10
{
    3a4a:	b538      	push	{r3, r4, r5, lr}
    3a4c:	4d07      	ldr	r5, [pc, #28]	; (3a6c <console_out+0x24>)
    3a4e:	4604      	mov	r4, r0
	if ('\n' == c) {
    3a50:	d104      	bne.n	3a5c <console_out+0x14>
    3a52:	6828      	ldr	r0, [r5, #0]
	api->poll_out(dev, out_char);
    3a54:	6883      	ldr	r3, [r0, #8]
    3a56:	210d      	movs	r1, #13
    3a58:	69db      	ldr	r3, [r3, #28]
    3a5a:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    3a5c:	6828      	ldr	r0, [r5, #0]
    3a5e:	6883      	ldr	r3, [r0, #8]
    3a60:	b2e1      	uxtb	r1, r4
    3a62:	69db      	ldr	r3, [r3, #28]
    3a64:	4798      	blx	r3
}
    3a66:	4620      	mov	r0, r4
    3a68:	bd38      	pop	{r3, r4, r5, pc}
    3a6a:	bf00      	nop
    3a6c:	20000dc0 	.word	0x20000dc0

00003a70 <nrfx_gpio_handler>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3a70:	0942      	lsrs	r2, r0, #5
}

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
    3a72:	b570      	push	{r4, r5, r6, lr}
    3a74:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3a76:	d002      	beq.n	3a7e <nrfx_gpio_handler+0xe>
    3a78:	2a01      	cmp	r2, #1
    3a7a:	d01d      	beq.n	3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
}
    3a7c:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3a7e:	4e0f      	ldr	r6, [pc, #60]	; (3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>)
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3a80:	6932      	ldr	r2, [r6, #16]
    3a82:	6851      	ldr	r1, [r2, #4]
    3a84:	2900      	cmp	r1, #0
    3a86:	d0f9      	beq.n	3a7c <nrfx_gpio_handler+0xc>
    3a88:	680c      	ldr	r4, [r1, #0]
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    3a8a:	f003 031f 	and.w	r3, r3, #31
	gpio_fire_callbacks(list, port, BIT(pin));
    3a8e:	2501      	movs	r5, #1
    3a90:	2c00      	cmp	r4, #0
    3a92:	fa05 f503 	lsl.w	r5, r5, r3
	return node->next;
    3a96:	bf38      	it	cc
    3a98:	2400      	movcc	r4, #0
		if (cb->pin_mask & pins) {
    3a9a:	688a      	ldr	r2, [r1, #8]
    3a9c:	402a      	ands	r2, r5
    3a9e:	d002      	beq.n	3aa6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    3aa0:	684b      	ldr	r3, [r1, #4]
    3aa2:	4630      	mov	r0, r6
    3aa4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3aa6:	2c00      	cmp	r4, #0
    3aa8:	d0e8      	beq.n	3a7c <nrfx_gpio_handler+0xc>
    3aaa:	6823      	ldr	r3, [r4, #0]
    3aac:	2b00      	cmp	r3, #0
    3aae:	bf38      	it	cc
    3ab0:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3ab2:	4621      	mov	r1, r4
    3ab4:	461c      	mov	r4, r3
    3ab6:	e7f0      	b.n	3a9a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3ab8:	4e01      	ldr	r6, [pc, #4]	; (3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>)
    3aba:	e7e1      	b.n	3a80 <nrfx_gpio_handler+0x10>
    3abc:	00008488 	.word	0x00008488
    3ac0:	000084a0 	.word	0x000084a0

00003ac4 <gpio_nrfx_pin_interrupt_configure>:
{
    3ac4:	b530      	push	{r4, r5, lr}
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3ac6:	6840      	ldr	r0, [r0, #4]
    3ac8:	7b04      	ldrb	r4, [r0, #12]
    3aca:	f001 051f 	and.w	r5, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
    3ace:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3ad2:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    3ad6:	b085      	sub	sp, #20
    3ad8:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    3adc:	d104      	bne.n	3ae8 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
    3ade:	4628      	mov	r0, r5
    3ae0:	f001 fcae 	bl	5440 <nrfx_gpiote_trigger_disable>
	return 0;
    3ae4:	2000      	movs	r0, #0
    3ae6:	e032      	b.n	3b4e <gpio_nrfx_pin_interrupt_configure+0x8a>
	if (mode == GPIO_INT_MODE_LEVEL) {
    3ae8:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
    3aec:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    3af0:	d12f      	bne.n	3b52 <gpio_nrfx_pin_interrupt_configure+0x8e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    3af2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    3af6:	bf0c      	ite	eq
    3af8:	2304      	moveq	r3, #4
    3afa:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    3afc:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    3b00:	6883      	ldr	r3, [r0, #8]
    3b02:	fa23 f101 	lsr.w	r1, r3, r1
    3b06:	07c9      	lsls	r1, r1, #31
    3b08:	d42f      	bmi.n	3b6a <gpio_nrfx_pin_interrupt_configure+0xa6>
    3b0a:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    3b0e:	d12c      	bne.n	3b6a <gpio_nrfx_pin_interrupt_configure+0xa6>

    return pin_number >> 5;
    3b10:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
    3b12:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    3b14:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
    3b18:	4a1c      	ldr	r2, [pc, #112]	; (3b8c <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    3b1a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    3b1e:	bf18      	it	ne
    3b20:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    3b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    3b28:	07db      	lsls	r3, r3, #31
    3b2a:	d41e      	bmi.n	3b6a <gpio_nrfx_pin_interrupt_configure+0xa6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    3b2c:	f10d 0407 	add.w	r4, sp, #7
    3b30:	4621      	mov	r1, r4
    3b32:	4628      	mov	r0, r5
    3b34:	f001 fbf0 	bl	5318 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    3b38:	4b15      	ldr	r3, [pc, #84]	; (3b90 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    3b3a:	4298      	cmp	r0, r3
    3b3c:	d114      	bne.n	3b68 <gpio_nrfx_pin_interrupt_configure+0xa4>
			err = nrfx_gpiote_channel_alloc(&ch);
    3b3e:	4620      	mov	r0, r4
    3b40:	f001 fc34 	bl	53ac <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    3b44:	4b13      	ldr	r3, [pc, #76]	; (3b94 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    3b46:	4298      	cmp	r0, r3
    3b48:	d00e      	beq.n	3b68 <gpio_nrfx_pin_interrupt_configure+0xa4>
				return -ENOMEM;
    3b4a:	f06f 000b 	mvn.w	r0, #11
}
    3b4e:	b005      	add	sp, #20
    3b50:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    3b52:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    3b56:	d005      	beq.n	3b64 <gpio_nrfx_pin_interrupt_configure+0xa0>
    3b58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    3b5c:	bf0c      	ite	eq
    3b5e:	2302      	moveq	r3, #2
    3b60:	2301      	movne	r3, #1
    3b62:	e7cb      	b.n	3afc <gpio_nrfx_pin_interrupt_configure+0x38>
    3b64:	2303      	movs	r3, #3
    3b66:	e7c9      	b.n	3afc <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
    3b68:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3b6a:	2300      	movs	r3, #0
    3b6c:	4619      	mov	r1, r3
    3b6e:	aa02      	add	r2, sp, #8
    3b70:	4628      	mov	r0, r5
    3b72:	f001 faaf 	bl	50d4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    3b76:	4b07      	ldr	r3, [pc, #28]	; (3b94 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    3b78:	4298      	cmp	r0, r3
    3b7a:	d104      	bne.n	3b86 <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    3b7c:	2101      	movs	r1, #1
    3b7e:	4628      	mov	r0, r5
    3b80:	f001 fc1a 	bl	53b8 <nrfx_gpiote_trigger_enable>
    3b84:	e7ae      	b.n	3ae4 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
    3b86:	f06f 0004 	mvn.w	r0, #4
    3b8a:	e7e0      	b.n	3b4e <gpio_nrfx_pin_interrupt_configure+0x8a>
    3b8c:	50000300 	.word	0x50000300
    3b90:	0bad0004 	.word	0x0bad0004
    3b94:	0bad0000 	.word	0x0bad0000

00003b98 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    3b98:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    3b9a:	f001 fbf7 	bl	538c <nrfx_gpiote_is_init>
    3b9e:	4604      	mov	r4, r0
    3ba0:	b968      	cbnz	r0, 3bbe <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    3ba2:	f001 fbcb 	bl	533c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    3ba6:	4b08      	ldr	r3, [pc, #32]	; (3bc8 <gpio_nrfx_init+0x30>)
    3ba8:	4298      	cmp	r0, r3
    3baa:	d10a      	bne.n	3bc2 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    3bac:	4807      	ldr	r0, [pc, #28]	; (3bcc <gpio_nrfx_init+0x34>)
    3bae:	4621      	mov	r1, r4
    3bb0:	f001 fbac 	bl	530c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    3bb4:	4622      	mov	r2, r4
    3bb6:	2105      	movs	r1, #5
    3bb8:	2006      	movs	r0, #6
    3bba:	f7fe ffbd 	bl	2b38 <z_arm_irq_priority_set>
		return 0;
    3bbe:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    3bc0:	bd10      	pop	{r4, pc}
		return -EIO;
    3bc2:	f06f 0004 	mvn.w	r0, #4
    3bc6:	e7fb      	b.n	3bc0 <gpio_nrfx_init+0x28>
    3bc8:	0bad0000 	.word	0x0bad0000
    3bcc:	00003a71 	.word	0x00003a71

00003bd0 <gpio_nrfx_pin_configure>:
{
    3bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    3bd4:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3bd6:	7b3b      	ldrb	r3, [r7, #12]
    3bd8:	f001 051f 	and.w	r5, r1, #31
{
    3bdc:	b085      	sub	sp, #20
    3bde:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3be0:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    3be4:	4614      	mov	r4, r2
    3be6:	b9ca      	cbnz	r2, 3c1c <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    3be8:	a902      	add	r1, sp, #8
    3bea:	4628      	mov	r0, r5
    3bec:	f001 fb94 	bl	5318 <nrfx_gpiote_channel_get>
    3bf0:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    3bf2:	4628      	mov	r0, r5
    3bf4:	f001 fc46 	bl	5484 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    3bf8:	4b48      	ldr	r3, [pc, #288]	; (3d1c <gpio_nrfx_pin_configure+0x14c>)
    3bfa:	4298      	cmp	r0, r3
    3bfc:	d004      	beq.n	3c08 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    3bfe:	f06f 0004 	mvn.w	r0, #4
}
    3c02:	b005      	add	sp, #20
    3c04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    3c08:	4284      	cmp	r4, r0
    3c0a:	d105      	bne.n	3c18 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    3c0c:	f89d 0008 	ldrb.w	r0, [sp, #8]
    3c10:	f001 fbc6 	bl	53a0 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    3c14:	42a0      	cmp	r0, r4
    3c16:	d1f2      	bne.n	3bfe <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3c18:	2000      	movs	r0, #0
    3c1a:	e7f2      	b.n	3c02 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    3c1c:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    3c20:	f10d 0103 	add.w	r1, sp, #3
    3c24:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    3c26:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    3c2a:	f001 fb75 	bl	5318 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3c2e:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    3c30:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3c32:	aa02      	add	r2, sp, #8
    3c34:	4649      	mov	r1, r9
    3c36:	4628      	mov	r0, r5
    3c38:	f001 fa4c 	bl	50d4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    3c3c:	4b37      	ldr	r3, [pc, #220]	; (3d1c <gpio_nrfx_pin_configure+0x14c>)
    3c3e:	4298      	cmp	r0, r3
    3c40:	d002      	beq.n	3c48 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    3c42:	f06f 0015 	mvn.w	r0, #21
    3c46:	e7dc      	b.n	3c02 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    3c48:	4580      	cmp	r8, r0
    3c4a:	d103      	bne.n	3c54 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    3c4c:	f89d 0003 	ldrb.w	r0, [sp, #3]
    3c50:	f001 fba6 	bl	53a0 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    3c54:	05a3      	lsls	r3, r4, #22
    3c56:	d54e      	bpl.n	3cf6 <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    3c58:	4b31      	ldr	r3, [pc, #196]	; (3d20 <gpio_nrfx_pin_configure+0x150>)
    3c5a:	4a32      	ldr	r2, [pc, #200]	; (3d24 <gpio_nrfx_pin_configure+0x154>)
    3c5c:	4023      	ands	r3, r4
    3c5e:	4293      	cmp	r3, r2
    3c60:	d03a      	beq.n	3cd8 <gpio_nrfx_pin_configure+0x108>
    3c62:	d80c      	bhi.n	3c7e <gpio_nrfx_pin_configure+0xae>
    3c64:	2b06      	cmp	r3, #6
    3c66:	d014      	beq.n	3c92 <gpio_nrfx_pin_configure+0xc2>
    3c68:	d804      	bhi.n	3c74 <gpio_nrfx_pin_configure+0xa4>
    3c6a:	b193      	cbz	r3, 3c92 <gpio_nrfx_pin_configure+0xc2>
    3c6c:	2b02      	cmp	r3, #2
    3c6e:	d1e8      	bne.n	3c42 <gpio_nrfx_pin_configure+0x72>
    3c70:	2304      	movs	r3, #4
    3c72:	e00e      	b.n	3c92 <gpio_nrfx_pin_configure+0xc2>
    3c74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3c78:	d1e3      	bne.n	3c42 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    3c7a:	2301      	movs	r3, #1
    3c7c:	e009      	b.n	3c92 <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    3c7e:	4a2a      	ldr	r2, [pc, #168]	; (3d28 <gpio_nrfx_pin_configure+0x158>)
    3c80:	4293      	cmp	r3, r2
    3c82:	d02b      	beq.n	3cdc <gpio_nrfx_pin_configure+0x10c>
    3c84:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    3c88:	d02a      	beq.n	3ce0 <gpio_nrfx_pin_configure+0x110>
    3c8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    3c8e:	d1d8      	bne.n	3c42 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    3c90:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    3c92:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    3c96:	f484 7380 	eor.w	r3, r4, #256	; 0x100
    3c9a:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
    3c9e:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    3ca0:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    3ca4:	bf54      	ite	pl
    3ca6:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    3caa:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    3cac:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
    3cae:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    3cb2:	d517      	bpl.n	3ce4 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    3cb4:	687b      	ldr	r3, [r7, #4]
    3cb6:	2101      	movs	r1, #1
    3cb8:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    3cbc:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    3cc0:	2200      	movs	r2, #0
    3cc2:	a901      	add	r1, sp, #4
    3cc4:	4628      	mov	r0, r5
    3cc6:	f001 fab1 	bl	522c <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3cca:	4b14      	ldr	r3, [pc, #80]	; (3d1c <gpio_nrfx_pin_configure+0x14c>)
    3ccc:	4298      	cmp	r0, r3
    3cce:	bf14      	ite	ne
    3cd0:	f06f 0015 	mvnne.w	r0, #21
    3cd4:	2000      	moveq	r0, #0
    3cd6:	e794      	b.n	3c02 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    3cd8:	2307      	movs	r3, #7
    3cda:	e7da      	b.n	3c92 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
    3cdc:	2305      	movs	r3, #5
    3cde:	e7d8      	b.n	3c92 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
    3ce0:	2303      	movs	r3, #3
    3ce2:	e7d6      	b.n	3c92 <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    3ce4:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    3ce6:	bf41      	itttt	mi
    3ce8:	687b      	ldrmi	r3, [r7, #4]
    3cea:	2101      	movmi	r1, #1
    3cec:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    3cf0:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    3cf4:	e7e4      	b.n	3cc0 <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
    3cf6:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3cf8:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    3cfc:	bf54      	ite	pl
    3cfe:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    3d02:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3d04:	461a      	mov	r2, r3
    3d06:	a901      	add	r1, sp, #4
    3d08:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    3d0a:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3d0e:	f001 f9e1 	bl	50d4 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3d12:	4b02      	ldr	r3, [pc, #8]	; (3d1c <gpio_nrfx_pin_configure+0x14c>)
    3d14:	4298      	cmp	r0, r3
    3d16:	f43f af7f 	beq.w	3c18 <gpio_nrfx_pin_configure+0x48>
    3d1a:	e792      	b.n	3c42 <gpio_nrfx_pin_configure+0x72>
    3d1c:	0bad0000 	.word	0x0bad0000
    3d20:	00f00006 	.word	0x00f00006
    3d24:	00100006 	.word	0x00100006
    3d28:	00400002 	.word	0x00400002

00003d2c <pwm_nrfx_get_cycles_per_sec>:
{
	/* TODO: Since this function might be removed, we will always return
	 * 16MHz from this function and handle the conversion with prescaler,
	 * etc, in the pin set function. See issue #6958.
	 */
	*cycles = 16ul * 1000ul * 1000ul;
    3d2c:	4802      	ldr	r0, [pc, #8]	; (3d38 <pwm_nrfx_get_cycles_per_sec+0xc>)
    3d2e:	2100      	movs	r1, #0
    3d30:	e9c2 0100 	strd	r0, r1, [r2]

	return 0;
}
    3d34:	2000      	movs	r0, #0
    3d36:	4770      	bx	lr
    3d38:	00f42400 	.word	0x00f42400

00003d3c <pwm_nrfx_init>:
	.pin_set = pwm_nrfx_pin_set,
	.get_cycles_per_sec = pwm_nrfx_get_cycles_per_sec,
};

static int pwm_nrfx_init(const struct device *dev)
{
    3d3c:	4602      	mov	r2, r0
	const struct pwm_nrfx_config *config = dev->config;
    3d3e:	6840      	ldr	r0, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;

	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
    3d40:	6912      	ldr	r2, [r2, #16]
{
    3d42:	b538      	push	{r3, r4, r5, lr}
    3d44:	f100 0308 	add.w	r3, r0, #8
    3d48:	3204      	adds	r2, #4
    3d4a:	f100 040c 	add.w	r4, r0, #12
    3d4e:	4619      	mov	r1, r3
		bool inverted = config->initial_config.output_pins[i] & NRFX_PWM_PIN_INVERTED;
		uint16_t value = (inverted)?(PWM_NRFX_CH_VALUE_INVERTED):(PWM_NRFX_CH_VALUE_NORMAL);
    3d50:	f913 5b01 	ldrsb.w	r5, [r3], #1
    3d54:	2d00      	cmp	r5, #0
    3d56:	bfb4      	ite	lt
    3d58:	2500      	movlt	r5, #0
    3d5a:	f44f 4500 	movge.w	r5, #32768	; 0x8000
	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
    3d5e:	42a3      	cmp	r3, r4

		data->current[i] = value;
    3d60:	f822 5b02 	strh.w	r5, [r2], #2
	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
    3d64:	d1f4      	bne.n	3d50 <pwm_nrfx_init+0x14>
	};

	nrfx_err_t result = nrfx_pwm_init(&config->pwm,
    3d66:	2300      	movs	r3, #0
    3d68:	461a      	mov	r2, r3
    3d6a:	f001 fc8d 	bl	5688 <nrfx_pwm_init>
					  &config->initial_config,
					  NULL,
					  NULL);
	if (result != NRFX_SUCCESS) {
    3d6e:	4b03      	ldr	r3, [pc, #12]	; (3d7c <pwm_nrfx_init+0x40>)
		LOG_ERR("Failed to initialize device: %s", dev->name);
		return -EBUSY;
    3d70:	4298      	cmp	r0, r3
	}

	return 0;
}
    3d72:	bf14      	ite	ne
    3d74:	f06f 000f 	mvnne.w	r0, #15
    3d78:	2000      	moveq	r0, #0
    3d7a:	bd38      	pop	{r3, r4, r5, pc}
    3d7c:	0bad0000 	.word	0x0bad0000

00003d80 <pwm_nrfx_pin_set>:
{
    3d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3d84:	f89d 4020 	ldrb.w	r4, [sp, #32]
	const struct pwm_nrfx_config *config = dev->config;
    3d88:	6846      	ldr	r6, [r0, #4]
{
    3d8a:	460f      	mov	r7, r1
    3d8c:	4615      	mov	r5, r2
	struct pwm_nrfx_data *data = dev->data;
    3d8e:	6901      	ldr	r1, [r0, #16]
{
    3d90:	4698      	mov	r8, r3
	if (flags) {
    3d92:	2c00      	cmp	r4, #0
    3d94:	d13f      	bne.n	3e16 <pwm_nrfx_pin_set+0x96>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
    3d96:	1df2      	adds	r2, r6, #7
		if (output_pins[i] != NRFX_PWM_PIN_NOT_USED
    3d98:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    3d9c:	2bff      	cmp	r3, #255	; 0xff
    3d9e:	d003      	beq.n	3da8 <pwm_nrfx_pin_set+0x28>
		    && (pwm == (output_pins[i] & PWM_NRFX_CH_PIN_MASK))) {
    3da0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3da4:	429f      	cmp	r7, r3
    3da6:	d039      	beq.n	3e1c <pwm_nrfx_pin_set+0x9c>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
    3da8:	3401      	adds	r4, #1
    3daa:	b2e4      	uxtb	r4, r4
    3dac:	2c04      	cmp	r4, #4
    3dae:	d1f3      	bne.n	3d98 <pwm_nrfx_pin_set+0x18>
		return -EINVAL;
    3db0:	f06f 0015 	mvn.w	r0, #21
    3db4:	e009      	b.n	3dca <pwm_nrfx_pin_set+0x4a>
	was_stopped = !pwm_channel_is_active(channel, data) &&
    3db6:	2000      	movs	r0, #0
    3db8:	e040      	b.n	3e3c <pwm_nrfx_pin_set+0xbc>
		countertop >>= 1;
    3dba:	3301      	adds	r3, #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
    3dbc:	2b08      	cmp	r3, #8
		countertop >>= 1;
    3dbe:	ea4f 0252 	mov.w	r2, r2, lsr #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
    3dc2:	d158      	bne.n	3e76 <pwm_nrfx_pin_set+0xf6>
    3dc4:	e7f4      	b.n	3db0 <pwm_nrfx_pin_set+0x30>
		if (was_stopped) {
    3dc6:	b9c8      	cbnz	r0, 3dfc <pwm_nrfx_pin_set+0x7c>
	return 0;
    3dc8:	2000      	movs	r0, #0
}
    3dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			&& channel_inverted_state;
    3dce:	4545      	cmp	r5, r8
    3dd0:	f200 8086 	bhi.w	3ee0 <pwm_nrfx_pin_set+0x160>
        case 1: return NRF_P1;
    3dd4:	2f01      	cmp	r7, #1
    3dd6:	4b49      	ldr	r3, [pc, #292]	; (3efc <pwm_nrfx_pin_set+0x17c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    3dd8:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
    3ddc:	bf18      	it	ne
    3dde:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    3de2:	4082      	lsls	r2, r0
    p_reg->OUTCLR = clr_mask;
    3de4:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
		if (!any_other_channel_is_active(channel, data)) {
    3de8:	4620      	mov	r0, r4
    3dea:	f003 fd1d 	bl	7828 <any_other_channel_is_active>
    3dee:	2800      	cmp	r0, #0
    3df0:	d1ea      	bne.n	3dc8 <pwm_nrfx_pin_set+0x48>
			nrfx_pwm_stop(&config->pwm, false);
    3df2:	4601      	mov	r1, r0
    3df4:	4630      	mov	r0, r6
    3df6:	f004 f848 	bl	7e8a <nrfx_pwm_stop>
    3dfa:	e7e5      	b.n	3dc8 <pwm_nrfx_pin_set+0x48>
			while (!nrfx_pwm_is_stopped(&config->pwm)) {
    3dfc:	4630      	mov	r0, r6
    3dfe:	f001 fd2f 	bl	5860 <nrfx_pwm_is_stopped>
    3e02:	2800      	cmp	r0, #0
    3e04:	d0fa      	beq.n	3dfc <pwm_nrfx_pin_set+0x7c>
			nrfx_pwm_simple_playback(&config->pwm,
    3e06:	2302      	movs	r3, #2
    3e08:	2201      	movs	r2, #1
    3e0a:	f106 0118 	add.w	r1, r6, #24
    3e0e:	4630      	mov	r0, r6
    3e10:	f001 fce8 	bl	57e4 <nrfx_pwm_simple_playback>
    3e14:	e7d8      	b.n	3dc8 <pwm_nrfx_pin_set+0x48>
		return -ENOTSUP;
    3e16:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3e1a:	e7d6      	b.n	3dca <pwm_nrfx_pin_set+0x4a>
	uint16_t pulse_cycle =
    3e1c:	eb01 0944 	add.w	r9, r1, r4, lsl #1
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
    3e20:	f8b9 a004 	ldrh.w	sl, [r9, #4]
	uint16_t pulse_cycle =
    3e24:	f3ca 030e 	ubfx	r3, sl, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    3e28:	b113      	cbz	r3, 3e30 <pwm_nrfx_pin_set+0xb0>
    3e2a:	898a      	ldrh	r2, [r1, #12]
    3e2c:	429a      	cmp	r2, r3
    3e2e:	d8c2      	bhi.n	3db6 <pwm_nrfx_pin_set+0x36>
		      !any_other_channel_is_active(channel, data);
    3e30:	4620      	mov	r0, r4
    3e32:	f003 fcf9 	bl	7828 <any_other_channel_is_active>
	was_stopped = !pwm_channel_is_active(channel, data) &&
    3e36:	f080 0001 	eor.w	r0, r0, #1
    3e3a:	b2c0      	uxtb	r0, r0
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
    3e3c:	f896 c00e 	ldrb.w	ip, [r6, #14]
    3e40:	f1bc 0f01 	cmp.w	ip, #1
		period_cycles /= 2;
    3e44:	bf04      	itt	eq
    3e46:	086d      	lsreq	r5, r5, #1
		pulse_cycles /= 2;
    3e48:	ea4f 0858 	moveq.w	r8, r8, lsr #1
	if (period_cycles != 0 && period_cycles != data->period_cycles) {
    3e4c:	b325      	cbz	r5, 3e98 <pwm_nrfx_pin_set+0x118>
    3e4e:	680b      	ldr	r3, [r1, #0]
    3e50:	42ab      	cmp	r3, r5
    3e52:	d021      	beq.n	3e98 <pwm_nrfx_pin_set+0x118>
    3e54:	2300      	movs	r3, #0
				data->current[i]
    3e56:	f101 0e04 	add.w	lr, r1, #4
		if (i != channel) {
    3e5a:	b2da      	uxtb	r2, r3
    3e5c:	42a2      	cmp	r2, r4
    3e5e:	d005      	beq.n	3e6c <pwm_nrfx_pin_set+0xec>
			uint16_t channel_pulse_cycle =
    3e60:	f83e 2013 	ldrh.w	r2, [lr, r3, lsl #1]
			if (channel_pulse_cycle > 0) {
    3e64:	f3c2 020e 	ubfx	r2, r2, #0, #15
    3e68:	2a00      	cmp	r2, #0
    3e6a:	d1a1      	bne.n	3db0 <pwm_nrfx_pin_set+0x30>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
    3e6c:	3301      	adds	r3, #1
    3e6e:	2b04      	cmp	r3, #4
    3e70:	d1f3      	bne.n	3e5a <pwm_nrfx_pin_set+0xda>
    3e72:	462a      	mov	r2, r5
    3e74:	2300      	movs	r3, #0
		if (countertop <= PWM_COUNTERTOP_COUNTERTOP_Msk) {
    3e76:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    3e7a:	fa5f fe83 	uxtb.w	lr, r3
    3e7e:	d29c      	bcs.n	3dba <pwm_nrfx_pin_set+0x3a>
			data->prescaler     = prescaler;
    3e80:	f881 e00e 	strb.w	lr, [r1, #14]
			nrf_pwm_configure(config->pwm.p_registers,
    3e84:	f8d6 e000 	ldr.w	lr, [r6]
			data->period_cycles = period_cycles;
    3e88:	600d      	str	r5, [r1, #0]
			data->countertop    = (uint16_t)countertop;
    3e8a:	818a      	strh	r2, [r1, #12]
                                         nrf_pwm_mode_t mode,
                                         uint16_t       top_value)
{
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);

    p_reg->PRESCALER  = base_clock;
    3e8c:	f8ce 350c 	str.w	r3, [lr, #1292]	; 0x50c
    p_reg->MODE       = mode;
    3e90:	f8ce c504 	str.w	ip, [lr, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    3e94:	f8ce 2508 	str.w	r2, [lr, #1288]	; 0x508
		| (pulse_cycles >> data->prescaler));
    3e98:	7b8a      	ldrb	r2, [r1, #14]
	pulse_cycles = MIN(pulse_cycles, period_cycles);
    3e9a:	4545      	cmp	r5, r8
    3e9c:	462b      	mov	r3, r5
    3e9e:	bf28      	it	cs
    3ea0:	4643      	movcs	r3, r8
		| (pulse_cycles >> data->prescaler));
    3ea2:	fa23 f202 	lsr.w	r2, r3, r2
		(data->current[channel] & PWM_NRFX_CH_POLARITY_MASK)
    3ea6:	f40a 4a00 	and.w	sl, sl, #32768	; 0x8000
		| (pulse_cycles >> data->prescaler));
    3eaa:	ea42 020a 	orr.w	r2, r2, sl
    3eae:	b292      	uxth	r2, r2
	data->current[channel] = (
    3eb0:	f8a9 2004 	strh.w	r2, [r9, #4]
	uint16_t pulse_cycle =
    3eb4:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    3eb8:	b11a      	cbz	r2, 3ec2 <pwm_nrfx_pin_set+0x142>
    3eba:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
    3ebe:	4594      	cmp	ip, r2
    3ec0:	d881      	bhi.n	3dc6 <pwm_nrfx_pin_set+0x46>
			config->initial_config.output_pins[channel]
    3ec2:	1932      	adds	r2, r6, r4
    3ec4:	f007 001f 	and.w	r0, r7, #31
    3ec8:	f992 2008 	ldrsb.w	r2, [r2, #8]
		bool pulse_0_and_not_inverted =
    3ecc:	097f      	lsrs	r7, r7, #5
			&& !channel_inverted_state;
    3ece:	2b00      	cmp	r3, #0
    3ed0:	f43f af7d 	beq.w	3dce <pwm_nrfx_pin_set+0x4e>
			&& channel_inverted_state;
    3ed4:	4545      	cmp	r5, r8
    3ed6:	d806      	bhi.n	3ee6 <pwm_nrfx_pin_set+0x166>
    3ed8:	2a00      	cmp	r2, #0
    3eda:	f6ff af7b 	blt.w	3dd4 <pwm_nrfx_pin_set+0x54>
    3ede:	e002      	b.n	3ee6 <pwm_nrfx_pin_set+0x166>
		if (pulse_0_and_not_inverted || pulse_100_and_inverted) {
    3ee0:	2a00      	cmp	r2, #0
    3ee2:	f6bf af77 	bge.w	3dd4 <pwm_nrfx_pin_set+0x54>
        case 0: return NRF_P0;
    3ee6:	2f01      	cmp	r7, #1
    3ee8:	4b04      	ldr	r3, [pc, #16]	; (3efc <pwm_nrfx_pin_set+0x17c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3eea:	f04f 0201 	mov.w	r2, #1
        case 0: return NRF_P0;
    3eee:	bf18      	it	ne
    3ef0:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3ef4:	4082      	lsls	r2, r0
    p_reg->OUTSET = set_mask;
    3ef6:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    3efa:	e775      	b.n	3de8 <pwm_nrfx_pin_set+0x68>
    3efc:	50000300 	.word	0x50000300

00003f00 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    3f00:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    3f02:	794b      	ldrb	r3, [r1, #5]
    3f04:	2b01      	cmp	r3, #1
    3f06:	d026      	beq.n	3f56 <uarte_nrfx_configure+0x56>
    3f08:	2b03      	cmp	r3, #3
    3f0a:	d121      	bne.n	3f50 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    3f0c:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    3f0e:	798b      	ldrb	r3, [r1, #6]
    3f10:	2b03      	cmp	r3, #3
    3f12:	d11d      	bne.n	3f50 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    3f14:	79cc      	ldrb	r4, [r1, #7]
    3f16:	b10c      	cbz	r4, 3f1c <uarte_nrfx_configure+0x1c>
    3f18:	2c01      	cmp	r4, #1
    3f1a:	d119      	bne.n	3f50 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    3f1c:	790a      	ldrb	r2, [r1, #4]
    3f1e:	b112      	cbz	r2, 3f26 <uarte_nrfx_configure+0x26>
    3f20:	2a02      	cmp	r2, #2
    3f22:	d115      	bne.n	3f50 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    3f24:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    3f26:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    3f28:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    3f2a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    3f2e:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    3f30:	d065      	beq.n	3ffe <uarte_nrfx_configure+0xfe>
    3f32:	d82d      	bhi.n	3f90 <uarte_nrfx_configure+0x90>
    3f34:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    3f38:	d064      	beq.n	4004 <uarte_nrfx_configure+0x104>
    3f3a:	d816      	bhi.n	3f6a <uarte_nrfx_configure+0x6a>
    3f3c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    3f40:	d062      	beq.n	4008 <uarte_nrfx_configure+0x108>
    3f42:	d80a      	bhi.n	3f5a <uarte_nrfx_configure+0x5a>
    3f44:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    3f48:	d061      	beq.n	400e <uarte_nrfx_configure+0x10e>
    3f4a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    3f4e:	d061      	beq.n	4014 <uarte_nrfx_configure+0x114>
    3f50:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3f54:	e052      	b.n	3ffc <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    3f56:	2600      	movs	r6, #0
    3f58:	e7d9      	b.n	3f0e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    3f5a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    3f5e:	d05c      	beq.n	401a <uarte_nrfx_configure+0x11a>
    3f60:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    3f64:	d1f4      	bne.n	3f50 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    3f66:	4b37      	ldr	r3, [pc, #220]	; (4044 <uarte_nrfx_configure+0x144>)
    3f68:	e03c      	b.n	3fe4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3f6a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    3f6e:	d057      	beq.n	4020 <uarte_nrfx_configure+0x120>
    3f70:	d807      	bhi.n	3f82 <uarte_nrfx_configure+0x82>
    3f72:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    3f76:	d055      	beq.n	4024 <uarte_nrfx_configure+0x124>
    3f78:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    3f7c:	d1e8      	bne.n	3f50 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    3f7e:	4b32      	ldr	r3, [pc, #200]	; (4048 <uarte_nrfx_configure+0x148>)
    3f80:	e030      	b.n	3fe4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3f82:	f647 2712 	movw	r7, #31250	; 0x7a12
    3f86:	42bb      	cmp	r3, r7
    3f88:	d1e2      	bne.n	3f50 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    3f8a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    3f8e:	e029      	b.n	3fe4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3f90:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    3f94:	d048      	beq.n	4028 <uarte_nrfx_configure+0x128>
    3f96:	d813      	bhi.n	3fc0 <uarte_nrfx_configure+0xc0>
    3f98:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    3f9c:	d047      	beq.n	402e <uarte_nrfx_configure+0x12e>
    3f9e:	d809      	bhi.n	3fb4 <uarte_nrfx_configure+0xb4>
    3fa0:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    3fa4:	42bb      	cmp	r3, r7
    3fa6:	d044      	beq.n	4032 <uarte_nrfx_configure+0x132>
    3fa8:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    3fac:	d1d0      	bne.n	3f50 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    3fae:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    3fb2:	e017      	b.n	3fe4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3fb4:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    3fb8:	d1ca      	bne.n	3f50 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    3fba:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    3fbe:	e011      	b.n	3fe4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3fc0:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    3fc4:	d038      	beq.n	4038 <uarte_nrfx_configure+0x138>
    3fc6:	d808      	bhi.n	3fda <uarte_nrfx_configure+0xda>
    3fc8:	4f20      	ldr	r7, [pc, #128]	; (404c <uarte_nrfx_configure+0x14c>)
    3fca:	42bb      	cmp	r3, r7
    3fcc:	d037      	beq.n	403e <uarte_nrfx_configure+0x13e>
    3fce:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    3fd2:	d1bd      	bne.n	3f50 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    3fd4:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    3fd8:	e004      	b.n	3fe4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3fda:	4f1d      	ldr	r7, [pc, #116]	; (4050 <uarte_nrfx_configure+0x150>)
    3fdc:	42bb      	cmp	r3, r7
    3fde:	d1b7      	bne.n	3f50 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    3fe0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    3fe4:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    3fe8:	6903      	ldr	r3, [r0, #16]
    3fea:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    3fec:	4334      	orrs	r4, r6
    3fee:	4322      	orrs	r2, r4
    3ff0:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    3ff2:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    3ff6:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    3ffa:	2000      	movs	r0, #0
}
    3ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    3ffe:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    4002:	e7ef      	b.n	3fe4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    4004:	4b13      	ldr	r3, [pc, #76]	; (4054 <uarte_nrfx_configure+0x154>)
    4006:	e7ed      	b.n	3fe4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    4008:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    400c:	e7ea      	b.n	3fe4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    400e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    4012:	e7e7      	b.n	3fe4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    4014:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    4018:	e7e4      	b.n	3fe4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    401a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    401e:	e7e1      	b.n	3fe4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    4020:	4b0d      	ldr	r3, [pc, #52]	; (4058 <uarte_nrfx_configure+0x158>)
    4022:	e7df      	b.n	3fe4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    4024:	4b0d      	ldr	r3, [pc, #52]	; (405c <uarte_nrfx_configure+0x15c>)
    4026:	e7dd      	b.n	3fe4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    4028:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    402c:	e7da      	b.n	3fe4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    402e:	4b0c      	ldr	r3, [pc, #48]	; (4060 <uarte_nrfx_configure+0x160>)
    4030:	e7d8      	b.n	3fe4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    4032:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    4036:	e7d5      	b.n	3fe4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    4038:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    403c:	e7d2      	b.n	3fe4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    403e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    4042:	e7cf      	b.n	3fe4 <uarte_nrfx_configure+0xe4>
    4044:	0013b000 	.word	0x0013b000
    4048:	004ea000 	.word	0x004ea000
    404c:	0003d090 	.word	0x0003d090
    4050:	000f4240 	.word	0x000f4240
    4054:	00275000 	.word	0x00275000
    4058:	0075c000 	.word	0x0075c000
    405c:	003af000 	.word	0x003af000
    4060:	013a9000 	.word	0x013a9000

00004064 <nrf_gpio_cfg_input>:
    *p_pin = pin_number & 0x1F;
    4064:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    4068:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    406a:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    406c:	4b04      	ldr	r3, [pc, #16]	; (4080 <nrf_gpio_cfg_input+0x1c>)
    reg->PIN_CNF[pin_number] = cnf;
    406e:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
    4072:	bf18      	it	ne
    4074:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4078:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
    407a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    407e:	4770      	bx	lr
    4080:	50000300 	.word	0x50000300

00004084 <nrf_gpio_cfg_output>:
    *p_pin = pin_number & 0x1F;
    4084:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    4088:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    408a:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    408c:	4b04      	ldr	r3, [pc, #16]	; (40a0 <nrf_gpio_cfg_output+0x1c>)
    reg->PIN_CNF[pin_number] = cnf;
    408e:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
    4092:	bf18      	it	ne
    4094:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    4098:	2103      	movs	r1, #3
    409a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    409e:	4770      	bx	lr
    40a0:	50000300 	.word	0x50000300

000040a4 <nrf_gpio_pin_set>:
    *p_pin = pin_number & 0x1F;
    40a4:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    40a8:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    40aa:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    40ac:	4b04      	ldr	r3, [pc, #16]	; (40c0 <nrf_gpio_pin_set+0x1c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    40ae:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
    40b2:	bf18      	it	ne
    40b4:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    40b8:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    40ba:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
    40be:	4770      	bx	lr
    40c0:	50000300 	.word	0x50000300

000040c4 <uarte_instance_init.isra.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    40c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    40c8:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
    40cc:	6907      	ldr	r7, [r0, #16]
	return config->uarte_regs;
    40ce:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    40d2:	2300      	movs	r3, #0
    40d4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    40d8:	6038      	str	r0, [r7, #0]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
    40da:	6845      	ldr	r5, [r0, #4]
static int uarte_instance_init(const struct device *dev,
    40dc:	4606      	mov	r6, r0
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    40de:	68e8      	ldr	r0, [r5, #12]
    40e0:	1c42      	adds	r2, r0, #1
    40e2:	d004      	beq.n	40ee <uarte_instance_init.isra.0+0x2a>
        nrf_gpio_pin_set(pin_number);
    40e4:	f7ff ffde 	bl	40a4 <nrf_gpio_pin_set>
			nrf_gpio_cfg_output(cfg->tx_pin);
    40e8:	68e8      	ldr	r0, [r5, #12]
    40ea:	f7ff ffcb 	bl	4084 <nrf_gpio_cfg_output>
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    40ee:	6928      	ldr	r0, [r5, #16]
    40f0:	1c43      	adds	r3, r0, #1
    40f2:	d006      	beq.n	4102 <uarte_instance_init.isra.0+0x3e>
			nrf_gpio_cfg_input(cfg->rx_pin,
    40f4:	7f2b      	ldrb	r3, [r5, #28]
    40f6:	2b00      	cmp	r3, #0
    40f8:	bf14      	ite	ne
    40fa:	2103      	movne	r1, #3
    40fc:	2100      	moveq	r1, #0
    40fe:	f7ff ffb1 	bl	4064 <nrf_gpio_cfg_input>
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    4102:	6968      	ldr	r0, [r5, #20]
    4104:	1c42      	adds	r2, r0, #1
    4106:	d004      	beq.n	4112 <uarte_instance_init.isra.0+0x4e>
    4108:	f7ff ffcc 	bl	40a4 <nrf_gpio_pin_set>
			nrf_gpio_cfg_output(cfg->rts_pin);
    410c:	6968      	ldr	r0, [r5, #20]
    410e:	f7ff ffb9 	bl	4084 <nrf_gpio_cfg_output>
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    4112:	69a8      	ldr	r0, [r5, #24]
    4114:	1c43      	adds	r3, r0, #1
    4116:	d006      	beq.n	4126 <uarte_instance_init.isra.0+0x62>
			nrf_gpio_cfg_input(cfg->cts_pin,
    4118:	7f6b      	ldrb	r3, [r5, #29]
    411a:	2b00      	cmp	r3, #0
    411c:	bf14      	ite	ne
    411e:	2103      	movne	r1, #3
    4120:	2100      	moveq	r1, #0
    4122:	f7ff ff9f 	bl	4064 <nrf_gpio_cfg_input>
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    4126:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
    412a:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
    412c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    4130:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
    4134:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
    p_reg->PSEL.RTS = pselrts;
    4138:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    413c:	6931      	ldr	r1, [r6, #16]
    p_reg->PSEL.CTS = pselcts;
    413e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    4142:	3104      	adds	r1, #4
    4144:	4630      	mov	r0, r6
    4146:	f7ff fedb 	bl	3f00 <uarte_nrfx_configure>
	if (err) {
    414a:	4681      	mov	r9, r0
    414c:	2800      	cmp	r0, #0
    414e:	d16f      	bne.n	4230 <uarte_instance_init.isra.0+0x16c>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    4150:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    4154:	0799      	lsls	r1, r3, #30
    4156:	d519      	bpl.n	418c <uarte_instance_init.isra.0+0xc8>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    4158:	f107 0016 	add.w	r0, r7, #22
    415c:	f001 fa8e 	bl	567c <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    4160:	4b40      	ldr	r3, [pc, #256]	; (4264 <uarte_instance_init.isra.0+0x1a0>)
    4162:	4298      	cmp	r0, r3
    4164:	d17b      	bne.n	425e <uarte_instance_init.isra.0+0x19a>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    4166:	7db8      	ldrb	r0, [r7, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    4168:	00c3      	lsls	r3, r0, #3
    416a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    416e:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    4172:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    4176:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    417a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    417e:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    4182:	4a39      	ldr	r2, [pc, #228]	; (4268 <uarte_instance_init.isra.0+0x1a4>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    4184:	2301      	movs	r3, #1
    4186:	4083      	lsls	r3, r0
    4188:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
		}
	}


#ifdef CONFIG_UART_ASYNC_API
	if (data->async) {
    418c:	68fb      	ldr	r3, [r7, #12]
    418e:	2b00      	cmp	r3, #0
    4190:	d051      	beq.n	4236 <uarte_instance_init.isra.0+0x172>
	return config->uarte_regs;
    4192:	6873      	ldr	r3, [r6, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    4194:	6935      	ldr	r5, [r6, #16]
	return config->uarte_regs;
    4196:	681b      	ldr	r3, [r3, #0]
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
    4198:	68e8      	ldr	r0, [r5, #12]
    p_reg->INTENSET = mask;
    419a:	4934      	ldr	r1, [pc, #208]	; (426c <uarte_instance_init.isra.0+0x1a8>)
    419c:	2204      	movs	r2, #4
    419e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    41a2:	2201      	movs	r2, #1
    41a4:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8
    41a8:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    41ac:	2108      	movs	r1, #8
    41ae:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    41b2:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
    41b6:	b1a1      	cbz	r1, 41e2 <uarte_instance_init.isra.0+0x11e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    41b8:	605a      	str	r2, [r3, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    41ba:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
    41be:	b91a      	cbnz	r2, 41c8 <uarte_instance_init.isra.0+0x104>
    41c0:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    41c4:	2a00      	cmp	r2, #0
    41c6:	d0f8      	beq.n	41ba <uarte_instance_init.isra.0+0xf6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    41c8:	2200      	movs	r2, #0
    41ca:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    41ce:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
    41d2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    41d6:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
    41da:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    41de:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
    41e2:	4923      	ldr	r1, [pc, #140]	; (4270 <uarte_instance_init.isra.0+0x1ac>)
    41e4:	2200      	movs	r2, #0
    41e6:	3088      	adds	r0, #136	; 0x88
    41e8:	f004 f848 	bl	827c <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
    41ec:	68eb      	ldr	r3, [r5, #12]
	timer->user_data = user_data;
    41ee:	f8c3 50bc 	str.w	r5, [r3, #188]	; 0xbc
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
    41f2:	68e8      	ldr	r0, [r5, #12]
    41f4:	491f      	ldr	r1, [pc, #124]	; (4274 <uarte_instance_init.isra.0+0x1b0>)
    41f6:	2200      	movs	r2, #0
    41f8:	3028      	adds	r0, #40	; 0x28
    41fa:	f004 f83f 	bl	827c <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
    41fe:	68eb      	ldr	r3, [r5, #12]
    4200:	65dd      	str	r5, [r3, #92]	; 0x5c
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    4202:	f8d8 3004 	ldr.w	r3, [r8, #4]
    4206:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    4208:	bf5c      	itt	pl
    420a:	f44f 7280 	movpl.w	r2, #256	; 0x100
    420e:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    4212:	06db      	lsls	r3, r3, #27
    4214:	bf44      	itt	mi
    4216:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    421a:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    421e:	3714      	adds	r7, #20
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    4220:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    4222:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    4226:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    422a:	2301      	movs	r3, #1
    422c:	60a3      	str	r3, [r4, #8]
    422e:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    4230:	4648      	mov	r0, r9
    4232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    4236:	2308      	movs	r3, #8
    4238:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    423c:	f898 3008 	ldrb.w	r3, [r8, #8]
    4240:	2b00      	cmp	r3, #0
    4242:	d1de      	bne.n	4202 <uarte_instance_init.isra.0+0x13e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4244:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    4248:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    424c:	f107 0315 	add.w	r3, r7, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    4250:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    4254:	2301      	movs	r3, #1
    4256:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    425a:	6023      	str	r3, [r4, #0]
}
    425c:	e7d1      	b.n	4202 <uarte_instance_init.isra.0+0x13e>
		return -EIO;
    425e:	f06f 0904 	mvn.w	r9, #4
    4262:	e7e5      	b.n	4230 <uarte_instance_init.isra.0+0x16c>
    4264:	0bad0000 	.word	0x0bad0000
    4268:	4001f000 	.word	0x4001f000
    426c:	000a0210 	.word	0x000a0210
    4270:	000079bb 	.word	0x000079bb
    4274:	00007c99 	.word	0x00007c99

00004278 <uarte_nrfx_poll_out>:
{
    4278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    427a:	6906      	ldr	r6, [r0, #16]
{
    427c:	4604      	mov	r4, r0
    427e:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4280:	f003 fe8a 	bl	7f98 <k_is_in_isr>
    4284:	b910      	cbnz	r0, 428c <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    4286:	4b28      	ldr	r3, [pc, #160]	; (4328 <uarte_nrfx_poll_out+0xb0>)
	if (isr_mode) {
    4288:	781b      	ldrb	r3, [r3, #0]
    428a:	bb5b      	cbnz	r3, 42e4 <uarte_nrfx_poll_out+0x6c>
	__asm__ volatile(
    428c:	f04f 0320 	mov.w	r3, #32
    4290:	f3ef 8111 	mrs	r1, BASEPRI
    4294:	f383 8812 	msr	BASEPRI_MAX, r3
    4298:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    429c:	4620      	mov	r0, r4
			key = irq_lock();
    429e:	460d      	mov	r5, r1
			if (is_tx_ready(dev)) {
    42a0:	f003 fae6 	bl	7870 <is_tx_ready>
    42a4:	b1c8      	cbz	r0, 42da <uarte_nrfx_poll_out+0x62>
				if (data->async && data->async->tx_size &&
    42a6:	68f3      	ldr	r3, [r6, #12]
    42a8:	b15b      	cbz	r3, 42c2 <uarte_nrfx_poll_out+0x4a>
    42aa:	68da      	ldr	r2, [r3, #12]
    42ac:	b14a      	cbz	r2, 42c2 <uarte_nrfx_poll_out+0x4a>
					data->async->tx_amount < 0) {
    42ae:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
				if (data->async && data->async->tx_size &&
    42b2:	2a00      	cmp	r2, #0
    42b4:	da05      	bge.n	42c2 <uarte_nrfx_poll_out+0x4a>
	return config->uarte_regs;
    42b6:	6862      	ldr	r2, [r4, #4]
    42b8:	6812      	ldr	r2, [r2, #0]
    return p_reg->TXD.AMOUNT;
    42ba:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
    42be:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	data->char_out = c;
    42c2:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
    42c4:	2201      	movs	r2, #1
	data->char_out = c;
    42c6:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    42ca:	4620      	mov	r0, r4
    42cc:	f003 fd09 	bl	7ce2 <tx_start>
	__asm__ volatile(
    42d0:	f385 8811 	msr	BASEPRI, r5
    42d4:	f3bf 8f6f 	isb	sy
}
    42d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    42da:	f381 8811 	msr	BASEPRI, r1
    42de:	f3bf 8f6f 	isb	sy
}
    42e2:	e7d3      	b.n	428c <uarte_nrfx_poll_out+0x14>
{
    42e4:	2564      	movs	r5, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    42e6:	4620      	mov	r0, r4
    42e8:	f003 fac2 	bl	7870 <is_tx_ready>
    42ec:	b948      	cbnz	r0, 4302 <uarte_nrfx_poll_out+0x8a>
    42ee:	2001      	movs	r0, #1
    42f0:	f003 fd46 	bl	7d80 <nrfx_busy_wait>
    42f4:	3d01      	subs	r5, #1
    42f6:	d1f6      	bne.n	42e6 <uarte_nrfx_poll_out+0x6e>
    42f8:	2100      	movs	r1, #0
    42fa:	2021      	movs	r0, #33	; 0x21
    42fc:	f002 f92a 	bl	6554 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    4300:	e7f0      	b.n	42e4 <uarte_nrfx_poll_out+0x6c>
	__asm__ volatile(
    4302:	f04f 0320 	mov.w	r3, #32
    4306:	f3ef 8511 	mrs	r5, BASEPRI
    430a:	f383 8812 	msr	BASEPRI_MAX, r3
    430e:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    4312:	4620      	mov	r0, r4
    4314:	f003 faac 	bl	7870 <is_tx_ready>
    4318:	2800      	cmp	r0, #0
    431a:	d1d2      	bne.n	42c2 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    431c:	f385 8811 	msr	BASEPRI, r5
    4320:	f3bf 8f6f 	isb	sy
}
    4324:	e7e8      	b.n	42f8 <uarte_nrfx_poll_out+0x80>
    4326:	bf00      	nop
    4328:	20001341 	.word	0x20001341

0000432c <uarte_nrfx_tx>:
{
    432c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    432e:	461c      	mov	r4, r3
	return config->uarte_regs;
    4330:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    4332:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    4334:	f8d3 c000 	ldr.w	ip, [r3]
{
    4338:	4605      	mov	r5, r0
	__asm__ volatile(
    433a:	f04f 0320 	mov.w	r3, #32
    433e:	f3ef 8711 	mrs	r7, BASEPRI
    4342:	f383 8812 	msr	BASEPRI_MAX, r3
    4346:	f3bf 8f6f 	isb	sy
	if (data->async->tx_size) {
    434a:	68f0      	ldr	r0, [r6, #12]
    434c:	68c3      	ldr	r3, [r0, #12]
    434e:	b13b      	cbz	r3, 4360 <uarte_nrfx_tx+0x34>
	__asm__ volatile(
    4350:	f387 8811 	msr	BASEPRI, r7
    4354:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    4358:	f06f 000f 	mvn.w	r0, #15
}
    435c:	b003      	add	sp, #12
    435e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENSET = mask;
    4360:	f44f 0e80 	mov.w	lr, #4194304	; 0x400000
	data->async->tx_size = len;
    4364:	60c2      	str	r2, [r0, #12]
	data->async->tx_buf = buf;
    4366:	6081      	str	r1, [r0, #8]
    4368:	f8cc e304 	str.w	lr, [ip, #772]	; 0x304

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    436c:	f001 4c60 	and.w	ip, r1, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
    4370:	f1bc 5f00 	cmp.w	ip, #536870912	; 0x20000000
    4374:	d128      	bne.n	43c8 <uarte_nrfx_tx+0x9c>
		data->async->xfer_len = len;
    4376:	e9c0 1204 	strd	r1, r2, [r0, #16]
	start_tx_locked(dev, data);
    437a:	f106 010c 	add.w	r1, r6, #12
    437e:	4628      	mov	r0, r5
    4380:	f003 fcd5 	bl	7d2e <start_tx_locked.isra.0>
    4384:	f387 8811 	msr	BASEPRI, r7
    4388:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
    438c:	7af3      	ldrb	r3, [r6, #11]
    438e:	2b01      	cmp	r3, #1
    4390:	d118      	bne.n	43c4 <uarte_nrfx_tx+0x98>
	    && timeout != SYS_FOREVER_US) {
    4392:	1c63      	adds	r3, r4, #1
    4394:	d016      	beq.n	43c4 <uarte_nrfx_tx+0x98>
    4396:	480e      	ldr	r0, [pc, #56]	; (43d0 <uarte_nrfx_tx+0xa4>)
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
    4398:	68f5      	ldr	r5, [r6, #12]
    439a:	4a0e      	ldr	r2, [pc, #56]	; (43d4 <uarte_nrfx_tx+0xa8>)
    439c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    43a0:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    43a4:	2100      	movs	r1, #0
    43a6:	2300      	movs	r3, #0
    43a8:	fbc6 0104 	smlal	r0, r1, r6, r4
    43ac:	f7fc fae2 	bl	974 <__aeabi_uldivmod>
    43b0:	3528      	adds	r5, #40	; 0x28
    43b2:	4602      	mov	r2, r0
    43b4:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
    43b6:	2000      	movs	r0, #0
    43b8:	2100      	movs	r1, #0
    43ba:	e9cd 0100 	strd	r0, r1, [sp]
    43be:	4628      	mov	r0, r5
    43c0:	f002 fb18 	bl	69f4 <z_impl_k_timer_start>
	return 0;
    43c4:	2000      	movs	r0, #0
    43c6:	e7c9      	b.n	435c <uarte_nrfx_tx+0x30>
		data->async->tx_cache_offset = 0;
    43c8:	6203      	str	r3, [r0, #32]
		(void)setup_tx_cache(data);
    43ca:	f003 fc1f 	bl	7c0c <setup_tx_cache.isra.0>
    43ce:	e7d4      	b.n	437a <uarte_nrfx_tx+0x4e>
    43d0:	000f423f 	.word	0x000f423f
    43d4:	000f4240 	.word	0x000f4240

000043d8 <uarte_nrfx_isr_async>:
	return config->uarte_regs;
    43d8:	6843      	ldr	r3, [r0, #4]
{
    43da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return config->uarte_regs;
    43de:	681d      	ldr	r5, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    43e0:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
{
    43e4:	b089      	sub	sp, #36	; 0x24
    43e6:	4604      	mov	r4, r0
	    && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXDRDY)) {
    43e8:	b171      	cbz	r1, 4408 <uarte_nrfx_isr_async+0x30>
	struct uarte_nrfx_data *data = get_dev_data(dev);
    43ea:	6903      	ldr	r3, [r0, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    43ec:	2200      	movs	r2, #0
    43ee:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
    43f2:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
    43f6:	68da      	ldr	r2, [r3, #12]
    43f8:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
    43fc:	3301      	adds	r3, #1
    43fe:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
}
    4402:	b009      	add	sp, #36	; 0x24
    4404:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4408:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    440c:	b313      	cbz	r3, 4454 <uarte_nrfx_isr_async+0x7c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    440e:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
    4412:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    4416:	f8d5 6480 	ldr.w	r6, [r5, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    441a:	f8c5 6480 	str.w	r6, [r5, #1152]	; 0x480
	struct uart_event evt = {
    441e:	2214      	movs	r2, #20
    4420:	a803      	add	r0, sp, #12
    4422:	f003 f8d8 	bl	75d6 <memset>
    4426:	2306      	movs	r3, #6
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
    4428:	07f0      	lsls	r0, r6, #31
	struct uart_event evt = {
    442a:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
    442e:	f100 8104 	bmi.w	463a <uarte_nrfx_isr_async+0x262>
    4432:	07b1      	lsls	r1, r6, #30
    4434:	f100 8103 	bmi.w	463e <uarte_nrfx_isr_async+0x266>
    4438:	0772      	lsls	r2, r6, #29
    443a:	f100 8102 	bmi.w	4642 <uarte_nrfx_isr_async+0x26a>
    443e:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
    4442:	4620      	mov	r0, r4
    4444:	a903      	add	r1, sp, #12
	struct uart_event evt = {
    4446:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
    444a:	f003 fa21 	bl	7890 <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
    444e:	4620      	mov	r0, r4
    4450:	f003 fc26 	bl	7ca0 <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4454:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
    4458:	b37b      	cbz	r3, 44ba <uarte_nrfx_isr_async+0xe2>
    return p_reg->INTENSET & mask;
    445a:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
    445e:	06db      	lsls	r3, r3, #27
    4460:	d52b      	bpl.n	44ba <uarte_nrfx_isr_async+0xe2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4462:	f04f 0800 	mov.w	r8, #0
	struct uarte_nrfx_data *data = get_dev_data(dev);
    4466:	6927      	ldr	r7, [r4, #16]
    4468:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
    446c:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	return config->uarte_regs;
    4470:	6863      	ldr	r3, [r4, #4]
	data->async->is_in_irq = true;
    4472:	68f8      	ldr	r0, [r7, #12]
	return config->uarte_regs;
    4474:	681e      	ldr	r6, [r3, #0]
	data->async->is_in_irq = true;
    4476:	2301      	movs	r3, #1
    4478:	f880 30d5 	strb.w	r3, [r0, #213]	; 0xd5
	z_impl_k_timer_stop(timer);
    447c:	3088      	adds	r0, #136	; 0x88
    447e:	f003 ff09 	bl	8294 <z_impl_k_timer_stop>
				data->async->rx_flush_cnt;
    4482:	68fa      	ldr	r2, [r7, #12]
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
    4484:	f8d6 153c 	ldr.w	r1, [r6, #1340]	; 0x53c
    4488:	f892 30d1 	ldrb.w	r3, [r2, #209]	; 0xd1
	int rx_len = rx_amount - data->async->rx_offset;
    448c:	6e90      	ldr	r0, [r2, #104]	; 0x68
	data->async->rx_flush_cnt = 0;
    448e:	f882 80d1 	strb.w	r8, [r2, #209]	; 0xd1
	int rx_len = rx_amount - data->async->rx_offset;
    4492:	1a1b      	subs	r3, r3, r0
    4494:	440b      	add	r3, r1
	data->async->rx_total_user_byte_cnt += rx_len;
    4496:	6f90      	ldr	r0, [r2, #120]	; 0x78
    4498:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
    449c:	4408      	add	r0, r1
	if (rx_len > 0) {
    449e:	4543      	cmp	r3, r8
	data->async->rx_total_user_byte_cnt += rx_len;
    44a0:	6790      	str	r0, [r2, #120]	; 0x78
	if (rx_len > 0) {
    44a2:	dd02      	ble.n	44aa <uarte_nrfx_isr_async+0xd2>
		notify_uart_rx_rdy(dev, rx_len);
    44a4:	4620      	mov	r0, r4
    44a6:	f003 f9fa 	bl	789e <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
    44aa:	68f9      	ldr	r1, [r7, #12]
    44ac:	f891 30d2 	ldrb.w	r3, [r1, #210]	; 0xd2
    44b0:	2b00      	cmp	r3, #0
    44b2:	f040 80c8 	bne.w	4646 <uarte_nrfx_isr_async+0x26e>
		data->async->is_in_irq = false;
    44b6:	f881 30d5 	strb.w	r3, [r1, #213]	; 0xd5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    44ba:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
    44be:	b393      	cbz	r3, 4526 <uarte_nrfx_isr_async+0x14e>
    44c0:	f8d5 1110 	ldr.w	r1, [r5, #272]	; 0x110
    44c4:	bb79      	cbnz	r1, 4526 <uarte_nrfx_isr_async+0x14e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    44c6:	f8c5 114c 	str.w	r1, [r5, #332]	; 0x14c
	struct uarte_nrfx_data *data = get_dev_data(dev);
    44ca:	6926      	ldr	r6, [r4, #16]
    44cc:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	struct uart_event evt = {
    44d0:	2214      	movs	r2, #20
    44d2:	a803      	add	r0, sp, #12
    44d4:	f003 f87f 	bl	75d6 <memset>
    44d8:	2303      	movs	r3, #3
	user_callback(dev, &evt);
    44da:	a903      	add	r1, sp, #12
    44dc:	4620      	mov	r0, r4
	struct uart_event evt = {
    44de:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
    44e2:	f003 f9d5 	bl	7890 <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
    44e6:	68f6      	ldr	r6, [r6, #12]
    44e8:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
    44ea:	1c5f      	adds	r7, r3, #1
    44ec:	d01b      	beq.n	4526 <uarte_nrfx_isr_async+0x14e>
		data->async->rx_timeout_left = data->async->rx_timeout;
    44ee:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
			      K_USEC(data->async->rx_timeout_slab),
    44f2:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
    44f6:	f8df 8234 	ldr.w	r8, [pc, #564]	; 472c <uarte_nrfx_isr_async+0x354>
    44fa:	4a8b      	ldr	r2, [pc, #556]	; (4728 <uarte_nrfx_isr_async+0x350>)
    44fc:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
    4500:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    4504:	f04f 0900 	mov.w	r9, #0
    4508:	fbc0 8901 	smlal	r8, r9, r0, r1
    450c:	2300      	movs	r3, #0
    450e:	4640      	mov	r0, r8
    4510:	4649      	mov	r1, r9
    4512:	f7fc fa2f 	bl	974 <__aeabi_uldivmod>
    4516:	4602      	mov	r2, r0
    4518:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
    451a:	e9cd 0100 	strd	r0, r1, [sp]
    451e:	f106 0088 	add.w	r0, r6, #136	; 0x88
    4522:	f002 fa67 	bl	69f4 <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4526:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
    452a:	b333      	cbz	r3, 457a <uarte_nrfx_isr_async+0x1a2>
    452c:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
    4530:	bb1e      	cbnz	r6, 457a <uarte_nrfx_isr_async+0x1a2>
	struct uarte_nrfx_data *data = get_dev_data(dev);
    4532:	6927      	ldr	r7, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4534:	f8c5 6144 	str.w	r6, [r5, #324]	; 0x144
	notify_rx_buf_release(dev, &data->async->rx_buf, true);
    4538:	68f9      	ldr	r1, [r7, #12]
    453a:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
    453e:	2201      	movs	r2, #1
    4540:	3160      	adds	r1, #96	; 0x60
    4542:	4620      	mov	r0, r4
    4544:	f003 f9c4 	bl	78d0 <notify_rx_buf_release>
	notify_rx_buf_release(dev, &data->async->rx_next_buf, true);
    4548:	68f9      	ldr	r1, [r7, #12]
    454a:	2201      	movs	r2, #1
    454c:	316c      	adds	r1, #108	; 0x6c
    454e:	4620      	mov	r0, r4
    4550:	f003 f9be 	bl	78d0 <notify_rx_buf_release>
	if (data->async->rx_enabled) {
    4554:	68fb      	ldr	r3, [r7, #12]
    4556:	f893 20d2 	ldrb.w	r2, [r3, #210]	; 0xd2
    455a:	2a00      	cmp	r2, #0
    455c:	f000 80a1 	beq.w	46a2 <uarte_nrfx_isr_async+0x2ca>
		data->async->rx_enabled = false;
    4560:	f883 60d2 	strb.w	r6, [r3, #210]	; 0xd2
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    4564:	6863      	ldr	r3, [r4, #4]
    4566:	685b      	ldr	r3, [r3, #4]
    4568:	06d8      	lsls	r0, r3, #27
    456a:	d503      	bpl.n	4574 <uarte_nrfx_isr_async+0x19c>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
    456c:	2102      	movs	r1, #2
    456e:	4620      	mov	r0, r4
    4570:	f003 fb26 	bl	7bc0 <async_uart_release>
	notify_rx_disable(dev);
    4574:	4620      	mov	r0, r4
    4576:	f003 f9c5 	bl	7904 <notify_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    457a:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
    457e:	b1db      	cbz	r3, 45b8 <uarte_nrfx_isr_async+0x1e0>
    return p_reg->INTENSET & mask;
    4580:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
    4584:	05d9      	lsls	r1, r3, #23
    4586:	d517      	bpl.n	45b8 <uarte_nrfx_isr_async+0x1e0>
	return config->uarte_regs;
    4588:	6863      	ldr	r3, [r4, #4]
    458a:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    458c:	f04f 0120 	mov.w	r1, #32
    4590:	f3ef 8211 	mrs	r2, BASEPRI
    4594:	f381 8812 	msr	BASEPRI_MAX, r1
    4598:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    459c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    45a0:	b131      	cbz	r1, 45b0 <uarte_nrfx_isr_async+0x1d8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    45a2:	2100      	movs	r1, #0
    45a4:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    45a8:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    45ac:	2101      	movs	r1, #1
    45ae:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    45b0:	f382 8811 	msr	BASEPRI, r2
    45b4:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    45b8:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
    45bc:	2b00      	cmp	r3, #0
    45be:	f43f af20 	beq.w	4402 <uarte_nrfx_isr_async+0x2a>
    return p_reg->INTENSET & mask;
    45c2:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
    45c6:	025a      	lsls	r2, r3, #9
    45c8:	f57f af1b 	bpl.w	4402 <uarte_nrfx_isr_async+0x2a>
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    45cc:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    45ce:	6926      	ldr	r6, [r4, #16]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    45d0:	e9d3 7300 	ldrd	r7, r3, [r3]
    45d4:	06db      	lsls	r3, r3, #27
    45d6:	d469      	bmi.n	46ac <uarte_nrfx_isr_async+0x2d4>
	if (!data->async->tx_buf) {
    45d8:	68f3      	ldr	r3, [r6, #12]
    45da:	689b      	ldr	r3, [r3, #8]
    45dc:	2b00      	cmp	r3, #0
    45de:	f43f af10 	beq.w	4402 <uarte_nrfx_isr_async+0x2a>
	__asm__ volatile(
    45e2:	f04f 0320 	mov.w	r3, #32
    45e6:	f3ef 8211 	mrs	r2, BASEPRI
    45ea:	f383 8812 	msr	BASEPRI_MAX, r3
    45ee:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
    45f2:	68f3      	ldr	r3, [r6, #12]
    45f4:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
    45f8:	2900      	cmp	r1, #0
    45fa:	bfac      	ite	ge
    45fc:	f8d3 50c4 	ldrge.w	r5, [r3, #196]	; 0xc4
    return p_reg->TXD.AMOUNT;
    4600:	f8d7 554c 	ldrlt.w	r5, [r7, #1356]	; 0x54c
	__asm__ volatile(
    4604:	f382 8811 	msr	BASEPRI, r2
    4608:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
    460c:	68f0      	ldr	r0, [r6, #12]
    460e:	f890 30d4 	ldrb.w	r3, [r0, #212]	; 0xd4
    4612:	2b00      	cmp	r3, #0
    4614:	d057      	beq.n	46c6 <uarte_nrfx_isr_async+0x2ee>
	__asm__ volatile(
    4616:	f04f 0320 	mov.w	r3, #32
    461a:	f3ef 8511 	mrs	r5, BASEPRI
    461e:	f383 8812 	msr	BASEPRI_MAX, r3
    4622:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
    4626:	f106 010c 	add.w	r1, r6, #12
    462a:	4620      	mov	r0, r4
    462c:	f003 fb7f 	bl	7d2e <start_tx_locked.isra.0>
	__asm__ volatile(
    4630:	f385 8811 	msr	BASEPRI, r5
    4634:	f3bf 8f6f 	isb	sy
				return;
    4638:	e6e3      	b.n	4402 <uarte_nrfx_isr_async+0x2a>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
    463a:	2601      	movs	r6, #1
    463c:	e701      	b.n	4442 <uarte_nrfx_isr_async+0x6a>
    463e:	2602      	movs	r6, #2
    4640:	e6ff      	b.n	4442 <uarte_nrfx_isr_async+0x6a>
    4642:	2604      	movs	r6, #4
    4644:	e6fd      	b.n	4442 <uarte_nrfx_isr_async+0x6a>
	notify_rx_buf_release(dev, &data->async->rx_buf, false);
    4646:	2200      	movs	r2, #0
    4648:	3160      	adds	r1, #96	; 0x60
    464a:	4620      	mov	r0, r4
    464c:	f003 f940 	bl	78d0 <notify_rx_buf_release>
	__asm__ volatile(
    4650:	f04f 0320 	mov.w	r3, #32
    4654:	f3ef 8111 	mrs	r1, BASEPRI
    4658:	f383 8812 	msr	BASEPRI_MAX, r3
    465c:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
    4660:	68fb      	ldr	r3, [r7, #12]
    4662:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    4664:	b1d2      	cbz	r2, 469c <uarte_nrfx_isr_async+0x2c4>
		data->async->rx_buf = data->async->rx_next_buf;
    4666:	661a      	str	r2, [r3, #96]	; 0x60
		data->async->rx_buf_len = data->async->rx_next_buf_len;
    4668:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    466a:	665a      	str	r2, [r3, #100]	; 0x64
		data->async->rx_next_buf = NULL;
    466c:	2200      	movs	r2, #0
		data->async->rx_next_buf_len = 0;
    466e:	e9c3 221b 	strd	r2, r2, [r3, #108]	; 0x6c
		data->async->rx_offset = 0;
    4672:	669a      	str	r2, [r3, #104]	; 0x68
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4674:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
    4678:	b90b      	cbnz	r3, 467e <uarte_nrfx_isr_async+0x2a6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    467a:	2301      	movs	r3, #1
    467c:	6033      	str	r3, [r6, #0]
    p_reg->SHORTS &= ~(mask);
    467e:	f8d6 3200 	ldr.w	r3, [r6, #512]	; 0x200
    4682:	f023 0320 	bic.w	r3, r3, #32
    4686:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	__asm__ volatile(
    468a:	f381 8811 	msr	BASEPRI, r1
    468e:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
    4692:	68fb      	ldr	r3, [r7, #12]
    4694:	2200      	movs	r2, #0
    4696:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
    469a:	e70e      	b.n	44ba <uarte_nrfx_isr_async+0xe2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    469c:	2301      	movs	r3, #1
    469e:	6073      	str	r3, [r6, #4]
}
    46a0:	e7f3      	b.n	468a <uarte_nrfx_isr_async+0x2b2>
		(void)rx_flush(dev, NULL, 0);
    46a2:	4611      	mov	r1, r2
    46a4:	4620      	mov	r0, r4
    46a6:	f003 fa56 	bl	7b56 <rx_flush>
    46aa:	e75b      	b.n	4564 <uarte_nrfx_isr_async+0x18c>
    p_reg->INTENCLR = mask;
    46ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    46b0:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
		async_uart_release(dev, UARTE_LOW_POWER_TX);
    46b4:	2101      	movs	r1, #1
    46b6:	4620      	mov	r0, r4
    46b8:	f003 fa82 	bl	7bc0 <async_uart_release>
		if (!data->async->tx_size) {
    46bc:	68f3      	ldr	r3, [r6, #12]
    46be:	68db      	ldr	r3, [r3, #12]
    46c0:	2b00      	cmp	r3, #0
    46c2:	d189      	bne.n	45d8 <uarte_nrfx_isr_async+0x200>
    46c4:	e69d      	b.n	4402 <uarte_nrfx_isr_async+0x2a>
	if (data->async->tx_buf != data->async->xfer_buf) {
    46c6:	6882      	ldr	r2, [r0, #8]
    46c8:	6903      	ldr	r3, [r0, #16]
    46ca:	429a      	cmp	r2, r3
    46cc:	d00b      	beq.n	46e6 <uarte_nrfx_isr_async+0x30e>
		if (amount == data->async->xfer_len) {
    46ce:	6942      	ldr	r2, [r0, #20]
    46d0:	6a03      	ldr	r3, [r0, #32]
    46d2:	42aa      	cmp	r2, r5
    46d4:	442b      	add	r3, r5
    46d6:	d125      	bne.n	4724 <uarte_nrfx_isr_async+0x34c>
			data->async->tx_cache_offset += amount;
    46d8:	6203      	str	r3, [r0, #32]
			if (setup_tx_cache(data)) {
    46da:	f003 fa97 	bl	7c0c <setup_tx_cache.isra.0>
    46de:	2800      	cmp	r0, #0
    46e0:	d199      	bne.n	4616 <uarte_nrfx_isr_async+0x23e>
			amount = data->async->tx_cache_offset;
    46e2:	68f3      	ldr	r3, [r6, #12]
    46e4:	6a1d      	ldr	r5, [r3, #32]
	k_timer_stop(&data->async->tx_timeout_timer);
    46e6:	68f0      	ldr	r0, [r6, #12]
    46e8:	3028      	adds	r0, #40	; 0x28
	z_impl_k_timer_stop(timer);
    46ea:	f003 fdd3 	bl	8294 <z_impl_k_timer_stop>
	struct uart_event evt = {
    46ee:	2214      	movs	r2, #20
    46f0:	2100      	movs	r1, #0
    46f2:	a803      	add	r0, sp, #12
    46f4:	f002 ff6f 	bl	75d6 <memset>
		.data.tx.buf = data->async->tx_buf,
    46f8:	68f3      	ldr	r3, [r6, #12]
	struct uart_event evt = {
    46fa:	689a      	ldr	r2, [r3, #8]
    46fc:	e9cd 2504 	strd	r2, r5, [sp, #16]
	if (amount == data->async->tx_size) {
    4700:	68da      	ldr	r2, [r3, #12]
    4702:	1aad      	subs	r5, r5, r2
    4704:	bf18      	it	ne
    4706:	2501      	movne	r5, #1
    4708:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    470c:	f88d 500c 	strb.w	r5, [sp, #12]
    4710:	f8c7 2308 	str.w	r2, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
    4714:	2200      	movs	r2, #0
    4716:	609a      	str	r2, [r3, #8]
	data->async->tx_size = 0;
    4718:	60da      	str	r2, [r3, #12]
	user_callback(dev, &evt);
    471a:	a903      	add	r1, sp, #12
    471c:	4620      	mov	r0, r4
    471e:	f003 f8b7 	bl	7890 <user_callback>
    4722:	e66e      	b.n	4402 <uarte_nrfx_isr_async+0x2a>
			amount += data->async->tx_cache_offset;
    4724:	461d      	mov	r5, r3
    4726:	e7de      	b.n	46e6 <uarte_nrfx_isr_async+0x30e>
    4728:	000f4240 	.word	0x000f4240
    472c:	000f423f 	.word	0x000f423f

00004730 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    4730:	4919      	ldr	r1, [pc, #100]	; (4798 <sys_clock_timeout_handler+0x68>)
{
    4732:	b570      	push	{r4, r5, r6, lr}
    4734:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    4736:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    473a:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    473c:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    4740:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    4744:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    4746:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    474a:	f04f 0500 	mov.w	r5, #0
    474e:	d20a      	bcs.n	4766 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    4750:	4b12      	ldr	r3, [pc, #72]	; (479c <sys_clock_timeout_handler+0x6c>)
    4752:	6819      	ldr	r1, [r3, #0]
    4754:	060a      	lsls	r2, r1, #24
    4756:	0a0b      	lsrs	r3, r1, #8
    4758:	1992      	adds	r2, r2, r6
    475a:	4911      	ldr	r1, [pc, #68]	; (47a0 <sys_clock_timeout_handler+0x70>)
    475c:	f143 0300 	adc.w	r3, r3, #0
    4760:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    4764:	2501      	movs	r5, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    4766:	f002 f87b 	bl	6860 <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    476a:	00a3      	lsls	r3, r4, #2
    476c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4770:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    4774:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    4778:	42b2      	cmp	r2, r6
    477a:	d10b      	bne.n	4794 <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    477c:	b91d      	cbnz	r5, 4786 <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
    477e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    4782:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    4786:	4b07      	ldr	r3, [pc, #28]	; (47a4 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4788:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    478c:	fa00 f404 	lsl.w	r4, r0, r4
    4790:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    4794:	bd70      	pop	{r4, r5, r6, pc}
    4796:	bf00      	nop
    4798:	200005c0 	.word	0x200005c0
    479c:	20000df4 	.word	0x20000df4
    47a0:	200005a8 	.word	0x200005a8
    47a4:	40011000 	.word	0x40011000

000047a8 <compare_int_lock>:
{
    47a8:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    47aa:	2301      	movs	r3, #1
    47ac:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    47ae:	4a11      	ldr	r2, [pc, #68]	; (47f4 <compare_int_lock+0x4c>)
    47b0:	f3bf 8f5b 	dmb	ish
    47b4:	43dc      	mvns	r4, r3
    47b6:	e852 1f00 	ldrex	r1, [r2]
    47ba:	ea01 0c04 	and.w	ip, r1, r4
    47be:	e842 ce00 	strex	lr, ip, [r2]
    47c2:	f1be 0f00 	cmp.w	lr, #0
    47c6:	d1f6      	bne.n	47b6 <compare_int_lock+0xe>
    47c8:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    47cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    47d0:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    47d4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    47d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    47dc:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    47e0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    47e4:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
    47e8:	420b      	tst	r3, r1
}
    47ea:	bf14      	ite	ne
    47ec:	2001      	movne	r0, #1
    47ee:	2000      	moveq	r0, #0
    47f0:	bd10      	pop	{r4, pc}
    47f2:	bf00      	nop
    47f4:	20000df0 	.word	0x20000df0

000047f8 <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
    47f8:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    47fa:	4a12      	ldr	r2, [pc, #72]	; (4844 <compare_int_unlock.part.0+0x4c>)
    47fc:	f3bf 8f5b 	dmb	ish
    4800:	4083      	lsls	r3, r0
    4802:	e852 1f00 	ldrex	r1, [r2]
    4806:	4319      	orrs	r1, r3
    4808:	e842 1c00 	strex	ip, r1, [r2]
    480c:	f1bc 0f00 	cmp.w	ip, #0
    4810:	d1f7      	bne.n	4802 <compare_int_unlock.part.0+0xa>
    4812:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    4816:	4a0c      	ldr	r2, [pc, #48]	; (4848 <compare_int_unlock.part.0+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4818:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    481c:	4083      	lsls	r3, r0
    481e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4822:	4b0a      	ldr	r3, [pc, #40]	; (484c <compare_int_unlock.part.0+0x54>)
    4824:	f3bf 8f5b 	dmb	ish
    4828:	681b      	ldr	r3, [r3, #0]
    482a:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    482e:	fa23 f000 	lsr.w	r0, r3, r0
    4832:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4834:	bf42      	ittt	mi
    4836:	4b06      	ldrmi	r3, [pc, #24]	; (4850 <compare_int_unlock.part.0+0x58>)
    4838:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    483c:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    4840:	4770      	bx	lr
    4842:	bf00      	nop
    4844:	20000df0 	.word	0x20000df0
    4848:	40011000 	.word	0x40011000
    484c:	20000dec 	.word	0x20000dec
    4850:	e000e100 	.word	0xe000e100

00004854 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    4854:	4b0d      	ldr	r3, [pc, #52]	; (488c <z_nrf_rtc_timer_read+0x38>)
    4856:	681b      	ldr	r3, [r3, #0]
    4858:	0a19      	lsrs	r1, r3, #8
    485a:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    485c:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    4860:	4b0b      	ldr	r3, [pc, #44]	; (4890 <z_nrf_rtc_timer_read+0x3c>)
    4862:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    4866:	18c0      	adds	r0, r0, r3
    4868:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    486c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    4870:	d20a      	bcs.n	4888 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    4872:	4b08      	ldr	r3, [pc, #32]	; (4894 <z_nrf_rtc_timer_read+0x40>)
    4874:	e9d3 2300 	ldrd	r2, r3, [r3]
    4878:	4299      	cmp	r1, r3
    487a:	bf08      	it	eq
    487c:	4290      	cmpeq	r0, r2
    487e:	d203      	bcs.n	4888 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    4880:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    4884:	f141 0100 	adc.w	r1, r1, #0
}
    4888:	4770      	bx	lr
    488a:	bf00      	nop
    488c:	20000df4 	.word	0x20000df4
    4890:	40011000 	.word	0x40011000
    4894:	200005a8 	.word	0x200005a8

00004898 <compare_set>:
{
    4898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    489c:	b085      	sub	sp, #20
    489e:	4616      	mov	r6, r2
    48a0:	461f      	mov	r7, r3
    48a2:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    48a4:	f7ff ff80 	bl	47a8 <compare_int_lock>
    48a8:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    48aa:	f7ff ffd3 	bl	4854 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    48ae:	42b9      	cmp	r1, r7
    48b0:	bf08      	it	eq
    48b2:	42b0      	cmpeq	r0, r6
    48b4:	d27f      	bcs.n	49b6 <compare_set+0x11e>
		if (target_time - curr_time > COUNTER_SPAN) {
    48b6:	ebb6 0800 	subs.w	r8, r6, r0
    48ba:	eb67 0901 	sbc.w	r9, r7, r1
    48be:	2300      	movs	r3, #0
    48c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    48c4:	454b      	cmp	r3, r9
    48c6:	bf08      	it	eq
    48c8:	4542      	cmpeq	r2, r8
    48ca:	f0c0 8085 	bcc.w	49d8 <compare_set+0x140>
		if (target_time != cc_data[chan].target_time) {
    48ce:	4b44      	ldr	r3, [pc, #272]	; (49e0 <compare_set+0x148>)
    48d0:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    48d4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    48d8:	429f      	cmp	r7, r3
    48da:	bf08      	it	eq
    48dc:	4296      	cmpeq	r6, r2
    48de:	d054      	beq.n	498a <compare_set+0xf2>
    48e0:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    48e4:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    48e8:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    48ec:	f105 0850 	add.w	r8, r5, #80	; 0x50
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    48f0:	fa0b f205 	lsl.w	r2, fp, r5
    48f4:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    48f8:	ea4f 0888 	mov.w	r8, r8, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    48fc:	fa1f f888 	uxth.w	r8, r8
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4900:	9202      	str	r2, [sp, #8]
     return p_reg->COUNTER;
    4902:	4a38      	ldr	r2, [pc, #224]	; (49e4 <compare_set+0x14c>)
    return p_reg->CC[ch];
    4904:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
	return absolute_time & COUNTER_MAX;
    4908:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    490c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
    4910:	f508 3888 	add.w	r8, r8, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    4914:	461c      	mov	r4, r3
    4916:	4693      	mov	fp, r2
     return p_reg->COUNTER;
    4918:	f8d2 a504 	ldr.w	sl, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    491c:	eba0 000a 	sub.w	r0, r0, sl
    4920:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    4924:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    4928:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    492a:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
    492e:	d105      	bne.n	493c <compare_set+0xa4>
    4930:	9303      	str	r3, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
    4932:	2013      	movs	r0, #19
    4934:	f003 fc9e 	bl	8274 <z_impl_k_busy_wait>
    4938:	4a2a      	ldr	r2, [pc, #168]	; (49e4 <compare_set+0x14c>)
    493a:	9b03      	ldr	r3, [sp, #12]
    p_reg->EVTENSET = mask;
    493c:	9902      	ldr	r1, [sp, #8]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    493e:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
    4942:	eba4 000c 	sub.w	r0, r4, ip
    4946:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    494a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    494e:	bf88      	it	hi
    4950:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4952:	2000      	movs	r0, #0
    4954:	f8c8 0000 	str.w	r0, [r8]
    4958:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
    495c:	f8cb 1344 	str.w	r1, [fp, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    4960:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    4964:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    4968:	f8db 0504 	ldr.w	r0, [fp, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    496c:	4582      	cmp	sl, r0
    496e:	d006      	beq.n	497e <compare_set+0xe6>
	return (a - b) & COUNTER_MAX;
    4970:	1a20      	subs	r0, r4, r0
    4972:	3802      	subs	r0, #2
    4974:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    4978:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    497c:	d819      	bhi.n	49b2 <compare_set+0x11a>
	return (a - b) & COUNTER_MAX;
    497e:	1ae4      	subs	r4, r4, r3
    4980:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    4984:	1932      	adds	r2, r6, r4
    4986:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
    498a:	4c15      	ldr	r4, [pc, #84]	; (49e0 <compare_set+0x148>)
    498c:	0129      	lsls	r1, r5, #4
    498e:	eb04 1005 	add.w	r0, r4, r5, lsl #4
    4992:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
    4996:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	cc_data[chan].user_context = user_data;
    4998:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	cc_data[chan].callback = handler;
    499a:	5062      	str	r2, [r4, r1]
	cc_data[chan].user_context = user_data;
    499c:	6043      	str	r3, [r0, #4]
	return ret;
    499e:	2400      	movs	r4, #0
	if (key) {
    49a0:	9b01      	ldr	r3, [sp, #4]
    49a2:	b113      	cbz	r3, 49aa <compare_set+0x112>
    49a4:	4628      	mov	r0, r5
    49a6:	f7ff ff27 	bl	47f8 <compare_int_unlock.part.0>
}
    49aa:	4620      	mov	r0, r4
    49ac:	b005      	add	sp, #20
    49ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    49b2:	4620      	mov	r0, r4
    49b4:	e7b0      	b.n	4918 <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
    49b6:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    49b8:	4a0b      	ldr	r2, [pc, #44]	; (49e8 <compare_set+0x150>)
    49ba:	f3bf 8f5b 	dmb	ish
    49be:	40ab      	lsls	r3, r5
    49c0:	e852 1f00 	ldrex	r1, [r2]
    49c4:	4319      	orrs	r1, r3
    49c6:	e842 1000 	strex	r0, r1, [r2]
    49ca:	2800      	cmp	r0, #0
    49cc:	d1f8      	bne.n	49c0 <compare_set+0x128>
    49ce:	f3bf 8f5b 	dmb	ish
    49d2:	4632      	mov	r2, r6
    49d4:	463b      	mov	r3, r7
    49d6:	e7d8      	b.n	498a <compare_set+0xf2>
			return -EINVAL;
    49d8:	f06f 0415 	mvn.w	r4, #21
    49dc:	e7e0      	b.n	49a0 <compare_set+0x108>
    49de:	bf00      	nop
    49e0:	200005b0 	.word	0x200005b0
    49e4:	40011000 	.word	0x40011000
    49e8:	20000dec 	.word	0x20000dec

000049ec <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    49ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    49ee:	4b19      	ldr	r3, [pc, #100]	; (4a54 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    49f0:	4d19      	ldr	r5, [pc, #100]	; (4a58 <sys_clock_driver_init+0x6c>)
    49f2:	2400      	movs	r4, #0
    49f4:	f04f 30ff 	mov.w	r0, #4294967295
    49f8:	f04f 31ff 	mov.w	r1, #4294967295
    49fc:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    4a00:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    4a04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4a08:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4a0c:	4b13      	ldr	r3, [pc, #76]	; (4a5c <sys_clock_driver_init+0x70>)
    4a0e:	2602      	movs	r6, #2
    4a10:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    4a14:	2101      	movs	r1, #1
    4a16:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    4a1a:	2011      	movs	r0, #17
    4a1c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    4a20:	4622      	mov	r2, r4
    4a22:	f7fe f889 	bl	2b38 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    4a26:	2011      	movs	r0, #17
    4a28:	f7fe f868 	bl	2afc <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    4a2c:	4a0c      	ldr	r2, [pc, #48]	; (4a60 <sys_clock_driver_init+0x74>)
    4a2e:	2301      	movs	r3, #1
    4a30:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    4a32:	4a0c      	ldr	r2, [pc, #48]	; (4a64 <sys_clock_driver_init+0x78>)
    4a34:	602b      	str	r3, [r5, #0]
    4a36:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    4a38:	4b0b      	ldr	r3, [pc, #44]	; (4a68 <sys_clock_driver_init+0x7c>)
    4a3a:	4a0c      	ldr	r2, [pc, #48]	; (4a6c <sys_clock_driver_init+0x80>)
    4a3c:	9300      	str	r3, [sp, #0]
    4a3e:	9401      	str	r4, [sp, #4]
    4a40:	2300      	movs	r3, #0
    4a42:	4620      	mov	r0, r4
    4a44:	f7ff ff28 	bl	4898 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    4a48:	4630      	mov	r0, r6
    4a4a:	f7fe ff5f 	bl	390c <z_nrf_clock_control_lf_on>

	return 0;
}
    4a4e:	4620      	mov	r0, r4
    4a50:	b002      	add	sp, #8
    4a52:	bd70      	pop	{r4, r5, r6, pc}
    4a54:	200005b0 	.word	0x200005b0
    4a58:	40011000 	.word	0x40011000
    4a5c:	e000e100 	.word	0xe000e100
    4a60:	40011008 	.word	0x40011008
    4a64:	20000df0 	.word	0x20000df0
    4a68:	00004731 	.word	0x00004731
    4a6c:	007fffff 	.word	0x007fffff

00004a70 <rtc_nrf_isr>:
{
    4a70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    4a74:	4c34      	ldr	r4, [pc, #208]	; (4b48 <rtc_nrf_isr+0xd8>)
    4a76:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    4a7a:	079a      	lsls	r2, r3, #30
    4a7c:	d509      	bpl.n	4a92 <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4a7e:	4b33      	ldr	r3, [pc, #204]	; (4b4c <rtc_nrf_isr+0xdc>)
    4a80:	681a      	ldr	r2, [r3, #0]
    4a82:	b132      	cbz	r2, 4a92 <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4a84:	2200      	movs	r2, #0
    4a86:	601a      	str	r2, [r3, #0]
		overflow_cnt++;
    4a88:	4a31      	ldr	r2, [pc, #196]	; (4b50 <rtc_nrf_isr+0xe0>)
    4a8a:	681b      	ldr	r3, [r3, #0]
    4a8c:	6813      	ldr	r3, [r2, #0]
    4a8e:	3301      	adds	r3, #1
    4a90:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    4a92:	f04f 0320 	mov.w	r3, #32
    4a96:	f3ef 8211 	mrs	r2, BASEPRI
    4a9a:	f383 8812 	msr	BASEPRI_MAX, r3
    4a9e:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    4aa2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    4aa6:	03db      	lsls	r3, r3, #15
    4aa8:	d512      	bpl.n	4ad0 <rtc_nrf_isr+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4aaa:	f3bf 8f5b 	dmb	ish
    4aae:	4b29      	ldr	r3, [pc, #164]	; (4b54 <rtc_nrf_isr+0xe4>)
    4ab0:	e853 1f00 	ldrex	r1, [r3]
    4ab4:	f021 0001 	bic.w	r0, r1, #1
    4ab8:	e843 0600 	strex	r6, r0, [r3]
    4abc:	2e00      	cmp	r6, #0
    4abe:	d1f7      	bne.n	4ab0 <rtc_nrf_isr+0x40>
    4ac0:	f3bf 8f5b 	dmb	ish
    4ac4:	4b24      	ldr	r3, [pc, #144]	; (4b58 <rtc_nrf_isr+0xe8>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    4ac6:	2900      	cmp	r1, #0
    4ac8:	d136      	bne.n	4b38 <rtc_nrf_isr+0xc8>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4aca:	6819      	ldr	r1, [r3, #0]
		if (result) {
    4acc:	2900      	cmp	r1, #0
    4ace:	d133      	bne.n	4b38 <rtc_nrf_isr+0xc8>
{
    4ad0:	2300      	movs	r3, #0
	__asm__ volatile(
    4ad2:	f382 8811 	msr	BASEPRI, r2
    4ad6:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    4ada:	b353      	cbz	r3, 4b32 <rtc_nrf_isr+0xc2>
		curr_time = z_nrf_rtc_timer_read();
    4adc:	f7ff feba 	bl	4854 <z_nrf_rtc_timer_read>
    4ae0:	4606      	mov	r6, r0
	__asm__ volatile(
    4ae2:	f04f 0320 	mov.w	r3, #32
    4ae6:	f3ef 8011 	mrs	r0, BASEPRI
    4aea:	f383 8812 	msr	BASEPRI_MAX, r3
    4aee:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    4af2:	4b1a      	ldr	r3, [pc, #104]	; (4b5c <rtc_nrf_isr+0xec>)
    4af4:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    4af8:	4549      	cmp	r1, r9
    4afa:	bf08      	it	eq
    4afc:	4546      	cmpeq	r6, r8
    4afe:	f04f 0200 	mov.w	r2, #0
    4b02:	d31e      	bcc.n	4b42 <rtc_nrf_isr+0xd2>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    4b04:	f04f 36ff 	mov.w	r6, #4294967295
    4b08:	f04f 37ff 	mov.w	r7, #4294967295
			user_context = cc_data[chan].user_context;
    4b0c:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    4b10:	e9c3 6702 	strd	r6, r7, [r3, #8]
			cc_data[chan].callback = NULL;
    4b14:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    4b16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4b1a:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    4b1e:	f380 8811 	msr	BASEPRI, r0
    4b22:	f3bf 8f6f 	isb	sy
		if (handler) {
    4b26:	b121      	cbz	r1, 4b32 <rtc_nrf_isr+0xc2>
			handler(chan, expire_time, user_context);
    4b28:	9500      	str	r5, [sp, #0]
    4b2a:	4642      	mov	r2, r8
    4b2c:	464b      	mov	r3, r9
    4b2e:	2000      	movs	r0, #0
    4b30:	4788      	blx	r1
}
    4b32:	b003      	add	sp, #12
    4b34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4b38:	2100      	movs	r1, #0
    4b3a:	6019      	str	r1, [r3, #0]
    4b3c:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    4b3e:	2301      	movs	r3, #1
}
    4b40:	e7c7      	b.n	4ad2 <rtc_nrf_isr+0x62>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    4b42:	4611      	mov	r1, r2
    4b44:	e7eb      	b.n	4b1e <rtc_nrf_isr+0xae>
    4b46:	bf00      	nop
    4b48:	40011000 	.word	0x40011000
    4b4c:	40011104 	.word	0x40011104
    4b50:	20000df4 	.word	0x20000df4
    4b54:	20000dec 	.word	0x20000dec
    4b58:	40011140 	.word	0x40011140
    4b5c:	200005b0 	.word	0x200005b0

00004b60 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4b60:	4b14      	ldr	r3, [pc, #80]	; (4bb4 <sys_clock_set_timeout+0x54>)
{
    4b62:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4b64:	f1b0 3fff 	cmp.w	r0, #4294967295
    4b68:	bf08      	it	eq
    4b6a:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4b6c:	1e44      	subs	r4, r0, #1
    4b6e:	2c00      	cmp	r4, #0
    4b70:	dd1e      	ble.n	4bb0 <sys_clock_set_timeout+0x50>
    4b72:	429c      	cmp	r4, r3
    4b74:	bfa8      	it	ge
    4b76:	461c      	movge	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    4b78:	f7ff fe6c 	bl	4854 <z_nrf_rtc_timer_read>
    4b7c:	4b0e      	ldr	r3, [pc, #56]	; (4bb8 <sys_clock_set_timeout+0x58>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    4b7e:	490f      	ldr	r1, [pc, #60]	; (4bbc <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    4b80:	e9d3 2300 	ldrd	r2, r3, [r3]
    4b84:	1a80      	subs	r0, r0, r2
		ticks = 0;
    4b86:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4b8a:	bf28      	it	cs
    4b8c:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    4b8e:	3001      	adds	r0, #1
    4b90:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
    4b92:	4808      	ldr	r0, [pc, #32]	; (4bb4 <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    4b94:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    4b96:	4284      	cmp	r4, r0
    4b98:	bf28      	it	cs
    4b9a:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    4b9c:	1912      	adds	r2, r2, r4
    4b9e:	f04f 0000 	mov.w	r0, #0
    4ba2:	9001      	str	r0, [sp, #4]
    4ba4:	f143 0300 	adc.w	r3, r3, #0
    4ba8:	f7ff fe76 	bl	4898 <compare_set>
}
    4bac:	b002      	add	sp, #8
    4bae:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4bb0:	2400      	movs	r4, #0
    4bb2:	e7e1      	b.n	4b78 <sys_clock_set_timeout+0x18>
    4bb4:	007fffff 	.word	0x007fffff
    4bb8:	200005c0 	.word	0x200005c0
    4bbc:	00004731 	.word	0x00004731

00004bc0 <sys_clock_elapsed>:
{
    4bc0:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    4bc2:	f7ff fe47 	bl	4854 <z_nrf_rtc_timer_read>
    4bc6:	4b02      	ldr	r3, [pc, #8]	; (4bd0 <sys_clock_elapsed+0x10>)
    4bc8:	681b      	ldr	r3, [r3, #0]
}
    4bca:	1ac0      	subs	r0, r0, r3
    4bcc:	bd08      	pop	{r3, pc}
    4bce:	bf00      	nop
    4bd0:	200005c0 	.word	0x200005c0

00004bd4 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4bd4:	4b03      	ldr	r3, [pc, #12]	; (4be4 <nrf52_errata_136+0x10>)
            if (var1 == 0x08)
    4bd6:	6818      	ldr	r0, [r3, #0]
}
    4bd8:	f1a0 0308 	sub.w	r3, r0, #8
    4bdc:	4258      	negs	r0, r3
    4bde:	4158      	adcs	r0, r3
    4be0:	4770      	bx	lr
    4be2:	bf00      	nop
    4be4:	10000130 	.word	0x10000130

00004be8 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4be8:	4b06      	ldr	r3, [pc, #24]	; (4c04 <nrf52_errata_103+0x1c>)
            if (var1 == 0x08)
    4bea:	681b      	ldr	r3, [r3, #0]
    4bec:	2b08      	cmp	r3, #8
    4bee:	d106      	bne.n	4bfe <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4bf0:	4b05      	ldr	r3, [pc, #20]	; (4c08 <nrf52_errata_103+0x20>)
    4bf2:	681b      	ldr	r3, [r3, #0]
                switch(var2)
    4bf4:	2b05      	cmp	r3, #5
    4bf6:	d802      	bhi.n	4bfe <nrf52_errata_103+0x16>
    4bf8:	4a04      	ldr	r2, [pc, #16]	; (4c0c <nrf52_errata_103+0x24>)
    4bfa:	5cd0      	ldrb	r0, [r2, r3]
    4bfc:	4770      	bx	lr
        return false;
    4bfe:	2000      	movs	r0, #0
}
    4c00:	4770      	bx	lr
    4c02:	bf00      	nop
    4c04:	10000130 	.word	0x10000130
    4c08:	10000134 	.word	0x10000134
    4c0c:	00008d97 	.word	0x00008d97

00004c10 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    4c10:	4a02      	ldr	r2, [pc, #8]	; (4c1c <nvmc_wait+0xc>)
    4c12:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    4c16:	2b00      	cmp	r3, #0
    4c18:	d0fb      	beq.n	4c12 <nvmc_wait+0x2>
}
    4c1a:	4770      	bx	lr
    4c1c:	4001e000 	.word	0x4001e000

00004c20 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    4c20:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    4c22:	f7ff ffd7 	bl	4bd4 <nrf52_errata_136>
    4c26:	b140      	cbz	r0, 4c3a <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    4c28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4c2c:	2200      	movs	r2, #0
    4c2e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    4c32:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    4c36:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    4c3a:	f7ff ffcb 	bl	4bd4 <nrf52_errata_136>
    4c3e:	2800      	cmp	r0, #0
    4c40:	d046      	beq.n	4cd0 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    4c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4c46:	4b5b      	ldr	r3, [pc, #364]	; (4db4 <SystemInit+0x194>)
    4c48:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    4c4c:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    4c50:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    4c54:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    4c58:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    4c5c:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    4c60:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    4c64:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    4c68:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    4c6c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    4c70:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    4c74:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    4c78:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    4c7c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    4c80:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    4c84:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    4c88:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    4c8c:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    4c90:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    4c94:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    4c98:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    4c9c:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    4ca0:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    4ca4:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    4ca8:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    4cac:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    4cb0:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    4cb4:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    4cb8:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    4cbc:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    4cc0:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    4cc4:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    4cc8:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    4ccc:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    4cd0:	f7ff ff8a 	bl	4be8 <nrf52_errata_103>
    4cd4:	b110      	cbz	r0, 4cdc <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    4cd6:	4b38      	ldr	r3, [pc, #224]	; (4db8 <SystemInit+0x198>)
    4cd8:	4a38      	ldr	r2, [pc, #224]	; (4dbc <SystemInit+0x19c>)
    4cda:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    4cdc:	f7ff ff84 	bl	4be8 <nrf52_errata_103>
    4ce0:	b118      	cbz	r0, 4cea <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    4ce2:	4b37      	ldr	r3, [pc, #220]	; (4dc0 <SystemInit+0x1a0>)
    4ce4:	22fb      	movs	r2, #251	; 0xfb
    4ce6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    4cea:	f7ff ff7d 	bl	4be8 <nrf52_errata_103>
    4cee:	b148      	cbz	r0, 4d04 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    4cf0:	4934      	ldr	r1, [pc, #208]	; (4dc4 <SystemInit+0x1a4>)
    4cf2:	4b35      	ldr	r3, [pc, #212]	; (4dc8 <SystemInit+0x1a8>)
    4cf4:	680a      	ldr	r2, [r1, #0]
    4cf6:	681b      	ldr	r3, [r3, #0]
    4cf8:	f022 020f 	bic.w	r2, r2, #15
    4cfc:	f003 030f 	and.w	r3, r3, #15
    4d00:	4313      	orrs	r3, r2
    4d02:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    4d04:	f7ff ff70 	bl	4be8 <nrf52_errata_103>
    4d08:	b118      	cbz	r0, 4d12 <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    4d0a:	4b30      	ldr	r3, [pc, #192]	; (4dcc <SystemInit+0x1ac>)
    4d0c:	f44f 7200 	mov.w	r2, #512	; 0x200
    4d10:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    4d12:	f7ff ff5f 	bl	4bd4 <nrf52_errata_136>
    4d16:	b148      	cbz	r0, 4d2c <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    4d18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4d1c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    4d20:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    4d22:	bf44      	itt	mi
    4d24:	f06f 0201 	mvnmi.w	r2, #1
    4d28:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4d2c:	4b28      	ldr	r3, [pc, #160]	; (4dd0 <SystemInit+0x1b0>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    4d2e:	681b      	ldr	r3, [r3, #0]
    4d30:	2b08      	cmp	r3, #8
    4d32:	d10e      	bne.n	4d52 <SystemInit+0x132>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4d34:	4b27      	ldr	r3, [pc, #156]	; (4dd4 <SystemInit+0x1b4>)
    4d36:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
    4d38:	2b05      	cmp	r3, #5
    4d3a:	d802      	bhi.n	4d42 <SystemInit+0x122>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    4d3c:	4a26      	ldr	r2, [pc, #152]	; (4dd8 <SystemInit+0x1b8>)
    4d3e:	5cd3      	ldrb	r3, [r2, r3]
    4d40:	b13b      	cbz	r3, 4d52 <SystemInit+0x132>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    4d42:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4d46:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    4d4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4d4e:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    4d52:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4d56:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    4d5a:	2a00      	cmp	r2, #0
    4d5c:	db03      	blt.n	4d66 <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    4d5e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    4d62:	2b00      	cmp	r3, #0
    4d64:	da22      	bge.n	4dac <SystemInit+0x18c>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4d66:	491d      	ldr	r1, [pc, #116]	; (4ddc <SystemInit+0x1bc>)
    4d68:	2301      	movs	r3, #1
    4d6a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    4d6e:	f7ff ff4f 	bl	4c10 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    4d72:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    4d76:	2412      	movs	r4, #18
    4d78:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    4d7c:	f7ff ff48 	bl	4c10 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    4d80:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    4d84:	f7ff ff44 	bl	4c10 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4d88:	2300      	movs	r3, #0
    4d8a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    4d8e:	f7ff ff3f 	bl	4c10 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    4d92:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    4d96:	4912      	ldr	r1, [pc, #72]	; (4de0 <SystemInit+0x1c0>)
    4d98:	4b12      	ldr	r3, [pc, #72]	; (4de4 <SystemInit+0x1c4>)
    4d9a:	68ca      	ldr	r2, [r1, #12]
    4d9c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4da0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4da2:	60cb      	str	r3, [r1, #12]
    4da4:	f3bf 8f4f 	dsb	sy
    __NOP();
    4da8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4daa:	e7fd      	b.n	4da8 <SystemInit+0x188>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    4dac:	4b0e      	ldr	r3, [pc, #56]	; (4de8 <SystemInit+0x1c8>)
    4dae:	4a0f      	ldr	r2, [pc, #60]	; (4dec <SystemInit+0x1cc>)
    4db0:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    4db2:	bd10      	pop	{r4, pc}
    4db4:	4000c000 	.word	0x4000c000
    4db8:	4000568c 	.word	0x4000568c
    4dbc:	00038148 	.word	0x00038148
    4dc0:	4000f000 	.word	0x4000f000
    4dc4:	40000ee4 	.word	0x40000ee4
    4dc8:	10000258 	.word	0x10000258
    4dcc:	40029640 	.word	0x40029640
    4dd0:	10000130 	.word	0x10000130
    4dd4:	10000134 	.word	0x10000134
    4dd8:	00008d91 	.word	0x00008d91
    4ddc:	4001e000 	.word	0x4001e000
    4de0:	e000ed00 	.word	0xe000ed00
    4de4:	05fa0004 	.word	0x05fa0004
    4de8:	2000011c 	.word	0x2000011c
    4dec:	03d09000 	.word	0x03d09000

00004df0 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    4df0:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    4df2:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    4df4:	6803      	ldr	r3, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    4df6:	fab3 f283 	clz	r2, r3
        if (idx < 0) {
    4dfa:	2a20      	cmp	r2, #32
        idx = 31 - NRF_CLZ(prev_mask);
    4dfc:	f1c2 041f 	rsb	r4, r2, #31
        if (idx < 0) {
    4e00:	d014      	beq.n	4e2c <nrfx_flag32_alloc+0x3c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    4e02:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    4e06:	fa05 f204 	lsl.w	r2, r5, r4
    4e0a:	ea23 0202 	bic.w	r2, r3, r2
    4e0e:	e850 6f00 	ldrex	r6, [r0]
    4e12:	429e      	cmp	r6, r3
    4e14:	d104      	bne.n	4e20 <nrfx_flag32_alloc+0x30>
    4e16:	e840 2c00 	strex	ip, r2, [r0]
    4e1a:	f1bc 0f00 	cmp.w	ip, #0
    4e1e:	d1f6      	bne.n	4e0e <nrfx_flag32_alloc+0x1e>
    4e20:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    4e24:	d1e6      	bne.n	4df4 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    4e26:	4802      	ldr	r0, [pc, #8]	; (4e30 <nrfx_flag32_alloc+0x40>)
    *p_flag = idx;
    4e28:	700c      	strb	r4, [r1, #0]
}
    4e2a:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    4e2c:	4801      	ldr	r0, [pc, #4]	; (4e34 <nrfx_flag32_alloc+0x44>)
    4e2e:	e7fc      	b.n	4e2a <nrfx_flag32_alloc+0x3a>
    4e30:	0bad0000 	.word	0x0bad0000
    4e34:	0bad0002 	.word	0x0bad0002

00004e38 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    4e38:	6803      	ldr	r3, [r0, #0]
    4e3a:	40cb      	lsrs	r3, r1
    4e3c:	07db      	lsls	r3, r3, #31
{
    4e3e:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    4e40:	d415      	bmi.n	4e6e <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    4e42:	2301      	movs	r3, #1
    4e44:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    4e48:	6803      	ldr	r3, [r0, #0]
    4e4a:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    4e4e:	ea41 0203 	orr.w	r2, r1, r3
    4e52:	e850 4f00 	ldrex	r4, [r0]
    4e56:	429c      	cmp	r4, r3
    4e58:	d104      	bne.n	4e64 <nrfx_flag32_free+0x2c>
    4e5a:	e840 2c00 	strex	ip, r2, [r0]
    4e5e:	f1bc 0f00 	cmp.w	ip, #0
    4e62:	d1f6      	bne.n	4e52 <nrfx_flag32_free+0x1a>
    4e64:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    4e68:	d1ee      	bne.n	4e48 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    4e6a:	4802      	ldr	r0, [pc, #8]	; (4e74 <nrfx_flag32_free+0x3c>)
}
    4e6c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4e6e:	4802      	ldr	r0, [pc, #8]	; (4e78 <nrfx_flag32_free+0x40>)
    4e70:	e7fc      	b.n	4e6c <nrfx_flag32_free+0x34>
    4e72:	bf00      	nop
    4e74:	0bad0000 	.word	0x0bad0000
    4e78:	0bad0004 	.word	0x0bad0004

00004e7c <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    4e7c:	4b04      	ldr	r3, [pc, #16]	; (4e90 <nrfx_clock_init+0x14>)
    4e7e:	791a      	ldrb	r2, [r3, #4]
    4e80:	b922      	cbnz	r2, 4e8c <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    4e82:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    4e84:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    4e86:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    4e88:	4802      	ldr	r0, [pc, #8]	; (4e94 <nrfx_clock_init+0x18>)
    4e8a:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    4e8c:	4802      	ldr	r0, [pc, #8]	; (4e98 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    4e8e:	4770      	bx	lr
    4e90:	20000df8 	.word	0x20000df8
    4e94:	0bad0000 	.word	0x0bad0000
    4e98:	0bad000c 	.word	0x0bad000c

00004e9c <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    4e9c:	b110      	cbz	r0, 4ea4 <nrfx_clock_start+0x8>
    4e9e:	2801      	cmp	r0, #1
    4ea0:	d020      	beq.n	4ee4 <nrfx_clock_start+0x48>
    4ea2:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4ea4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4ea8:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4eac:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    4eb0:	f411 3f80 	tst.w	r1, #65536	; 0x10000
    4eb4:	4619      	mov	r1, r3
    4eb6:	d011      	beq.n	4edc <nrfx_clock_start+0x40>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4eb8:	f002 0203 	and.w	r2, r2, #3
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    4ebc:	2a01      	cmp	r2, #1
    4ebe:	d10d      	bne.n	4edc <nrfx_clock_start+0x40>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4ec0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4ec4:	4b0c      	ldr	r3, [pc, #48]	; (4ef8 <nrfx_clock_start+0x5c>)
    4ec6:	2200      	movs	r2, #0
    4ec8:	601a      	str	r2, [r3, #0]
    4eca:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    4ecc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4ed0:	2202      	movs	r2, #2
    4ed2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4ed6:	2201      	movs	r2, #1
    4ed8:	609a      	str	r2, [r3, #8]
}
    4eda:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
    4edc:	2300      	movs	r3, #0
    4ede:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
}
    4ee2:	e7ef      	b.n	4ec4 <nrfx_clock_start+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4ee4:	4b05      	ldr	r3, [pc, #20]	; (4efc <nrfx_clock_start+0x60>)
    4ee6:	2200      	movs	r2, #0
    4ee8:	601a      	str	r2, [r3, #0]
    4eea:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    4eec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4ef0:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4ef4:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    4ef6:	4770      	bx	lr
    4ef8:	40000104 	.word	0x40000104
    4efc:	40000100 	.word	0x40000100

00004f00 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    4f00:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    4f02:	b110      	cbz	r0, 4f0a <nrfx_clock_stop+0xa>
    4f04:	2801      	cmp	r0, #1
    4f06:	d018      	beq.n	4f3a <nrfx_clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    4f08:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    4f0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4f0e:	2202      	movs	r2, #2
    4f10:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4f14:	4a18      	ldr	r2, [pc, #96]	; (4f78 <nrfx_clock_stop+0x78>)
    4f16:	6010      	str	r0, [r2, #0]
    4f18:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4f1a:	4a18      	ldr	r2, [pc, #96]	; (4f7c <nrfx_clock_stop+0x7c>)
    4f1c:	2101      	movs	r1, #1
    4f1e:	6011      	str	r1, [r2, #0]
    4f20:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4f24:	461c      	mov	r4, r3
    4f26:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    4f2a:	03db      	lsls	r3, r3, #15
    4f2c:	d5ec      	bpl.n	4f08 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    4f2e:	2001      	movs	r0, #1
    4f30:	f002 ff26 	bl	7d80 <nrfx_busy_wait>
    4f34:	3d01      	subs	r5, #1
    4f36:	d1f6      	bne.n	4f26 <nrfx_clock_stop+0x26>
    4f38:	e7e6      	b.n	4f08 <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4f3a:	4b11      	ldr	r3, [pc, #68]	; (4f80 <nrfx_clock_stop+0x80>)
    p_reg->INTENCLR = mask;
    4f3c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4f40:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    4f42:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4f46:	601a      	str	r2, [r3, #0]
    4f48:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4f4a:	4b0e      	ldr	r3, [pc, #56]	; (4f84 <nrfx_clock_stop+0x84>)
    4f4c:	f242 7510 	movw	r5, #10000	; 0x2710
    4f50:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4f52:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4f56:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
    4f5a:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4f5c:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4f60:	d505      	bpl.n	4f6e <nrfx_clock_stop+0x6e>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    4f62:	b123      	cbz	r3, 4f6e <nrfx_clock_stop+0x6e>
    4f64:	2001      	movs	r0, #1
    4f66:	f002 ff0b 	bl	7d80 <nrfx_busy_wait>
    4f6a:	3d01      	subs	r5, #1
    4f6c:	d1f1      	bne.n	4f52 <nrfx_clock_stop+0x52>
            m_clock_cb.hfclk_started = false;
    4f6e:	4b06      	ldr	r3, [pc, #24]	; (4f88 <nrfx_clock_stop+0x88>)
    4f70:	2200      	movs	r2, #0
    4f72:	715a      	strb	r2, [r3, #5]
    4f74:	e7c8      	b.n	4f08 <nrfx_clock_stop+0x8>
    4f76:	bf00      	nop
    4f78:	40000104 	.word	0x40000104
    4f7c:	4000000c 	.word	0x4000000c
    4f80:	40000100 	.word	0x40000100
    4f84:	40000004 	.word	0x40000004
    4f88:	20000df8 	.word	0x20000df8

00004f8c <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4f8c:	4b16      	ldr	r3, [pc, #88]	; (4fe8 <nrfx_power_clock_irq_handler+0x5c>)
    4f8e:	681a      	ldr	r2, [r3, #0]
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    4f90:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    4f92:	b16a      	cbz	r2, 4fb0 <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4f94:	2200      	movs	r2, #0
    4f96:	601a      	str	r2, [r3, #0]
    4f98:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    4f9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4f9e:	2201      	movs	r2, #1
    4fa0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    4fa4:	4b11      	ldr	r3, [pc, #68]	; (4fec <nrfx_power_clock_irq_handler+0x60>)
    4fa6:	7958      	ldrb	r0, [r3, #5]
    4fa8:	b910      	cbnz	r0, 4fb0 <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
    4faa:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    4fac:	681b      	ldr	r3, [r3, #0]
    4fae:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4fb0:	4b0f      	ldr	r3, [pc, #60]	; (4ff0 <nrfx_power_clock_irq_handler+0x64>)
    4fb2:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    4fb4:	b172      	cbz	r2, 4fd4 <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4fb6:	2200      	movs	r2, #0
    4fb8:	601a      	str	r2, [r3, #0]
    4fba:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4fbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4fc0:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4fc4:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    4fc8:	0792      	lsls	r2, r2, #30
    4fca:	d104      	bne.n	4fd6 <nrfx_power_clock_irq_handler+0x4a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4fcc:	2201      	movs	r2, #1
    4fce:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4fd2:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    4fd4:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    4fd6:	2202      	movs	r2, #2
    4fd8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    4fdc:	4b03      	ldr	r3, [pc, #12]	; (4fec <nrfx_power_clock_irq_handler+0x60>)
}
    4fde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    4fe2:	681b      	ldr	r3, [r3, #0]
    4fe4:	2001      	movs	r0, #1
    4fe6:	4718      	bx	r3
    4fe8:	40000100 	.word	0x40000100
    4fec:	20000df8 	.word	0x20000df8
    4ff0:	40000104 	.word	0x40000104

00004ff4 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    4ff4:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    4ff6:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    4ffa:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4ffc:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    4ffe:	6002      	str	r2, [r0, #0]
}
    5000:	4802      	ldr	r0, [pc, #8]	; (500c <nrf_gpio_pin_port_decode+0x18>)
    5002:	bf18      	it	ne
    5004:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    5008:	4770      	bx	lr
    500a:	bf00      	nop
    500c:	50000300 	.word	0x50000300

00005010 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    5010:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    5012:	f100 0308 	add.w	r3, r0, #8
    5016:	4c0c      	ldr	r4, [pc, #48]	; (5048 <call_handler+0x38>)
    5018:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    501c:	05da      	lsls	r2, r3, #23
{
    501e:	4605      	mov	r5, r0
    5020:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    5022:	d507      	bpl.n	5034 <call_handler+0x24>
    5024:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    5028:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    502c:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    5030:	6852      	ldr	r2, [r2, #4]
    5032:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    5034:	68a3      	ldr	r3, [r4, #8]
    5036:	b12b      	cbz	r3, 5044 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    5038:	68e2      	ldr	r2, [r4, #12]
    503a:	4631      	mov	r1, r6
    503c:	4628      	mov	r0, r5
    }
}
    503e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    5042:	4718      	bx	r3
}
    5044:	bd70      	pop	{r4, r5, r6, pc}
    5046:	bf00      	nop
    5048:	20000120 	.word	0x20000120

0000504c <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    504c:	4b12      	ldr	r3, [pc, #72]	; (5098 <release_handler+0x4c>)
    504e:	3008      	adds	r0, #8
{
    5050:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    5052:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    5056:	05d1      	lsls	r1, r2, #23
    5058:	d51b      	bpl.n	5092 <release_handler+0x46>
    505a:	f3c2 2143 	ubfx	r1, r2, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    505e:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
    5062:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    5066:	f103 0410 	add.w	r4, r3, #16
    506a:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    506c:	f834 2b02 	ldrh.w	r2, [r4], #2
    5070:	f412 7f80 	tst.w	r2, #256	; 0x100
    5074:	d003      	beq.n	507e <release_handler+0x32>
    5076:	f3c2 2243 	ubfx	r2, r2, #9, #4
    507a:	4291      	cmp	r1, r2
    507c:	d009      	beq.n	5092 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    507e:	3001      	adds	r0, #1
    5080:	2830      	cmp	r0, #48	; 0x30
    5082:	d1f3      	bne.n	506c <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    5084:	2200      	movs	r2, #0
    5086:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    508a:	4804      	ldr	r0, [pc, #16]	; (509c <release_handler+0x50>)
}
    508c:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    508e:	f7ff bed3 	b.w	4e38 <nrfx_flag32_free>
}
    5092:	bc10      	pop	{r4}
    5094:	4770      	bx	lr
    5096:	bf00      	nop
    5098:	20000120 	.word	0x20000120
    509c:	20000194 	.word	0x20000194

000050a0 <pin_handler_trigger_uninit>:
{
    50a0:	b538      	push	{r3, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    50a2:	4c0a      	ldr	r4, [pc, #40]	; (50cc <pin_handler_trigger_uninit+0x2c>)
    50a4:	f100 0508 	add.w	r5, r0, #8
    50a8:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    if (pin_in_use_by_te(pin))
    50ac:	069a      	lsls	r2, r3, #26
    50ae:	d506      	bpl.n	50be <pin_handler_trigger_uninit+0x1e>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    50b0:	0b5b      	lsrs	r3, r3, #13
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    50b2:	4a07      	ldr	r2, [pc, #28]	; (50d0 <pin_handler_trigger_uninit+0x30>)
    50b4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    50b8:	2100      	movs	r1, #0
    50ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    release_handler(pin);
    50be:	f7ff ffc5 	bl	504c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    50c2:	2300      	movs	r3, #0
    50c4:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    50c8:	bd38      	pop	{r3, r4, r5, pc}
    50ca:	bf00      	nop
    50cc:	20000120 	.word	0x20000120
    50d0:	40006000 	.word	0x40006000

000050d4 <nrfx_gpiote_input_configure>:
{
    50d4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    50d8:	461d      	mov	r5, r3
    50da:	4604      	mov	r4, r0
    50dc:	4617      	mov	r7, r2
    if (p_input_config)
    50de:	460b      	mov	r3, r1
    50e0:	b309      	cbz	r1, 5126 <nrfx_gpiote_input_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    50e2:	4e4d      	ldr	r6, [pc, #308]	; (5218 <nrfx_gpiote_input_configure+0x144>)
    50e4:	f100 0808 	add.w	r8, r0, #8
        if (pin_is_task_output(pin))
    50e8:	f836 2018 	ldrh.w	r2, [r6, r8, lsl #1]
    50ec:	f002 0222 	and.w	r2, r2, #34	; 0x22
    50f0:	2a22      	cmp	r2, #34	; 0x22
    50f2:	d103      	bne.n	50fc <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
    50f4:	4849      	ldr	r0, [pc, #292]	; (521c <nrfx_gpiote_input_configure+0x148>)
}
    50f6:	b004      	add	sp, #16
    50f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    50fc:	2200      	movs	r2, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    50fe:	e9cd 2200 	strd	r2, r2, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    5102:	f88d 200e 	strb.w	r2, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    5106:	f88d 200f 	strb.w	r2, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    510a:	f10d 010e 	add.w	r1, sp, #14
    510e:	f10d 020f 	add.w	r2, sp, #15
    5112:	f002 fe41 	bl	7d98 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    5116:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    511a:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    511e:	f043 0301 	orr.w	r3, r3, #1
    5122:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
    5126:	b197      	cbz	r7, 514e <nrfx_gpiote_input_configure+0x7a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5128:	483b      	ldr	r0, [pc, #236]	; (5218 <nrfx_gpiote_input_configure+0x144>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    512a:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    512c:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    512e:	f104 0308 	add.w	r3, r4, #8
    5132:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
        if (pin_is_output(pin))
    5136:	078f      	lsls	r7, r1, #30
    5138:	d50c      	bpl.n	5154 <nrfx_gpiote_input_configure+0x80>
            if (use_evt)
    513a:	2a00      	cmp	r2, #0
    513c:	d1da      	bne.n	50f4 <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    513e:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
    5142:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    5146:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
    514a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
    if (p_handler_config)
    514e:	bbcd      	cbnz	r5, 51c4 <nrfx_gpiote_input_configure+0xf0>
    return NRFX_SUCCESS;
    5150:	4833      	ldr	r0, [pc, #204]	; (5220 <nrfx_gpiote_input_configure+0x14c>)
    5152:	e7d0      	b.n	50f6 <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    5154:	f021 0120 	bic.w	r1, r1, #32
    5158:	04c9      	lsls	r1, r1, #19
    515a:	0cc9      	lsrs	r1, r1, #19
    515c:	f820 1013 	strh.w	r1, [r0, r3, lsl #1]
            if (use_evt)
    5160:	2a00      	cmp	r2, #0
    5162:	d0ec      	beq.n	513e <nrfx_gpiote_input_configure+0x6a>
                if (!edge)
    5164:	2e03      	cmp	r6, #3
    5166:	d8c5      	bhi.n	50f4 <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
    5168:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    516a:	b92e      	cbnz	r6, 5178 <nrfx_gpiote_input_configure+0xa4>
    516c:	4a2d      	ldr	r2, [pc, #180]	; (5224 <nrfx_gpiote_input_configure+0x150>)
    516e:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    5172:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    5176:	e7e2      	b.n	513e <nrfx_gpiote_input_configure+0x6a>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    5178:	00ba      	lsls	r2, r7, #2
    517a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    517e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5182:	ea4f 2e04 	mov.w	lr, r4, lsl #8
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    5186:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    518a:	f02c 0c03 	bic.w	ip, ip, #3
    518e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    5192:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    5196:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
    519a:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    519e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    51a2:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    51a6:	f40e 5e7c 	and.w	lr, lr, #16128	; 0x3f00
    51aa:	ea4c 4c06 	orr.w	ip, ip, r6, lsl #16
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    51ae:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    51b2:	ea4c 0c0e 	orr.w	ip, ip, lr
    51b6:	f041 0120 	orr.w	r1, r1, #32
    51ba:	f820 1013 	strh.w	r1, [r0, r3, lsl #1]
    51be:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    51c2:	e7bc      	b.n	513e <nrfx_gpiote_input_configure+0x6a>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    51c4:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    51c8:	4620      	mov	r0, r4
    51ca:	f7ff ff3f 	bl	504c <release_handler>
    if (!handler)
    51ce:	2e00      	cmp	r6, #0
    51d0:	d0be      	beq.n	5150 <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    51d2:	4d11      	ldr	r5, [pc, #68]	; (5218 <nrfx_gpiote_input_configure+0x144>)
    51d4:	682b      	ldr	r3, [r5, #0]
    51d6:	429e      	cmp	r6, r3
    51d8:	d104      	bne.n	51e4 <nrfx_gpiote_input_configure+0x110>
    51da:	686b      	ldr	r3, [r5, #4]
    51dc:	429f      	cmp	r7, r3
    51de:	d101      	bne.n	51e4 <nrfx_gpiote_input_configure+0x110>
    51e0:	2200      	movs	r2, #0
    51e2:	e009      	b.n	51f8 <nrfx_gpiote_input_configure+0x124>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    51e4:	4810      	ldr	r0, [pc, #64]	; (5228 <nrfx_gpiote_input_configure+0x154>)
    51e6:	f10d 010f 	add.w	r1, sp, #15
    51ea:	f7ff fe01 	bl	4df0 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    51ee:	4b0c      	ldr	r3, [pc, #48]	; (5220 <nrfx_gpiote_input_configure+0x14c>)
    51f0:	4298      	cmp	r0, r3
    51f2:	d180      	bne.n	50f6 <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
    51f4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    51f8:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    51fc:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    5200:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    5202:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    5204:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    5208:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    520c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    5210:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    5214:	e79c      	b.n	5150 <nrfx_gpiote_input_configure+0x7c>
    5216:	bf00      	nop
    5218:	20000120 	.word	0x20000120
    521c:	0bad0004 	.word	0x0bad0004
    5220:	0bad0000 	.word	0x0bad0000
    5224:	40006000 	.word	0x40006000
    5228:	20000194 	.word	0x20000194

0000522c <nrfx_gpiote_output_configure>:
{
    522c:	b5f0      	push	{r4, r5, r6, r7, lr}
    522e:	4604      	mov	r4, r0
    5230:	b085      	sub	sp, #20
    5232:	4615      	mov	r5, r2
    if (p_config)
    5234:	b309      	cbz	r1, 527a <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5236:	f100 0708 	add.w	r7, r0, #8
    523a:	4e31      	ldr	r6, [pc, #196]	; (5300 <nrfx_gpiote_output_configure+0xd4>)
    523c:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    5240:	0798      	lsls	r0, r3, #30
    5242:	d401      	bmi.n	5248 <nrfx_gpiote_output_configure+0x1c>
    5244:	069a      	lsls	r2, r3, #26
    5246:	d458      	bmi.n	52fa <nrfx_gpiote_output_configure+0xce>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    5248:	f013 0f1c 	tst.w	r3, #28
    524c:	d002      	beq.n	5254 <nrfx_gpiote_output_configure+0x28>
    524e:	784b      	ldrb	r3, [r1, #1]
    5250:	2b01      	cmp	r3, #1
    5252:	d052      	beq.n	52fa <nrfx_gpiote_output_configure+0xce>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    5254:	2301      	movs	r3, #1
    5256:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    525a:	2300      	movs	r3, #0
    525c:	e9cd 1300 	strd	r1, r3, [sp]
    5260:	1c4a      	adds	r2, r1, #1
    5262:	1c8b      	adds	r3, r1, #2
    5264:	4620      	mov	r0, r4
    5266:	f10d 010f 	add.w	r1, sp, #15
    526a:	f002 fd95 	bl	7d98 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    526e:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    5272:	f043 0303 	orr.w	r3, r3, #3
    5276:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    527a:	b915      	cbnz	r5, 5282 <nrfx_gpiote_output_configure+0x56>
    return NRFX_SUCCESS;
    527c:	4821      	ldr	r0, [pc, #132]	; (5304 <nrfx_gpiote_output_configure+0xd8>)
}
    527e:	b005      	add	sp, #20
    5280:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5282:	4e1f      	ldr	r6, [pc, #124]	; (5300 <nrfx_gpiote_output_configure+0xd4>)
    5284:	f104 0708 	add.w	r7, r4, #8
    5288:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    528c:	0783      	lsls	r3, r0, #30
    528e:	d534      	bpl.n	52fa <nrfx_gpiote_output_configure+0xce>
        uint32_t ch = p_task_config->task_ch;
    5290:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    5294:	4661      	mov	r1, ip
    5296:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    5298:	f020 0020 	bic.w	r0, r0, #32
    529c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    52a0:	04c0      	lsls	r0, r0, #19
    52a2:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    52a6:	0cc0      	lsrs	r0, r0, #19
    52a8:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    52ac:	2300      	movs	r3, #0
    52ae:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    52b2:	786a      	ldrb	r2, [r5, #1]
    52b4:	2a00      	cmp	r2, #0
    52b6:	d0e1      	beq.n	527c <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    52b8:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    52bc:	78ad      	ldrb	r5, [r5, #2]
    52be:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    52c2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    52c6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    52ca:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    52ce:	0223      	lsls	r3, r4, #8
    52d0:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    52d4:	0412      	lsls	r2, r2, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    52d6:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    52da:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    52de:	052d      	lsls	r5, r5, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    52e0:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    52e2:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    52e6:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    52ea:	432b      	orrs	r3, r5
    52ec:	f040 0020 	orr.w	r0, r0, #32
    52f0:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    52f4:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    52f8:	e7c0      	b.n	527c <nrfx_gpiote_output_configure+0x50>
            return NRFX_ERROR_INVALID_PARAM;
    52fa:	4803      	ldr	r0, [pc, #12]	; (5308 <nrfx_gpiote_output_configure+0xdc>)
    52fc:	e7bf      	b.n	527e <nrfx_gpiote_output_configure+0x52>
    52fe:	bf00      	nop
    5300:	20000120 	.word	0x20000120
    5304:	0bad0000 	.word	0x0bad0000
    5308:	0bad0004 	.word	0x0bad0004

0000530c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    530c:	4b01      	ldr	r3, [pc, #4]	; (5314 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    530e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    5312:	4770      	bx	lr
    5314:	20000120 	.word	0x20000120

00005318 <nrfx_gpiote_channel_get>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    5318:	3008      	adds	r0, #8
    531a:	4b05      	ldr	r3, [pc, #20]	; (5330 <nrfx_gpiote_channel_get+0x18>)
    531c:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    if (pin_in_use_by_te(pin))
    5320:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5322:	bf43      	ittte	mi
    5324:	0b5b      	lsrmi	r3, r3, #13
        return NRFX_SUCCESS;
    5326:	4803      	ldrmi	r0, [pc, #12]	; (5334 <nrfx_gpiote_channel_get+0x1c>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5328:	700b      	strbmi	r3, [r1, #0]
        return NRFX_ERROR_INVALID_PARAM;
    532a:	4803      	ldrpl	r0, [pc, #12]	; (5338 <nrfx_gpiote_channel_get+0x20>)
}
    532c:	4770      	bx	lr
    532e:	bf00      	nop
    5330:	20000120 	.word	0x20000120
    5334:	0bad0000 	.word	0x0bad0000
    5338:	0bad0004 	.word	0x0bad0004

0000533c <nrfx_gpiote_init>:
{
    533c:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    533e:	4c0e      	ldr	r4, [pc, #56]	; (5378 <nrfx_gpiote_init+0x3c>)
    5340:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    5344:	b9b5      	cbnz	r5, 5374 <nrfx_gpiote_init+0x38>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    5346:	2260      	movs	r2, #96	; 0x60
    5348:	4629      	mov	r1, r5
    534a:	f104 0010 	add.w	r0, r4, #16
    534e:	f002 f942 	bl	75d6 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    5352:	2006      	movs	r0, #6
    5354:	f7fd fbd2 	bl	2afc <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5358:	4b08      	ldr	r3, [pc, #32]	; (537c <nrfx_gpiote_init+0x40>)
    return err_code;
    535a:	4809      	ldr	r0, [pc, #36]	; (5380 <nrfx_gpiote_init+0x44>)
    535c:	601d      	str	r5, [r3, #0]
    535e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    5360:	4b08      	ldr	r3, [pc, #32]	; (5384 <nrfx_gpiote_init+0x48>)
    5362:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5366:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    536a:	2301      	movs	r3, #1
    536c:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    5370:	6763      	str	r3, [r4, #116]	; 0x74
}
    5372:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    5374:	4804      	ldr	r0, [pc, #16]	; (5388 <nrfx_gpiote_init+0x4c>)
    5376:	e7fc      	b.n	5372 <nrfx_gpiote_init+0x36>
    5378:	20000120 	.word	0x20000120
    537c:	4000617c 	.word	0x4000617c
    5380:	0bad0000 	.word	0x0bad0000
    5384:	40006000 	.word	0x40006000
    5388:	0bad0005 	.word	0x0bad0005

0000538c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    538c:	4b03      	ldr	r3, [pc, #12]	; (539c <nrfx_gpiote_is_init+0x10>)
    538e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    5392:	3800      	subs	r0, #0
    5394:	bf18      	it	ne
    5396:	2001      	movne	r0, #1
    5398:	4770      	bx	lr
    539a:	bf00      	nop
    539c:	20000120 	.word	0x20000120

000053a0 <nrfx_gpiote_channel_free>:
{
    53a0:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    53a2:	4801      	ldr	r0, [pc, #4]	; (53a8 <nrfx_gpiote_channel_free+0x8>)
    53a4:	f7ff bd48 	b.w	4e38 <nrfx_flag32_free>
    53a8:	20000190 	.word	0x20000190

000053ac <nrfx_gpiote_channel_alloc>:
{
    53ac:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    53ae:	4801      	ldr	r0, [pc, #4]	; (53b4 <nrfx_gpiote_channel_alloc+0x8>)
    53b0:	f7ff bd1e 	b.w	4df0 <nrfx_flag32_alloc>
    53b4:	20000190 	.word	0x20000190

000053b8 <nrfx_gpiote_trigger_enable>:
{
    53b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    53ba:	4b1f      	ldr	r3, [pc, #124]	; (5438 <nrfx_gpiote_trigger_enable+0x80>)
    53bc:	f100 0208 	add.w	r2, r0, #8
{
    53c0:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    53c2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    53c6:	069a      	lsls	r2, r3, #26
    53c8:	d51d      	bpl.n	5406 <nrfx_gpiote_trigger_enable+0x4e>
    53ca:	f013 0502 	ands.w	r5, r3, #2
    53ce:	d11a      	bne.n	5406 <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    53d0:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    53d2:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    53d4:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    53d8:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    53dc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    53e0:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    53e4:	6005      	str	r5, [r0, #0]
    53e6:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    53e8:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    53ec:	f040 0001 	orr.w	r0, r0, #1
    53f0:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    53f4:	b129      	cbz	r1, 5402 <nrfx_gpiote_trigger_enable+0x4a>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    53f6:	2201      	movs	r2, #1
    53f8:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    53fc:	4a0f      	ldr	r2, [pc, #60]	; (543c <nrfx_gpiote_trigger_enable+0x84>)
    53fe:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    5402:	b003      	add	sp, #12
    5404:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5406:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    540a:	2b04      	cmp	r3, #4
    540c:	d010      	beq.n	5430 <nrfx_gpiote_trigger_enable+0x78>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    540e:	2b05      	cmp	r3, #5
    5410:	d010      	beq.n	5434 <nrfx_gpiote_trigger_enable+0x7c>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5412:	a801      	add	r0, sp, #4
    5414:	9401      	str	r4, [sp, #4]
    5416:	f7ff fded 	bl	4ff4 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    541a:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    541c:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    5420:	40d9      	lsrs	r1, r3
    5422:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5426:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    5428:	4620      	mov	r0, r4
    542a:	f002 fcfc 	bl	7e26 <nrf_gpio_cfg_sense_set>
}
    542e:	e7e8      	b.n	5402 <nrfx_gpiote_trigger_enable+0x4a>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    5430:	2103      	movs	r1, #3
    5432:	e7f9      	b.n	5428 <nrfx_gpiote_trigger_enable+0x70>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    5434:	2102      	movs	r1, #2
    5436:	e7f7      	b.n	5428 <nrfx_gpiote_trigger_enable+0x70>
    5438:	20000120 	.word	0x20000120
    543c:	40006000 	.word	0x40006000

00005440 <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    5440:	4b0e      	ldr	r3, [pc, #56]	; (547c <nrfx_gpiote_trigger_disable+0x3c>)
    5442:	f100 0208 	add.w	r2, r0, #8
    5446:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    544a:	0699      	lsls	r1, r3, #26
    544c:	d513      	bpl.n	5476 <nrfx_gpiote_trigger_disable+0x36>
    544e:	079a      	lsls	r2, r3, #30
    5450:	d411      	bmi.n	5476 <nrfx_gpiote_trigger_disable+0x36>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5452:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    5454:	2201      	movs	r2, #1
    5456:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    5458:	009b      	lsls	r3, r3, #2
    545a:	4909      	ldr	r1, [pc, #36]	; (5480 <nrfx_gpiote_trigger_disable+0x40>)
    545c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5460:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    5464:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    5468:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    546c:	f022 0203 	bic.w	r2, r2, #3
    5470:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    5474:	4770      	bx	lr
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    5476:	2100      	movs	r1, #0
    5478:	f002 bcd5 	b.w	7e26 <nrf_gpio_cfg_sense_set>
    547c:	20000120 	.word	0x20000120
    5480:	40006000 	.word	0x40006000

00005484 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    5484:	4b0e      	ldr	r3, [pc, #56]	; (54c0 <nrfx_gpiote_pin_uninit+0x3c>)
    5486:	f100 0208 	add.w	r2, r0, #8
{
    548a:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    548c:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    5490:	07db      	lsls	r3, r3, #31
{
    5492:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    5494:	d511      	bpl.n	54ba <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    5496:	f7ff ffd3 	bl	5440 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    549a:	4620      	mov	r0, r4
    549c:	f7ff fe00 	bl	50a0 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    54a0:	a801      	add	r0, sp, #4
    54a2:	9401      	str	r4, [sp, #4]
    54a4:	f7ff fda6 	bl	4ff4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    54a8:	9b01      	ldr	r3, [sp, #4]
    54aa:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    54ae:	2202      	movs	r2, #2
    54b0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    54b4:	4803      	ldr	r0, [pc, #12]	; (54c4 <nrfx_gpiote_pin_uninit+0x40>)
}
    54b6:	b002      	add	sp, #8
    54b8:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    54ba:	4803      	ldr	r0, [pc, #12]	; (54c8 <nrfx_gpiote_pin_uninit+0x44>)
    54bc:	e7fb      	b.n	54b6 <nrfx_gpiote_pin_uninit+0x32>
    54be:	bf00      	nop
    54c0:	20000120 	.word	0x20000120
    54c4:	0bad0000 	.word	0x0bad0000
    54c8:	0bad0004 	.word	0x0bad0004

000054cc <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    54cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    54d0:	4b64      	ldr	r3, [pc, #400]	; (5664 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
    54d2:	4865      	ldr	r0, [pc, #404]	; (5668 <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    54d4:	4965      	ldr	r1, [pc, #404]	; (566c <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
    54d6:	2500      	movs	r5, #0
{
    54d8:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    54da:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    54dc:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    54de:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    54e0:	b136      	cbz	r6, 54f0 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    54e2:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    54e6:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    54e8:	bf1e      	ittt	ne
    54ea:	601c      	strne	r4, [r3, #0]
    54ec:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    54ee:	4315      	orrne	r5, r2
        }
        mask <<= 1;
    54f0:	3304      	adds	r3, #4
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    54f2:	428b      	cmp	r3, r1
        mask <<= 1;
    54f4:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    54f8:	d1f1      	bne.n	54de <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    54fa:	4f5d      	ldr	r7, [pc, #372]	; (5670 <nrfx_gpiote_irq_handler+0x1a4>)
    54fc:	683b      	ldr	r3, [r7, #0]
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    54fe:	b37b      	cbz	r3, 5560 <nrfx_gpiote_irq_handler+0x94>
        *p_masks = gpio_regs[i]->LATCH;
    5500:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5504:	4e5b      	ldr	r6, [pc, #364]	; (5674 <nrfx_gpiote_irq_handler+0x1a8>)
    5506:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    550a:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    550c:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    5510:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    5514:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    5516:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    551a:	9600      	str	r6, [sp, #0]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    551c:	f10d 0910 	add.w	r9, sp, #16
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5520:	f04f 0800 	mov.w	r8, #0
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    5524:	f04f 0b01 	mov.w	fp, #1
            while (latch[i])
    5528:	f8d9 3000 	ldr.w	r3, [r9]
    552c:	b9f3      	cbnz	r3, 556c <nrfx_gpiote_irq_handler+0xa0>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    552e:	f108 0820 	add.w	r8, r8, #32
    5532:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    5536:	f109 0904 	add.w	r9, r9, #4
    553a:	d1f5      	bne.n	5528 <nrfx_gpiote_irq_handler+0x5c>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    553c:	603b      	str	r3, [r7, #0]
    553e:	683b      	ldr	r3, [r7, #0]
        gpio_regs[i]->LATCH = *p_masks;
    5540:	9900      	ldr	r1, [sp, #0]
        *p_masks = gpio_regs[i]->LATCH;
    5542:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5546:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    554a:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    554c:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    5550:	9b00      	ldr	r3, [sp, #0]
    5552:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
    5556:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    5558:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    555c:	4313      	orrs	r3, r2
    555e:	d1dd      	bne.n	551c <nrfx_gpiote_irq_handler+0x50>
        mask &= ~NRFX_BIT(ch);
    5560:	2401      	movs	r4, #1
    while (mask)
    5562:	2d00      	cmp	r5, #0
    5564:	d166      	bne.n	5634 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    5566:	b007      	add	sp, #28
    5568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    556c:	fa93 f3a3 	rbit	r3, r3
    5570:	fab3 f383 	clz	r3, r3
                pin += 32 * i;
    5574:	eb08 0603 	add.w	r6, r8, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5578:	f106 0208 	add.w	r2, r6, #8
    557c:	4b3e      	ldr	r3, [pc, #248]	; (5678 <nrfx_gpiote_irq_handler+0x1ac>)
    557e:	9603      	str	r6, [sp, #12]
    5580:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
    5584:	f3c2 0382 	ubfx	r3, r2, #2, #3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    5588:	08f4      	lsrs	r4, r6, #3
    558a:	9301      	str	r3, [sp, #4]
    558c:	469a      	mov	sl, r3
    p_mask8[byte_idx] &= ~(1 << bit);
    558e:	ab04      	add	r3, sp, #16
    bit = BITMASK_RELBIT_GET(bit);
    5590:	f006 0007 	and.w	r0, r6, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    5594:	fa0b fc00 	lsl.w	ip, fp, r0
    5598:	5d18      	ldrb	r0, [r3, r4]
    559a:	ea20 000c 	bic.w	r0, r0, ip
    559e:	5518      	strb	r0, [r3, r4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    55a0:	a803      	add	r0, sp, #12
    55a2:	0891      	lsrs	r1, r2, #2
    55a4:	f7ff fd26 	bl	4ff4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    55a8:	9c03      	ldr	r4, [sp, #12]
    55aa:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    if (is_level(trigger))
    55ae:	074b      	lsls	r3, r1, #29
    55b0:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    55b4:	f3c4 4401 	ubfx	r4, r4, #16, #2
    55b8:	d523      	bpl.n	5602 <nrfx_gpiote_irq_handler+0x136>
        call_handler(pin, trigger);
    55ba:	4651      	mov	r1, sl
    55bc:	4630      	mov	r0, r6
    55be:	f7ff fd27 	bl	5010 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    55c2:	a803      	add	r0, sp, #12
    55c4:	9603      	str	r6, [sp, #12]
    55c6:	f7ff fd15 	bl	4ff4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    55ca:	9a03      	ldr	r2, [sp, #12]
    55cc:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    55d0:	b2e4      	uxtb	r4, r4
    55d2:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    55d6:	f3c2 4201 	ubfx	r2, r2, #16, #2
    55da:	4294      	cmp	r4, r2
    55dc:	d107      	bne.n	55ee <nrfx_gpiote_irq_handler+0x122>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    55de:	2100      	movs	r1, #0
    55e0:	4630      	mov	r0, r6
    55e2:	f002 fc20 	bl	7e26 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    55e6:	4621      	mov	r1, r4
    55e8:	4630      	mov	r0, r6
    55ea:	f002 fc1c 	bl	7e26 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    55ee:	a803      	add	r0, sp, #12
    55f0:	9603      	str	r6, [sp, #12]
    55f2:	f7ff fcff 	bl	4ff4 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    55f6:	9b03      	ldr	r3, [sp, #12]
    55f8:	fa0b f303 	lsl.w	r3, fp, r3
    55fc:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
    5600:	e792      	b.n	5528 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5602:	2c02      	cmp	r4, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    5604:	bf0c      	ite	eq
    5606:	2103      	moveq	r1, #3
    5608:	2102      	movne	r1, #2
    560a:	4630      	mov	r0, r6
    560c:	f002 fc0b 	bl	7e26 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    5610:	9b01      	ldr	r3, [sp, #4]
    5612:	2b03      	cmp	r3, #3
    5614:	d004      	beq.n	5620 <nrfx_gpiote_irq_handler+0x154>
    5616:	2c02      	cmp	r4, #2
    5618:	d107      	bne.n	562a <nrfx_gpiote_irq_handler+0x15e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    561a:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    561e:	d1e6      	bne.n	55ee <nrfx_gpiote_irq_handler+0x122>
            call_handler(pin, trigger);
    5620:	4651      	mov	r1, sl
    5622:	4630      	mov	r0, r6
    5624:	f7ff fcf4 	bl	5010 <call_handler>
    5628:	e7e1      	b.n	55ee <nrfx_gpiote_irq_handler+0x122>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    562a:	2c03      	cmp	r4, #3
    562c:	d1df      	bne.n	55ee <nrfx_gpiote_irq_handler+0x122>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    562e:	f1ba 0f02 	cmp.w	sl, #2
    5632:	e7f4      	b.n	561e <nrfx_gpiote_irq_handler+0x152>
        uint32_t ch = NRF_CTZ(mask);
    5634:	fa95 f3a5 	rbit	r3, r5
    5638:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    563c:	fa04 f203 	lsl.w	r2, r4, r3
    5640:	009b      	lsls	r3, r3, #2
    5642:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5646:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    564a:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    564e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    5652:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    5656:	f3c0 2005 	ubfx	r0, r0, #8, #6
    565a:	f3c1 4101 	ubfx	r1, r1, #16, #2
    565e:	f7ff fcd7 	bl	5010 <call_handler>
    5662:	e77e      	b.n	5562 <nrfx_gpiote_irq_handler+0x96>
    5664:	40006100 	.word	0x40006100
    5668:	40006000 	.word	0x40006000
    566c:	40006120 	.word	0x40006120
    5670:	4000617c 	.word	0x4000617c
    5674:	50000300 	.word	0x50000300
    5678:	20000120 	.word	0x20000120

0000567c <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    567c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    567e:	4801      	ldr	r0, [pc, #4]	; (5684 <nrfx_ppi_channel_alloc+0x8>)
    5680:	f7ff bbb6 	b.w	4df0 <nrfx_flag32_alloc>
    5684:	2000019c 	.word	0x2000019c

00005688 <nrfx_pwm_init>:

nrfx_err_t nrfx_pwm_init(nrfx_pwm_t const *        p_instance,
                         nrfx_pwm_config_t const * p_config,
                         nrfx_pwm_handler_t        handler,
                         void *                    p_context)
{
    5688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    NRFX_ASSERT(p_config);

    nrfx_err_t err_code;

    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    568c:	7905      	ldrb	r5, [r0, #4]

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    568e:	4f51      	ldr	r7, [pc, #324]	; (57d4 <nrfx_pwm_init+0x14c>)
    5690:	240c      	movs	r4, #12
    5692:	436c      	muls	r4, r5
    5694:	193e      	adds	r6, r7, r4
{
    5696:	b089      	sub	sp, #36	; 0x24
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    5698:	f896 c008 	ldrb.w	ip, [r6, #8]
{
    569c:	9202      	str	r2, [sp, #8]
    569e:	46b8      	mov	r8, r7
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    56a0:	f1bc 0f00 	cmp.w	ip, #0
    56a4:	f040 8093 	bne.w	57ce <nrfx_pwm_init+0x146>
        return err_code;
    }

    p_cb->handler = handler;
    p_cb->p_context = p_context;
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    56a8:	f891 c00c 	ldrb.w	ip, [r1, #12]
    p_cb->p_context = p_context;
    56ac:	6073      	str	r3, [r6, #4]
    56ae:	7b4b      	ldrb	r3, [r1, #13]
    p_cb->handler = handler;
    56b0:	513a      	str	r2, [r7, r4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    56b2:	f886 c00a 	strb.w	ip, [r6, #10]
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    56b6:	9301      	str	r3, [sp, #4]
    56b8:	f1bc 0f00 	cmp.w	ip, #0
    56bc:	d031      	beq.n	5722 <nrfx_pwm_init+0x9a>
    56be:	b383      	cbz	r3, 5722 <nrfx_pwm_init+0x9a>

    configure_pins(p_instance, p_config);

    nrf_pwm_enable(p_instance->p_registers);
    56c0:	6800      	ldr	r0, [r0, #0]
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
    56c2:	2301      	movs	r3, #1
    56c4:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
    nrf_pwm_configure(p_instance->p_registers,
    56c8:	798c      	ldrb	r4, [r1, #6]
    56ca:	890b      	ldrh	r3, [r1, #8]
    p_reg->PRESCALER  = base_clock;
    56cc:	794e      	ldrb	r6, [r1, #5]
    56ce:	f8c0 650c 	str.w	r6, [r0, #1292]	; 0x50c
    p_reg->MODE       = mode;
    56d2:	f8c0 4504 	str.w	r4, [r0, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    56d6:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508

NRF_STATIC_INLINE void nrf_pwm_decoder_set(NRF_PWM_Type *     p_reg,
                                           nrf_pwm_dec_load_t dec_load,
                                           nrf_pwm_dec_step_t dec_step)
{
    p_reg->DECODER = ((uint32_t)dec_load << PWM_DECODER_LOAD_Pos) |
    56da:	894b      	ldrh	r3, [r1, #10]
    56dc:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
    p_reg->SHORTS = mask;
    56e0:	2300      	movs	r3, #0
    56e2:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    p_reg->INTEN = mask;
    56e6:	f8c0 3300 	str.w	r3, [r0, #768]	; 0x300
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    56ea:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    56ee:	f8d0 111c 	ldr.w	r1, [r0, #284]	; 0x11c
    56f2:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
    56f6:	f8d0 1110 	ldr.w	r1, [r0, #272]	; 0x110
    56fa:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    56fe:	f8d0 1114 	ldr.w	r1, [r0, #276]	; 0x114
    5702:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    5706:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    // handler is not used.
#if defined(USE_DMA_ISSUE_WORKAROUND)
    NRFX_IRQ_PRIORITY_SET(DMA_ISSUE_EGU_IRQn, p_config->irq_priority);
    NRFX_IRQ_ENABLE(DMA_ISSUE_EGU_IRQn);
#else
    if (p_cb->handler)
    570a:	9b02      	ldr	r3, [sp, #8]
    570c:	2b00      	cmp	r3, #0
    570e:	d159      	bne.n	57c4 <nrfx_pwm_init+0x13c>
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_registers),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    5710:	230c      	movs	r3, #12
    5712:	fb03 8505 	mla	r5, r3, r5, r8

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    5716:	4830      	ldr	r0, [pc, #192]	; (57d8 <nrfx_pwm_init+0x150>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    5718:	2301      	movs	r3, #1
    571a:	722b      	strb	r3, [r5, #8]
}
    571c:	b009      	add	sp, #36	; 0x24
    571e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5722:	1ccb      	adds	r3, r1, #3
        case 1: return NRF_P1;
    5724:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 57e0 <nrfx_pwm_init+0x158>
    5728:	9303      	str	r3, [sp, #12]
    572a:	1e4f      	subs	r7, r1, #1
    572c:	ae04      	add	r6, sp, #16
    572e:	f04f 0901 	mov.w	r9, #1
        uint8_t output_pin = p_config->output_pins[i];
    5732:	f817 af01 	ldrb.w	sl, [r7, #1]!
        if (output_pin != NRFX_PWM_PIN_NOT_USED)
    5736:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    573a:	d03f      	beq.n	57bc <nrfx_pwm_init+0x134>
            out_pins[i]   = output_pin & ~NRFX_PWM_PIN_INVERTED;
    573c:	f02a 0380 	bic.w	r3, sl, #128	; 0x80
    5740:	6033      	str	r3, [r6, #0]
            if (!p_config->skip_gpio_cfg)
    5742:	f1bc 0f00 	cmp.w	ip, #0
    5746:	d119      	bne.n	577c <nrfx_pwm_init+0xf4>
    if (value == 0)
    5748:	f01a 0f80 	tst.w	sl, #128	; 0x80
    574c:	f00a 041f 	and.w	r4, sl, #31
    5750:	ea4f 1353 	mov.w	r3, r3, lsr #5
    5754:	d128      	bne.n	57a8 <nrfx_pwm_init+0x120>
        case 1: return NRF_P1;
    5756:	2b01      	cmp	r3, #1
    5758:	bf14      	ite	ne
    575a:	f04f 4aa0 	movne.w	sl, #1342177280	; 0x50000000
    575e:	46f2      	moveq	sl, lr
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    5760:	fa09 fb04 	lsl.w	fp, r9, r4
    p_reg->OUTCLR = clr_mask;
    5764:	f8ca b50c 	str.w	fp, [sl, #1292]	; 0x50c
        case 1: return NRF_P1;
    5768:	2b01      	cmp	r3, #1
    576a:	bf14      	ite	ne
    576c:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    5770:	4673      	moveq	r3, lr
    reg->PIN_CNF[pin_number] = cnf;
    5772:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    5776:	2203      	movs	r2, #3
    5778:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    577c:	9b03      	ldr	r3, [sp, #12]
    577e:	429f      	cmp	r7, r3
    5780:	f106 0604 	add.w	r6, r6, #4
    5784:	d1d5      	bne.n	5732 <nrfx_pwm_init+0xaa>
    if (!p_config->skip_psel_cfg)
    5786:	9b01      	ldr	r3, [sp, #4]
    5788:	2b00      	cmp	r3, #0
    578a:	d199      	bne.n	56c0 <nrfx_pwm_init+0x38>
    578c:	6803      	ldr	r3, [r0, #0]
        p_reg->PSEL.OUT[i] = out_pins[i];
    578e:	9c04      	ldr	r4, [sp, #16]
    5790:	f8c3 4560 	str.w	r4, [r3, #1376]	; 0x560
    5794:	9c05      	ldr	r4, [sp, #20]
    5796:	f8c3 4564 	str.w	r4, [r3, #1380]	; 0x564
    579a:	9c06      	ldr	r4, [sp, #24]
    579c:	f8c3 4568 	str.w	r4, [r3, #1384]	; 0x568
    57a0:	9c07      	ldr	r4, [sp, #28]
    57a2:	f8c3 456c 	str.w	r4, [r3, #1388]	; 0x56c
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    57a6:	e78b      	b.n	56c0 <nrfx_pwm_init+0x38>
        case 1: return NRF_P1;
    57a8:	2b01      	cmp	r3, #1
    57aa:	bf14      	ite	ne
    57ac:	f04f 4aa0 	movne.w	sl, #1342177280	; 0x50000000
    57b0:	46f2      	moveq	sl, lr
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    57b2:	fa09 fb04 	lsl.w	fp, r9, r4
    p_reg->OUTSET = set_mask;
    57b6:	f8ca b508 	str.w	fp, [sl, #1288]	; 0x508
    57ba:	e7d5      	b.n	5768 <nrfx_pwm_init+0xe0>
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
    57bc:	f04f 33ff 	mov.w	r3, #4294967295
    57c0:	6033      	str	r3, [r6, #0]
    57c2:	e7db      	b.n	577c <nrfx_pwm_init+0xf4>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
    57c4:	f340 3007 	sbfx	r0, r0, #12, #8
    57c8:	f7fd f998 	bl	2afc <arch_irq_enable>
    57cc:	e7a0      	b.n	5710 <nrfx_pwm_init+0x88>
        return err_code;
    57ce:	4803      	ldr	r0, [pc, #12]	; (57dc <nrfx_pwm_init+0x154>)
    57d0:	e7a4      	b.n	571c <nrfx_pwm_init+0x94>
    57d2:	bf00      	nop
    57d4:	20000e00 	.word	0x20000e00
    57d8:	0bad0000 	.word	0x0bad0000
    57dc:	0bad0005 	.word	0x0bad0005
    57e0:	50000300 	.word	0x50000300

000057e4 <nrfx_pwm_simple_playback>:

uint32_t nrfx_pwm_simple_playback(nrfx_pwm_t const *         p_instance,
                                  nrf_pwm_sequence_t const * p_sequence,
                                  uint16_t                   playback_count,
                                  uint32_t                   flags)
{
    57e4:	b4f0      	push	{r4, r5, r6, r7}
    57e6:	460d      	mov	r5, r1
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    57e8:	7901      	ldrb	r1, [r0, #4]
    NRFX_ASSERT(playback_count > 0);
    NRFX_ASSERT(nrfx_is_in_ram(p_sequence->values.p_raw));

    // To take advantage of the looping mechanism, we need to use both sequences
    // (single sequence can be played back only once).
    nrf_pwm_sequence_set(p_instance->p_registers, 0, p_sequence);
    57ea:	6800      	ldr	r0, [r0, #0]
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    57ec:	f8d5 c000 	ldr.w	ip, [r5]
    p_reg->SEQ[seq_id].CNT = length;
    57f0:	88af      	ldrh	r7, [r5, #4]
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
    57f2:	68ae      	ldr	r6, [r5, #8]
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    57f4:	f8c0 c520 	str.w	ip, [r0, #1312]	; 0x520
{
    57f8:	461c      	mov	r4, r3
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    57fa:	4b18      	ldr	r3, [pc, #96]	; (585c <nrfx_pwm_simple_playback+0x78>)
    p_reg->SEQ[seq_id].CNT = length;
    57fc:	f8c0 7524 	str.w	r7, [r0, #1316]	; 0x524
    5800:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5804:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
    5808:	68eb      	ldr	r3, [r5, #12]
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    580a:	f8c0 6528 	str.w	r6, [r0, #1320]	; 0x528
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
    580e:	f8c0 352c 	str.w	r3, [r0, #1324]	; 0x52c
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    5812:	f8c0 c540 	str.w	ip, [r0, #1344]	; 0x540
    p_reg->SEQ[seq_id].CNT = length;
    5816:	f8c0 7544 	str.w	r7, [r0, #1348]	; 0x544
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    581a:	f8c0 6548 	str.w	r6, [r0, #1352]	; 0x548
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
    581e:	f8c0 354c 	str.w	r3, [r0, #1356]	; 0x54c
    nrf_pwm_sequence_set(p_instance->p_registers, 1, p_sequence);
    bool odd = (playback_count & 1);
    5822:	f002 0301 	and.w	r3, r2, #1
}

NRF_STATIC_INLINE void nrf_pwm_loop_set(NRF_PWM_Type * p_reg,
                                        uint16_t       loop_count)
{
    p_reg->LOOP = loop_count;
    5826:	eb03 0252 	add.w	r2, r3, r2, lsr #1
    582a:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
    nrf_pwm_loop_set(p_instance->p_registers,
        (playback_count / 2) + (odd ? 1 : 0));

    uint32_t shorts_mask;
    if (flags & NRFX_PWM_FLAG_STOP)
    582e:	07e2      	lsls	r2, r4, #31
    5830:	d411      	bmi.n	5856 <nrfx_pwm_simple_playback+0x72>
    {
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    }
    else if (flags & NRFX_PWM_FLAG_LOOP)
    5832:	f014 0202 	ands.w	r2, r4, #2
    5836:	d003      	beq.n	5840 <nrfx_pwm_simple_playback+0x5c>
    {
        shorts_mask = odd ? NRF_PWM_SHORT_LOOPSDONE_SEQSTART1_MASK
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
    5838:	2b00      	cmp	r3, #0
    583a:	bf14      	ite	ne
    583c:	2208      	movne	r2, #8
    583e:	2204      	moveq	r2, #4
                  __func__,
                  p_sequence->length);
    NRFX_LOG_DEBUG("Sequence data:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_sequence->values.p_raw,
                           p_sequence->length * sizeof(uint16_t));
    return start_playback(p_instance, p_cb, flags,
    5840:	2b00      	cmp	r3, #0
    p_reg->SHORTS = mask;
    5842:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    5846:	bf18      	it	ne
    5848:	230c      	movne	r3, #12
    584a:	b2e2      	uxtb	r2, r4
    584c:	bf08      	it	eq
    584e:	2308      	moveq	r3, #8
        odd ? NRF_PWM_TASK_SEQSTART1 : NRF_PWM_TASK_SEQSTART0);
}
    5850:	bcf0      	pop	{r4, r5, r6, r7}
    return start_playback(p_instance, p_cb, flags,
    5852:	f002 baf7 	b.w	7e44 <start_playback.isra.0>
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    5856:	2210      	movs	r2, #16
    5858:	e7f2      	b.n	5840 <nrfx_pwm_simple_playback+0x5c>
    585a:	bf00      	nop
    585c:	20000e00 	.word	0x20000e00

00005860 <nrfx_pwm_is_stopped>:

    bool ret_val = false;

    // If the event handler is used (interrupts are enabled), the state will
    // be changed in interrupt handler when the STOPPED event occurs.
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    5860:	4b08      	ldr	r3, [pc, #32]	; (5884 <nrfx_pwm_is_stopped+0x24>)
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    5862:	7902      	ldrb	r2, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    5864:	210c      	movs	r1, #12
    5866:	fb01 3202 	mla	r2, r1, r2, r3
    {
        ret_val = true;
    }
    // If interrupts are disabled, we must check the STOPPED event here.
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
    586a:	6801      	ldr	r1, [r0, #0]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    586c:	7a13      	ldrb	r3, [r2, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    586e:	f8d1 1104 	ldr.w	r1, [r1, #260]	; 0x104
    5872:	b2db      	uxtb	r3, r3
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
    5874:	b919      	cbnz	r1, 587e <nrfx_pwm_is_stopped+0x1e>
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    5876:	1e98      	subs	r0, r3, #2
    5878:	bf18      	it	ne
    587a:	2001      	movne	r0, #1
    587c:	4770      	bx	lr
    {
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    587e:	2001      	movs	r0, #1
    5880:	7210      	strb	r0, [r2, #8]
        ret_val = true;
    }

    NRFX_LOG_INFO("%s returned %d.", __func__, ret_val);
    return ret_val;
}
    5882:	4770      	bx	lr
    5884:	20000e00 	.word	0x20000e00

00005888 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    5888:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    588a:	4c14      	ldr	r4, [pc, #80]	; (58dc <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    588c:	4a14      	ldr	r2, [pc, #80]	; (58e0 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    588e:	4915      	ldr	r1, [pc, #84]	; (58e4 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    5890:	2303      	movs	r3, #3
    5892:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    5894:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    5896:	4b14      	ldr	r3, [pc, #80]	; (58e8 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
    5898:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    589a:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    589c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    58a0:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    58a2:	2300      	movs	r3, #0
    58a4:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    58a6:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    58a8:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    58aa:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    58ac:	4a0f      	ldr	r2, [pc, #60]	; (58ec <_DoInit+0x64>)
    58ae:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    58b0:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    58b2:	2210      	movs	r2, #16
    58b4:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    58b6:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    58b8:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    58ba:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    58bc:	f001 fe5a 	bl	7574 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    58c0:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    58c4:	490a      	ldr	r1, [pc, #40]	; (58f0 <_DoInit+0x68>)
    58c6:	4620      	mov	r0, r4
    58c8:	f001 fe54 	bl	7574 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    58cc:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    58d0:	2320      	movs	r3, #32
    58d2:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    58d4:	f3bf 8f5f 	dmb	sy
}
    58d8:	bd10      	pop	{r4, pc}
    58da:	bf00      	nop
    58dc:	20000e0c 	.word	0x20000e0c
    58e0:	00008d9d 	.word	0x00008d9d
    58e4:	00008da6 	.word	0x00008da6
    58e8:	20000f41 	.word	0x20000f41
    58ec:	20000f31 	.word	0x20000f31
    58f0:	00008daa 	.word	0x00008daa

000058f4 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    58f4:	4b0e      	ldr	r3, [pc, #56]	; (5930 <z_sys_init_run_level+0x3c>)
{
    58f6:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    58f8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    58fc:	3001      	adds	r0, #1
    58fe:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    5902:	42a6      	cmp	r6, r4
    5904:	d800      	bhi.n	5908 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    5906:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    5908:	e9d4 3500 	ldrd	r3, r5, [r4]
    590c:	4628      	mov	r0, r5
    590e:	4798      	blx	r3
		if (dev != NULL) {
    5910:	b165      	cbz	r5, 592c <z_sys_init_run_level+0x38>
			if (rc != 0) {
    5912:	68eb      	ldr	r3, [r5, #12]
    5914:	b130      	cbz	r0, 5924 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    5916:	2800      	cmp	r0, #0
    5918:	bfb8      	it	lt
    591a:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    591c:	28ff      	cmp	r0, #255	; 0xff
    591e:	bfa8      	it	ge
    5920:	20ff      	movge	r0, #255	; 0xff
    5922:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    5924:	785a      	ldrb	r2, [r3, #1]
    5926:	f042 0201 	orr.w	r2, r2, #1
    592a:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    592c:	3408      	adds	r4, #8
    592e:	e7e8      	b.n	5902 <z_sys_init_run_level+0xe>
    5930:	0000886c 	.word	0x0000886c

00005934 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    5934:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    5936:	4605      	mov	r5, r0
    5938:	b910      	cbnz	r0, 5940 <z_impl_device_get_binding+0xc>
		return NULL;
    593a:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    593c:	4620      	mov	r0, r4
    593e:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    5940:	7803      	ldrb	r3, [r0, #0]
    5942:	2b00      	cmp	r3, #0
    5944:	d0f9      	beq.n	593a <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    5946:	4a0f      	ldr	r2, [pc, #60]	; (5984 <z_impl_device_get_binding+0x50>)
    5948:	4c0f      	ldr	r4, [pc, #60]	; (5988 <z_impl_device_get_binding+0x54>)
    594a:	4616      	mov	r6, r2
    594c:	4294      	cmp	r4, r2
    594e:	d108      	bne.n	5962 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    5950:	4c0d      	ldr	r4, [pc, #52]	; (5988 <z_impl_device_get_binding+0x54>)
    5952:	42b4      	cmp	r4, r6
    5954:	d0f1      	beq.n	593a <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    5956:	4620      	mov	r0, r4
    5958:	f002 fab5 	bl	7ec6 <z_device_ready>
    595c:	b950      	cbnz	r0, 5974 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
    595e:	3418      	adds	r4, #24
    5960:	e7f7      	b.n	5952 <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
    5962:	4620      	mov	r0, r4
    5964:	f002 faaf 	bl	7ec6 <z_device_ready>
    5968:	b110      	cbz	r0, 5970 <z_impl_device_get_binding+0x3c>
    596a:	6823      	ldr	r3, [r4, #0]
    596c:	42ab      	cmp	r3, r5
    596e:	d0e5      	beq.n	593c <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    5970:	3418      	adds	r4, #24
    5972:	e7eb      	b.n	594c <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    5974:	6821      	ldr	r1, [r4, #0]
    5976:	4628      	mov	r0, r5
    5978:	f001 fe16 	bl	75a8 <strcmp>
    597c:	2800      	cmp	r0, #0
    597e:	d1ee      	bne.n	595e <z_impl_device_get_binding+0x2a>
    5980:	e7dc      	b.n	593c <z_impl_device_get_binding+0x8>
    5982:	bf00      	nop
    5984:	00008518 	.word	0x00008518
    5988:	00008470 	.word	0x00008470

0000598c <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    598c:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    598e:	2300      	movs	r3, #0
{
    5990:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
    5992:	2201      	movs	r2, #1
    5994:	e9cd 2304 	strd	r2, r3, [sp, #16]
    5998:	220f      	movs	r2, #15
    599a:	e9cd 3202 	strd	r3, r2, [sp, #8]
	struct k_thread *thread = &z_idle_threads[i];
    599e:	4c0d      	ldr	r4, [pc, #52]	; (59d4 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    59a0:	4a0d      	ldr	r2, [pc, #52]	; (59d8 <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
    59a2:	9301      	str	r3, [sp, #4]
    59a4:	490d      	ldr	r1, [pc, #52]	; (59dc <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    59a6:	2318      	movs	r3, #24
	struct k_thread *thread = &z_idle_threads[i];
    59a8:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    59ac:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
    59b0:	f44f 75b0 	mov.w	r5, #352	; 0x160
    59b4:	9300      	str	r3, [sp, #0]
    59b6:	fb05 1100 	mla	r1, r5, r0, r1
    59ba:	4b09      	ldr	r3, [pc, #36]	; (59e0 <init_idle_thread+0x54>)
    59bc:	f44f 72a0 	mov.w	r2, #320	; 0x140
    59c0:	4620      	mov	r0, r4
    59c2:	f000 f8f7 	bl	5bb4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    59c6:	7b63      	ldrb	r3, [r4, #13]
    59c8:	f023 0304 	bic.w	r3, r3, #4
    59cc:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    59ce:	b007      	add	sp, #28
    59d0:	bd30      	pop	{r4, r5, pc}
    59d2:	bf00      	nop
    59d4:	200005c8 	.word	0x200005c8
    59d8:	20000eb4 	.word	0x20000eb4
    59dc:	20002580 	.word	0x20002580
    59e0:	00005d2d 	.word	0x00005d2d

000059e4 <bg_thread_main>:
{
    59e4:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    59e6:	4b0a      	ldr	r3, [pc, #40]	; (5a10 <bg_thread_main+0x2c>)
    59e8:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    59ea:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    59ec:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    59ee:	f7ff ff81 	bl	58f4 <z_sys_init_run_level>
	boot_banner();
    59f2:	f001 f887 	bl	6b04 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    59f6:	2003      	movs	r0, #3
    59f8:	f7ff ff7c 	bl	58f4 <z_sys_init_run_level>
	z_init_static_threads();
    59fc:	f000 f938 	bl	5c70 <z_init_static_threads>
	main();
    5a00:	f7fb f94c 	bl	c9c <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    5a04:	4a03      	ldr	r2, [pc, #12]	; (5a14 <bg_thread_main+0x30>)
    5a06:	7b13      	ldrb	r3, [r2, #12]
    5a08:	f023 0301 	bic.w	r3, r3, #1
    5a0c:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    5a0e:	bd08      	pop	{r3, pc}
    5a10:	20001341 	.word	0x20001341
    5a14:	20000648 	.word	0x20000648

00005a18 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    5a18:	4802      	ldr	r0, [pc, #8]	; (5a24 <z_bss_zero+0xc>)
    5a1a:	4a03      	ldr	r2, [pc, #12]	; (5a28 <z_bss_zero+0x10>)
    5a1c:	2100      	movs	r1, #0
    5a1e:	1a12      	subs	r2, r2, r0
    5a20:	f001 bdd9 	b.w	75d6 <memset>
    5a24:	20000278 	.word	0x20000278
    5a28:	20001500 	.word	0x20001500

00005a2c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    5a2c:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    5a2e:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 5b08 <z_cstart+0xdc>
    5a32:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    5a34:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    5a38:	4d2d      	ldr	r5, [pc, #180]	; (5af0 <z_cstart+0xc4>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    5a3a:	4e2e      	ldr	r6, [pc, #184]	; (5af4 <z_cstart+0xc8>)
    5a3c:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    5a3e:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 5b0c <z_cstart+0xe0>
    5a42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5a46:	2400      	movs	r4, #0
    5a48:	616b      	str	r3, [r5, #20]
    5a4a:	23e0      	movs	r3, #224	; 0xe0
    5a4c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    5a50:	77ec      	strb	r4, [r5, #31]
    5a52:	762c      	strb	r4, [r5, #24]
    5a54:	766c      	strb	r4, [r5, #25]
    5a56:	76ac      	strb	r4, [r5, #26]
    5a58:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    5a5c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    5a5e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    5a62:	626b      	str	r3, [r5, #36]	; 0x24
    5a64:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    5a68:	f7fd fa56 	bl	2f18 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    5a6c:	f7fd f828 	bl	2ac0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    5a70:	f04f 33ff 	mov.w	r3, #4294967295
    5a74:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    5a76:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    5a78:	f7fd fb78 	bl	316c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    5a7c:	f7fd fae8 	bl	3050 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    5a80:	f240 1301 	movw	r3, #257	; 0x101
    5a84:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    5a88:	ab06      	add	r3, sp, #24
    5a8a:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    5a8c:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    5a90:	f002 fa18 	bl	7ec4 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    5a94:	4620      	mov	r0, r4
    5a96:	f7ff ff2d 	bl	58f4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    5a9a:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    5a9c:	4d16      	ldr	r5, [pc, #88]	; (5af8 <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    5a9e:	f7ff ff29 	bl	58f4 <z_sys_init_run_level>
	z_sched_init();
    5aa2:	f000 fcbd 	bl	6420 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    5aa6:	4b15      	ldr	r3, [pc, #84]	; (5afc <z_cstart+0xd0>)
    5aa8:	9305      	str	r3, [sp, #20]
    5aaa:	2301      	movs	r3, #1
    5aac:	4914      	ldr	r1, [pc, #80]	; (5b00 <z_cstart+0xd4>)
    5aae:	9400      	str	r4, [sp, #0]
    5ab0:	e9cd 4303 	strd	r4, r3, [sp, #12]
    5ab4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5ab8:	464b      	mov	r3, r9
    5aba:	e9cd 4401 	strd	r4, r4, [sp, #4]
    5abe:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
    5ac0:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    5ac2:	f000 f877 	bl	5bb4 <z_setup_new_thread>
    5ac6:	7b6a      	ldrb	r2, [r5, #13]
    5ac8:	f022 0204 	bic.w	r2, r2, #4
    5acc:	736a      	strb	r2, [r5, #13]
    5ace:	4607      	mov	r7, r0
	z_ready_thread(&z_main_thread);
    5ad0:	4628      	mov	r0, r5
    5ad2:	f002 fae0 	bl	8096 <z_ready_thread>
		init_idle_thread(i);
    5ad6:	4620      	mov	r0, r4
    5ad8:	f7ff ff58 	bl	598c <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    5adc:	4b09      	ldr	r3, [pc, #36]	; (5b04 <z_cstart+0xd8>)
    5ade:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    5ae0:	464a      	mov	r2, r9
    5ae2:	4639      	mov	r1, r7
    5ae4:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
    5ae6:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
    5ae8:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    5aec:	f7fd f8e6 	bl	2cbc <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    5af0:	e000ed00 	.word	0xe000ed00
    5af4:	20000eb4 	.word	0x20000eb4
    5af8:	20000648 	.word	0x20000648
    5afc:	00008db1 	.word	0x00008db1
    5b00:	20002160 	.word	0x20002160
    5b04:	200005c8 	.word	0x200005c8
    5b08:	20002f00 	.word	0x20002f00
    5b0c:	000059e5 	.word	0x000059e5

00005b10 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    5b10:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5b12:	4b0e      	ldr	r3, [pc, #56]	; (5b4c <init_mem_slab_module+0x3c>)
    5b14:	4c0e      	ldr	r4, [pc, #56]	; (5b50 <init_mem_slab_module+0x40>)
    5b16:	42a3      	cmp	r3, r4
    5b18:	d301      	bcc.n	5b1e <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
    5b1a:	2000      	movs	r0, #0
	return rc;
}
    5b1c:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    5b1e:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    5b22:	ea41 0200 	orr.w	r2, r1, r0
    5b26:	f012 0203 	ands.w	r2, r2, #3
    5b2a:	d10b      	bne.n	5b44 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    5b2c:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    5b2e:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    5b30:	42aa      	cmp	r2, r5
    5b32:	d101      	bne.n	5b38 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5b34:	331c      	adds	r3, #28
    5b36:	e7ee      	b.n	5b16 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    5b38:	695e      	ldr	r6, [r3, #20]
    5b3a:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    5b3c:	3201      	adds	r2, #1
		slab->free_list = p;
    5b3e:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    5b40:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    5b42:	e7f5      	b.n	5b30 <init_mem_slab_module+0x20>
		return -EINVAL;
    5b44:	f06f 0015 	mvn.w	r0, #21
	return rc;
    5b48:	e7e8      	b.n	5b1c <init_mem_slab_module+0xc>
    5b4a:	bf00      	nop
    5b4c:	20000224 	.word	0x20000224
    5b50:	20000224 	.word	0x20000224

00005b54 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    5b54:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
    5b56:	460c      	mov	r4, r1
    5b58:	4616      	mov	r6, r2
    5b5a:	461f      	mov	r7, r3
	__asm__ volatile(
    5b5c:	f04f 0320 	mov.w	r3, #32
    5b60:	f3ef 8111 	mrs	r1, BASEPRI
    5b64:	f383 8812 	msr	BASEPRI_MAX, r3
    5b68:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    5b6c:	6943      	ldr	r3, [r0, #20]
    5b6e:	b15b      	cbz	r3, 5b88 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
    5b70:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    5b72:	681b      	ldr	r3, [r3, #0]
    5b74:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    5b76:	6983      	ldr	r3, [r0, #24]
    5b78:	3301      	adds	r3, #1
    5b7a:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    5b7c:	2000      	movs	r0, #0
	__asm__ volatile(
    5b7e:	f381 8811 	msr	BASEPRI, r1
    5b82:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    5b86:	e011      	b.n	5bac <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    5b88:	ea56 0207 	orrs.w	r2, r6, r7
    5b8c:	d103      	bne.n	5b96 <k_mem_slab_alloc+0x42>
		*mem = NULL;
    5b8e:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    5b90:	f06f 000b 	mvn.w	r0, #11
    5b94:	e7f3      	b.n	5b7e <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    5b96:	4602      	mov	r2, r0
    5b98:	e9cd 6700 	strd	r6, r7, [sp]
    5b9c:	3008      	adds	r0, #8
    5b9e:	f000 fb91 	bl	62c4 <z_pend_curr>
		if (result == 0) {
    5ba2:	b918      	cbnz	r0, 5bac <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
    5ba4:	4b02      	ldr	r3, [pc, #8]	; (5bb0 <k_mem_slab_alloc+0x5c>)
    5ba6:	689b      	ldr	r3, [r3, #8]
    5ba8:	695b      	ldr	r3, [r3, #20]
    5baa:	6023      	str	r3, [r4, #0]
}
    5bac:	b002      	add	sp, #8
    5bae:	bdd0      	pop	{r4, r6, r7, pc}
    5bb0:	20000eb4 	.word	0x20000eb4

00005bb4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    5bb4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    5bb8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    5bba:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    5bbc:	2604      	movs	r6, #4
    5bbe:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    5bc0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    5bc2:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    5bc4:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    5bc8:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    5bca:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    5bcc:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5bd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    5bd2:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    5bd4:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    5bd8:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    5bda:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    5bde:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
    5be2:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    5be4:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    5be6:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    5be8:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5bec:	9202      	str	r2, [sp, #8]
    5bee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    5bf0:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    5bf2:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5bf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5bf6:	9200      	str	r2, [sp, #0]
    5bf8:	4642      	mov	r2, r8
{
    5bfa:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5bfc:	f7fd f828 	bl	2c50 <arch_new_thread>
	if (!_current) {
    5c00:	4b04      	ldr	r3, [pc, #16]	; (5c14 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    5c02:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    5c04:	689b      	ldr	r3, [r3, #8]
    5c06:	b103      	cbz	r3, 5c0a <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    5c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
    5c0a:	6763      	str	r3, [r4, #116]	; 0x74
}
    5c0c:	4640      	mov	r0, r8
    5c0e:	b004      	add	sp, #16
    5c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5c14:	20000eb4 	.word	0x20000eb4

00005c18 <z_impl_k_thread_create>:
{
    5c18:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c1a:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5c1c:	2500      	movs	r5, #0
    5c1e:	9505      	str	r5, [sp, #20]
    5c20:	9d10      	ldr	r5, [sp, #64]	; 0x40
    5c22:	9504      	str	r5, [sp, #16]
    5c24:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    5c26:	9503      	str	r5, [sp, #12]
    5c28:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    5c2a:	9502      	str	r5, [sp, #8]
{
    5c2c:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5c30:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    5c32:	9501      	str	r5, [sp, #4]
    5c34:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    5c36:	9500      	str	r5, [sp, #0]
{
    5c38:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5c3a:	f7ff ffbb 	bl	5bb4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    5c3e:	1c7b      	adds	r3, r7, #1
    5c40:	bf08      	it	eq
    5c42:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    5c46:	d005      	beq.n	5c54 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5c48:	ea56 0307 	orrs.w	r3, r6, r7
    5c4c:	d105      	bne.n	5c5a <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
    5c4e:	4620      	mov	r0, r4
    5c50:	f000 fadc 	bl	620c <z_sched_start>
}
    5c54:	4620      	mov	r0, r4
    5c56:	b007      	add	sp, #28
    5c58:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    5c5a:	4904      	ldr	r1, [pc, #16]	; (5c6c <z_impl_k_thread_create+0x54>)
    5c5c:	4632      	mov	r2, r6
    5c5e:	463b      	mov	r3, r7
    5c60:	f104 0018 	add.w	r0, r4, #24
    5c64:	f000 fd74 	bl	6750 <z_add_timeout>
    5c68:	e7f4      	b.n	5c54 <z_impl_k_thread_create+0x3c>
    5c6a:	bf00      	nop
    5c6c:	000080b7 	.word	0x000080b7

00005c70 <z_init_static_threads>:
{
    5c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    5c74:	4e2a      	ldr	r6, [pc, #168]	; (5d20 <z_init_static_threads+0xb0>)
    5c76:	4d2b      	ldr	r5, [pc, #172]	; (5d24 <z_init_static_threads+0xb4>)
{
    5c78:	b086      	sub	sp, #24
    5c7a:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
    5c7c:	42b5      	cmp	r5, r6
    5c7e:	f105 0430 	add.w	r4, r5, #48	; 0x30
    5c82:	d310      	bcc.n	5ca6 <z_init_static_threads+0x36>
	k_sched_lock();
    5c84:	f000 f9d6 	bl	6034 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    5c88:	4c26      	ldr	r4, [pc, #152]	; (5d24 <z_init_static_threads+0xb4>)
    5c8a:	f8df a09c 	ldr.w	sl, [pc, #156]	; 5d28 <z_init_static_threads+0xb8>
    5c8e:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    5c92:	f240 36e7 	movw	r6, #999	; 0x3e7
    5c96:	2700      	movs	r7, #0
    5c98:	4544      	cmp	r4, r8
    5c9a:	d321      	bcc.n	5ce0 <z_init_static_threads+0x70>
}
    5c9c:	b006      	add	sp, #24
    5c9e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
    5ca2:	f000 bba1 	b.w	63e8 <k_sched_unlock>
		z_setup_new_thread(
    5ca6:	f854 3c04 	ldr.w	r3, [r4, #-4]
    5caa:	9305      	str	r3, [sp, #20]
    5cac:	f854 3c10 	ldr.w	r3, [r4, #-16]
    5cb0:	9304      	str	r3, [sp, #16]
    5cb2:	f854 3c14 	ldr.w	r3, [r4, #-20]
    5cb6:	9303      	str	r3, [sp, #12]
    5cb8:	f854 3c18 	ldr.w	r3, [r4, #-24]
    5cbc:	9302      	str	r3, [sp, #8]
    5cbe:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    5cc2:	9301      	str	r3, [sp, #4]
    5cc4:	f854 3c20 	ldr.w	r3, [r4, #-32]
    5cc8:	9300      	str	r3, [sp, #0]
    5cca:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    5cce:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    5cd2:	f7ff ff6f 	bl	5bb4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    5cd6:	f854 3c30 	ldr.w	r3, [r4, #-48]
    5cda:	655d      	str	r5, [r3, #84]	; 0x54
    5cdc:	4625      	mov	r5, r4
    5cde:	e7cd      	b.n	5c7c <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    5ce0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5ce2:	1c5a      	adds	r2, r3, #1
    5ce4:	d00d      	beq.n	5d02 <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
    5ce6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    5cea:	4630      	mov	r0, r6
    5cec:	4639      	mov	r1, r7
    5cee:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5cf2:	42b9      	cmp	r1, r7
    5cf4:	bf08      	it	eq
    5cf6:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
    5cf8:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5cfa:	d104      	bne.n	5d06 <z_init_static_threads+0x96>
	z_sched_start(thread);
    5cfc:	4628      	mov	r0, r5
    5cfe:	f000 fa85 	bl	620c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    5d02:	3430      	adds	r4, #48	; 0x30
    5d04:	e7c8      	b.n	5c98 <z_init_static_threads+0x28>
    5d06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5d0a:	2300      	movs	r3, #0
    5d0c:	f7fa fe32 	bl	974 <__aeabi_uldivmod>
    5d10:	4602      	mov	r2, r0
    5d12:	460b      	mov	r3, r1
    5d14:	f105 0018 	add.w	r0, r5, #24
    5d18:	4651      	mov	r1, sl
    5d1a:	f000 fd19 	bl	6750 <z_add_timeout>
    5d1e:	e7f0      	b.n	5d02 <z_init_static_threads+0x92>
    5d20:	20000224 	.word	0x20000224
    5d24:	20000224 	.word	0x20000224
    5d28:	000080b7 	.word	0x000080b7

00005d2c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    5d2c:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    5d2e:	4c09      	ldr	r4, [pc, #36]	; (5d54 <idle+0x28>)
	__asm__ volatile(
    5d30:	f04f 0220 	mov.w	r2, #32
    5d34:	f3ef 8311 	mrs	r3, BASEPRI
    5d38:	f382 8812 	msr	BASEPRI_MAX, r2
    5d3c:	f3bf 8f6f 	isb	sy
    5d40:	f002 fa68 	bl	8214 <z_get_next_timeout_expiry>
    5d44:	61a0      	str	r0, [r4, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
    5d46:	f7fc fd71 	bl	282c <pm_system_suspend>
    5d4a:	2800      	cmp	r0, #0
    5d4c:	d1f0      	bne.n	5d30 <idle+0x4>
	arch_cpu_idle();
    5d4e:	f7fc febd 	bl	2acc <arch_cpu_idle>
}
    5d52:	e7ed      	b.n	5d30 <idle+0x4>
    5d54:	20000eb4 	.word	0x20000eb4

00005d58 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    5d58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5d5c:	4604      	mov	r4, r0
    5d5e:	4616      	mov	r6, r2
    5d60:	461f      	mov	r7, r3
    5d62:	f04f 0320 	mov.w	r3, #32
    5d66:	f3ef 8811 	mrs	r8, BASEPRI
    5d6a:	f383 8812 	msr	BASEPRI_MAX, r3
    5d6e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    5d72:	68c3      	ldr	r3, [r0, #12]
    5d74:	4a35      	ldr	r2, [pc, #212]	; (5e4c <z_impl_k_mutex_lock+0xf4>)
    5d76:	b16b      	cbz	r3, 5d94 <z_impl_k_mutex_lock+0x3c>
    5d78:	6880      	ldr	r0, [r0, #8]
    5d7a:	6891      	ldr	r1, [r2, #8]
    5d7c:	4288      	cmp	r0, r1
    5d7e:	d019      	beq.n	5db4 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    5d80:	ea56 0307 	orrs.w	r3, r6, r7
    5d84:	d118      	bne.n	5db8 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    5d86:	f388 8811 	msr	BASEPRI, r8
    5d8a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    5d8e:	f06f 000f 	mvn.w	r0, #15
    5d92:	e00c      	b.n	5dae <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    5d94:	6891      	ldr	r1, [r2, #8]
    5d96:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    5d9a:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    5d9c:	3301      	adds	r3, #1
    5d9e:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    5da0:	6893      	ldr	r3, [r2, #8]
    5da2:	60a3      	str	r3, [r4, #8]
    5da4:	f388 8811 	msr	BASEPRI, r8
    5da8:	f3bf 8f6f 	isb	sy
		return 0;
    5dac:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    5dae:	b002      	add	sp, #8
    5db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    5db4:	6921      	ldr	r1, [r4, #16]
    5db6:	e7f0      	b.n	5d9a <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    5db8:	f991 100e 	ldrsb.w	r1, [r1, #14]
    5dbc:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    5dc0:	4299      	cmp	r1, r3
    5dc2:	bfa8      	it	ge
    5dc4:	4619      	movge	r1, r3
    5dc6:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    5dca:	4291      	cmp	r1, r2
    5dcc:	bfb8      	it	lt
    5dce:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    5dd0:	428b      	cmp	r3, r1
    5dd2:	dd2f      	ble.n	5e34 <z_impl_k_mutex_lock+0xdc>
		return z_set_prio(mutex->owner, new_prio);
    5dd4:	f000 fa8a 	bl	62ec <z_set_prio>
    5dd8:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    5dda:	e9cd 6700 	strd	r6, r7, [sp]
    5dde:	481c      	ldr	r0, [pc, #112]	; (5e50 <z_impl_k_mutex_lock+0xf8>)
    5de0:	4622      	mov	r2, r4
    5de2:	4641      	mov	r1, r8
    5de4:	f000 fa6e 	bl	62c4 <z_pend_curr>
	if (got_mutex == 0) {
    5de8:	2800      	cmp	r0, #0
    5dea:	d0e0      	beq.n	5dae <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    5dec:	f04f 0320 	mov.w	r3, #32
    5df0:	f3ef 8611 	mrs	r6, BASEPRI
    5df4:	f383 8812 	msr	BASEPRI_MAX, r3
    5df8:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    5dfc:	6823      	ldr	r3, [r4, #0]
    5dfe:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5e00:	429c      	cmp	r4, r3
    5e02:	d00a      	beq.n	5e1a <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    5e04:	b14b      	cbz	r3, 5e1a <z_impl_k_mutex_lock+0xc2>
    5e06:	f993 300e 	ldrsb.w	r3, [r3, #14]
    5e0a:	4299      	cmp	r1, r3
    5e0c:	bfa8      	it	ge
    5e0e:	4619      	movge	r1, r3
    5e10:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    5e14:	4299      	cmp	r1, r3
    5e16:	bfb8      	it	lt
    5e18:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    5e1a:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    5e1c:	f990 300e 	ldrsb.w	r3, [r0, #14]
    5e20:	4299      	cmp	r1, r3
    5e22:	d109      	bne.n	5e38 <z_impl_k_mutex_lock+0xe0>
	if (resched) {
    5e24:	b16d      	cbz	r5, 5e42 <z_impl_k_mutex_lock+0xea>
		z_reschedule(&lock, key);
    5e26:	480a      	ldr	r0, [pc, #40]	; (5e50 <z_impl_k_mutex_lock+0xf8>)
    5e28:	4631      	mov	r1, r6
    5e2a:	f000 f8f1 	bl	6010 <z_reschedule>
	return -EAGAIN;
    5e2e:	f06f 000a 	mvn.w	r0, #10
    5e32:	e7bc      	b.n	5dae <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    5e34:	2500      	movs	r5, #0
    5e36:	e7d0      	b.n	5dda <z_impl_k_mutex_lock+0x82>
		return z_set_prio(mutex->owner, new_prio);
    5e38:	f000 fa58 	bl	62ec <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    5e3c:	2800      	cmp	r0, #0
    5e3e:	d1f2      	bne.n	5e26 <z_impl_k_mutex_lock+0xce>
    5e40:	e7f0      	b.n	5e24 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    5e42:	f386 8811 	msr	BASEPRI, r6
    5e46:	f3bf 8f6f 	isb	sy
    5e4a:	e7f0      	b.n	5e2e <z_impl_k_mutex_lock+0xd6>
    5e4c:	20000eb4 	.word	0x20000eb4
    5e50:	20001342 	.word	0x20001342

00005e54 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    5e54:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    5e56:	6883      	ldr	r3, [r0, #8]
{
    5e58:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    5e5a:	2b00      	cmp	r3, #0
    5e5c:	d036      	beq.n	5ecc <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    5e5e:	4a1e      	ldr	r2, [pc, #120]	; (5ed8 <z_impl_k_mutex_unlock+0x84>)
    5e60:	6892      	ldr	r2, [r2, #8]
    5e62:	4293      	cmp	r3, r2
    5e64:	d135      	bne.n	5ed2 <z_impl_k_mutex_unlock+0x7e>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    5e66:	7bda      	ldrb	r2, [r3, #15]
    5e68:	3a01      	subs	r2, #1
    5e6a:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    5e6c:	68c3      	ldr	r3, [r0, #12]
    5e6e:	2b01      	cmp	r3, #1
    5e70:	d905      	bls.n	5e7e <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    5e72:	3b01      	subs	r3, #1
    5e74:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    5e76:	f000 fab7 	bl	63e8 <k_sched_unlock>

	return 0;
    5e7a:	2000      	movs	r0, #0
}
    5e7c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    5e7e:	f04f 0320 	mov.w	r3, #32
    5e82:	f3ef 8511 	mrs	r5, BASEPRI
    5e86:	f383 8812 	msr	BASEPRI_MAX, r3
    5e8a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    5e8e:	6901      	ldr	r1, [r0, #16]
    5e90:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    5e92:	f990 300e 	ldrsb.w	r3, [r0, #14]
    5e96:	4299      	cmp	r1, r3
    5e98:	d001      	beq.n	5e9e <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
    5e9a:	f000 fa27 	bl	62ec <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    5e9e:	4620      	mov	r0, r4
    5ea0:	f002 f96d 	bl	817e <z_unpend_first_thread>
	mutex->owner = new_owner;
    5ea4:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    5ea6:	b158      	cbz	r0, 5ec0 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
    5ea8:	f990 200e 	ldrsb.w	r2, [r0, #14]
    5eac:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    5eae:	2200      	movs	r2, #0
    5eb0:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
    5eb2:	f002 f8f0 	bl	8096 <z_ready_thread>
		z_reschedule(&lock, key);
    5eb6:	4809      	ldr	r0, [pc, #36]	; (5edc <z_impl_k_mutex_unlock+0x88>)
    5eb8:	4629      	mov	r1, r5
    5eba:	f000 f8a9 	bl	6010 <z_reschedule>
    5ebe:	e7da      	b.n	5e76 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    5ec0:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    5ec2:	f385 8811 	msr	BASEPRI, r5
    5ec6:	f3bf 8f6f 	isb	sy
    5eca:	e7d4      	b.n	5e76 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    5ecc:	f06f 0015 	mvn.w	r0, #21
    5ed0:	e7d4      	b.n	5e7c <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    5ed2:	f04f 30ff 	mov.w	r0, #4294967295
    5ed6:	e7d1      	b.n	5e7c <z_impl_k_mutex_unlock+0x28>
    5ed8:	20000eb4 	.word	0x20000eb4
    5edc:	20001342 	.word	0x20001342

00005ee0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    5ee0:	b538      	push	{r3, r4, r5, lr}
    5ee2:	4604      	mov	r4, r0
	__asm__ volatile(
    5ee4:	f04f 0320 	mov.w	r3, #32
    5ee8:	f3ef 8511 	mrs	r5, BASEPRI
    5eec:	f383 8812 	msr	BASEPRI_MAX, r3
    5ef0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    5ef4:	f002 f943 	bl	817e <z_unpend_first_thread>

	if (thread != NULL) {
    5ef8:	b148      	cbz	r0, 5f0e <z_impl_k_sem_give+0x2e>
    5efa:	2200      	movs	r2, #0
    5efc:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    5efe:	f002 f8ca 	bl	8096 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    5f02:	4629      	mov	r1, r5
    5f04:	4808      	ldr	r0, [pc, #32]	; (5f28 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    5f06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    5f0a:	f000 b881 	b.w	6010 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    5f0e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    5f12:	429a      	cmp	r2, r3
    5f14:	bf18      	it	ne
    5f16:	3301      	addne	r3, #1
    5f18:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    5f1a:	2102      	movs	r1, #2
    5f1c:	f104 0010 	add.w	r0, r4, #16
    5f20:	f002 fa31 	bl	8386 <z_handle_obj_poll_events>
}
    5f24:	e7ed      	b.n	5f02 <z_impl_k_sem_give+0x22>
    5f26:	bf00      	nop
    5f28:	20001342 	.word	0x20001342

00005f2c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    5f2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5f2e:	4614      	mov	r4, r2
    5f30:	461d      	mov	r5, r3
    5f32:	f04f 0320 	mov.w	r3, #32
    5f36:	f3ef 8111 	mrs	r1, BASEPRI
    5f3a:	f383 8812 	msr	BASEPRI_MAX, r3
    5f3e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    5f42:	6883      	ldr	r3, [r0, #8]
    5f44:	b143      	cbz	r3, 5f58 <z_impl_k_sem_take+0x2c>
		sem->count--;
    5f46:	3b01      	subs	r3, #1
    5f48:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    5f4a:	f381 8811 	msr	BASEPRI, r1
    5f4e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    5f52:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    5f54:	b003      	add	sp, #12
    5f56:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    5f58:	ea54 0305 	orrs.w	r3, r4, r5
    5f5c:	d106      	bne.n	5f6c <z_impl_k_sem_take+0x40>
    5f5e:	f381 8811 	msr	BASEPRI, r1
    5f62:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    5f66:	f06f 000f 	mvn.w	r0, #15
    5f6a:	e7f3      	b.n	5f54 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    5f6c:	4602      	mov	r2, r0
    5f6e:	e9cd 4500 	strd	r4, r5, [sp]
    5f72:	4802      	ldr	r0, [pc, #8]	; (5f7c <z_impl_k_sem_take+0x50>)
    5f74:	f000 f9a6 	bl	62c4 <z_pend_curr>
	return ret;
    5f78:	e7ec      	b.n	5f54 <z_impl_k_sem_take+0x28>
    5f7a:	bf00      	nop
    5f7c:	20001342 	.word	0x20001342

00005f80 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    5f80:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    5f82:	4c08      	ldr	r4, [pc, #32]	; (5fa4 <z_reset_time_slice+0x24>)
    5f84:	6823      	ldr	r3, [r4, #0]
    5f86:	b15b      	cbz	r3, 5fa0 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    5f88:	f7fe fe1a 	bl	4bc0 <sys_clock_elapsed>
    5f8c:	4603      	mov	r3, r0
    5f8e:	6820      	ldr	r0, [r4, #0]
    5f90:	4a05      	ldr	r2, [pc, #20]	; (5fa8 <z_reset_time_slice+0x28>)
    5f92:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    5f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    5f98:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    5f9a:	2100      	movs	r1, #0
    5f9c:	f002 b94a 	b.w	8234 <z_set_timeout_expiry>
}
    5fa0:	bd10      	pop	{r4, pc}
    5fa2:	bf00      	nop
    5fa4:	20000ee4 	.word	0x20000ee4
    5fa8:	20000eb4 	.word	0x20000eb4

00005fac <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    5fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5fae:	4604      	mov	r4, r0
    5fb0:	460d      	mov	r5, r1
	__asm__ volatile(
    5fb2:	f04f 0320 	mov.w	r3, #32
    5fb6:	f3ef 8611 	mrs	r6, BASEPRI
    5fba:	f383 8812 	msr	BASEPRI_MAX, r3
    5fbe:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    5fc2:	4b10      	ldr	r3, [pc, #64]	; (6004 <k_sched_time_slice_set+0x58>)
    5fc4:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    5fc6:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    5fca:	f240 30e7 	movw	r0, #999	; 0x3e7
    5fce:	2100      	movs	r1, #0
    5fd0:	611a      	str	r2, [r3, #16]
    5fd2:	fbe7 0104 	umlal	r0, r1, r7, r4
    5fd6:	2300      	movs	r3, #0
    5fd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5fdc:	f7fa fcca 	bl	974 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    5fe0:	2c00      	cmp	r4, #0
    5fe2:	4b09      	ldr	r3, [pc, #36]	; (6008 <k_sched_time_slice_set+0x5c>)
    5fe4:	dc09      	bgt.n	5ffa <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    5fe6:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    5fe8:	4b08      	ldr	r3, [pc, #32]	; (600c <k_sched_time_slice_set+0x60>)
    5fea:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    5fec:	f7ff ffc8 	bl	5f80 <z_reset_time_slice>
	__asm__ volatile(
    5ff0:	f386 8811 	msr	BASEPRI, r6
    5ff4:	f3bf 8f6f 	isb	sy
	}
}
    5ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    5ffa:	2802      	cmp	r0, #2
    5ffc:	bfb8      	it	lt
    5ffe:	2002      	movlt	r0, #2
    6000:	e7f1      	b.n	5fe6 <k_sched_time_slice_set+0x3a>
    6002:	bf00      	nop
    6004:	20000eb4 	.word	0x20000eb4
    6008:	20000ee4 	.word	0x20000ee4
    600c:	20000ee0 	.word	0x20000ee0

00006010 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    6010:	b949      	cbnz	r1, 6026 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6012:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    6016:	b930      	cbnz	r0, 6026 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    6018:	4b05      	ldr	r3, [pc, #20]	; (6030 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    601a:	69da      	ldr	r2, [r3, #28]
    601c:	689b      	ldr	r3, [r3, #8]
    601e:	429a      	cmp	r2, r3
    6020:	d001      	beq.n	6026 <z_reschedule+0x16>
	ret = arch_swap(key);
    6022:	f7fc bdc1 	b.w	2ba8 <arch_swap>
    6026:	f381 8811 	msr	BASEPRI, r1
    602a:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    602e:	4770      	bx	lr
    6030:	20000eb4 	.word	0x20000eb4

00006034 <k_sched_lock>:
	__asm__ volatile(
    6034:	f04f 0320 	mov.w	r3, #32
    6038:	f3ef 8111 	mrs	r1, BASEPRI
    603c:	f383 8812 	msr	BASEPRI_MAX, r3
    6040:	f3bf 8f6f 	isb	sy
    6044:	4b04      	ldr	r3, [pc, #16]	; (6058 <k_sched_lock+0x24>)
    6046:	689a      	ldr	r2, [r3, #8]
    6048:	7bd3      	ldrb	r3, [r2, #15]
    604a:	3b01      	subs	r3, #1
    604c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    604e:	f381 8811 	msr	BASEPRI, r1
    6052:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    6056:	4770      	bx	lr
    6058:	20000eb4 	.word	0x20000eb4

0000605c <update_cache>:
{
    605c:	b538      	push	{r3, r4, r5, lr}
    605e:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    6060:	480c      	ldr	r0, [pc, #48]	; (6094 <update_cache+0x38>)
    6062:	4d0d      	ldr	r5, [pc, #52]	; (6098 <update_cache+0x3c>)
    6064:	f002 f80d 	bl	8082 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    6068:	4604      	mov	r4, r0
    606a:	b900      	cbnz	r0, 606e <update_cache+0x12>
    606c:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
    606e:	68ab      	ldr	r3, [r5, #8]
    6070:	b94a      	cbnz	r2, 6086 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    6072:	7b5a      	ldrb	r2, [r3, #13]
    6074:	06d2      	lsls	r2, r2, #27
    6076:	d106      	bne.n	6086 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    6078:	69a2      	ldr	r2, [r4, #24]
    607a:	b922      	cbnz	r2, 6086 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    607c:	89da      	ldrh	r2, [r3, #14]
    607e:	2a7f      	cmp	r2, #127	; 0x7f
    6080:	d901      	bls.n	6086 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    6082:	61eb      	str	r3, [r5, #28]
}
    6084:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    6086:	429c      	cmp	r4, r3
    6088:	d001      	beq.n	608e <update_cache+0x32>
			z_reset_time_slice();
    608a:	f7ff ff79 	bl	5f80 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    608e:	61ec      	str	r4, [r5, #28]
}
    6090:	e7f8      	b.n	6084 <update_cache+0x28>
    6092:	bf00      	nop
    6094:	20000ed4 	.word	0x20000ed4
    6098:	20000eb4 	.word	0x20000eb4

0000609c <move_thread_to_end_of_prio_q>:
{
    609c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    609e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    60a2:	7b43      	ldrb	r3, [r0, #13]
    60a4:	2a00      	cmp	r2, #0
{
    60a6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    60a8:	da04      	bge.n	60b4 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    60aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    60ae:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    60b0:	f001 ff9b 	bl	7fea <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    60b4:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    60b6:	4a17      	ldr	r2, [pc, #92]	; (6114 <move_thread_to_end_of_prio_q+0x78>)
    60b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    60bc:	4610      	mov	r0, r2
    60be:	734b      	strb	r3, [r1, #13]
    60c0:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    60c4:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    60c6:	4283      	cmp	r3, r0
    60c8:	bf08      	it	eq
    60ca:	2300      	moveq	r3, #0
    60cc:	2b00      	cmp	r3, #0
    60ce:	bf38      	it	cc
    60d0:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    60d2:	b1cb      	cbz	r3, 6108 <move_thread_to_end_of_prio_q+0x6c>
	int32_t b1 = thread_1->base.prio;
    60d4:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    60d8:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
    60dc:	42a6      	cmp	r6, r4
    60de:	d00f      	beq.n	6100 <move_thread_to_end_of_prio_q+0x64>
		return b2 - b1;
    60e0:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    60e2:	2c00      	cmp	r4, #0
    60e4:	dd0c      	ble.n	6100 <move_thread_to_end_of_prio_q+0x64>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    60e6:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    60e8:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    60ec:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    60ee:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    60f0:	6890      	ldr	r0, [r2, #8]
    60f2:	1a43      	subs	r3, r0, r1
    60f4:	4258      	negs	r0, r3
}
    60f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    60fa:	4158      	adcs	r0, r3
    60fc:	f7ff bfae 	b.w	605c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    6100:	42ab      	cmp	r3, r5
    6102:	d001      	beq.n	6108 <move_thread_to_end_of_prio_q+0x6c>
    6104:	681b      	ldr	r3, [r3, #0]
    6106:	e7e4      	b.n	60d2 <move_thread_to_end_of_prio_q+0x36>
	node->prev = tail;
    6108:	e9c1 0500 	strd	r0, r5, [r1]
	tail->next = node;
    610c:	6029      	str	r1, [r5, #0]
	list->tail = node;
    610e:	6251      	str	r1, [r2, #36]	; 0x24
}
    6110:	e7ee      	b.n	60f0 <move_thread_to_end_of_prio_q+0x54>
    6112:	bf00      	nop
    6114:	20000eb4 	.word	0x20000eb4

00006118 <z_time_slice>:
{
    6118:	b570      	push	{r4, r5, r6, lr}
    611a:	4601      	mov	r1, r0
	__asm__ volatile(
    611c:	f04f 0320 	mov.w	r3, #32
    6120:	f3ef 8411 	mrs	r4, BASEPRI
    6124:	f383 8812 	msr	BASEPRI_MAX, r3
    6128:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    612c:	4b16      	ldr	r3, [pc, #88]	; (6188 <z_time_slice+0x70>)
    612e:	4a17      	ldr	r2, [pc, #92]	; (618c <z_time_slice+0x74>)
    6130:	6898      	ldr	r0, [r3, #8]
    6132:	6815      	ldr	r5, [r2, #0]
    6134:	42a8      	cmp	r0, r5
    6136:	461d      	mov	r5, r3
    6138:	d106      	bne.n	6148 <z_time_slice+0x30>
			z_reset_time_slice();
    613a:	f7ff ff21 	bl	5f80 <z_reset_time_slice>
	__asm__ volatile(
    613e:	f384 8811 	msr	BASEPRI, r4
    6142:	f3bf 8f6f 	isb	sy
}
    6146:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    6148:	2600      	movs	r6, #0
    614a:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    614c:	4a10      	ldr	r2, [pc, #64]	; (6190 <z_time_slice+0x78>)
    614e:	6812      	ldr	r2, [r2, #0]
    6150:	b1ba      	cbz	r2, 6182 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    6152:	89c2      	ldrh	r2, [r0, #14]
    6154:	2a7f      	cmp	r2, #127	; 0x7f
    6156:	d814      	bhi.n	6182 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    6158:	7b42      	ldrb	r2, [r0, #13]
    615a:	06d2      	lsls	r2, r2, #27
    615c:	d111      	bne.n	6182 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    615e:	4a0d      	ldr	r2, [pc, #52]	; (6194 <z_time_slice+0x7c>)
    6160:	f990 600e 	ldrsb.w	r6, [r0, #14]
    6164:	6812      	ldr	r2, [r2, #0]
    6166:	4296      	cmp	r6, r2
    6168:	db0b      	blt.n	6182 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    616a:	4a0b      	ldr	r2, [pc, #44]	; (6198 <z_time_slice+0x80>)
    616c:	4290      	cmp	r0, r2
    616e:	d008      	beq.n	6182 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    6170:	691a      	ldr	r2, [r3, #16]
    6172:	428a      	cmp	r2, r1
    6174:	dc02      	bgt.n	617c <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
    6176:	f7ff ff91 	bl	609c <move_thread_to_end_of_prio_q>
    617a:	e7de      	b.n	613a <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
    617c:	1a52      	subs	r2, r2, r1
    617e:	611a      	str	r2, [r3, #16]
    6180:	e7dd      	b.n	613e <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
    6182:	2300      	movs	r3, #0
    6184:	612b      	str	r3, [r5, #16]
    6186:	e7da      	b.n	613e <z_time_slice+0x26>
    6188:	20000eb4 	.word	0x20000eb4
    618c:	20000edc 	.word	0x20000edc
    6190:	20000ee4 	.word	0x20000ee4
    6194:	20000ee0 	.word	0x20000ee0
    6198:	200005c8 	.word	0x200005c8

0000619c <ready_thread>:
{
    619c:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    619e:	f990 300d 	ldrsb.w	r3, [r0, #13]
    61a2:	7b42      	ldrb	r2, [r0, #13]
    61a4:	2b00      	cmp	r3, #0
    61a6:	db2d      	blt.n	6204 <ready_thread+0x68>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    61a8:	06d3      	lsls	r3, r2, #27
    61aa:	d12b      	bne.n	6204 <ready_thread+0x68>
	return !sys_dnode_is_linked(&to->node);
    61ac:	6983      	ldr	r3, [r0, #24]
    61ae:	bb4b      	cbnz	r3, 6204 <ready_thread+0x68>
	return list->head == list;
    61b0:	4915      	ldr	r1, [pc, #84]	; (6208 <ready_thread+0x6c>)
	thread->base.thread_state |= _THREAD_QUEUED;
    61b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
    61b6:	7342      	strb	r2, [r0, #13]
    61b8:	460a      	mov	r2, r1
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    61ba:	6a4d      	ldr	r5, [r1, #36]	; 0x24
	return list->head == list;
    61bc:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    61c0:	4294      	cmp	r4, r2
    61c2:	bf18      	it	ne
    61c4:	4623      	movne	r3, r4
    61c6:	2b00      	cmp	r3, #0
    61c8:	bf38      	it	cc
    61ca:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    61cc:	b1ab      	cbz	r3, 61fa <ready_thread+0x5e>
	int32_t b1 = thread_1->base.prio;
    61ce:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    61d2:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
    61d6:	42a6      	cmp	r6, r4
    61d8:	d00b      	beq.n	61f2 <ready_thread+0x56>
		return b2 - b1;
    61da:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    61dc:	2c00      	cmp	r4, #0
    61de:	dd08      	ble.n	61f2 <ready_thread+0x56>
	sys_dnode_t *const prev = successor->prev;
    61e0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    61e2:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    61e6:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    61e8:	6058      	str	r0, [r3, #4]
}
    61ea:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    61ec:	2000      	movs	r0, #0
    61ee:	f7ff bf35 	b.w	605c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    61f2:	42ab      	cmp	r3, r5
    61f4:	d001      	beq.n	61fa <ready_thread+0x5e>
    61f6:	681b      	ldr	r3, [r3, #0]
    61f8:	e7e8      	b.n	61cc <ready_thread+0x30>
	node->prev = tail;
    61fa:	e9c0 2500 	strd	r2, r5, [r0]
	tail->next = node;
    61fe:	6028      	str	r0, [r5, #0]
	list->tail = node;
    6200:	6248      	str	r0, [r1, #36]	; 0x24
}
    6202:	e7f2      	b.n	61ea <ready_thread+0x4e>
}
    6204:	bc70      	pop	{r4, r5, r6}
    6206:	4770      	bx	lr
    6208:	20000eb4 	.word	0x20000eb4

0000620c <z_sched_start>:
{
    620c:	b510      	push	{r4, lr}
	__asm__ volatile(
    620e:	f04f 0220 	mov.w	r2, #32
    6212:	f3ef 8411 	mrs	r4, BASEPRI
    6216:	f382 8812 	msr	BASEPRI_MAX, r2
    621a:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
    621e:	7b42      	ldrb	r2, [r0, #13]
    6220:	0751      	lsls	r1, r2, #29
    6222:	d404      	bmi.n	622e <z_sched_start+0x22>
	__asm__ volatile(
    6224:	f384 8811 	msr	BASEPRI, r4
    6228:	f3bf 8f6f 	isb	sy
}
    622c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    622e:	f022 0204 	bic.w	r2, r2, #4
    6232:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    6234:	f7ff ffb2 	bl	619c <ready_thread>
	z_reschedule(&sched_spinlock, key);
    6238:	4621      	mov	r1, r4
    623a:	4802      	ldr	r0, [pc, #8]	; (6244 <z_sched_start+0x38>)
}
    623c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    6240:	f7ff bee6 	b.w	6010 <z_reschedule>
    6244:	20001342 	.word	0x20001342

00006248 <unready_thread>:
{
    6248:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    624a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    624e:	7b43      	ldrb	r3, [r0, #13]
    6250:	2a00      	cmp	r2, #0
{
    6252:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    6254:	da04      	bge.n	6260 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6256:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    625a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    625c:	f001 fec5 	bl	7fea <sys_dlist_remove>
	update_cache(thread == _current);
    6260:	4b04      	ldr	r3, [pc, #16]	; (6274 <unready_thread+0x2c>)
    6262:	6898      	ldr	r0, [r3, #8]
    6264:	1a43      	subs	r3, r0, r1
    6266:	4258      	negs	r0, r3
    6268:	4158      	adcs	r0, r3
}
    626a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    626e:	f7ff bef5 	b.w	605c <update_cache>
    6272:	bf00      	nop
    6274:	20000eb4 	.word	0x20000eb4

00006278 <pend>:
{
    6278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    627c:	4606      	mov	r6, r0
    627e:	4614      	mov	r4, r2
    6280:	461d      	mov	r5, r3
	__asm__ volatile(
    6282:	f04f 0320 	mov.w	r3, #32
    6286:	f3ef 8711 	mrs	r7, BASEPRI
    628a:	f383 8812 	msr	BASEPRI_MAX, r3
    628e:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    6292:	f001 ff32 	bl	80fa <add_to_waitq_locked>
	__asm__ volatile(
    6296:	f387 8811 	msr	BASEPRI, r7
    629a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    629e:	1c6b      	adds	r3, r5, #1
    62a0:	bf08      	it	eq
    62a2:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    62a6:	d008      	beq.n	62ba <pend+0x42>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    62a8:	4622      	mov	r2, r4
    62aa:	462b      	mov	r3, r5
    62ac:	f106 0018 	add.w	r0, r6, #24
    62b0:	4903      	ldr	r1, [pc, #12]	; (62c0 <pend+0x48>)
}
    62b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    62b6:	f000 ba4b 	b.w	6750 <z_add_timeout>
    62ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    62be:	bf00      	nop
    62c0:	000080b7 	.word	0x000080b7

000062c4 <z_pend_curr>:
{
    62c4:	b510      	push	{r4, lr}
	pending_current = _current;
    62c6:	4b07      	ldr	r3, [pc, #28]	; (62e4 <z_pend_curr+0x20>)
    62c8:	6898      	ldr	r0, [r3, #8]
    62ca:	4b07      	ldr	r3, [pc, #28]	; (62e8 <z_pend_curr+0x24>)
{
    62cc:	460c      	mov	r4, r1
	pending_current = _current;
    62ce:	6018      	str	r0, [r3, #0]
{
    62d0:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    62d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    62d6:	f7ff ffcf 	bl	6278 <pend>
    62da:	4620      	mov	r0, r4
}
    62dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    62e0:	f7fc bc62 	b.w	2ba8 <arch_swap>
    62e4:	20000eb4 	.word	0x20000eb4
    62e8:	20000edc 	.word	0x20000edc

000062ec <z_set_prio>:
{
    62ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    62ee:	4604      	mov	r4, r0
	__asm__ volatile(
    62f0:	f04f 0320 	mov.w	r3, #32
    62f4:	f3ef 8611 	mrs	r6, BASEPRI
    62f8:	f383 8812 	msr	BASEPRI_MAX, r3
    62fc:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    6300:	7b43      	ldrb	r3, [r0, #13]
    6302:	06da      	lsls	r2, r3, #27
    6304:	b249      	sxtb	r1, r1
    6306:	d138      	bne.n	637a <z_set_prio+0x8e>
	return !sys_dnode_is_linked(&to->node);
    6308:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
    630a:	2d00      	cmp	r5, #0
    630c:	d135      	bne.n	637a <z_set_prio+0x8e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    630e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6312:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    6314:	f001 fe69 	bl	7fea <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    6318:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
    631a:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    631c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6320:	7343      	strb	r3, [r0, #13]
	return list->head == list;
    6322:	4817      	ldr	r0, [pc, #92]	; (6380 <z_set_prio+0x94>)
    6324:	4603      	mov	r3, r0
    6326:	f853 7f20 	ldr.w	r7, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    632a:	429f      	cmp	r7, r3
    632c:	bf18      	it	ne
    632e:	463d      	movne	r5, r7
    6330:	2d00      	cmp	r5, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6332:	6a47      	ldr	r7, [r0, #36]	; 0x24
    6334:	461a      	mov	r2, r3
    6336:	462b      	mov	r3, r5
    6338:	bf38      	it	cc
    633a:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    633c:	b1c3      	cbz	r3, 6370 <z_set_prio+0x84>
	int32_t b2 = thread_2->base.prio;
    633e:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    6342:	42a9      	cmp	r1, r5
    6344:	d010      	beq.n	6368 <z_set_prio+0x7c>
		return b2 - b1;
    6346:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    6348:	2d00      	cmp	r5, #0
    634a:	dd0d      	ble.n	6368 <z_set_prio+0x7c>
	sys_dnode_t *const prev = successor->prev;
    634c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    634e:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    6352:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    6354:	605c      	str	r4, [r3, #4]
			update_cache(1);
    6356:	2001      	movs	r0, #1
    6358:	f7ff fe80 	bl	605c <update_cache>
    635c:	2001      	movs	r0, #1
	__asm__ volatile(
    635e:	f386 8811 	msr	BASEPRI, r6
    6362:	f3bf 8f6f 	isb	sy
}
    6366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    6368:	42bb      	cmp	r3, r7
    636a:	d001      	beq.n	6370 <z_set_prio+0x84>
    636c:	681b      	ldr	r3, [r3, #0]
    636e:	e7e5      	b.n	633c <z_set_prio+0x50>
	node->prev = tail;
    6370:	e9c4 2700 	strd	r2, r7, [r4]
	tail->next = node;
    6374:	603c      	str	r4, [r7, #0]
	list->tail = node;
    6376:	6244      	str	r4, [r0, #36]	; 0x24
}
    6378:	e7ed      	b.n	6356 <z_set_prio+0x6a>
			thread->base.prio = prio;
    637a:	73a1      	strb	r1, [r4, #14]
    637c:	2000      	movs	r0, #0
    637e:	e7ee      	b.n	635e <z_set_prio+0x72>
    6380:	20000eb4 	.word	0x20000eb4

00006384 <z_impl_k_thread_suspend>:
{
    6384:	b570      	push	{r4, r5, r6, lr}
    6386:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    6388:	3018      	adds	r0, #24
    638a:	f001 ff2d 	bl	81e8 <z_abort_timeout>
	__asm__ volatile(
    638e:	f04f 0320 	mov.w	r3, #32
    6392:	f3ef 8611 	mrs	r6, BASEPRI
    6396:	f383 8812 	msr	BASEPRI_MAX, r3
    639a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    639e:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    63a2:	7b63      	ldrb	r3, [r4, #13]
    63a4:	2a00      	cmp	r2, #0
    63a6:	da05      	bge.n	63b4 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    63a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    63ac:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    63ae:	4620      	mov	r0, r4
    63b0:	f001 fe1b 	bl	7fea <sys_dlist_remove>
		update_cache(thread == _current);
    63b4:	4d0b      	ldr	r5, [pc, #44]	; (63e4 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    63b6:	7b63      	ldrb	r3, [r4, #13]
    63b8:	68a8      	ldr	r0, [r5, #8]
    63ba:	f043 0310 	orr.w	r3, r3, #16
    63be:	7363      	strb	r3, [r4, #13]
    63c0:	1b03      	subs	r3, r0, r4
    63c2:	4258      	negs	r0, r3
    63c4:	4158      	adcs	r0, r3
    63c6:	f7ff fe49 	bl	605c <update_cache>
	__asm__ volatile(
    63ca:	f386 8811 	msr	BASEPRI, r6
    63ce:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    63d2:	68ab      	ldr	r3, [r5, #8]
    63d4:	42a3      	cmp	r3, r4
    63d6:	d103      	bne.n	63e0 <z_impl_k_thread_suspend+0x5c>
}
    63d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    63dc:	f001 be47 	b.w	806e <z_reschedule_unlocked>
}
    63e0:	bd70      	pop	{r4, r5, r6, pc}
    63e2:	bf00      	nop
    63e4:	20000eb4 	.word	0x20000eb4

000063e8 <k_sched_unlock>:
{
    63e8:	b510      	push	{r4, lr}
	__asm__ volatile(
    63ea:	f04f 0320 	mov.w	r3, #32
    63ee:	f3ef 8411 	mrs	r4, BASEPRI
    63f2:	f383 8812 	msr	BASEPRI_MAX, r3
    63f6:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    63fa:	4b08      	ldr	r3, [pc, #32]	; (641c <k_sched_unlock+0x34>)
    63fc:	689a      	ldr	r2, [r3, #8]
    63fe:	7bd3      	ldrb	r3, [r2, #15]
    6400:	3301      	adds	r3, #1
    6402:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    6404:	2000      	movs	r0, #0
    6406:	f7ff fe29 	bl	605c <update_cache>
	__asm__ volatile(
    640a:	f384 8811 	msr	BASEPRI, r4
    640e:	f3bf 8f6f 	isb	sy
}
    6412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    6416:	f001 be2a 	b.w	806e <z_reschedule_unlocked>
    641a:	bf00      	nop
    641c:	20000eb4 	.word	0x20000eb4

00006420 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    6420:	4b04      	ldr	r3, [pc, #16]	; (6434 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    6422:	2100      	movs	r1, #0
    6424:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    6428:	e9c3 2208 	strd	r2, r2, [r3, #32]
    642c:	4608      	mov	r0, r1
    642e:	f7ff bdbd 	b.w	5fac <k_sched_time_slice_set>
    6432:	bf00      	nop
    6434:	20000eb4 	.word	0x20000eb4

00006438 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    6438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    643a:	f04f 0320 	mov.w	r3, #32
    643e:	f3ef 8411 	mrs	r4, BASEPRI
    6442:	f383 8812 	msr	BASEPRI_MAX, r3
    6446:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    644a:	491b      	ldr	r1, [pc, #108]	; (64b8 <z_impl_k_yield+0x80>)
    644c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    644e:	7b43      	ldrb	r3, [r0, #13]
    6450:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6454:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    6456:	f001 fdc8 	bl	7fea <sys_dlist_remove>
	}
	queue_thread(_current);
    645a:	688a      	ldr	r2, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    645c:	7b53      	ldrb	r3, [r2, #13]
	return list->head == list;
    645e:	4608      	mov	r0, r1
    6460:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6464:	7353      	strb	r3, [r2, #13]
    6466:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    646a:	6a4e      	ldr	r6, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    646c:	4283      	cmp	r3, r0
    646e:	bf08      	it	eq
    6470:	2300      	moveq	r3, #0
    6472:	2b00      	cmp	r3, #0
    6474:	bf38      	it	cc
    6476:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6478:	b1cb      	cbz	r3, 64ae <z_impl_k_yield+0x76>
	int32_t b1 = thread_1->base.prio;
    647a:	f992 700e 	ldrsb.w	r7, [r2, #14]
	int32_t b2 = thread_2->base.prio;
    647e:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    6482:	42af      	cmp	r7, r5
    6484:	d00f      	beq.n	64a6 <z_impl_k_yield+0x6e>
		return b2 - b1;
    6486:	1bed      	subs	r5, r5, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    6488:	2d00      	cmp	r5, #0
    648a:	dd0c      	ble.n	64a6 <z_impl_k_yield+0x6e>
	sys_dnode_t *const prev = successor->prev;
    648c:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    648e:	e9c2 3100 	strd	r3, r1, [r2]
	prev->next = node;
    6492:	600a      	str	r2, [r1, #0]
	successor->prev = node;
    6494:	605a      	str	r2, [r3, #4]
	update_cache(1);
    6496:	2001      	movs	r0, #1
    6498:	f7ff fde0 	bl	605c <update_cache>
    649c:	4620      	mov	r0, r4
	z_swap(&sched_spinlock, key);
}
    649e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    64a2:	f7fc bb81 	b.w	2ba8 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    64a6:	42b3      	cmp	r3, r6
    64a8:	d001      	beq.n	64ae <z_impl_k_yield+0x76>
    64aa:	681b      	ldr	r3, [r3, #0]
    64ac:	e7e4      	b.n	6478 <z_impl_k_yield+0x40>
	node->prev = tail;
    64ae:	e9c2 0600 	strd	r0, r6, [r2]
	tail->next = node;
    64b2:	6032      	str	r2, [r6, #0]
	list->tail = node;
    64b4:	624a      	str	r2, [r1, #36]	; 0x24
}
    64b6:	e7ee      	b.n	6496 <z_impl_k_yield+0x5e>
    64b8:	20000eb4 	.word	0x20000eb4

000064bc <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    64bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    64c0:	4604      	mov	r4, r0
    64c2:	460d      	mov	r5, r1
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    64c4:	ea54 0105 	orrs.w	r1, r4, r5
    64c8:	d104      	bne.n	64d4 <z_tick_sleep+0x18>
	z_impl_k_yield();
    64ca:	f7ff ffb5 	bl	6438 <z_impl_k_yield>
		k_yield();
		return 0;
    64ce:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
    64d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
    64d4:	f06f 0101 	mvn.w	r1, #1
    64d8:	1a0a      	subs	r2, r1, r0
    64da:	f04f 31ff 	mov.w	r1, #4294967295
    64de:	eb61 0305 	sbc.w	r3, r1, r5
    64e2:	2a01      	cmp	r2, #1
    64e4:	f173 0300 	sbcs.w	r3, r3, #0
    64e8:	da2a      	bge.n	6540 <z_tick_sleep+0x84>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    64ea:	f001 febd 	bl	8268 <sys_clock_tick_get_32>
    64ee:	1906      	adds	r6, r0, r4
    64f0:	f04f 0320 	mov.w	r3, #32
    64f4:	f3ef 8811 	mrs	r8, BASEPRI
    64f8:	f383 8812 	msr	BASEPRI_MAX, r3
    64fc:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    6500:	4f11      	ldr	r7, [pc, #68]	; (6548 <z_tick_sleep+0x8c>)
    6502:	4b12      	ldr	r3, [pc, #72]	; (654c <z_tick_sleep+0x90>)
    6504:	68b8      	ldr	r0, [r7, #8]
    6506:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    6508:	f7ff fe9e 	bl	6248 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    650c:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    650e:	4910      	ldr	r1, [pc, #64]	; (6550 <z_tick_sleep+0x94>)
    6510:	4622      	mov	r2, r4
    6512:	462b      	mov	r3, r5
    6514:	3018      	adds	r0, #24
    6516:	f000 f91b 	bl	6750 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    651a:	68ba      	ldr	r2, [r7, #8]
    651c:	7b53      	ldrb	r3, [r2, #13]
    651e:	f043 0310 	orr.w	r3, r3, #16
    6522:	7353      	strb	r3, [r2, #13]
    6524:	4640      	mov	r0, r8
    6526:	f7fc fb3f 	bl	2ba8 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    652a:	f001 fe9d 	bl	8268 <sys_clock_tick_get_32>
    652e:	1a30      	subs	r0, r6, r0
    6530:	eb66 0106 	sbc.w	r1, r6, r6
	if (ticks > 0) {
    6534:	2801      	cmp	r0, #1
    6536:	f171 0300 	sbcs.w	r3, r1, #0
		return ticks;
    653a:	bfb8      	it	lt
    653c:	2000      	movlt	r0, #0
    653e:	e7c7      	b.n	64d0 <z_tick_sleep+0x14>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    6540:	f06f 0601 	mvn.w	r6, #1
    6544:	1a36      	subs	r6, r6, r0
    6546:	e7d3      	b.n	64f0 <z_tick_sleep+0x34>
    6548:	20000eb4 	.word	0x20000eb4
    654c:	20000edc 	.word	0x20000edc
    6550:	000080b7 	.word	0x000080b7

00006554 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    6554:	b508      	push	{r3, lr}
    6556:	460b      	mov	r3, r1
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6558:	3301      	adds	r3, #1
    655a:	bf08      	it	eq
    655c:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    6560:	d106      	bne.n	6570 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    6562:	4b08      	ldr	r3, [pc, #32]	; (6584 <z_impl_k_sleep+0x30>)
    6564:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    6566:	f7ff ff0d 	bl	6384 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    656a:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    656e:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    6570:	f7ff ffa4 	bl	64bc <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
    6574:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    6578:	fb80 2303 	smull	r2, r3, r0, r3
    657c:	0bd0      	lsrs	r0, r2, #15
    657e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    6582:	e7f4      	b.n	656e <z_impl_k_sleep+0x1a>
    6584:	20000eb4 	.word	0x20000eb4

00006588 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    6588:	4b01      	ldr	r3, [pc, #4]	; (6590 <z_impl_z_current_get+0x8>)
    658a:	6898      	ldr	r0, [r3, #8]
    658c:	4770      	bx	lr
    658e:	bf00      	nop
    6590:	20000eb4 	.word	0x20000eb4

00006594 <z_impl_k_is_preempt_thread>:
    6594:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
    6598:	b93b      	cbnz	r3, 65aa <z_impl_k_is_preempt_thread+0x16>
    659a:	4b05      	ldr	r3, [pc, #20]	; (65b0 <z_impl_k_is_preempt_thread+0x1c>)
    659c:	689b      	ldr	r3, [r3, #8]
    659e:	89d8      	ldrh	r0, [r3, #14]
    65a0:	287f      	cmp	r0, #127	; 0x7f
    65a2:	bf8c      	ite	hi
    65a4:	2000      	movhi	r0, #0
    65a6:	2001      	movls	r0, #1
    65a8:	4770      	bx	lr
    65aa:	2000      	movs	r0, #0
}
    65ac:	4770      	bx	lr
    65ae:	bf00      	nop
    65b0:	20000eb4 	.word	0x20000eb4

000065b4 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    65b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    65b8:	4604      	mov	r4, r0
    65ba:	f04f 0320 	mov.w	r3, #32
    65be:	f3ef 8611 	mrs	r6, BASEPRI
    65c2:	f383 8812 	msr	BASEPRI_MAX, r3
    65c6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    65ca:	7b43      	ldrb	r3, [r0, #13]
    65cc:	071a      	lsls	r2, r3, #28
    65ce:	d505      	bpl.n	65dc <z_thread_abort+0x28>
	__asm__ volatile(
    65d0:	f386 8811 	msr	BASEPRI, r6
    65d4:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    65d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    65dc:	f023 0220 	bic.w	r2, r3, #32
    65e0:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    65e4:	09d2      	lsrs	r2, r2, #7
    65e6:	d120      	bne.n	662a <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    65e8:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    65ea:	68a3      	ldr	r3, [r4, #8]
    65ec:	b113      	cbz	r3, 65f4 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    65ee:	4620      	mov	r0, r4
    65f0:	f001 fd03 	bl	7ffa <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    65f4:	f104 0018 	add.w	r0, r4, #24
    65f8:	f001 fdf6 	bl	81e8 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    65fc:	f104 0758 	add.w	r7, r4, #88	; 0x58
    6600:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    6604:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6606:	42bd      	cmp	r5, r7
    6608:	d000      	beq.n	660c <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    660a:	b9b5      	cbnz	r5, 663a <z_thread_abort+0x86>
		update_cache(1);
    660c:	2001      	movs	r0, #1
    660e:	f7ff fd25 	bl	605c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    6612:	4b10      	ldr	r3, [pc, #64]	; (6654 <z_thread_abort+0xa0>)
    6614:	689b      	ldr	r3, [r3, #8]
    6616:	42a3      	cmp	r3, r4
    6618:	d1da      	bne.n	65d0 <z_thread_abort+0x1c>
    661a:	f3ef 8305 	mrs	r3, IPSR
    661e:	2b00      	cmp	r3, #0
    6620:	d1d6      	bne.n	65d0 <z_thread_abort+0x1c>
    6622:	4630      	mov	r0, r6
    6624:	f7fc fac0 	bl	2ba8 <arch_swap>
	return ret;
    6628:	e7d2      	b.n	65d0 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    662a:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    662e:	f043 0308 	orr.w	r3, r3, #8
    6632:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    6634:	f001 fcd9 	bl	7fea <sys_dlist_remove>
}
    6638:	e7d7      	b.n	65ea <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    663a:	4628      	mov	r0, r5
    663c:	f001 fcdd 	bl	7ffa <unpend_thread_no_timeout>
    6640:	f105 0018 	add.w	r0, r5, #24
    6644:	f001 fdd0 	bl	81e8 <z_abort_timeout>
    6648:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
    664c:	4628      	mov	r0, r5
    664e:	f7ff fda5 	bl	619c <ready_thread>
    6652:	e7d7      	b.n	6604 <z_thread_abort+0x50>
    6654:	20000eb4 	.word	0x20000eb4

00006658 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    6658:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    665a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    665e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    6660:	e9cd 6700 	strd	r6, r7, [sp]
    6664:	f7ff fe2e 	bl	62c4 <z_pend_curr>

	if (data != NULL) {
    6668:	b11c      	cbz	r4, 6672 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    666a:	4b03      	ldr	r3, [pc, #12]	; (6678 <z_sched_wait+0x20>)
    666c:	689b      	ldr	r3, [r3, #8]
    666e:	695b      	ldr	r3, [r3, #20]
    6670:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    6672:	b002      	add	sp, #8
    6674:	bdd0      	pop	{r4, r6, r7, pc}
    6676:	bf00      	nop
    6678:	20000eb4 	.word	0x20000eb4

0000667c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    667c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    667e:	4806      	ldr	r0, [pc, #24]	; (6698 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    6680:	4a06      	ldr	r2, [pc, #24]	; (669c <z_data_copy+0x20>)
    6682:	4907      	ldr	r1, [pc, #28]	; (66a0 <z_data_copy+0x24>)
    6684:	1a12      	subs	r2, r2, r0
    6686:	f000 ff9b 	bl	75c0 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    668a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    668e:	4a05      	ldr	r2, [pc, #20]	; (66a4 <z_data_copy+0x28>)
    6690:	4905      	ldr	r1, [pc, #20]	; (66a8 <z_data_copy+0x2c>)
    6692:	4806      	ldr	r0, [pc, #24]	; (66ac <z_data_copy+0x30>)
    6694:	f000 bf94 	b.w	75c0 <memcpy>
    6698:	20000000 	.word	0x20000000
    669c:	20000274 	.word	0x20000274
    66a0:	00008df8 	.word	0x00008df8
    66a4:	00000000 	.word	0x00000000
    66a8:	00008df8 	.word	0x00008df8
    66ac:	20000000 	.word	0x20000000

000066b0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    66b0:	4b03      	ldr	r3, [pc, #12]	; (66c0 <elapsed+0x10>)
    66b2:	681b      	ldr	r3, [r3, #0]
    66b4:	b90b      	cbnz	r3, 66ba <elapsed+0xa>
    66b6:	f7fe ba83 	b.w	4bc0 <sys_clock_elapsed>
}
    66ba:	2000      	movs	r0, #0
    66bc:	4770      	bx	lr
    66be:	bf00      	nop
    66c0:	20000ee8 	.word	0x20000ee8

000066c4 <remove_timeout>:
{
    66c4:	b530      	push	{r4, r5, lr}
    66c6:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    66c8:	b168      	cbz	r0, 66e6 <remove_timeout+0x22>
    66ca:	4a0a      	ldr	r2, [pc, #40]	; (66f4 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    66cc:	6852      	ldr	r2, [r2, #4]
    66ce:	4290      	cmp	r0, r2
    66d0:	d009      	beq.n	66e6 <remove_timeout+0x22>
	if (next(t) != NULL) {
    66d2:	b143      	cbz	r3, 66e6 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    66d4:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    66d8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    66dc:	1912      	adds	r2, r2, r4
    66de:	eb45 0101 	adc.w	r1, r5, r1
    66e2:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    66e6:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    66e8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    66ea:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    66ec:	2300      	movs	r3, #0
	node->prev = NULL;
    66ee:	e9c0 3300 	strd	r3, r3, [r0]
}
    66f2:	bd30      	pop	{r4, r5, pc}
    66f4:	200001a0 	.word	0x200001a0

000066f8 <next_timeout>:

static int32_t next_timeout(void)
{
    66f8:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    66fa:	4b13      	ldr	r3, [pc, #76]	; (6748 <next_timeout+0x50>)
    66fc:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    66fe:	429c      	cmp	r4, r3
    6700:	bf08      	it	eq
    6702:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    6704:	f7ff ffd4 	bl	66b0 <elapsed>
    6708:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    670a:	b1bc      	cbz	r4, 673c <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    670c:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    6710:	1b40      	subs	r0, r0, r5
    6712:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    6716:	2801      	cmp	r0, #1
    6718:	f171 0300 	sbcs.w	r3, r1, #0
    671c:	db11      	blt.n	6742 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    671e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    6722:	2300      	movs	r3, #0
    6724:	4282      	cmp	r2, r0
    6726:	eb73 0401 	sbcs.w	r4, r3, r1
    672a:	da00      	bge.n	672e <next_timeout+0x36>
    672c:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    672e:	4b07      	ldr	r3, [pc, #28]	; (674c <next_timeout+0x54>)
    6730:	691b      	ldr	r3, [r3, #16]
    6732:	b113      	cbz	r3, 673a <next_timeout+0x42>
    6734:	4298      	cmp	r0, r3
    6736:	bfa8      	it	ge
    6738:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    673a:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    673c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    6740:	e7f5      	b.n	672e <next_timeout+0x36>
    6742:	2000      	movs	r0, #0
    6744:	e7f3      	b.n	672e <next_timeout+0x36>
    6746:	bf00      	nop
    6748:	200001a0 	.word	0x200001a0
    674c:	20000eb4 	.word	0x20000eb4

00006750 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6750:	f1b3 3fff 	cmp.w	r3, #4294967295
    6754:	bf08      	it	eq
    6756:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    675a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    675e:	4604      	mov	r4, r0
    6760:	4692      	mov	sl, r2
    6762:	469b      	mov	fp, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6764:	d073      	beq.n	684e <z_add_timeout+0xfe>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    6766:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    6768:	f04f 0320 	mov.w	r3, #32
    676c:	f3ef 8511 	mrs	r5, BASEPRI
    6770:	f383 8812 	msr	BASEPRI_MAX, r3
    6774:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    6778:	f06f 0301 	mvn.w	r3, #1
    677c:	ebb3 080a 	subs.w	r8, r3, sl
    6780:	f04f 32ff 	mov.w	r2, #4294967295
    6784:	eb62 090b 	sbc.w	r9, r2, fp
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    6788:	f1b8 0f00 	cmp.w	r8, #0
    678c:	f179 0100 	sbcs.w	r1, r9, #0
    6790:	db1c      	blt.n	67cc <z_add_timeout+0x7c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    6792:	4830      	ldr	r0, [pc, #192]	; (6854 <z_add_timeout+0x104>)
    6794:	e9d0 1000 	ldrd	r1, r0, [r0]
    6798:	1a5b      	subs	r3, r3, r1
    679a:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
    679e:	ebb3 060a 	subs.w	r6, r3, sl
    67a2:	eb62 070b 	sbc.w	r7, r2, fp
    67a6:	2e01      	cmp	r6, #1
    67a8:	f177 0300 	sbcs.w	r3, r7, #0
    67ac:	bfbc      	itt	lt
    67ae:	2601      	movlt	r6, #1
    67b0:	2700      	movlt	r7, #0
    67b2:	e9c4 6704 	strd	r6, r7, [r4, #16]
	return list->head == list;
    67b6:	4a28      	ldr	r2, [pc, #160]	; (6858 <z_add_timeout+0x108>)
    67b8:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    67bc:	4293      	cmp	r3, r2
    67be:	d11e      	bne.n	67fe <z_add_timeout+0xae>
	node->prev = tail;
    67c0:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
    67c4:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    67c8:	6054      	str	r4, [r2, #4]
}
    67ca:	e02d      	b.n	6828 <z_add_timeout+0xd8>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    67cc:	f7ff ff70 	bl	66b0 <elapsed>
    67d0:	f11a 0301 	adds.w	r3, sl, #1
    67d4:	9300      	str	r3, [sp, #0]
    67d6:	f14b 0300 	adc.w	r3, fp, #0
    67da:	9301      	str	r3, [sp, #4]
    67dc:	e9dd 2300 	ldrd	r2, r3, [sp]
    67e0:	1812      	adds	r2, r2, r0
    67e2:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    67e6:	e9c4 2304 	strd	r2, r3, [r4, #16]
    67ea:	e7e4      	b.n	67b6 <z_add_timeout+0x66>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    67ec:	ebb6 0008 	subs.w	r0, r6, r8
    67f0:	eb67 0109 	sbc.w	r1, r7, r9
	return (node == list->tail) ? NULL : node->next;
    67f4:	4563      	cmp	r3, ip
    67f6:	e9c4 0104 	strd	r0, r1, [r4, #16]
    67fa:	d0e1      	beq.n	67c0 <z_add_timeout+0x70>
    67fc:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    67fe:	2b00      	cmp	r3, #0
    6800:	d0de      	beq.n	67c0 <z_add_timeout+0x70>
			if (t->dticks > to->dticks) {
    6802:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
    6806:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
    680a:	4546      	cmp	r6, r8
    680c:	eb77 0109 	sbcs.w	r1, r7, r9
    6810:	daec      	bge.n	67ec <z_add_timeout+0x9c>
				t->dticks -= to->dticks;
    6812:	ebb8 0006 	subs.w	r0, r8, r6
    6816:	eb69 0107 	sbc.w	r1, r9, r7
    681a:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    681e:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    6820:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    6824:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    6826:	605c      	str	r4, [r3, #4]
	return list->head == list;
    6828:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    682a:	4293      	cmp	r3, r2
    682c:	d00b      	beq.n	6846 <z_add_timeout+0xf6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    682e:	429c      	cmp	r4, r3
    6830:	d109      	bne.n	6846 <z_add_timeout+0xf6>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    6832:	f7ff ff61 	bl	66f8 <next_timeout>

			if (next_time == 0 ||
    6836:	b118      	cbz	r0, 6840 <z_add_timeout+0xf0>
			    _current_cpu->slice_ticks != next_time) {
    6838:	4b08      	ldr	r3, [pc, #32]	; (685c <z_add_timeout+0x10c>)
			if (next_time == 0 ||
    683a:	691b      	ldr	r3, [r3, #16]
    683c:	4283      	cmp	r3, r0
    683e:	d002      	beq.n	6846 <z_add_timeout+0xf6>
				sys_clock_set_timeout(next_time, false);
    6840:	2100      	movs	r1, #0
    6842:	f7fe f98d 	bl	4b60 <sys_clock_set_timeout>
	__asm__ volatile(
    6846:	f385 8811 	msr	BASEPRI, r5
    684a:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    684e:	b003      	add	sp, #12
    6850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6854:	200006c8 	.word	0x200006c8
    6858:	200001a0 	.word	0x200001a0
    685c:	20000eb4 	.word	0x20000eb4

00006860 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    6860:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6864:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    6866:	f7ff fc57 	bl	6118 <z_time_slice>
	__asm__ volatile(
    686a:	f04f 0320 	mov.w	r3, #32
    686e:	f3ef 8411 	mrs	r4, BASEPRI
    6872:	f383 8812 	msr	BASEPRI_MAX, r3
    6876:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    687a:	4d2c      	ldr	r5, [pc, #176]	; (692c <sys_clock_announce+0xcc>)
    687c:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 6930 <sys_clock_announce+0xd0>
	return list->head == list;
    6880:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 6934 <sys_clock_announce+0xd4>
    6884:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    6886:	4651      	mov	r1, sl
    6888:	f8d5 c000 	ldr.w	ip, [r5]
    688c:	f8db 0000 	ldr.w	r0, [fp]
    6890:	4662      	mov	r2, ip
    6892:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6894:	4558      	cmp	r0, fp
    6896:	e9da 8900 	ldrd	r8, r9, [sl]
    689a:	e9cd 2300 	strd	r2, r3, [sp]
    689e:	d00d      	beq.n	68bc <sys_clock_announce+0x5c>
    68a0:	b160      	cbz	r0, 68bc <sys_clock_announce+0x5c>
    68a2:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    68a6:	45b4      	cmp	ip, r6
    68a8:	41bb      	sbcs	r3, r7
    68aa:	da1e      	bge.n	68ea <sys_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    68ac:	9b00      	ldr	r3, [sp, #0]
    68ae:	ebb6 0c03 	subs.w	ip, r6, r3
    68b2:	9b01      	ldr	r3, [sp, #4]
    68b4:	eb67 0603 	sbc.w	r6, r7, r3
    68b8:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
    68bc:	9b00      	ldr	r3, [sp, #0]
    68be:	eb13 0208 	adds.w	r2, r3, r8
    68c2:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
    68c4:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
    68c8:	eb43 0309 	adc.w	r3, r3, r9
    68cc:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
    68d0:	602e      	str	r6, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    68d2:	f7ff ff11 	bl	66f8 <next_timeout>
    68d6:	4631      	mov	r1, r6
    68d8:	f7fe f942 	bl	4b60 <sys_clock_set_timeout>
	__asm__ volatile(
    68dc:	f384 8811 	msr	BASEPRI, r4
    68e0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    68e4:	b003      	add	sp, #12
    68e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
    68ea:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
    68ee:	f04f 0200 	mov.w	r2, #0
    68f2:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
    68f6:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
    68fa:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
    68fe:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
    6902:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
    6906:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
    6908:	f7ff fedc 	bl	66c4 <remove_timeout>
    690c:	f384 8811 	msr	BASEPRI, r4
    6910:	f3bf 8f6f 	isb	sy
		t->fn(t);
    6914:	6883      	ldr	r3, [r0, #8]
    6916:	4798      	blx	r3
	__asm__ volatile(
    6918:	f04f 0320 	mov.w	r3, #32
    691c:	f3ef 8411 	mrs	r4, BASEPRI
    6920:	f383 8812 	msr	BASEPRI_MAX, r3
    6924:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
    6928:	4901      	ldr	r1, [pc, #4]	; (6930 <sys_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    692a:	e7ad      	b.n	6888 <sys_clock_announce+0x28>
    692c:	20000ee8 	.word	0x20000ee8
    6930:	200006c8 	.word	0x200006c8
    6934:	200001a0 	.word	0x200001a0

00006938 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    6938:	b510      	push	{r4, lr}
    693a:	f04f 0320 	mov.w	r3, #32
    693e:	f3ef 8411 	mrs	r4, BASEPRI
    6942:	f383 8812 	msr	BASEPRI_MAX, r3
    6946:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    694a:	f7fe f939 	bl	4bc0 <sys_clock_elapsed>
    694e:	4b06      	ldr	r3, [pc, #24]	; (6968 <sys_clock_tick_get+0x30>)
    6950:	e9d3 2300 	ldrd	r2, r3, [r3]
    6954:	1812      	adds	r2, r2, r0
    6956:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    695a:	f384 8811 	msr	BASEPRI, r4
    695e:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    6962:	4610      	mov	r0, r2
    6964:	4619      	mov	r1, r3
    6966:	bd10      	pop	{r4, pc}
    6968:	200006c8 	.word	0x200006c8

0000696c <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    696c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    696e:	4604      	mov	r4, r0
	__asm__ volatile(
    6970:	f04f 0320 	mov.w	r3, #32
    6974:	f3ef 8511 	mrs	r5, BASEPRI
    6978:	f383 8812 	msr	BASEPRI_MAX, r3
    697c:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    6980:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
    6984:	1c56      	adds	r6, r2, #1
    6986:	f143 0700 	adc.w	r7, r3, #0
    698a:	2f00      	cmp	r7, #0
    698c:	bf08      	it	eq
    698e:	2e02      	cmpeq	r6, #2
    6990:	d302      	bcc.n	6998 <z_timer_expiration_handler+0x2c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    6992:	4917      	ldr	r1, [pc, #92]	; (69f0 <z_timer_expiration_handler+0x84>)
    6994:	f7ff fedc 	bl	6750 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    6998:	6b23      	ldr	r3, [r4, #48]	; 0x30
    699a:	3301      	adds	r3, #1
    699c:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    699e:	6a23      	ldr	r3, [r4, #32]
    69a0:	b173      	cbz	r3, 69c0 <z_timer_expiration_handler+0x54>
	__asm__ volatile(
    69a2:	f385 8811 	msr	BASEPRI, r5
    69a6:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    69aa:	6a23      	ldr	r3, [r4, #32]
    69ac:	4620      	mov	r0, r4
    69ae:	4798      	blx	r3
	__asm__ volatile(
    69b0:	f04f 0320 	mov.w	r3, #32
    69b4:	f3ef 8511 	mrs	r5, BASEPRI
    69b8:	f383 8812 	msr	BASEPRI_MAX, r3
    69bc:	f3bf 8f6f 	isb	sy
	return list->head == list;
    69c0:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    69c4:	42a6      	cmp	r6, r4
    69c6:	d000      	beq.n	69ca <z_timer_expiration_handler+0x5e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    69c8:	b926      	cbnz	r6, 69d4 <z_timer_expiration_handler+0x68>
	__asm__ volatile(
    69ca:	f385 8811 	msr	BASEPRI, r5
    69ce:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    69d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	z_unpend_thread_no_timeout(thread);
    69d4:	4630      	mov	r0, r6
    69d6:	f001 fb1a 	bl	800e <z_unpend_thread_no_timeout>
    69da:	2300      	movs	r3, #0
    69dc:	67f3      	str	r3, [r6, #124]	; 0x7c
    69de:	f385 8811 	msr	BASEPRI, r5
    69e2:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    69e6:	4630      	mov	r0, r6
}
    69e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
    69ec:	f001 bb53 	b.w	8096 <z_ready_thread>
    69f0:	0000696d 	.word	0x0000696d

000069f4 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    69f4:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
    69f8:	4619      	mov	r1, r3
    69fa:	4606      	mov	r6, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    69fc:	1c4c      	adds	r4, r1, #1
{
    69fe:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    6a00:	bf08      	it	eq
    6a02:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    6a06:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    6a0a:	4680      	mov	r8, r0
    6a0c:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    6a0e:	d04c      	beq.n	6aaa <z_impl_k_timer_start+0xb6>
    6a10:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    6a12:	1c6b      	adds	r3, r5, #1
    6a14:	bf08      	it	eq
    6a16:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    6a1a:	4614      	mov	r4, r2
    6a1c:	d019      	beq.n	6a52 <z_impl_k_timer_start+0x5e>
    6a1e:	ea54 0305 	orrs.w	r3, r4, r5
    6a22:	d016      	beq.n	6a52 <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
    6a24:	f06f 0301 	mvn.w	r3, #1
    6a28:	ebb3 0a02 	subs.w	sl, r3, r2
    6a2c:	f04f 33ff 	mov.w	r3, #4294967295
    6a30:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    6a34:	f1ba 0f00 	cmp.w	sl, #0
    6a38:	f17b 0300 	sbcs.w	r3, fp, #0
    6a3c:	da09      	bge.n	6a52 <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
    6a3e:	f112 34ff 	adds.w	r4, r2, #4294967295
    6a42:	f145 35ff 	adc.w	r5, r5, #4294967295
    6a46:	2c01      	cmp	r4, #1
    6a48:	f175 0300 	sbcs.w	r3, r5, #0
    6a4c:	bfbc      	itt	lt
    6a4e:	2401      	movlt	r4, #1
    6a50:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    6a52:	f06f 0301 	mvn.w	r3, #1
    6a56:	1a1b      	subs	r3, r3, r0
    6a58:	9300      	str	r3, [sp, #0]
    6a5a:	f04f 33ff 	mov.w	r3, #4294967295
    6a5e:	eb63 0301 	sbc.w	r3, r3, r1
    6a62:	9301      	str	r3, [sp, #4]
    6a64:	e9dd 2300 	ldrd	r2, r3, [sp]
    6a68:	2a00      	cmp	r2, #0
    6a6a:	f173 0300 	sbcs.w	r3, r3, #0
    6a6e:	da0c      	bge.n	6a8a <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
    6a70:	f110 38ff 	adds.w	r8, r0, #4294967295
    6a74:	f141 39ff 	adc.w	r9, r1, #4294967295
    6a78:	f1b8 0f00 	cmp.w	r8, #0
    6a7c:	f179 0300 	sbcs.w	r3, r9, #0
    6a80:	bfbc      	itt	lt
    6a82:	f04f 0800 	movlt.w	r8, #0
    6a86:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
    6a8a:	4630      	mov	r0, r6
    6a8c:	f001 fbac 	bl	81e8 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    6a90:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    6a92:	4907      	ldr	r1, [pc, #28]	; (6ab0 <z_impl_k_timer_start+0xbc>)
	timer->status = 0U;
    6a94:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    6a96:	4642      	mov	r2, r8
    6a98:	464b      	mov	r3, r9
    6a9a:	4630      	mov	r0, r6
	timer->period = period;
    6a9c:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
    6aa0:	b002      	add	sp, #8
    6aa2:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    6aa6:	f7ff be53 	b.w	6750 <z_add_timeout>
}
    6aaa:	b002      	add	sp, #8
    6aac:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
    6ab0:	0000696d 	.word	0x0000696d

00006ab4 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
    6ab4:	b538      	push	{r3, r4, r5, lr}
    6ab6:	4603      	mov	r3, r0
	__asm__ volatile(
    6ab8:	f04f 0220 	mov.w	r2, #32
    6abc:	f3ef 8511 	mrs	r5, BASEPRI
    6ac0:	f382 8812 	msr	BASEPRI_MAX, r2
    6ac4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
    6ac8:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
    6aca:	2101      	movs	r1, #1
    6acc:	6081      	str	r1, [r0, #8]
	return list->head == list;
    6ace:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
    6ad0:	4283      	cmp	r3, r0
    6ad2:	d106      	bne.n	6ae2 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
    6ad4:	f385 8811 	msr	BASEPRI, r5
    6ad8:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
    6adc:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
    6ade:	4620      	mov	r0, r4
    6ae0:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
    6ae2:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    6ae6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6ae8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6aea:	2300      	movs	r3, #0
	node->prev = NULL;
    6aec:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    6af0:	f001 fbed 	bl	82ce <signal_poll_event>
	z_reschedule(&lock, key);
    6af4:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    6af6:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
    6af8:	4801      	ldr	r0, [pc, #4]	; (6b00 <z_impl_k_poll_signal_raise+0x4c>)
    6afa:	f7ff fa89 	bl	6010 <z_reschedule>
	return rc;
    6afe:	e7ee      	b.n	6ade <z_impl_k_poll_signal_raise+0x2a>
    6b00:	20001342 	.word	0x20001342

00006b04 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    6b04:	4a02      	ldr	r2, [pc, #8]	; (6b10 <boot_banner+0xc>)
    6b06:	4903      	ldr	r1, [pc, #12]	; (6b14 <boot_banner+0x10>)
    6b08:	4803      	ldr	r0, [pc, #12]	; (6b18 <boot_banner+0x14>)
    6b0a:	f000 bbbe 	b.w	728a <printk>
    6b0e:	bf00      	nop
    6b10:	00008c65 	.word	0x00008c65
    6b14:	00008db6 	.word	0x00008db6
    6b18:	00008dc5 	.word	0x00008dc5

00006b1c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    6b1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    6b1e:	4b09      	ldr	r3, [pc, #36]	; (6b44 <k_sys_work_q_init+0x28>)
    6b20:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    6b22:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    6b24:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    6b26:	9300      	str	r3, [sp, #0]
    6b28:	4907      	ldr	r1, [pc, #28]	; (6b48 <k_sys_work_q_init+0x2c>)
    6b2a:	4808      	ldr	r0, [pc, #32]	; (6b4c <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    6b2c:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    6b30:	f04f 33ff 	mov.w	r3, #4294967295
    6b34:	f44f 6280 	mov.w	r2, #1024	; 0x400
    6b38:	f000 f8f8 	bl	6d2c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    6b3c:	4620      	mov	r0, r4
    6b3e:	b004      	add	sp, #16
    6b40:	bd10      	pop	{r4, pc}
    6b42:	bf00      	nop
    6b44:	00008dec 	.word	0x00008dec
    6b48:	20002f00 	.word	0x20002f00
    6b4c:	200006d0 	.word	0x200006d0

00006b50 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    6b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    6b54:	4e4b      	ldr	r6, [pc, #300]	; (6c84 <work_queue_main+0x134>)
{
    6b56:	b085      	sub	sp, #20
    6b58:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    6b5a:	f04f 38ff 	mov.w	r8, #4294967295
    6b5e:	f04f 39ff 	mov.w	r9, #4294967295
	__asm__ volatile(
    6b62:	f04f 0320 	mov.w	r3, #32
    6b66:	f3ef 8711 	mrs	r7, BASEPRI
    6b6a:	f383 8812 	msr	BASEPRI_MAX, r3
    6b6e:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
    6b72:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	return list->head;
    6b76:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    6b7a:	b985      	cbnz	r5, 6b9e <work_queue_main+0x4e>
	*flagp &= ~BIT(bit);
    6b7c:	f023 0204 	bic.w	r2, r3, #4
		} else if (flag_test_and_clear(&queue->flags,
    6b80:	075d      	lsls	r5, r3, #29
	*flagp &= ~BIT(bit);
    6b82:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
    6b86:	d433      	bmi.n	6bf0 <work_queue_main+0xa0>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    6b88:	2300      	movs	r3, #0
    6b8a:	e9cd 8900 	strd	r8, r9, [sp]
    6b8e:	9302      	str	r3, [sp, #8]
    6b90:	f104 0288 	add.w	r2, r4, #136	; 0x88
    6b94:	4639      	mov	r1, r7
    6b96:	483c      	ldr	r0, [pc, #240]	; (6c88 <work_queue_main+0x138>)
    6b98:	f7ff fd5e 	bl	6658 <z_sched_wait>
			continue;
    6b9c:	e7e1      	b.n	6b62 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    6b9e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
    6ba2:	6829      	ldr	r1, [r5, #0]
	list->head = node;
    6ba4:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    6ba8:	4295      	cmp	r5, r2
    6baa:	d101      	bne.n	6bb0 <work_queue_main+0x60>
	list->tail = node;
    6bac:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    6bb0:	f043 0302 	orr.w	r3, r3, #2
    6bb4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    6bb8:	68eb      	ldr	r3, [r5, #12]
    6bba:	f023 0304 	bic.w	r3, r3, #4
    6bbe:	f043 0301 	orr.w	r3, r3, #1
    6bc2:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    6bc4:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    6bc6:	f387 8811 	msr	BASEPRI, r7
    6bca:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    6bce:	4628      	mov	r0, r5
    6bd0:	4798      	blx	r3
	__asm__ volatile(
    6bd2:	f04f 0320 	mov.w	r3, #32
    6bd6:	f3ef 8b11 	mrs	fp, BASEPRI
    6bda:	f383 8812 	msr	BASEPRI_MAX, r3
    6bde:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    6be2:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    6be4:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    6be6:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    6bea:	d40b      	bmi.n	6c04 <work_queue_main+0xb4>
	*flagp &= ~BIT(bit);
    6bec:	60ea      	str	r2, [r5, #12]
    6bee:	e00e      	b.n	6c0e <work_queue_main+0xbe>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    6bf0:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    6bf4:	2200      	movs	r2, #0
    6bf6:	2101      	movs	r1, #1
    6bf8:	4628      	mov	r0, r5
    6bfa:	f001 fad8 	bl	81ae <z_sched_wake>
    6bfe:	2800      	cmp	r0, #0
    6c00:	d1f8      	bne.n	6bf4 <work_queue_main+0xa4>
    6c02:	e7c1      	b.n	6b88 <work_queue_main+0x38>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    6c04:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    6c06:	f023 0303 	bic.w	r3, r3, #3
    6c0a:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    6c0c:	b970      	cbnz	r0, 6c2c <work_queue_main+0xdc>
	*flagp &= ~BIT(bit);
    6c0e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    6c12:	f023 0302 	bic.w	r3, r3, #2
    6c16:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
    6c1a:	f38b 8811 	msr	BASEPRI, fp
    6c1e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    6c22:	05d8      	lsls	r0, r3, #23
    6c24:	d49d      	bmi.n	6b62 <work_queue_main+0x12>
	z_impl_k_yield();
    6c26:	f7ff fc07 	bl	6438 <z_impl_k_yield>
}
    6c2a:	e79a      	b.n	6b62 <work_queue_main+0x12>
	return node->next;
    6c2c:	6807      	ldr	r7, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    6c2e:	f04f 0a00 	mov.w	sl, #0
    6c32:	2f00      	cmp	r7, #0
    6c34:	bf38      	it	cc
    6c36:	2700      	movcc	r7, #0
	parent->next = child;
    6c38:	4653      	mov	r3, sl
		if (wc->work == work) {
    6c3a:	6842      	ldr	r2, [r0, #4]
    6c3c:	4295      	cmp	r5, r2
    6c3e:	4601      	mov	r1, r0
    6c40:	d10e      	bne.n	6c60 <work_queue_main+0x110>
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    6c42:	6801      	ldr	r1, [r0, #0]
    6c44:	f1ba 0f00 	cmp.w	sl, #0
    6c48:	d114      	bne.n	6c74 <work_queue_main+0x124>
    6c4a:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    6c4c:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    6c4e:	4290      	cmp	r0, r2
    6c50:	d100      	bne.n	6c54 <work_queue_main+0x104>
	list->tail = node;
    6c52:	6071      	str	r1, [r6, #4]
	parent->next = child;
    6c54:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    6c58:	f7ff f942 	bl	5ee0 <z_impl_k_sem_give>
}
    6c5c:	4651      	mov	r1, sl
    6c5e:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    6c60:	2f00      	cmp	r7, #0
    6c62:	d0d4      	beq.n	6c0e <work_queue_main+0xbe>
	return node->next;
    6c64:	683a      	ldr	r2, [r7, #0]
    6c66:	2a00      	cmp	r2, #0
    6c68:	bf38      	it	cc
    6c6a:	2200      	movcc	r2, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    6c6c:	4638      	mov	r0, r7
    6c6e:	468a      	mov	sl, r1
    6c70:	4617      	mov	r7, r2
    6c72:	e7e2      	b.n	6c3a <work_queue_main+0xea>
	parent->next = child;
    6c74:	f8ca 1000 	str.w	r1, [sl]
Z_GENLIST_REMOVE(slist, snode)
    6c78:	6872      	ldr	r2, [r6, #4]
    6c7a:	4290      	cmp	r0, r2
	list->tail = node;
    6c7c:	bf08      	it	eq
    6c7e:	f8c6 a004 	streq.w	sl, [r6, #4]
}
    6c82:	e7e7      	b.n	6c54 <work_queue_main+0x104>
    6c84:	20000eec 	.word	0x20000eec
    6c88:	20001342 	.word	0x20001342

00006c8c <submit_to_queue_locked>:
{
    6c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    6c8e:	68c3      	ldr	r3, [r0, #12]
    6c90:	079a      	lsls	r2, r3, #30
{
    6c92:	4604      	mov	r4, r0
    6c94:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    6c96:	f3c3 0540 	ubfx	r5, r3, #1, #1
    6c9a:	d41f      	bmi.n	6cdc <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    6c9c:	075f      	lsls	r7, r3, #29
    6c9e:	d41f      	bmi.n	6ce0 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
    6ca0:	680a      	ldr	r2, [r1, #0]
    6ca2:	b90a      	cbnz	r2, 6ca8 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    6ca4:	6882      	ldr	r2, [r0, #8]
    6ca6:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    6ca8:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
    6caa:	bf44      	itt	mi
    6cac:	68a3      	ldrmi	r3, [r4, #8]
    6cae:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
    6cb0:	6837      	ldr	r7, [r6, #0]
			ret = 2;
    6cb2:	bf4c      	ite	mi
    6cb4:	2502      	movmi	r5, #2
		ret = 1;
    6cb6:	2501      	movpl	r5, #1
	if (queue == NULL) {
    6cb8:	b37f      	cbz	r7, 6d1a <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    6cba:	4b1b      	ldr	r3, [pc, #108]	; (6d28 <submit_to_queue_locked+0x9c>)
    6cbc:	689b      	ldr	r3, [r3, #8]
    6cbe:	42bb      	cmp	r3, r7
    6cc0:	d111      	bne.n	6ce6 <submit_to_queue_locked+0x5a>
    6cc2:	f001 f969 	bl	7f98 <k_is_in_isr>
    6cc6:	f080 0001 	eor.w	r0, r0, #1
    6cca:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
    6ccc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    6cd0:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    6cd2:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    6cd6:	d523      	bpl.n	6d20 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
    6cd8:	b13a      	cbz	r2, 6cea <submit_to_queue_locked+0x5e>
    6cda:	b940      	cbnz	r0, 6cee <submit_to_queue_locked+0x62>
		ret = -EBUSY;
    6cdc:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
    6ce0:	2300      	movs	r3, #0
    6ce2:	6033      	str	r3, [r6, #0]
	return ret;
    6ce4:	e013      	b.n	6d0e <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    6ce6:	2000      	movs	r0, #0
    6ce8:	e7f0      	b.n	6ccc <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
    6cea:	071b      	lsls	r3, r3, #28
    6cec:	d4f6      	bmi.n	6cdc <submit_to_queue_locked+0x50>
	parent->next = child;
    6cee:	2300      	movs	r3, #0
    6cf0:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
    6cf2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    6cf6:	b963      	cbnz	r3, 6d12 <submit_to_queue_locked+0x86>
	list->head = node;
    6cf8:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
    6cfc:	4638      	mov	r0, r7
    6cfe:	f001 fb50 	bl	83a2 <notify_queue_locked>
	*flagp |= BIT(bit);
    6d02:	68e3      	ldr	r3, [r4, #12]
    6d04:	f043 0304 	orr.w	r3, r3, #4
    6d08:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    6d0a:	6833      	ldr	r3, [r6, #0]
    6d0c:	60a3      	str	r3, [r4, #8]
}
    6d0e:	4628      	mov	r0, r5
    6d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    6d12:	601c      	str	r4, [r3, #0]
	list->tail = node;
    6d14:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
    6d18:	e7f0      	b.n	6cfc <submit_to_queue_locked+0x70>
		return -EINVAL;
    6d1a:	f06f 0515 	mvn.w	r5, #21
    6d1e:	e7df      	b.n	6ce0 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
    6d20:	f06f 0512 	mvn.w	r5, #18
    6d24:	e7dc      	b.n	6ce0 <submit_to_queue_locked+0x54>
    6d26:	bf00      	nop
    6d28:	20000eb4 	.word	0x20000eb4

00006d2c <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    6d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d2e:	b089      	sub	sp, #36	; 0x24
    6d30:	4604      	mov	r4, r0
	list->head = NULL;
    6d32:	2000      	movs	r0, #0
	list->tail = NULL;
    6d34:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
    6d38:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	sys_dlist_init(&w->waitq);
    6d3a:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    6d3e:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
    6d42:	f104 0090 	add.w	r0, r4, #144	; 0x90
    6d46:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    6d4a:	b31d      	cbz	r5, 6d94 <k_work_queue_start+0x68>
    6d4c:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    6d4e:	2800      	cmp	r0, #0
    6d50:	f240 1001 	movw	r0, #257	; 0x101
    6d54:	bf08      	it	eq
    6d56:	2001      	moveq	r0, #1
	*flagp = flags;
    6d58:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    6d5c:	2000      	movs	r0, #0
    6d5e:	f04f 36ff 	mov.w	r6, #4294967295
    6d62:	f04f 37ff 	mov.w	r7, #4294967295
    6d66:	e9cd 3003 	strd	r3, r0, [sp, #12]
    6d6a:	e9cd 0001 	strd	r0, r0, [sp, #4]
    6d6e:	e9cd 6706 	strd	r6, r7, [sp, #24]
    6d72:	4b09      	ldr	r3, [pc, #36]	; (6d98 <k_work_queue_start+0x6c>)
    6d74:	9400      	str	r4, [sp, #0]
    6d76:	4620      	mov	r0, r4
    6d78:	f7fe ff4e 	bl	5c18 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    6d7c:	b125      	cbz	r5, 6d88 <k_work_queue_start+0x5c>
    6d7e:	6829      	ldr	r1, [r5, #0]
    6d80:	b111      	cbz	r1, 6d88 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    6d82:	4620      	mov	r0, r4
    6d84:	f001 f90e 	bl	7fa4 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    6d88:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    6d8a:	b009      	add	sp, #36	; 0x24
    6d8c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    6d90:	f001 b90b 	b.w	7faa <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    6d94:	2001      	movs	r0, #1
    6d96:	e7df      	b.n	6d58 <k_work_queue_start+0x2c>
    6d98:	00006b51 	.word	0x00006b51

00006d9c <nrf_cc3xx_platform_init_no_rng>:
    6d9c:	b510      	push	{r4, lr}
    6d9e:	4c0a      	ldr	r4, [pc, #40]	; (6dc8 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    6da0:	6823      	ldr	r3, [r4, #0]
    6da2:	b11b      	cbz	r3, 6dac <nrf_cc3xx_platform_init_no_rng+0x10>
    6da4:	2301      	movs	r3, #1
    6da6:	6023      	str	r3, [r4, #0]
    6da8:	2000      	movs	r0, #0
    6daa:	bd10      	pop	{r4, pc}
    6dac:	f000 f8d6 	bl	6f5c <CC_LibInitNoRng>
    6db0:	2800      	cmp	r0, #0
    6db2:	d0f7      	beq.n	6da4 <nrf_cc3xx_platform_init_no_rng+0x8>
    6db4:	3801      	subs	r0, #1
    6db6:	2806      	cmp	r0, #6
    6db8:	d803      	bhi.n	6dc2 <nrf_cc3xx_platform_init_no_rng+0x26>
    6dba:	4b04      	ldr	r3, [pc, #16]	; (6dcc <nrf_cc3xx_platform_init_no_rng+0x30>)
    6dbc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    6dc0:	bd10      	pop	{r4, pc}
    6dc2:	4803      	ldr	r0, [pc, #12]	; (6dd0 <nrf_cc3xx_platform_init_no_rng+0x34>)
    6dc4:	bd10      	pop	{r4, pc}
    6dc6:	bf00      	nop
    6dc8:	20000ef4 	.word	0x20000ef4
    6dcc:	00008884 	.word	0x00008884
    6dd0:	ffff8ffe 	.word	0xffff8ffe

00006dd4 <nrf_cc3xx_platform_abort>:
    6dd4:	f3bf 8f4f 	dsb	sy
    6dd8:	4905      	ldr	r1, [pc, #20]	; (6df0 <nrf_cc3xx_platform_abort+0x1c>)
    6dda:	4b06      	ldr	r3, [pc, #24]	; (6df4 <nrf_cc3xx_platform_abort+0x20>)
    6ddc:	68ca      	ldr	r2, [r1, #12]
    6dde:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    6de2:	4313      	orrs	r3, r2
    6de4:	60cb      	str	r3, [r1, #12]
    6de6:	f3bf 8f4f 	dsb	sy
    6dea:	bf00      	nop
    6dec:	e7fd      	b.n	6dea <nrf_cc3xx_platform_abort+0x16>
    6dee:	bf00      	nop
    6df0:	e000ed00 	.word	0xe000ed00
    6df4:	05fa0004 	.word	0x05fa0004

00006df8 <CC_PalAbort>:
    6df8:	b4f0      	push	{r4, r5, r6, r7}
    6dfa:	4f09      	ldr	r7, [pc, #36]	; (6e20 <CC_PalAbort+0x28>)
    6dfc:	4e09      	ldr	r6, [pc, #36]	; (6e24 <CC_PalAbort+0x2c>)
    6dfe:	4c0a      	ldr	r4, [pc, #40]	; (6e28 <CC_PalAbort+0x30>)
    6e00:	4a0a      	ldr	r2, [pc, #40]	; (6e2c <CC_PalAbort+0x34>)
    6e02:	4d0b      	ldr	r5, [pc, #44]	; (6e30 <CC_PalAbort+0x38>)
    6e04:	490b      	ldr	r1, [pc, #44]	; (6e34 <CC_PalAbort+0x3c>)
    6e06:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    6e0a:	603b      	str	r3, [r7, #0]
    6e0c:	6852      	ldr	r2, [r2, #4]
    6e0e:	6033      	str	r3, [r6, #0]
    6e10:	6023      	str	r3, [r4, #0]
    6e12:	2400      	movs	r4, #0
    6e14:	602b      	str	r3, [r5, #0]
    6e16:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
    6e1a:	bcf0      	pop	{r4, r5, r6, r7}
    6e1c:	4710      	bx	r2
    6e1e:	bf00      	nop
    6e20:	5002b400 	.word	0x5002b400
    6e24:	5002b404 	.word	0x5002b404
    6e28:	5002b408 	.word	0x5002b408
    6e2c:	200001a8 	.word	0x200001a8
    6e30:	5002b40c 	.word	0x5002b40c
    6e34:	5002a000 	.word	0x5002a000

00006e38 <nrf_cc3xx_platform_set_abort>:
    6e38:	e9d0 1200 	ldrd	r1, r2, [r0]
    6e3c:	4b01      	ldr	r3, [pc, #4]	; (6e44 <nrf_cc3xx_platform_set_abort+0xc>)
    6e3e:	e9c3 1200 	strd	r1, r2, [r3]
    6e42:	4770      	bx	lr
    6e44:	200001a8 	.word	0x200001a8

00006e48 <mutex_free>:
    6e48:	b510      	push	{r4, lr}
    6e4a:	4604      	mov	r4, r0
    6e4c:	b130      	cbz	r0, 6e5c <mutex_free+0x14>
    6e4e:	6863      	ldr	r3, [r4, #4]
    6e50:	06db      	lsls	r3, r3, #27
    6e52:	d502      	bpl.n	6e5a <mutex_free+0x12>
    6e54:	2300      	movs	r3, #0
    6e56:	6023      	str	r3, [r4, #0]
    6e58:	6063      	str	r3, [r4, #4]
    6e5a:	bd10      	pop	{r4, pc}
    6e5c:	4b02      	ldr	r3, [pc, #8]	; (6e68 <mutex_free+0x20>)
    6e5e:	4803      	ldr	r0, [pc, #12]	; (6e6c <mutex_free+0x24>)
    6e60:	685b      	ldr	r3, [r3, #4]
    6e62:	4798      	blx	r3
    6e64:	e7f3      	b.n	6e4e <mutex_free+0x6>
    6e66:	bf00      	nop
    6e68:	200001a8 	.word	0x200001a8
    6e6c:	000088a0 	.word	0x000088a0

00006e70 <mutex_unlock>:
    6e70:	b168      	cbz	r0, 6e8e <mutex_unlock+0x1e>
    6e72:	6843      	ldr	r3, [r0, #4]
    6e74:	b13b      	cbz	r3, 6e86 <mutex_unlock+0x16>
    6e76:	06db      	lsls	r3, r3, #27
    6e78:	d507      	bpl.n	6e8a <mutex_unlock+0x1a>
    6e7a:	f3bf 8f5f 	dmb	sy
    6e7e:	2300      	movs	r3, #0
    6e80:	6003      	str	r3, [r0, #0]
    6e82:	4618      	mov	r0, r3
    6e84:	4770      	bx	lr
    6e86:	4803      	ldr	r0, [pc, #12]	; (6e94 <mutex_unlock+0x24>)
    6e88:	4770      	bx	lr
    6e8a:	4803      	ldr	r0, [pc, #12]	; (6e98 <mutex_unlock+0x28>)
    6e8c:	4770      	bx	lr
    6e8e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    6e92:	4770      	bx	lr
    6e94:	ffff8fea 	.word	0xffff8fea
    6e98:	ffff8fe9 	.word	0xffff8fe9

00006e9c <mutex_init>:
    6e9c:	b510      	push	{r4, lr}
    6e9e:	4604      	mov	r4, r0
    6ea0:	b120      	cbz	r0, 6eac <mutex_init+0x10>
    6ea2:	2200      	movs	r2, #0
    6ea4:	2311      	movs	r3, #17
    6ea6:	6022      	str	r2, [r4, #0]
    6ea8:	6063      	str	r3, [r4, #4]
    6eaa:	bd10      	pop	{r4, pc}
    6eac:	4801      	ldr	r0, [pc, #4]	; (6eb4 <mutex_init+0x18>)
    6eae:	f7ff ffa3 	bl	6df8 <CC_PalAbort>
    6eb2:	e7f6      	b.n	6ea2 <mutex_init+0x6>
    6eb4:	000088c8 	.word	0x000088c8

00006eb8 <mutex_lock>:
    6eb8:	b1c0      	cbz	r0, 6eec <mutex_lock+0x34>
    6eba:	6843      	ldr	r3, [r0, #4]
    6ebc:	b1a3      	cbz	r3, 6ee8 <mutex_lock+0x30>
    6ebe:	06db      	lsls	r3, r3, #27
    6ec0:	d510      	bpl.n	6ee4 <mutex_lock+0x2c>
    6ec2:	2201      	movs	r2, #1
    6ec4:	f3bf 8f5b 	dmb	ish
    6ec8:	e850 3f00 	ldrex	r3, [r0]
    6ecc:	e840 2100 	strex	r1, r2, [r0]
    6ed0:	2900      	cmp	r1, #0
    6ed2:	d1f9      	bne.n	6ec8 <mutex_lock+0x10>
    6ed4:	f3bf 8f5b 	dmb	ish
    6ed8:	2b01      	cmp	r3, #1
    6eda:	d0f3      	beq.n	6ec4 <mutex_lock+0xc>
    6edc:	f3bf 8f5f 	dmb	sy
    6ee0:	2000      	movs	r0, #0
    6ee2:	4770      	bx	lr
    6ee4:	4803      	ldr	r0, [pc, #12]	; (6ef4 <mutex_lock+0x3c>)
    6ee6:	4770      	bx	lr
    6ee8:	4803      	ldr	r0, [pc, #12]	; (6ef8 <mutex_lock+0x40>)
    6eea:	4770      	bx	lr
    6eec:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    6ef0:	4770      	bx	lr
    6ef2:	bf00      	nop
    6ef4:	ffff8fe9 	.word	0xffff8fe9
    6ef8:	ffff8fea 	.word	0xffff8fea

00006efc <nrf_cc3xx_platform_set_mutexes>:
    6efc:	b570      	push	{r4, r5, r6, lr}
    6efe:	e9d0 2300 	ldrd	r2, r3, [r0]
    6f02:	4c13      	ldr	r4, [pc, #76]	; (6f50 <nrf_cc3xx_platform_set_mutexes+0x54>)
    6f04:	4d13      	ldr	r5, [pc, #76]	; (6f54 <nrf_cc3xx_platform_set_mutexes+0x58>)
    6f06:	e9c4 2300 	strd	r2, r3, [r4]
    6f0a:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
    6f0e:	e9c4 6302 	strd	r6, r3, [r4, #8]
    6f12:	4b11      	ldr	r3, [pc, #68]	; (6f58 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    6f14:	6808      	ldr	r0, [r1, #0]
    6f16:	6018      	str	r0, [r3, #0]
    6f18:	6848      	ldr	r0, [r1, #4]
    6f1a:	6058      	str	r0, [r3, #4]
    6f1c:	6888      	ldr	r0, [r1, #8]
    6f1e:	6098      	str	r0, [r3, #8]
    6f20:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
    6f24:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    6f28:	60de      	str	r6, [r3, #12]
    6f2a:	6118      	str	r0, [r3, #16]
    6f2c:	06cb      	lsls	r3, r1, #27
    6f2e:	d50d      	bpl.n	6f4c <nrf_cc3xx_platform_set_mutexes+0x50>
    6f30:	2300      	movs	r3, #0
    6f32:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    6f36:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    6f3a:	f505 7088 	add.w	r0, r5, #272	; 0x110
    6f3e:	4790      	blx	r2
    6f40:	6823      	ldr	r3, [r4, #0]
    6f42:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    6f46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6f4a:	4718      	bx	r3
    6f4c:	bd70      	pop	{r4, r5, r6, pc}
    6f4e:	bf00      	nop
    6f50:	200001b8 	.word	0x200001b8
    6f54:	20001344 	.word	0x20001344
    6f58:	200001c8 	.word	0x200001c8

00006f5c <CC_LibInitNoRng>:
    6f5c:	b510      	push	{r4, lr}
    6f5e:	f000 f833 	bl	6fc8 <CC_HalInit>
    6f62:	b120      	cbz	r0, 6f6e <CC_LibInitNoRng+0x12>
    6f64:	2403      	movs	r4, #3
    6f66:	f000 f867 	bl	7038 <CC_PalTerminate>
    6f6a:	4620      	mov	r0, r4
    6f6c:	bd10      	pop	{r4, pc}
    6f6e:	f000 f835 	bl	6fdc <CC_PalInit>
    6f72:	b990      	cbnz	r0, 6f9a <CC_LibInitNoRng+0x3e>
    6f74:	f000 f8b0 	bl	70d8 <CC_PalPowerSaveModeSelect>
    6f78:	b990      	cbnz	r0, 6fa0 <CC_LibInitNoRng+0x44>
    6f7a:	4b0f      	ldr	r3, [pc, #60]	; (6fb8 <CC_LibInitNoRng+0x5c>)
    6f7c:	681b      	ldr	r3, [r3, #0]
    6f7e:	0e1b      	lsrs	r3, r3, #24
    6f80:	2bf0      	cmp	r3, #240	; 0xf0
    6f82:	d108      	bne.n	6f96 <CC_LibInitNoRng+0x3a>
    6f84:	4a0d      	ldr	r2, [pc, #52]	; (6fbc <CC_LibInitNoRng+0x60>)
    6f86:	4b0e      	ldr	r3, [pc, #56]	; (6fc0 <CC_LibInitNoRng+0x64>)
    6f88:	6812      	ldr	r2, [r2, #0]
    6f8a:	429a      	cmp	r2, r3
    6f8c:	d00a      	beq.n	6fa4 <CC_LibInitNoRng+0x48>
    6f8e:	2407      	movs	r4, #7
    6f90:	f000 f81c 	bl	6fcc <CC_HalTerminate>
    6f94:	e7e7      	b.n	6f66 <CC_LibInitNoRng+0xa>
    6f96:	2406      	movs	r4, #6
    6f98:	e7fa      	b.n	6f90 <CC_LibInitNoRng+0x34>
    6f9a:	2404      	movs	r4, #4
    6f9c:	4620      	mov	r0, r4
    6f9e:	bd10      	pop	{r4, pc}
    6fa0:	2400      	movs	r4, #0
    6fa2:	e7f5      	b.n	6f90 <CC_LibInitNoRng+0x34>
    6fa4:	2001      	movs	r0, #1
    6fa6:	f000 f897 	bl	70d8 <CC_PalPowerSaveModeSelect>
    6faa:	4604      	mov	r4, r0
    6fac:	2800      	cmp	r0, #0
    6fae:	d1f7      	bne.n	6fa0 <CC_LibInitNoRng+0x44>
    6fb0:	4b04      	ldr	r3, [pc, #16]	; (6fc4 <CC_LibInitNoRng+0x68>)
    6fb2:	6018      	str	r0, [r3, #0]
    6fb4:	e7d9      	b.n	6f6a <CC_LibInitNoRng+0xe>
    6fb6:	bf00      	nop
    6fb8:	5002b928 	.word	0x5002b928
    6fbc:	5002ba24 	.word	0x5002ba24
    6fc0:	20e00000 	.word	0x20e00000
    6fc4:	5002ba0c 	.word	0x5002ba0c

00006fc8 <CC_HalInit>:
    6fc8:	2000      	movs	r0, #0
    6fca:	4770      	bx	lr

00006fcc <CC_HalTerminate>:
    6fcc:	2000      	movs	r0, #0
    6fce:	4770      	bx	lr

00006fd0 <CC_HalMaskInterrupt>:
    6fd0:	4b01      	ldr	r3, [pc, #4]	; (6fd8 <CC_HalMaskInterrupt+0x8>)
    6fd2:	6018      	str	r0, [r3, #0]
    6fd4:	4770      	bx	lr
    6fd6:	bf00      	nop
    6fd8:	5002ba04 	.word	0x5002ba04

00006fdc <CC_PalInit>:
    6fdc:	b510      	push	{r4, lr}
    6fde:	4811      	ldr	r0, [pc, #68]	; (7024 <CC_PalInit+0x48>)
    6fe0:	f000 f848 	bl	7074 <CC_PalMutexCreate>
    6fe4:	b100      	cbz	r0, 6fe8 <CC_PalInit+0xc>
    6fe6:	bd10      	pop	{r4, pc}
    6fe8:	480f      	ldr	r0, [pc, #60]	; (7028 <CC_PalInit+0x4c>)
    6fea:	f000 f843 	bl	7074 <CC_PalMutexCreate>
    6fee:	2800      	cmp	r0, #0
    6ff0:	d1f9      	bne.n	6fe6 <CC_PalInit+0xa>
    6ff2:	4c0e      	ldr	r4, [pc, #56]	; (702c <CC_PalInit+0x50>)
    6ff4:	4620      	mov	r0, r4
    6ff6:	f000 f83d 	bl	7074 <CC_PalMutexCreate>
    6ffa:	2800      	cmp	r0, #0
    6ffc:	d1f3      	bne.n	6fe6 <CC_PalInit+0xa>
    6ffe:	4b0c      	ldr	r3, [pc, #48]	; (7030 <CC_PalInit+0x54>)
    7000:	480c      	ldr	r0, [pc, #48]	; (7034 <CC_PalInit+0x58>)
    7002:	601c      	str	r4, [r3, #0]
    7004:	f000 f836 	bl	7074 <CC_PalMutexCreate>
    7008:	4601      	mov	r1, r0
    700a:	2800      	cmp	r0, #0
    700c:	d1eb      	bne.n	6fe6 <CC_PalInit+0xa>
    700e:	f000 f82d 	bl	706c <CC_PalDmaInit>
    7012:	4604      	mov	r4, r0
    7014:	b108      	cbz	r0, 701a <CC_PalInit+0x3e>
    7016:	4620      	mov	r0, r4
    7018:	bd10      	pop	{r4, pc}
    701a:	f000 f83f 	bl	709c <CC_PalPowerSaveModeInit>
    701e:	4620      	mov	r0, r4
    7020:	e7fa      	b.n	7018 <CC_PalInit+0x3c>
    7022:	bf00      	nop
    7024:	20000200 	.word	0x20000200
    7028:	200001f4 	.word	0x200001f4
    702c:	200001fc 	.word	0x200001fc
    7030:	20000204 	.word	0x20000204
    7034:	200001f8 	.word	0x200001f8

00007038 <CC_PalTerminate>:
    7038:	b508      	push	{r3, lr}
    703a:	4808      	ldr	r0, [pc, #32]	; (705c <CC_PalTerminate+0x24>)
    703c:	f000 f824 	bl	7088 <CC_PalMutexDestroy>
    7040:	4807      	ldr	r0, [pc, #28]	; (7060 <CC_PalTerminate+0x28>)
    7042:	f000 f821 	bl	7088 <CC_PalMutexDestroy>
    7046:	4807      	ldr	r0, [pc, #28]	; (7064 <CC_PalTerminate+0x2c>)
    7048:	f000 f81e 	bl	7088 <CC_PalMutexDestroy>
    704c:	4806      	ldr	r0, [pc, #24]	; (7068 <CC_PalTerminate+0x30>)
    704e:	f000 f81b 	bl	7088 <CC_PalMutexDestroy>
    7052:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    7056:	f000 b80b 	b.w	7070 <CC_PalDmaTerminate>
    705a:	bf00      	nop
    705c:	20000200 	.word	0x20000200
    7060:	200001f4 	.word	0x200001f4
    7064:	200001fc 	.word	0x200001fc
    7068:	200001f8 	.word	0x200001f8

0000706c <CC_PalDmaInit>:
    706c:	2000      	movs	r0, #0
    706e:	4770      	bx	lr

00007070 <CC_PalDmaTerminate>:
    7070:	4770      	bx	lr
    7072:	bf00      	nop

00007074 <CC_PalMutexCreate>:
    7074:	b508      	push	{r3, lr}
    7076:	4b03      	ldr	r3, [pc, #12]	; (7084 <CC_PalMutexCreate+0x10>)
    7078:	6802      	ldr	r2, [r0, #0]
    707a:	681b      	ldr	r3, [r3, #0]
    707c:	6810      	ldr	r0, [r2, #0]
    707e:	4798      	blx	r3
    7080:	2000      	movs	r0, #0
    7082:	bd08      	pop	{r3, pc}
    7084:	200001b8 	.word	0x200001b8

00007088 <CC_PalMutexDestroy>:
    7088:	b508      	push	{r3, lr}
    708a:	4b03      	ldr	r3, [pc, #12]	; (7098 <CC_PalMutexDestroy+0x10>)
    708c:	6802      	ldr	r2, [r0, #0]
    708e:	685b      	ldr	r3, [r3, #4]
    7090:	6810      	ldr	r0, [r2, #0]
    7092:	4798      	blx	r3
    7094:	2000      	movs	r0, #0
    7096:	bd08      	pop	{r3, pc}
    7098:	200001b8 	.word	0x200001b8

0000709c <CC_PalPowerSaveModeInit>:
    709c:	b570      	push	{r4, r5, r6, lr}
    709e:	4c09      	ldr	r4, [pc, #36]	; (70c4 <CC_PalPowerSaveModeInit+0x28>)
    70a0:	4d09      	ldr	r5, [pc, #36]	; (70c8 <CC_PalPowerSaveModeInit+0x2c>)
    70a2:	6920      	ldr	r0, [r4, #16]
    70a4:	68ab      	ldr	r3, [r5, #8]
    70a6:	4798      	blx	r3
    70a8:	b118      	cbz	r0, 70b2 <CC_PalPowerSaveModeInit+0x16>
    70aa:	4b08      	ldr	r3, [pc, #32]	; (70cc <CC_PalPowerSaveModeInit+0x30>)
    70ac:	4808      	ldr	r0, [pc, #32]	; (70d0 <CC_PalPowerSaveModeInit+0x34>)
    70ae:	685b      	ldr	r3, [r3, #4]
    70b0:	4798      	blx	r3
    70b2:	4a08      	ldr	r2, [pc, #32]	; (70d4 <CC_PalPowerSaveModeInit+0x38>)
    70b4:	68eb      	ldr	r3, [r5, #12]
    70b6:	6920      	ldr	r0, [r4, #16]
    70b8:	2100      	movs	r1, #0
    70ba:	6011      	str	r1, [r2, #0]
    70bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    70c0:	4718      	bx	r3
    70c2:	bf00      	nop
    70c4:	200001c8 	.word	0x200001c8
    70c8:	200001b8 	.word	0x200001b8
    70cc:	200001a8 	.word	0x200001a8
    70d0:	000088ec 	.word	0x000088ec
    70d4:	20000f08 	.word	0x20000f08

000070d8 <CC_PalPowerSaveModeSelect>:
    70d8:	b570      	push	{r4, r5, r6, lr}
    70da:	4d1a      	ldr	r5, [pc, #104]	; (7144 <CC_PalPowerSaveModeSelect+0x6c>)
    70dc:	4e1a      	ldr	r6, [pc, #104]	; (7148 <CC_PalPowerSaveModeSelect+0x70>)
    70de:	4604      	mov	r4, r0
    70e0:	68b2      	ldr	r2, [r6, #8]
    70e2:	6928      	ldr	r0, [r5, #16]
    70e4:	4790      	blx	r2
    70e6:	b9f0      	cbnz	r0, 7126 <CC_PalPowerSaveModeSelect+0x4e>
    70e8:	b15c      	cbz	r4, 7102 <CC_PalPowerSaveModeSelect+0x2a>
    70ea:	4c18      	ldr	r4, [pc, #96]	; (714c <CC_PalPowerSaveModeSelect+0x74>)
    70ec:	6823      	ldr	r3, [r4, #0]
    70ee:	b1ab      	cbz	r3, 711c <CC_PalPowerSaveModeSelect+0x44>
    70f0:	2b01      	cmp	r3, #1
    70f2:	d01a      	beq.n	712a <CC_PalPowerSaveModeSelect+0x52>
    70f4:	3b01      	subs	r3, #1
    70f6:	6023      	str	r3, [r4, #0]
    70f8:	6928      	ldr	r0, [r5, #16]
    70fa:	68f3      	ldr	r3, [r6, #12]
    70fc:	4798      	blx	r3
    70fe:	2000      	movs	r0, #0
    7100:	bd70      	pop	{r4, r5, r6, pc}
    7102:	4c12      	ldr	r4, [pc, #72]	; (714c <CC_PalPowerSaveModeSelect+0x74>)
    7104:	6821      	ldr	r1, [r4, #0]
    7106:	b939      	cbnz	r1, 7118 <CC_PalPowerSaveModeSelect+0x40>
    7108:	4b11      	ldr	r3, [pc, #68]	; (7150 <CC_PalPowerSaveModeSelect+0x78>)
    710a:	4a12      	ldr	r2, [pc, #72]	; (7154 <CC_PalPowerSaveModeSelect+0x7c>)
    710c:	2001      	movs	r0, #1
    710e:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    7112:	6813      	ldr	r3, [r2, #0]
    7114:	2b00      	cmp	r3, #0
    7116:	d1fc      	bne.n	7112 <CC_PalPowerSaveModeSelect+0x3a>
    7118:	3101      	adds	r1, #1
    711a:	6021      	str	r1, [r4, #0]
    711c:	68f3      	ldr	r3, [r6, #12]
    711e:	6928      	ldr	r0, [r5, #16]
    7120:	4798      	blx	r3
    7122:	2000      	movs	r0, #0
    7124:	bd70      	pop	{r4, r5, r6, pc}
    7126:	480c      	ldr	r0, [pc, #48]	; (7158 <CC_PalPowerSaveModeSelect+0x80>)
    7128:	bd70      	pop	{r4, r5, r6, pc}
    712a:	4a0a      	ldr	r2, [pc, #40]	; (7154 <CC_PalPowerSaveModeSelect+0x7c>)
    712c:	6813      	ldr	r3, [r2, #0]
    712e:	2b00      	cmp	r3, #0
    7130:	d1fc      	bne.n	712c <CC_PalPowerSaveModeSelect+0x54>
    7132:	4a07      	ldr	r2, [pc, #28]	; (7150 <CC_PalPowerSaveModeSelect+0x78>)
    7134:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    7138:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    713c:	f7ff ff48 	bl	6fd0 <CC_HalMaskInterrupt>
    7140:	6823      	ldr	r3, [r4, #0]
    7142:	e7d7      	b.n	70f4 <CC_PalPowerSaveModeSelect+0x1c>
    7144:	200001c8 	.word	0x200001c8
    7148:	200001b8 	.word	0x200001b8
    714c:	20000f08 	.word	0x20000f08
    7150:	5002a000 	.word	0x5002a000
    7154:	5002b910 	.word	0x5002b910
    7158:	ffff8fe9 	.word	0xffff8fe9

0000715c <thread_A_code>:
void thread_A_code(void *argA , void *argB, void *argC){
    715c:	b538      	push	{r3, r4, r5, lr}
  release_time = get_uptime() + thread_A_period;
    715e:	f000 f842 	bl	71e6 <get_uptime>
    7162:	f110 0464 	adds.w	r4, r0, #100	; 0x64
    7166:	f141 0500 	adc.w	r5, r1, #0
    adc_sample();
    716a:	f7f9 fe79 	bl	e60 <adc_sample>
    sem_give(SEM_AB);      
    716e:	2002      	movs	r0, #2
    7170:	f7f9 ff7c 	bl	106c <sem_give>
    fin_time = get_uptime();
    7174:	f000 f837 	bl	71e6 <get_uptime>
    7178:	460b      	mov	r3, r1
    if(fin_time < release_time) {
    717a:	42a0      	cmp	r0, r4
    717c:	eb73 0105 	sbcs.w	r1, r3, r5
    fin_time = get_uptime();
    7180:	4602      	mov	r2, r0
    if(fin_time < release_time) {
    7182:	daf2      	bge.n	716a <thread_A_code+0xe>
      sleep_ms(release_time - fin_time);
    7184:	1aa0      	subs	r0, r4, r2
    7186:	f000 f83c 	bl	7202 <sleep_ms>
      release_time += thread_A_period;
    718a:	3464      	adds	r4, #100	; 0x64
    718c:	f145 0500 	adc.w	r5, r5, #0
    7190:	e7eb      	b.n	716a <thread_A_code+0xe>

00007192 <gpio_add_callback>:
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    7192:	6883      	ldr	r3, [r0, #8]
    7194:	69db      	ldr	r3, [r3, #28]
    7196:	b10b      	cbz	r3, 719c <gpio_add_callback+0xa>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    7198:	2201      	movs	r2, #1
    719a:	4718      	bx	r3
}
    719c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    71a0:	4770      	bx	lr

000071a2 <z_impl_gpio_pin_configure.constprop.0>:
static inline int z_impl_gpio_pin_configure(const struct device *port,
    71a2:	b430      	push	{r4, r5}
	struct gpio_driver_data *data =
    71a4:	6904      	ldr	r4, [r0, #16]
	const struct gpio_driver_api *api =
    71a6:	6885      	ldr	r5, [r0, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    71a8:	2301      	movs	r3, #1
    71aa:	fa03 f201 	lsl.w	r2, r3, r1
    71ae:	6823      	ldr	r3, [r4, #0]
    71b0:	ea23 0302 	bic.w	r3, r3, r2
    71b4:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
    71b6:	f44f 7288 	mov.w	r2, #272	; 0x110
    71ba:	682b      	ldr	r3, [r5, #0]
}
    71bc:	bc30      	pop	{r4, r5}
	return api->pin_configure(port, pin, flags);
    71be:	4718      	bx	r3

000071c0 <gpio_pin_interrupt_configure.constprop.0>:
static inline int gpio_pin_interrupt_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags)
    71c0:	b430      	push	{r4, r5}
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    71c2:	6905      	ldr	r5, [r0, #16]
	const struct gpio_driver_api *api =
    71c4:	6884      	ldr	r4, [r0, #8]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    71c6:	682a      	ldr	r2, [r5, #0]
	return api->pin_interrupt_configure(port, pin, mode, trig);
    71c8:	69a4      	ldr	r4, [r4, #24]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    71ca:	2301      	movs	r3, #1
    71cc:	408b      	lsls	r3, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    71ce:	4213      	tst	r3, r2
	return api->pin_interrupt_configure(port, pin, mode, trig);
    71d0:	46a4      	mov	ip, r4
    71d2:	bf18      	it	ne
    71d4:	f44f 3300 	movne.w	r3, #131072	; 0x20000
}
    71d8:	bc30      	pop	{r4, r5}
    71da:	bf08      	it	eq
    71dc:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
    71e0:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
    71e4:	4760      	bx	ip

000071e6 <get_uptime>:
int64_t get_uptime(){
    71e6:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
    71e8:	f001 f842 	bl	8270 <z_impl_k_uptime_ticks>
    71ec:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    71f0:	fba0 2304 	umull	r2, r3, r0, r4
    71f4:	fb04 3301 	mla	r3, r4, r1, r3
    71f8:	0bd0      	lsrs	r0, r2, #15
}
    71fa:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
    71fe:	0bd9      	lsrs	r1, r3, #15
    7200:	bd10      	pop	{r4, pc}

00007202 <sleep_ms>:
void sleep_ms(int32_t ms){
    7202:	b538      	push	{r3, r4, r5, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    7204:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
    7208:	f240 34e7 	movw	r4, #999	; 0x3e7
    720c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    7210:	2500      	movs	r5, #0
    7212:	fbc0 4501 	smlal	r4, r5, r0, r1
    7216:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    721a:	2300      	movs	r3, #0
    721c:	4620      	mov	r0, r4
    721e:	4629      	mov	r1, r5
    7220:	f7f9 fba8 	bl	974 <__aeabi_uldivmod>
}
    7224:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_impl_k_sleep(timeout);
    7228:	f7ff b994 	b.w	6554 <z_impl_k_sleep>

0000722c <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    722c:	4603      	mov	r3, r0
    722e:	b140      	cbz	r0, 7242 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    7230:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    7232:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    7236:	2a02      	cmp	r2, #2
    7238:	d006      	beq.n	7248 <sys_notify_validate+0x1c>
    723a:	2a03      	cmp	r2, #3
    723c:	d004      	beq.n	7248 <sys_notify_validate+0x1c>
    723e:	2a01      	cmp	r2, #1
    7240:	d005      	beq.n	724e <sys_notify_validate+0x22>
		return -EINVAL;
    7242:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
    7246:	4770      	bx	lr
		if (notify->method.signal == NULL) {
    7248:	681a      	ldr	r2, [r3, #0]
    724a:	2a00      	cmp	r2, #0
    724c:	d0f9      	beq.n	7242 <sys_notify_validate+0x16>
		notify->result = 0;
    724e:	2000      	movs	r0, #0
    7250:	6098      	str	r0, [r3, #8]
    7252:	4770      	bx	lr

00007254 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    7254:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    7256:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    725a:	2a02      	cmp	r2, #2
{
    725c:	b510      	push	{r4, lr}
    725e:	4603      	mov	r3, r0
	notify->result = res;
    7260:	6081      	str	r1, [r0, #8]
	switch (method) {
    7262:	d00a      	beq.n	727a <sys_notify_finalize+0x26>
    7264:	2a03      	cmp	r2, #3
    7266:	d10b      	bne.n	7280 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    7268:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
    726a:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    726c:	2200      	movs	r2, #0
    726e:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    7270:	b108      	cbz	r0, 7276 <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
    7272:	f7ff fc1f 	bl	6ab4 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    7276:	4620      	mov	r0, r4
    7278:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
    727a:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    727c:	2400      	movs	r4, #0
		break;
    727e:	e7f5      	b.n	726c <sys_notify_finalize+0x18>
	switch (method) {
    7280:	2400      	movs	r4, #0
    7282:	4620      	mov	r0, r4
    7284:	e7f2      	b.n	726c <sys_notify_finalize+0x18>

00007286 <arch_printk_char_out>:
}
    7286:	2000      	movs	r0, #0
    7288:	4770      	bx	lr

0000728a <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
    728a:	b40f      	push	{r0, r1, r2, r3}
    728c:	b507      	push	{r0, r1, r2, lr}
    728e:	a904      	add	r1, sp, #16
    7290:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    7294:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    7296:	f7fa fa7d 	bl	1794 <vprintk>
	}
	va_end(ap);
}
    729a:	b003      	add	sp, #12
    729c:	f85d eb04 	ldr.w	lr, [sp], #4
    72a0:	b004      	add	sp, #16
    72a2:	4770      	bx	lr

000072a4 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    72a4:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    72a6:	f013 0307 	ands.w	r3, r3, #7
    72aa:	d105      	bne.n	72b8 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    72ac:	6803      	ldr	r3, [r0, #0]
    72ae:	2b00      	cmp	r3, #0
		evt = EVT_START;
    72b0:	bf0c      	ite	eq
    72b2:	2000      	moveq	r0, #0
    72b4:	2003      	movne	r0, #3
    72b6:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    72b8:	2b02      	cmp	r3, #2
    72ba:	d105      	bne.n	72c8 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    72bc:	8b43      	ldrh	r3, [r0, #26]
    72be:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    72c0:	bf14      	ite	ne
    72c2:	2000      	movne	r0, #0
    72c4:	2004      	moveq	r0, #4
    72c6:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    72c8:	2b01      	cmp	r3, #1
    72ca:	d105      	bne.n	72d8 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    72cc:	6803      	ldr	r3, [r0, #0]
    72ce:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    72d0:	bf0c      	ite	eq
    72d2:	2000      	moveq	r0, #0
    72d4:	2005      	movne	r0, #5
    72d6:	4770      	bx	lr
	int evt = EVT_NOP;
    72d8:	2000      	movs	r0, #0
}
    72da:	4770      	bx	lr

000072dc <notify_one>:
{
    72dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    72e0:	460d      	mov	r5, r1
    72e2:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    72e4:	4619      	mov	r1, r3
    72e6:	1d28      	adds	r0, r5, #4
{
    72e8:	4690      	mov	r8, r2
    72ea:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    72ec:	f7ff ffb2 	bl	7254 <sys_notify_finalize>
	if (cb) {
    72f0:	4604      	mov	r4, r0
    72f2:	b138      	cbz	r0, 7304 <notify_one+0x28>
		cb(mgr, cli, state, res);
    72f4:	4633      	mov	r3, r6
    72f6:	4642      	mov	r2, r8
    72f8:	4629      	mov	r1, r5
    72fa:	4638      	mov	r0, r7
    72fc:	46a4      	mov	ip, r4
}
    72fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    7302:	4760      	bx	ip
}
    7304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007308 <transition_complete>:
{
    7308:	b410      	push	{r4}
	__asm__ volatile(
    730a:	f04f 0420 	mov.w	r4, #32
    730e:	f3ef 8211 	mrs	r2, BASEPRI
    7312:	f384 8812 	msr	BASEPRI_MAX, r4
    7316:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    731a:	6141      	str	r1, [r0, #20]
}
    731c:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    731e:	2101      	movs	r1, #1
    7320:	f7fa ba46 	b.w	17b0 <process_event>

00007324 <validate_args>:
{
    7324:	b510      	push	{r4, lr}
    7326:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    7328:	b140      	cbz	r0, 733c <validate_args+0x18>
    732a:	b139      	cbz	r1, 733c <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    732c:	1d08      	adds	r0, r1, #4
    732e:	f7ff ff7d 	bl	722c <sys_notify_validate>
	if ((rv == 0)
    7332:	b928      	cbnz	r0, 7340 <validate_args+0x1c>
	    && ((cli->notify.flags
    7334:	68a3      	ldr	r3, [r4, #8]
    7336:	f033 0303 	bics.w	r3, r3, #3
    733a:	d001      	beq.n	7340 <validate_args+0x1c>
		rv = -EINVAL;
    733c:	f06f 0015 	mvn.w	r0, #21
}
    7340:	bd10      	pop	{r4, pc}

00007342 <onoff_manager_init>:
{
    7342:	b538      	push	{r3, r4, r5, lr}
    7344:	460c      	mov	r4, r1
	if ((mgr == NULL)
    7346:	4605      	mov	r5, r0
    7348:	b158      	cbz	r0, 7362 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    734a:	b151      	cbz	r1, 7362 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    734c:	680b      	ldr	r3, [r1, #0]
    734e:	b143      	cbz	r3, 7362 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    7350:	684b      	ldr	r3, [r1, #4]
    7352:	b133      	cbz	r3, 7362 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    7354:	221c      	movs	r2, #28
    7356:	2100      	movs	r1, #0
    7358:	f000 f93d 	bl	75d6 <memset>
    735c:	612c      	str	r4, [r5, #16]
	return 0;
    735e:	2000      	movs	r0, #0
}
    7360:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    7362:	f06f 0015 	mvn.w	r0, #21
    7366:	e7fb      	b.n	7360 <onoff_manager_init+0x1e>

00007368 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    7368:	b570      	push	{r4, r5, r6, lr}
    736a:	4604      	mov	r4, r0
    736c:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    736e:	f7ff ffd9 	bl	7324 <validate_args>

	if (rv < 0) {
    7372:	1e05      	subs	r5, r0, #0
    7374:	db31      	blt.n	73da <onoff_request+0x72>
    7376:	f04f 0320 	mov.w	r3, #32
    737a:	f3ef 8111 	mrs	r1, BASEPRI
    737e:	f383 8812 	msr	BASEPRI_MAX, r3
    7382:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    7386:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    7388:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    738a:	f64f 75ff 	movw	r5, #65535	; 0xffff
    738e:	42ab      	cmp	r3, r5
    7390:	f000 0207 	and.w	r2, r0, #7
    7394:	d02e      	beq.n	73f4 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    7396:	2a02      	cmp	r2, #2
    7398:	d10e      	bne.n	73b8 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    739a:	3301      	adds	r3, #1
    739c:	8363      	strh	r3, [r4, #26]
	rv = state;
    739e:	4615      	mov	r5, r2
		notify = true;
    73a0:	2301      	movs	r3, #1
	__asm__ volatile(
    73a2:	f381 8811 	msr	BASEPRI, r1
    73a6:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    73aa:	b1b3      	cbz	r3, 73da <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    73ac:	2300      	movs	r3, #0
    73ae:	4631      	mov	r1, r6
    73b0:	4620      	mov	r0, r4
    73b2:	f7ff ff93 	bl	72dc <notify_one>
    73b6:	e010      	b.n	73da <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    73b8:	0783      	lsls	r3, r0, #30
    73ba:	d001      	beq.n	73c0 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    73bc:	2a06      	cmp	r2, #6
    73be:	d10e      	bne.n	73de <onoff_request+0x76>
	parent->next = child;
    73c0:	2300      	movs	r3, #0
    73c2:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
    73c4:	6863      	ldr	r3, [r4, #4]
    73c6:	b993      	cbnz	r3, 73ee <onoff_request+0x86>
	list->head = node;
    73c8:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    73cc:	4615      	mov	r5, r2
    73ce:	b962      	cbnz	r2, 73ea <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    73d0:	460a      	mov	r2, r1
    73d2:	4620      	mov	r0, r4
    73d4:	2102      	movs	r1, #2
    73d6:	f7fa f9eb 	bl	17b0 <process_event>
		}
	}

	return rv;
}
    73da:	4628      	mov	r0, r5
    73dc:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    73de:	2a05      	cmp	r2, #5
    73e0:	bf0c      	ite	eq
    73e2:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    73e6:	f06f 0504 	mvnne.w	r5, #4
    73ea:	2300      	movs	r3, #0
    73ec:	e7d9      	b.n	73a2 <onoff_request+0x3a>
	parent->next = child;
    73ee:	601e      	str	r6, [r3, #0]
	list->tail = node;
    73f0:	6066      	str	r6, [r4, #4]
}
    73f2:	e7eb      	b.n	73cc <onoff_request+0x64>
		rv = -EAGAIN;
    73f4:	f06f 050a 	mvn.w	r5, #10
    73f8:	e7f7      	b.n	73ea <onoff_request+0x82>

000073fa <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    73fa:	4604      	mov	r4, r0
    73fc:	b508      	push	{r3, lr}
    73fe:	4608      	mov	r0, r1
    7400:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    7402:	461a      	mov	r2, r3
    7404:	47a0      	blx	r4
	return z_impl_z_current_get();
    7406:	f7ff f8bf 	bl	6588 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    740a:	f7fb fe0f 	bl	302c <z_impl_k_thread_abort>

0000740e <_ldiv5>:
{
    740e:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
	uint32_t v_lo = *v;
    7412:	e9d0 2400 	ldrd	r2, r4, [r0]
	__asm__ ("" : "+r" (m));
    7416:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
    741a:	fba2 bc03 	umull	fp, ip, r2, r3
    741e:	eb1b 0603 	adds.w	r6, fp, r3
    7422:	eb4c 0503 	adc.w	r5, ip, r3
	result >>= 32;
    7426:	462f      	mov	r7, r5
	result += (uint64_t)v_hi * m;
    7428:	fba4 4503 	umull	r4, r5, r4, r3
    742c:	eb1b 0204 	adds.w	r2, fp, r4
	result >>= 32;
    7430:	f04f 0600 	mov.w	r6, #0
	result += (uint64_t)v_hi * m;
    7434:	eb4c 0105 	adc.w	r1, ip, r5
    7438:	19d2      	adds	r2, r2, r7
    743a:	eb46 0101 	adc.w	r1, r6, r1
	result += (uint64_t)v_hi * m;
    743e:	1863      	adds	r3, r4, r1
	result >>= 32;
    7440:	4632      	mov	r2, r6
	result += (uint64_t)v_hi * m;
    7442:	eb45 0202 	adc.w	r2, r5, r2
	*v = result;
    7446:	e9c0 3200 	strd	r3, r2, [r0]
}
    744a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}

0000744e <_get_digit>:
	if (*digit_count > 0) {
    744e:	680b      	ldr	r3, [r1, #0]
    7450:	2b00      	cmp	r3, #0
{
    7452:	b570      	push	{r4, r5, r6, lr}
    7454:	4604      	mov	r4, r0
	if (*digit_count > 0) {
    7456:	dd0f      	ble.n	7478 <_get_digit+0x2a>
		*fr *= 10U;
    7458:	6822      	ldr	r2, [r4, #0]
    745a:	6840      	ldr	r0, [r0, #4]
		--*digit_count;
    745c:	3b01      	subs	r3, #1
    745e:	600b      	str	r3, [r1, #0]
		*fr *= 10U;
    7460:	210a      	movs	r1, #10
    7462:	fba2 5601 	umull	r5, r6, r2, r1
    7466:	fb01 6600 	mla	r6, r1, r0, r6
		*fr &= (BIT64(60) - 1U);
    746a:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
    746e:	e9c4 5300 	strd	r5, r3, [r4]
		rval = ((*fr >> 60) & 0xF) + '0';
    7472:	0f30      	lsrs	r0, r6, #28
    7474:	3030      	adds	r0, #48	; 0x30
}
    7476:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
    7478:	2030      	movs	r0, #48	; 0x30
    747a:	e7fc      	b.n	7476 <_get_digit+0x28>

0000747c <encode_uint>:
{
    747c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7480:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    7482:	78d3      	ldrb	r3, [r2, #3]
{
    7484:	4614      	mov	r4, r2
	switch (specifier) {
    7486:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    7488:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
    748c:	4606      	mov	r6, r0
    748e:	460f      	mov	r7, r1
    7490:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    7492:	d02d      	beq.n	74f0 <encode_uint+0x74>
    7494:	d828      	bhi.n	74e8 <encode_uint+0x6c>
		return 16;
    7496:	2b58      	cmp	r3, #88	; 0x58
    7498:	bf14      	ite	ne
    749a:	250a      	movne	r5, #10
    749c:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
    749e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
    74a2:	46aa      	mov	sl, r5
    74a4:	f04f 0b00 	mov.w	fp, #0
    74a8:	4652      	mov	r2, sl
    74aa:	465b      	mov	r3, fp
    74ac:	4630      	mov	r0, r6
    74ae:	4639      	mov	r1, r7
    74b0:	f7f9 fa60 	bl	974 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    74b4:	2a09      	cmp	r2, #9
    74b6:	b2d3      	uxtb	r3, r2
    74b8:	d81f      	bhi.n	74fa <encode_uint+0x7e>
    74ba:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    74bc:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    74be:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    74c0:	bf08      	it	eq
    74c2:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    74c4:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    74c8:	d301      	bcc.n	74ce <encode_uint+0x52>
    74ca:	45c8      	cmp	r8, r9
    74cc:	d812      	bhi.n	74f4 <encode_uint+0x78>
	if (conv->flag_hash) {
    74ce:	7823      	ldrb	r3, [r4, #0]
    74d0:	069b      	lsls	r3, r3, #26
    74d2:	d505      	bpl.n	74e0 <encode_uint+0x64>
		if (radix == 8) {
    74d4:	2d08      	cmp	r5, #8
    74d6:	d116      	bne.n	7506 <encode_uint+0x8a>
			conv->altform_0 = true;
    74d8:	78a3      	ldrb	r3, [r4, #2]
    74da:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    74de:	70a3      	strb	r3, [r4, #2]
}
    74e0:	4640      	mov	r0, r8
    74e2:	b003      	add	sp, #12
    74e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    74e8:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    74ec:	2b70      	cmp	r3, #112	; 0x70
    74ee:	e7d3      	b.n	7498 <encode_uint+0x1c>
	switch (specifier) {
    74f0:	2508      	movs	r5, #8
    74f2:	e7d4      	b.n	749e <encode_uint+0x22>
		value /= radix;
    74f4:	4606      	mov	r6, r0
    74f6:	460f      	mov	r7, r1
    74f8:	e7d6      	b.n	74a8 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    74fa:	9a01      	ldr	r2, [sp, #4]
    74fc:	2a19      	cmp	r2, #25
    74fe:	bf94      	ite	ls
    7500:	3337      	addls	r3, #55	; 0x37
    7502:	3357      	addhi	r3, #87	; 0x57
    7504:	e7da      	b.n	74bc <encode_uint+0x40>
		} else if (radix == 16) {
    7506:	2d10      	cmp	r5, #16
    7508:	d1ea      	bne.n	74e0 <encode_uint+0x64>
			conv->altform_0c = true;
    750a:	78a3      	ldrb	r3, [r4, #2]
    750c:	f043 0310 	orr.w	r3, r3, #16
    7510:	e7e5      	b.n	74de <encode_uint+0x62>

00007512 <outs>:
{
    7512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7516:	4607      	mov	r7, r0
    7518:	4688      	mov	r8, r1
    751a:	4615      	mov	r5, r2
    751c:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    751e:	4614      	mov	r4, r2
    7520:	42b4      	cmp	r4, r6
    7522:	eba4 0005 	sub.w	r0, r4, r5
    7526:	d302      	bcc.n	752e <outs+0x1c>
    7528:	b93e      	cbnz	r6, 753a <outs+0x28>
    752a:	7823      	ldrb	r3, [r4, #0]
    752c:	b12b      	cbz	r3, 753a <outs+0x28>
		int rc = out((int)*sp++, ctx);
    752e:	f814 0b01 	ldrb.w	r0, [r4], #1
    7532:	4641      	mov	r1, r8
    7534:	47b8      	blx	r7
		if (rc < 0) {
    7536:	2800      	cmp	r0, #0
    7538:	daf2      	bge.n	7520 <outs+0xe>
}
    753a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000753e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    753e:	4770      	bx	lr

00007540 <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    7540:	2200      	movs	r2, #0
    7542:	e9c0 2200 	strd	r2, r2, [r0]
    7546:	6082      	str	r2, [r0, #8]
}
    7548:	4770      	bx	lr

0000754a <abort_function>:
{
    754a:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    754c:	2000      	movs	r0, #0
    754e:	f7fb f8c7 	bl	26e0 <sys_reboot>

00007552 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    7552:	f000 bcc2 	b.w	7eda <z_fatal_error>

00007556 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    7556:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    7558:	6800      	ldr	r0, [r0, #0]
    755a:	f000 bcbe 	b.w	7eda <z_fatal_error>

0000755e <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    755e:	2100      	movs	r1, #0
    7560:	2001      	movs	r0, #1
    7562:	f7ff bff6 	b.w	7552 <z_arm_fatal_error>

00007566 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    7566:	b508      	push	{r3, lr}
	handler();
    7568:	f7fb fafe 	bl	2b68 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    756c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    7570:	f7fb bbda 	b.w	2d28 <z_arm_exc_exit>

00007574 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    7574:	3901      	subs	r1, #1
    7576:	4603      	mov	r3, r0
    7578:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    757c:	b90a      	cbnz	r2, 7582 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    757e:	701a      	strb	r2, [r3, #0]

	return dest;
}
    7580:	4770      	bx	lr
		*d = *s;
    7582:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    7586:	e7f7      	b.n	7578 <strcpy+0x4>

00007588 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    7588:	4603      	mov	r3, r0
	size_t n = 0;
    758a:	2000      	movs	r0, #0

	while (*s != '\0') {
    758c:	5c1a      	ldrb	r2, [r3, r0]
    758e:	b902      	cbnz	r2, 7592 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    7590:	4770      	bx	lr
		n++;
    7592:	3001      	adds	r0, #1
    7594:	e7fa      	b.n	758c <strlen+0x4>

00007596 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    7596:	4603      	mov	r3, r0
	size_t n = 0;
    7598:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    759a:	5c1a      	ldrb	r2, [r3, r0]
    759c:	b10a      	cbz	r2, 75a2 <strnlen+0xc>
    759e:	4288      	cmp	r0, r1
    75a0:	d100      	bne.n	75a4 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    75a2:	4770      	bx	lr
		n++;
    75a4:	3001      	adds	r0, #1
    75a6:	e7f8      	b.n	759a <strnlen+0x4>

000075a8 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    75a8:	1e43      	subs	r3, r0, #1
    75aa:	3901      	subs	r1, #1
    75ac:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    75b0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    75b4:	4282      	cmp	r2, r0
    75b6:	d101      	bne.n	75bc <strcmp+0x14>
    75b8:	2a00      	cmp	r2, #0
    75ba:	d1f7      	bne.n	75ac <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    75bc:	1a10      	subs	r0, r2, r0
    75be:	4770      	bx	lr

000075c0 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    75c0:	b510      	push	{r4, lr}
    75c2:	1e43      	subs	r3, r0, #1
    75c4:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    75c6:	4291      	cmp	r1, r2
    75c8:	d100      	bne.n	75cc <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    75ca:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    75cc:	f811 4b01 	ldrb.w	r4, [r1], #1
    75d0:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    75d4:	e7f7      	b.n	75c6 <memcpy+0x6>

000075d6 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    75d6:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    75d8:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    75da:	4603      	mov	r3, r0
	while (n > 0) {
    75dc:	4293      	cmp	r3, r2
    75de:	d100      	bne.n	75e2 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    75e0:	4770      	bx	lr
		*(d_byte++) = c_byte;
    75e2:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    75e6:	e7f9      	b.n	75dc <memset+0x6>

000075e8 <_stdout_hook_default>:
}
    75e8:	f04f 30ff 	mov.w	r0, #4294967295
    75ec:	4770      	bx	lr

000075ee <fputc>:
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&c, *(uintptr_t *)&stream, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
    75ee:	f7fb bdf1 	b.w	31d4 <z_impl_zephyr_fputc>

000075f2 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    75f2:	b084      	sub	sp, #16
    75f4:	ab04      	add	r3, sp, #16
    75f6:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    75fa:	f89d 3004 	ldrb.w	r3, [sp, #4]
    75fe:	2b06      	cmp	r3, #6
    7600:	d108      	bne.n	7614 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    7602:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7606:	2201      	movs	r2, #1
    7608:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    760c:	f3bf 8f4f 	dsb	sy
        __WFE();
    7610:	bf20      	wfe
    while (true)
    7612:	e7fd      	b.n	7610 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    7614:	b004      	add	sp, #16
    7616:	4770      	bx	lr

00007618 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    7618:	b084      	sub	sp, #16
    761a:	ab04      	add	r3, sp, #16
    761c:	e903 0007 	stmdb	r3, {r0, r1, r2}
    7620:	2300      	movs	r3, #0
    7622:	f383 8811 	msr	BASEPRI, r3
    7626:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    762a:	b004      	add	sp, #16
    762c:	4770      	bx	lr

0000762e <adc_context_on_timer_expired>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    762e:	f1a0 0308 	sub.w	r3, r0, #8
    7632:	f3bf 8f5b 	dmb	ish
    7636:	e853 2f00 	ldrex	r2, [r3]
    763a:	1c51      	adds	r1, r2, #1
    763c:	e843 1c00 	strex	ip, r1, [r3]
    7640:	f1bc 0f00 	cmp.w	ip, #0
    7644:	d1f7      	bne.n	7636 <adc_context_on_timer_expired+0x8>
    7646:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
    764a:	b91a      	cbnz	r2, 7654 <adc_context_on_timer_expired+0x26>
		adc_context_start_sampling(ctx);
    764c:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    7650:	f7fb be30 	b.w	32b4 <adc_context_start_sampling.isra.0>
		ctx->status = -EBUSY;
    7654:	f06f 030f 	mvn.w	r3, #15
    7658:	6683      	str	r3, [r0, #104]	; 0x68
}
    765a:	4770      	bx	lr

0000765c <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    765c:	6902      	ldr	r2, [r0, #16]
    765e:	b2cb      	uxtb	r3, r1
    7660:	210c      	movs	r1, #12
    7662:	fb03 2101 	mla	r1, r3, r1, r2
    7666:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
    7668:	f000 0007 	and.w	r0, r0, #7
    766c:	4770      	bx	lr

0000766e <set_off_state>:
	__asm__ volatile(
    766e:	f04f 0320 	mov.w	r3, #32
    7672:	f3ef 8211 	mrs	r2, BASEPRI
    7676:	f383 8812 	msr	BASEPRI_MAX, r3
    767a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    767e:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    7680:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    7684:	d001      	beq.n	768a <set_off_state+0x1c>
    7686:	428b      	cmp	r3, r1
    7688:	d107      	bne.n	769a <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    768a:	2301      	movs	r3, #1
    768c:	6003      	str	r3, [r0, #0]
	int err = 0;
    768e:	2000      	movs	r0, #0
	__asm__ volatile(
    7690:	f382 8811 	msr	BASEPRI, r2
    7694:	f3bf 8f6f 	isb	sy
}
    7698:	4770      	bx	lr
		err = -EPERM;
    769a:	f04f 30ff 	mov.w	r0, #4294967295
    769e:	e7f7      	b.n	7690 <set_off_state+0x22>

000076a0 <set_starting_state>:
{
    76a0:	b510      	push	{r4, lr}
	__asm__ volatile(
    76a2:	f04f 0320 	mov.w	r3, #32
    76a6:	f3ef 8211 	mrs	r2, BASEPRI
    76aa:	f383 8812 	msr	BASEPRI_MAX, r3
    76ae:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    76b2:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    76b4:	f003 0407 	and.w	r4, r3, #7
    76b8:	2c01      	cmp	r4, #1
    76ba:	d106      	bne.n	76ca <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    76bc:	6001      	str	r1, [r0, #0]
	int err = 0;
    76be:	2000      	movs	r0, #0
	__asm__ volatile(
    76c0:	f382 8811 	msr	BASEPRI, r2
    76c4:	f3bf 8f6f 	isb	sy
}
    76c8:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    76ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    76ce:	428b      	cmp	r3, r1
		err = -EALREADY;
    76d0:	bf14      	ite	ne
    76d2:	f04f 30ff 	movne.w	r0, #4294967295
    76d6:	f06f 0077 	mvneq.w	r0, #119	; 0x77
    76da:	e7f1      	b.n	76c0 <set_starting_state+0x20>

000076dc <set_on_state>:
	__asm__ volatile(
    76dc:	f04f 0320 	mov.w	r3, #32
    76e0:	f3ef 8211 	mrs	r2, BASEPRI
    76e4:	f383 8812 	msr	BASEPRI_MAX, r3
    76e8:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    76ec:	6803      	ldr	r3, [r0, #0]
    76ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    76f2:	f043 0302 	orr.w	r3, r3, #2
    76f6:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    76f8:	f382 8811 	msr	BASEPRI, r2
    76fc:	f3bf 8f6f 	isb	sy
}
    7700:	4770      	bx	lr

00007702 <onoff_started_callback>:
	return &data->mgr[type];
    7702:	6900      	ldr	r0, [r0, #16]
{
    7704:	b410      	push	{r4}
	return &data->mgr[type];
    7706:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    7708:	241c      	movs	r4, #28
    770a:	fb03 0004 	mla	r0, r3, r4, r0
    770e:	2100      	movs	r1, #0
}
    7710:	bc10      	pop	{r4}
	notify(mgr, 0);
    7712:	4710      	bx	r2

00007714 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    7714:	2000      	movs	r0, #0
    7716:	f7fd bbc1 	b.w	4e9c <nrfx_clock_start>

0000771a <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    771a:	2000      	movs	r0, #0
    771c:	f7fd bbf0 	b.w	4f00 <nrfx_clock_stop>

00007720 <blocking_start_callback>:
{
    7720:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    7722:	f7fe bbdd 	b.w	5ee0 <z_impl_k_sem_give>

00007726 <api_stop>:
{
    7726:	b538      	push	{r3, r4, r5, lr}
    7728:	b2cc      	uxtb	r4, r1
	err = set_off_state(&subdata->flags, ctx);
    772a:	230c      	movs	r3, #12
{
    772c:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
    772e:	4363      	muls	r3, r4
    7730:	6900      	ldr	r0, [r0, #16]
    7732:	3340      	adds	r3, #64	; 0x40
    7734:	2180      	movs	r1, #128	; 0x80
    7736:	4418      	add	r0, r3
    7738:	f7ff ff99 	bl	766e <set_off_state>
	if (err < 0) {
    773c:	2800      	cmp	r0, #0
    773e:	db05      	blt.n	774c <api_stop+0x26>
	get_sub_config(dev, type)->stop();
    7740:	6869      	ldr	r1, [r5, #4]
    7742:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    7746:	6863      	ldr	r3, [r4, #4]
    7748:	4798      	blx	r3
	return 0;
    774a:	2000      	movs	r0, #0
}
    774c:	bd38      	pop	{r3, r4, r5, pc}

0000774e <api_start>:
{
    774e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7752:	b2cd      	uxtb	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    7754:	270c      	movs	r7, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    7756:	6904      	ldr	r4, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
    7758:	436f      	muls	r7, r5
{
    775a:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    775c:	f107 0040 	add.w	r0, r7, #64	; 0x40
    7760:	2180      	movs	r1, #128	; 0x80
    7762:	4420      	add	r0, r4
{
    7764:	4690      	mov	r8, r2
    7766:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
    7768:	f7ff ff9a 	bl	76a0 <set_starting_state>
	if (err < 0) {
    776c:	2800      	cmp	r0, #0
    776e:	db07      	blt.n	7780 <api_start+0x32>
	subdata->cb = cb;
    7770:	443c      	add	r4, r7
	subdata->user_data = user_data;
    7772:	e9c4 890e 	strd	r8, r9, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    7776:	6873      	ldr	r3, [r6, #4]
    7778:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
    777c:	4798      	blx	r3
	return 0;
    777e:	2000      	movs	r0, #0
}
    7780:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00007784 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7784:	6843      	ldr	r3, [r0, #4]
    7786:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    7788:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    778c:	600b      	str	r3, [r1, #0]
}
    778e:	2000      	movs	r0, #0
    7790:	4770      	bx	lr

00007792 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7792:	6843      	ldr	r3, [r0, #4]
    7794:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    7796:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    779a:	4042      	eors	r2, r0
    779c:	400a      	ands	r2, r1
    779e:	4042      	eors	r2, r0
    p_reg->OUT = value;
    77a0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    77a4:	2000      	movs	r0, #0
    77a6:	4770      	bx	lr

000077a8 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    77a8:	6843      	ldr	r3, [r0, #4]
    77aa:	685b      	ldr	r3, [r3, #4]
}
    77ac:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    77ae:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    77b2:	4770      	bx	lr

000077b4 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    77b4:	6843      	ldr	r3, [r0, #4]
    77b6:	685b      	ldr	r3, [r3, #4]
}
    77b8:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    77ba:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    77be:	4770      	bx	lr

000077c0 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    77c0:	6843      	ldr	r3, [r0, #4]
    77c2:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    77c4:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    77c8:	404b      	eors	r3, r1
    p_reg->OUT = value;
    77ca:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    77ce:	2000      	movs	r0, #0
    77d0:	4770      	bx	lr

000077d2 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    77d2:	6903      	ldr	r3, [r0, #16]
Z_GENLIST_IS_EMPTY(slist)
    77d4:	6858      	ldr	r0, [r3, #4]
{
    77d6:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    77d8:	b158      	cbz	r0, 77f2 <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    77da:	2400      	movs	r4, #0
    77dc:	4281      	cmp	r1, r0
    77de:	d113      	bne.n	7808 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
    77e0:	6808      	ldr	r0, [r1, #0]
    77e2:	b95c      	cbnz	r4, 77fc <gpio_nrfx_manage_callback+0x2a>
    77e4:	689c      	ldr	r4, [r3, #8]
	list->head = node;
    77e6:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    77e8:	42a1      	cmp	r1, r4
    77ea:	d100      	bne.n	77ee <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    77ec:	6098      	str	r0, [r3, #8]
	parent->next = child;
    77ee:	2000      	movs	r0, #0
    77f0:	6008      	str	r0, [r1, #0]
	if (set) {
    77f2:	b972      	cbnz	r2, 7812 <gpio_nrfx_manage_callback+0x40>
	return 0;
    77f4:	2000      	movs	r0, #0
}
    77f6:	bd30      	pop	{r4, r5, pc}
    77f8:	4628      	mov	r0, r5
    77fa:	e7ef      	b.n	77dc <gpio_nrfx_manage_callback+0xa>
    77fc:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    77fe:	6898      	ldr	r0, [r3, #8]
    7800:	4281      	cmp	r1, r0
	list->tail = node;
    7802:	bf08      	it	eq
    7804:	609c      	streq	r4, [r3, #8]
}
    7806:	e7f2      	b.n	77ee <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    7808:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    780a:	4604      	mov	r4, r0
    780c:	2d00      	cmp	r5, #0
    780e:	d1f3      	bne.n	77f8 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    7810:	b13a      	cbz	r2, 7822 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
    7812:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    7814:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    7816:	6898      	ldr	r0, [r3, #8]
	list->head = node;
    7818:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    781a:	2800      	cmp	r0, #0
    781c:	d1ea      	bne.n	77f4 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    781e:	6099      	str	r1, [r3, #8]
}
    7820:	e7e9      	b.n	77f6 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    7822:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    7826:	e7e6      	b.n	77f6 <gpio_nrfx_manage_callback+0x24>

00007828 <any_other_channel_is_active>:
{
    7828:	b530      	push	{r4, r5, lr}
    782a:	2300      	movs	r3, #0
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
    782c:	1d0c      	adds	r4, r1, #4
		if (i != channel && pwm_channel_is_active(i, data)) {
    782e:	b2da      	uxtb	r2, r3
    7830:	4282      	cmp	r2, r0
    7832:	d007      	beq.n	7844 <any_other_channel_is_active+0x1c>
	uint16_t pulse_cycle =
    7834:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
    7838:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    783c:	b112      	cbz	r2, 7844 <any_other_channel_is_active+0x1c>
    783e:	898d      	ldrh	r5, [r1, #12]
    7840:	4295      	cmp	r5, r2
    7842:	d804      	bhi.n	784e <any_other_channel_is_active+0x26>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
    7844:	3301      	adds	r3, #1
    7846:	2b04      	cmp	r3, #4
    7848:	d1f1      	bne.n	782e <any_other_channel_is_active+0x6>
	return false;
    784a:	2000      	movs	r0, #0
}
    784c:	bd30      	pop	{r4, r5, pc}
			return true;
    784e:	2001      	movs	r0, #1
    7850:	e7fc      	b.n	784c <any_other_channel_is_active+0x24>

00007852 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    7852:	6902      	ldr	r2, [r0, #16]
{
    7854:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    7856:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    785a:	e883 0003 	stmia.w	r3, {r0, r1}
}
    785e:	2000      	movs	r0, #0
    7860:	4770      	bx	lr

00007862 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    7862:	6843      	ldr	r3, [r0, #4]
    7864:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    7866:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    786a:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    786e:	4770      	bx	lr

00007870 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    7870:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    7872:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7874:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    7878:	b940      	cbnz	r0, 788c <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    787a:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    787c:	0792      	lsls	r2, r2, #30
    787e:	d406      	bmi.n	788e <is_tx_ready+0x1e>
    7880:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    7884:	3800      	subs	r0, #0
    7886:	bf18      	it	ne
    7888:	2001      	movne	r0, #1
    788a:	4770      	bx	lr
    788c:	2001      	movs	r0, #1
}
    788e:	4770      	bx	lr

00007890 <user_callback>:
	if (data->async->user_callback) {
    7890:	6903      	ldr	r3, [r0, #16]
    7892:	68da      	ldr	r2, [r3, #12]
    7894:	6813      	ldr	r3, [r2, #0]
    7896:	b10b      	cbz	r3, 789c <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
    7898:	6852      	ldr	r2, [r2, #4]
    789a:	4718      	bx	r3
}
    789c:	4770      	bx	lr

0000789e <notify_uart_rx_rdy>:
{
    789e:	b570      	push	{r4, r5, r6, lr}
    78a0:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = get_dev_data(dev);
    78a2:	6906      	ldr	r6, [r0, #16]
{
    78a4:	4604      	mov	r4, r0
    78a6:	460d      	mov	r5, r1
	struct uart_event evt = {
    78a8:	2214      	movs	r2, #20
    78aa:	2100      	movs	r1, #0
    78ac:	a801      	add	r0, sp, #4
    78ae:	f7ff fe92 	bl	75d6 <memset>
    78b2:	2302      	movs	r3, #2
    78b4:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
    78b8:	68f3      	ldr	r3, [r6, #12]
	struct uart_event evt = {
    78ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    78bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    78be:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
    78c0:	a901      	add	r1, sp, #4
    78c2:	4620      	mov	r0, r4
	struct uart_event evt = {
    78c4:	e9cd 3503 	strd	r3, r5, [sp, #12]
	user_callback(dev, &evt);
    78c8:	f7ff ffe2 	bl	7890 <user_callback>
}
    78cc:	b006      	add	sp, #24
    78ce:	bd70      	pop	{r4, r5, r6, pc}

000078d0 <notify_rx_buf_release>:
{
    78d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (*buf) {
    78d2:	680f      	ldr	r7, [r1, #0]
{
    78d4:	b087      	sub	sp, #28
    78d6:	4606      	mov	r6, r0
    78d8:	460c      	mov	r4, r1
    78da:	4615      	mov	r5, r2
	if (*buf) {
    78dc:	b187      	cbz	r7, 7900 <notify_rx_buf_release+0x30>
		struct uart_event evt = {
    78de:	2100      	movs	r1, #0
    78e0:	2214      	movs	r2, #20
    78e2:	a801      	add	r0, sp, #4
    78e4:	f7ff fe77 	bl	75d6 <memset>
    78e8:	2304      	movs	r3, #4
		user_callback(dev, &evt);
    78ea:	eb0d 0103 	add.w	r1, sp, r3
    78ee:	4630      	mov	r0, r6
		struct uart_event evt = {
    78f0:	f88d 3004 	strb.w	r3, [sp, #4]
    78f4:	9702      	str	r7, [sp, #8]
		user_callback(dev, &evt);
    78f6:	f7ff ffcb 	bl	7890 <user_callback>
		if (clear) {
    78fa:	b10d      	cbz	r5, 7900 <notify_rx_buf_release+0x30>
			*buf = NULL;
    78fc:	2300      	movs	r3, #0
    78fe:	6023      	str	r3, [r4, #0]
}
    7900:	b007      	add	sp, #28
    7902:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007904 <notify_rx_disable>:
{
    7904:	b510      	push	{r4, lr}
    7906:	b086      	sub	sp, #24
    7908:	4604      	mov	r4, r0
	struct uart_event evt = {
    790a:	2214      	movs	r2, #20
    790c:	2100      	movs	r1, #0
    790e:	a801      	add	r0, sp, #4
    7910:	f7ff fe61 	bl	75d6 <memset>
    7914:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
    7916:	a901      	add	r1, sp, #4
    7918:	4620      	mov	r0, r4
	struct uart_event evt = {
    791a:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
    791e:	f7ff ffb7 	bl	7890 <user_callback>
}
    7922:	b006      	add	sp, #24
    7924:	bd10      	pop	{r4, pc}

00007926 <uarte_nrfx_rx_buf_rsp>:
	return config->uarte_regs;
    7926:	6843      	ldr	r3, [r0, #4]
{
    7928:	b530      	push	{r4, r5, lr}
	return config->uarte_regs;
    792a:	681b      	ldr	r3, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    792c:	6904      	ldr	r4, [r0, #16]
	__asm__ volatile(
    792e:	f04f 0020 	mov.w	r0, #32
    7932:	f3ef 8511 	mrs	r5, BASEPRI
    7936:	f380 8812 	msr	BASEPRI_MAX, r0
    793a:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
    793e:	68e4      	ldr	r4, [r4, #12]
    7940:	6e20      	ldr	r0, [r4, #96]	; 0x60
    7942:	b190      	cbz	r0, 796a <uarte_nrfx_rx_buf_rsp+0x44>
	} else if (data->async->rx_next_buf == NULL) {
    7944:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    7946:	b998      	cbnz	r0, 7970 <uarte_nrfx_rx_buf_rsp+0x4a>
		data->async->rx_next_buf_len = len;
    7948:	e9c4 121b 	strd	r1, r2, [r4, #108]	; 0x6c
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    794c:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    7950:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
    7954:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    7958:	f042 0220 	orr.w	r2, r2, #32
    795c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
    7960:	f385 8811 	msr	BASEPRI, r5
    7964:	f3bf 8f6f 	isb	sy
}
    7968:	bd30      	pop	{r4, r5, pc}
		err = -EACCES;
    796a:	f06f 000c 	mvn.w	r0, #12
    796e:	e7f7      	b.n	7960 <uarte_nrfx_rx_buf_rsp+0x3a>
		err = -EBUSY;
    7970:	f06f 000f 	mvn.w	r0, #15
    7974:	e7f4      	b.n	7960 <uarte_nrfx_rx_buf_rsp+0x3a>

00007976 <uarte_nrfx_callback_set>:
	if (!data->async) {
    7976:	6903      	ldr	r3, [r0, #16]
    7978:	68db      	ldr	r3, [r3, #12]
    797a:	b11b      	cbz	r3, 7984 <uarte_nrfx_callback_set+0xe>
	data->async->user_data = user_data;
    797c:	e9c3 1200 	strd	r1, r2, [r3]
	return 0;
    7980:	2000      	movs	r0, #0
    7982:	4770      	bx	lr
		return -ENOTSUP;
    7984:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    7988:	4770      	bx	lr

0000798a <uarte_nrfx_poll_in>:
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    798a:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    798c:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
    798e:	68d0      	ldr	r0, [r2, #12]
	return config->uarte_regs;
    7990:	681b      	ldr	r3, [r3, #0]
{
    7992:	b510      	push	{r4, lr}
	if (data->async) {
    7994:	b958      	cbnz	r0, 79ae <uarte_nrfx_poll_in+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7996:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    799a:	b15c      	cbz	r4, 79b4 <uarte_nrfx_poll_in+0x2a>
	*c = data->rx_data;
    799c:	7d52      	ldrb	r2, [r2, #21]
    799e:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    79a0:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    79a4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    79a8:	2201      	movs	r2, #1
    79aa:	601a      	str	r2, [r3, #0]
}
    79ac:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
    79ae:	f06f 0085 	mvn.w	r0, #133	; 0x85
    79b2:	e7fb      	b.n	79ac <uarte_nrfx_poll_in+0x22>
		return -1;
    79b4:	f04f 30ff 	mov.w	r0, #4294967295
    79b8:	e7f8      	b.n	79ac <uarte_nrfx_poll_in+0x22>

000079ba <rx_timeout>:
{
    79ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return z_impl_k_timer_user_data_get(timer);
    79bc:	6b46      	ldr	r6, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
    79be:	68f3      	ldr	r3, [r6, #12]
    79c0:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
    79c4:	f002 07ff 	and.w	r7, r2, #255	; 0xff
    79c8:	bb42      	cbnz	r2, 7a1c <rx_timeout+0x62>
	const struct device *dev = data->dev;
    79ca:	6835      	ldr	r5, [r6, #0]
	return config->uarte_regs;
    79cc:	686a      	ldr	r2, [r5, #4]
    79ce:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENCLR = mask;
    79d0:	2110      	movs	r1, #16
    79d2:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
    79d6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
	if (read != data->async->rx_total_byte_cnt) {
    79da:	6f59      	ldr	r1, [r3, #116]	; 0x74
    79dc:	4291      	cmp	r1, r2
		data->async->rx_total_byte_cnt = read;
    79de:	bf1e      	ittt	ne
    79e0:	675a      	strne	r2, [r3, #116]	; 0x74
		data->async->rx_timeout_left = data->async->rx_timeout;
    79e2:	6fda      	ldrne	r2, [r3, #124]	; 0x7c
    79e4:	f8c3 2084 	strne.w	r2, [r3, #132]	; 0x84
		    - data->async->rx_total_user_byte_cnt;
    79e8:	e9d3 421d 	ldrd	r4, r2, [r3, #116]	; 0x74
	if (!hw_rx_counting_enabled(data) &&
    79ec:	1aa4      	subs	r4, r4, r2
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
    79ee:	bf48      	it	mi
    79f0:	f8c3 20c0 	strmi.w	r2, [r3, #192]	; 0xc0
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
    79f4:	e9d3 1219 	ldrd	r1, r2, [r3, #100]	; 0x64
		len = 0;
    79f8:	bf48      	it	mi
    79fa:	2400      	movmi	r4, #0
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
    79fc:	18a0      	adds	r0, r4, r2
    79fe:	4288      	cmp	r0, r1
    7a00:	d90d      	bls.n	7a1e <rx_timeout+0x64>
		len = data->async->rx_buf_len - data->async->rx_offset;
    7a02:	1a8c      	subs	r4, r1, r2
	if (len > 0) {
    7a04:	2c00      	cmp	r4, #0
    7a06:	dd04      	ble.n	7a12 <rx_timeout+0x58>
		clipped = true;
    7a08:	2701      	movs	r7, #1
    7a0a:	e00e      	b.n	7a2a <rx_timeout+0x70>
			data->async->rx_timeout_left -=
    7a0c:	1a52      	subs	r2, r2, r1
    7a0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	return config->uarte_regs;
    7a12:	686b      	ldr	r3, [r5, #4]
    7a14:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    7a16:	2210      	movs	r2, #16
    7a18:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    7a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len > 0) {
    7a1e:	2c00      	cmp	r4, #0
    7a20:	d0f7      	beq.n	7a12 <rx_timeout+0x58>
				< data->async->rx_timeout_slab)) {
    7a22:	e9d3 1220 	ldrd	r1, r2, [r3, #128]	; 0x80
		if (clipped ||
    7a26:	428a      	cmp	r2, r1
    7a28:	daf0      	bge.n	7a0c <rx_timeout+0x52>
			notify_uart_rx_rdy(dev, len);
    7a2a:	4621      	mov	r1, r4
    7a2c:	4628      	mov	r0, r5
    7a2e:	f7ff ff36 	bl	789e <notify_uart_rx_rdy>
			data->async->rx_offset += len;
    7a32:	68f0      	ldr	r0, [r6, #12]
    7a34:	6e83      	ldr	r3, [r0, #104]	; 0x68
			data->async->rx_total_user_byte_cnt += len;
    7a36:	6f81      	ldr	r1, [r0, #120]	; 0x78
			data->async->rx_offset += len;
    7a38:	4423      	add	r3, r4
			data->async->rx_total_user_byte_cnt += len;
    7a3a:	4421      	add	r1, r4
			data->async->rx_offset += len;
    7a3c:	6683      	str	r3, [r0, #104]	; 0x68
			data->async->rx_total_user_byte_cnt += len;
    7a3e:	6781      	str	r1, [r0, #120]	; 0x78
		if (clipped) {
    7a40:	2f00      	cmp	r7, #0
    7a42:	d0e6      	beq.n	7a12 <rx_timeout+0x58>
	z_impl_k_timer_stop(timer);
    7a44:	3088      	adds	r0, #136	; 0x88
    7a46:	f000 fc25 	bl	8294 <z_impl_k_timer_stop>
}
    7a4a:	e7e2      	b.n	7a12 <rx_timeout+0x58>

00007a4c <uarte_nrfx_rx_enable>:
{
    7a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7a50:	4614      	mov	r4, r2
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
    7a52:	6842      	ldr	r2, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    7a54:	f8d0 9010 	ldr.w	r9, [r0, #16]
	return config->uarte_regs;
    7a58:	6817      	ldr	r7, [r2, #0]
	if (cfg->disable_rx) {
    7a5a:	7a12      	ldrb	r2, [r2, #8]
{
    7a5c:	4605      	mov	r5, r0
    7a5e:	4688      	mov	r8, r1
	if (cfg->disable_rx) {
    7a60:	2a00      	cmp	r2, #0
    7a62:	d172      	bne.n	7b4a <uarte_nrfx_rx_enable+0xfe>
	if (data->async->rx_enabled) {
    7a64:	f8d9 100c 	ldr.w	r1, [r9, #12]
    7a68:	f891 20d2 	ldrb.w	r2, [r1, #210]	; 0xd2
    7a6c:	2a00      	cmp	r2, #0
    7a6e:	d16f      	bne.n	7b50 <uarte_nrfx_rx_enable+0x104>
		MAX(timeout / RX_TIMEOUT_DIV,
    7a70:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
	data->async->rx_timeout = timeout;
    7a74:	67cb      	str	r3, [r1, #124]	; 0x7c
		MAX(timeout / RX_TIMEOUT_DIV,
    7a76:	bfd2      	itee	le
    7a78:	235c      	movle	r3, #92	; 0x5c
    7a7a:	2205      	movgt	r2, #5
    7a7c:	fb93 f3f2 	sdivgt	r3, r3, r2
	data->async->rx_timeout_slab =
    7a80:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	data->async->rx_offset = 0;
    7a84:	2300      	movs	r3, #0
	data->async->rx_buf_len = len;
    7a86:	e9c1 8418 	strd	r8, r4, [r1, #96]	; 0x60
	data->async->rx_next_buf = NULL;
    7a8a:	e9c1 331a 	strd	r3, r3, [r1, #104]	; 0x68
	data->async->rx_next_buf_len = 0;
    7a8e:	670b      	str	r3, [r1, #112]	; 0x70
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    7a90:	6843      	ldr	r3, [r0, #4]
    7a92:	685b      	ldr	r3, [r3, #4]
    7a94:	06da      	lsls	r2, r3, #27
    7a96:	d525      	bpl.n	7ae4 <uarte_nrfx_rx_enable+0x98>
		if (data->async->rx_flush_cnt) {
    7a98:	f891 60d1 	ldrb.w	r6, [r1, #209]	; 0xd1
    7a9c:	b316      	cbz	r6, 7ae4 <uarte_nrfx_rx_enable+0x98>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
    7a9e:	42a6      	cmp	r6, r4
    7aa0:	bf28      	it	cs
    7aa2:	4626      	movcs	r6, r4
			memcpy(buf, data->async->rx_flush_buffer, cpy_len);
    7aa4:	4640      	mov	r0, r8
    7aa6:	4632      	mov	r2, r6
    7aa8:	31cc      	adds	r1, #204	; 0xcc
    7aaa:	f7ff fd89 	bl	75c0 <memcpy>
			if (!len) {
    7aae:	1ba4      	subs	r4, r4, r6
			buf += cpy_len;
    7ab0:	44b0      	add	r8, r6
			if (!len) {
    7ab2:	d117      	bne.n	7ae4 <uarte_nrfx_rx_enable+0x98>
				data->async->rx_flush_cnt -= cpy_len;
    7ab4:	f8d9 200c 	ldr.w	r2, [r9, #12]
    7ab8:	f892 30d1 	ldrb.w	r3, [r2, #209]	; 0xd1
    7abc:	1b9b      	subs	r3, r3, r6
    7abe:	f882 30d1 	strb.w	r3, [r2, #209]	; 0xd1
				notify_uart_rx_rdy(dev, cpy_len);
    7ac2:	4631      	mov	r1, r6
    7ac4:	4628      	mov	r0, r5
    7ac6:	f7ff feea 	bl	789e <notify_uart_rx_rdy>
				notify_rx_buf_release(dev, &data->async->rx_buf,
    7aca:	f8d9 100c 	ldr.w	r1, [r9, #12]
    7ace:	4628      	mov	r0, r5
    7ad0:	2201      	movs	r2, #1
    7ad2:	3160      	adds	r1, #96	; 0x60
    7ad4:	f7ff fefc 	bl	78d0 <notify_rx_buf_release>
				notify_rx_disable(dev);
    7ad8:	4628      	mov	r0, r5
    7ada:	f7ff ff13 	bl	7904 <notify_rx_disable>
	return 0;
    7ade:	2000      	movs	r0, #0
}
    7ae0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7ae4:	2300      	movs	r3, #0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    7ae6:	f8c7 8534 	str.w	r8, [r7, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    7aea:	f8c7 4538 	str.w	r4, [r7, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7aee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    7af2:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
    7af6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    7afa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
	data->async->rx_enabled = true;
    7afe:	f8d9 300c 	ldr.w	r3, [r9, #12]
    7b02:	2201      	movs	r2, #1
    7b04:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    7b08:	686b      	ldr	r3, [r5, #4]
    7b0a:	685b      	ldr	r3, [r3, #4]
    7b0c:	06db      	lsls	r3, r3, #27
    7b0e:	d519      	bpl.n	7b44 <uarte_nrfx_rx_enable+0xf8>
	__asm__ volatile(
    7b10:	f04f 0320 	mov.w	r3, #32
    7b14:	f3ef 8111 	mrs	r1, BASEPRI
    7b18:	f383 8812 	msr	BASEPRI_MAX, r3
    7b1c:	f3bf 8f6f 	isb	sy
	if (data->async) {
    7b20:	692b      	ldr	r3, [r5, #16]
    7b22:	68db      	ldr	r3, [r3, #12]
    7b24:	b12b      	cbz	r3, 7b32 <uarte_nrfx_rx_enable+0xe6>
		data->async->low_power_mask |= mask;
    7b26:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
    7b2a:	f042 0202 	orr.w	r2, r2, #2
    7b2e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	return config->uarte_regs;
    7b32:	686b      	ldr	r3, [r5, #4]
    7b34:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    7b36:	2208      	movs	r2, #8
    7b38:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
    7b3c:	f381 8811 	msr	BASEPRI, r1
    7b40:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7b44:	2301      	movs	r3, #1
    7b46:	603b      	str	r3, [r7, #0]
    7b48:	e7c9      	b.n	7ade <uarte_nrfx_rx_enable+0x92>
		return -ENOTSUP;
    7b4a:	f06f 0085 	mvn.w	r0, #133	; 0x85
    7b4e:	e7c7      	b.n	7ae0 <uarte_nrfx_rx_enable+0x94>
		return -EBUSY;
    7b50:	f06f 000f 	mvn.w	r0, #15
    7b54:	e7c4      	b.n	7ae0 <uarte_nrfx_rx_enable+0x94>

00007b56 <rx_flush>:
	return config->uarte_regs;
    7b56:	6843      	ldr	r3, [r0, #4]
{
    7b58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return config->uarte_regs;
    7b5a:	681d      	ldr	r5, [r3, #0]
{
    7b5c:	4616      	mov	r6, r2
    return p_reg->RXD.AMOUNT;
    7b5e:	f8d5 753c 	ldr.w	r7, [r5, #1340]	; 0x53c
	size_t flush_len = buf ? len : sizeof(tmp_buf);
    7b62:	460c      	mov	r4, r1
    7b64:	bb31      	cbnz	r1, 7bb4 <rx_flush+0x5e>
    7b66:	2605      	movs	r6, #5
		flush_buf = tmp_buf;
    7b68:	466b      	mov	r3, sp
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    7b6a:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7b6e:	2300      	movs	r3, #0
    p_reg->RXD.MAXCNT = length;
    7b70:	f8c5 6538 	str.w	r6, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7b74:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    7b78:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7b7c:	2201      	movs	r2, #1
    7b7e:	62ea      	str	r2, [r5, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7b80:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    7b84:	2a00      	cmp	r2, #0
    7b86:	d0fb      	beq.n	7b80 <rx_flush+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7b88:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    7b8c:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
    return p_reg->RXD.AMOUNT;
    7b90:	f8d5 053c 	ldr.w	r0, [r5, #1340]	; 0x53c
	if (!buf) {
    7b94:	b914      	cbnz	r4, 7b9c <rx_flush+0x46>
			return rx_amount;
    7b96:	b2c0      	uxtb	r0, r0
}
    7b98:	b003      	add	sp, #12
    7b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rx_amount != prev_rx_amount) {
    7b9c:	4287      	cmp	r7, r0
    7b9e:	d1fa      	bne.n	7b96 <rx_flush+0x40>
    7ba0:	4426      	add	r6, r4
	for (int i = 0; i < flush_len; i++) {
    7ba2:	42b4      	cmp	r4, r6
    7ba4:	d101      	bne.n	7baa <rx_flush+0x54>
	return 0;
    7ba6:	2000      	movs	r0, #0
    7ba8:	e7f6      	b.n	7b98 <rx_flush+0x42>
		if (buf[i] != dirty) {
    7baa:	f814 3b01 	ldrb.w	r3, [r4], #1
    7bae:	2b00      	cmp	r3, #0
    7bb0:	d0f7      	beq.n	7ba2 <rx_flush+0x4c>
    7bb2:	e7f0      	b.n	7b96 <rx_flush+0x40>
		memset(buf, dirty, len);
    7bb4:	2100      	movs	r1, #0
    7bb6:	4620      	mov	r0, r4
    7bb8:	f7ff fd0d 	bl	75d6 <memset>
		flush_len = len;
    7bbc:	4623      	mov	r3, r4
    7bbe:	e7d4      	b.n	7b6a <rx_flush+0x14>

00007bc0 <async_uart_release>:
{
    7bc0:	b570      	push	{r4, r5, r6, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    7bc2:	6903      	ldr	r3, [r0, #16]
{
    7bc4:	4604      	mov	r4, r0
	__asm__ volatile(
    7bc6:	f04f 0220 	mov.w	r2, #32
    7bca:	f3ef 8611 	mrs	r6, BASEPRI
    7bce:	f382 8812 	msr	BASEPRI_MAX, r2
    7bd2:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
    7bd6:	68dd      	ldr	r5, [r3, #12]
    7bd8:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    7bdc:	ea23 0301 	bic.w	r3, r3, r1
    7be0:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
	if (!data->async->low_power_mask) {
    7be4:	b96b      	cbnz	r3, 7c02 <async_uart_release+0x42>
		if (dir_mask == UARTE_LOW_POWER_RX) {
    7be6:	2902      	cmp	r1, #2
    7be8:	d106      	bne.n	7bf8 <async_uart_release+0x38>
				rx_flush(dev, data->async->rx_flush_buffer,
    7bea:	2205      	movs	r2, #5
    7bec:	f105 01cc 	add.w	r1, r5, #204	; 0xcc
    7bf0:	f7ff ffb1 	bl	7b56 <rx_flush>
			data->async->rx_flush_cnt =
    7bf4:	f885 00d1 	strb.w	r0, [r5, #209]	; 0xd1
	return config->uarte_regs;
    7bf8:	6863      	ldr	r3, [r4, #4]
    7bfa:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    7bfc:	2200      	movs	r2, #0
    7bfe:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
    7c02:	f386 8811 	msr	BASEPRI, r6
    7c06:	f3bf 8f6f 	isb	sy
}
    7c0a:	bd70      	pop	{r4, r5, r6, pc}

00007c0c <setup_tx_cache.isra.0>:
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
    7c0c:	68c2      	ldr	r2, [r0, #12]
    7c0e:	6a01      	ldr	r1, [r0, #32]
	if (!remaining) {
    7c10:	1a52      	subs	r2, r2, r1
static bool setup_tx_cache(struct uarte_nrfx_data *data)
    7c12:	b508      	push	{r3, lr}
    7c14:	4603      	mov	r3, r0
	if (!remaining) {
    7c16:	d00b      	beq.n	7c30 <setup_tx_cache.isra.0+0x24>
	size_t len = MIN(remaining, sizeof(data->async->tx_cache));
    7c18:	2a08      	cmp	r2, #8
    7c1a:	bf28      	it	cs
    7c1c:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
    7c1e:	6142      	str	r2, [r0, #20]
	data->async->xfer_buf = data->async->tx_cache;
    7c20:	3018      	adds	r0, #24
    7c22:	6118      	str	r0, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
    7c24:	689b      	ldr	r3, [r3, #8]
    7c26:	4419      	add	r1, r3
    7c28:	f7ff fcca 	bl	75c0 <memcpy>
	return true;
    7c2c:	2001      	movs	r0, #1
}
    7c2e:	bd08      	pop	{r3, pc}
		return false;
    7c30:	4610      	mov	r0, r2
    7c32:	e7fc      	b.n	7c2e <setup_tx_cache.isra.0+0x22>

00007c34 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    7c34:	b510      	push	{r4, lr}
    7c36:	2200      	movs	r2, #0
    7c38:	4604      	mov	r4, r0
    7c3a:	2101      	movs	r1, #1
    7c3c:	2002      	movs	r0, #2
    7c3e:	f7fa ff7b 	bl	2b38 <z_arm_irq_priority_set>
    7c42:	2002      	movs	r0, #2
    7c44:	f7fa ff5a 	bl	2afc <arch_irq_enable>
    7c48:	4620      	mov	r0, r4
    7c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7c4e:	f7fc ba39 	b.w	40c4 <uarte_instance_init.isra.0>

00007c52 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    7c52:	b510      	push	{r4, lr}
    7c54:	2200      	movs	r2, #0
    7c56:	4604      	mov	r4, r0
    7c58:	2101      	movs	r1, #1
    7c5a:	2028      	movs	r0, #40	; 0x28
    7c5c:	f7fa ff6c 	bl	2b38 <z_arm_irq_priority_set>
    7c60:	2028      	movs	r0, #40	; 0x28
    7c62:	f7fa ff4b 	bl	2afc <arch_irq_enable>
    7c66:	4620      	mov	r0, r4
    7c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7c6c:	f7fc ba2a 	b.w	40c4 <uarte_instance_init.isra.0>

00007c70 <uarte_nrfx_tx_abort>:
{
    7c70:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
    7c72:	6843      	ldr	r3, [r0, #4]
    7c74:	681d      	ldr	r5, [r3, #0]
	if (data->async->tx_buf == NULL) {
    7c76:	6903      	ldr	r3, [r0, #16]
    7c78:	68d8      	ldr	r0, [r3, #12]
    7c7a:	6883      	ldr	r3, [r0, #8]
    7c7c:	b14b      	cbz	r3, 7c92 <uarte_nrfx_tx_abort+0x22>
	data->async->pending_tx = false;
    7c7e:	2400      	movs	r4, #0
    7c80:	f880 40d4 	strb.w	r4, [r0, #212]	; 0xd4
	z_impl_k_timer_stop(timer);
    7c84:	3028      	adds	r0, #40	; 0x28
    7c86:	f000 fb05 	bl	8294 <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7c8a:	2301      	movs	r3, #1
    7c8c:	60eb      	str	r3, [r5, #12]
	return 0;
    7c8e:	4620      	mov	r0, r4
}
    7c90:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
    7c92:	f06f 000d 	mvn.w	r0, #13
    7c96:	e7fb      	b.n	7c90 <uarte_nrfx_tx_abort+0x20>

00007c98 <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
    7c98:	6b43      	ldr	r3, [r0, #52]	; 0x34
    7c9a:	6818      	ldr	r0, [r3, #0]
    7c9c:	f7ff bfe8 	b.w	7c70 <uarte_nrfx_tx_abort>

00007ca0 <uarte_nrfx_rx_disable>:
{
    7ca0:	b538      	push	{r3, r4, r5, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    7ca2:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
    7ca4:	6843      	ldr	r3, [r0, #4]
	if (data->async->rx_buf == NULL) {
    7ca6:	68e8      	ldr	r0, [r5, #12]
	return config->uarte_regs;
    7ca8:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
    7caa:	6e03      	ldr	r3, [r0, #96]	; 0x60
    7cac:	b1b3      	cbz	r3, 7cdc <uarte_nrfx_rx_disable+0x3c>
	if (data->async->rx_next_buf != NULL) {
    7cae:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    7cb0:	b153      	cbz	r3, 7cc8 <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
    7cb2:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
    7cb6:	f023 0320 	bic.w	r3, r3, #32
    7cba:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7cbe:	2300      	movs	r3, #0
    7cc0:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    7cc4:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    7cc8:	3088      	adds	r0, #136	; 0x88
    7cca:	f000 fae3 	bl	8294 <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
    7cce:	68eb      	ldr	r3, [r5, #12]
    7cd0:	2000      	movs	r0, #0
    7cd2:	f883 00d2 	strb.w	r0, [r3, #210]	; 0xd2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7cd6:	2301      	movs	r3, #1
    7cd8:	6063      	str	r3, [r4, #4]
}
    7cda:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
    7cdc:	f06f 000d 	mvn.w	r0, #13
    7ce0:	e7fb      	b.n	7cda <uarte_nrfx_rx_disable+0x3a>

00007ce2 <tx_start>:
{
    7ce2:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    7ce4:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
    7ce6:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    7ce8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    7cec:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7cf0:	2200      	movs	r2, #0
    7cf2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    7cf6:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    7cfa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    7cfe:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    7d02:	6862      	ldr	r2, [r4, #4]
    7d04:	06d2      	lsls	r2, r2, #27
    7d06:	d50f      	bpl.n	7d28 <tx_start+0x46>
	if (data->async) {
    7d08:	6902      	ldr	r2, [r0, #16]
    7d0a:	68d2      	ldr	r2, [r2, #12]
    7d0c:	b12a      	cbz	r2, 7d1a <tx_start+0x38>
		data->async->low_power_mask |= mask;
    7d0e:	f8d2 10c8 	ldr.w	r1, [r2, #200]	; 0xc8
    7d12:	f041 0101 	orr.w	r1, r1, #1
    7d16:	f8c2 10c8 	str.w	r1, [r2, #200]	; 0xc8
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    7d1a:	2208      	movs	r2, #8
    7d1c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    7d20:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    7d24:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7d28:	2201      	movs	r2, #1
    7d2a:	609a      	str	r2, [r3, #8]
}
    7d2c:	bd10      	pop	{r4, pc}

00007d2e <start_tx_locked.isra.0>:
static void start_tx_locked(const struct device *dev, struct uarte_nrfx_data *data)
    7d2e:	b510      	push	{r4, lr}
    7d30:	4604      	mov	r4, r0
	if (!is_tx_ready(dev)) {
    7d32:	f7ff fd9d 	bl	7870 <is_tx_ready>
    7d36:	680b      	ldr	r3, [r1, #0]
    7d38:	b918      	cbnz	r0, 7d42 <start_tx_locked.isra.0+0x14>
		data->async->pending_tx = true;
    7d3a:	2201      	movs	r2, #1
    7d3c:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
}
    7d40:	bd10      	pop	{r4, pc}
		data->async->pending_tx = false;
    7d42:	2200      	movs	r2, #0
    7d44:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
		data->async->tx_amount = -1;
    7d48:	f04f 32ff 	mov.w	r2, #4294967295
    7d4c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
    7d50:	4620      	mov	r0, r4
    7d52:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
}
    7d56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
    7d5a:	f7ff bfc2 	b.w	7ce2 <tx_start>

00007d5e <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    7d5e:	4770      	bx	lr

00007d60 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    7d60:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    7d62:	2000      	movs	r0, #0
    7d64:	f7fb fa86 	bl	3274 <sys_arch_reboot>

00007d68 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    7d68:	f7ff b818 	b.w	6d9c <nrf_cc3xx_platform_init_no_rng>

00007d6c <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    7d6c:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    7d6e:	f7fa fddd 	bl	292c <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    7d72:	f7fa fe8f 	bl	2a94 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    7d76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    7d7a:	f7ff b80f 	b.w	6d9c <nrf_cc3xx_platform_init_no_rng>

00007d7e <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    7d7e:	4700      	bx	r0

00007d80 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    7d80:	f000 ba78 	b.w	8274 <z_impl_k_busy_wait>

00007d84 <nrfx_clock_enable>:
{
    7d84:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    7d86:	2000      	movs	r0, #0
    7d88:	f7fa fec8 	bl	2b1c <arch_irq_is_enabled>
    7d8c:	b918      	cbnz	r0, 7d96 <nrfx_clock_enable+0x12>
}
    7d8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    7d92:	f7fa beb3 	b.w	2afc <arch_irq_enable>
    7d96:	bd08      	pop	{r3, pc}

00007d98 <nrf_gpio_reconfigure>:
{
    7d98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7d9a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7d9c:	a801      	add	r0, sp, #4
{
    7d9e:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
    7da2:	4617      	mov	r7, r2
    7da4:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7da6:	f7fd f925 	bl	4ff4 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7daa:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    7dac:	2f00      	cmp	r7, #0
    7dae:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    7db2:	bf14      	ite	ne
    7db4:	2302      	movne	r3, #2
    7db6:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    7db8:	2900      	cmp	r1, #0
    7dba:	bf18      	it	ne
    7dbc:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    7dc0:	2d00      	cmp	r5, #0
    7dc2:	bf14      	ite	ne
    7dc4:	f04f 0c0c 	movne.w	ip, #12
    7dc8:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    7dcc:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    7dce:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    7dd2:	bf14      	ite	ne
    7dd4:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    7dd8:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    7ddc:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    7dde:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7de2:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    7de6:	bf14      	ite	ne
    7de8:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    7dec:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    7df0:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    7df4:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    7df8:	b101      	cbz	r1, 7dfc <nrf_gpio_reconfigure+0x64>
    7dfa:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    7dfc:	b10f      	cbz	r7, 7e02 <nrf_gpio_reconfigure+0x6a>
    7dfe:	783f      	ldrb	r7, [r7, #0]
    7e00:	007f      	lsls	r7, r7, #1
    7e02:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    7e04:	b10d      	cbz	r5, 7e0a <nrf_gpio_reconfigure+0x72>
    7e06:	782d      	ldrb	r5, [r5, #0]
    7e08:	00ad      	lsls	r5, r5, #2
    7e0a:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    7e0c:	b10c      	cbz	r4, 7e12 <nrf_gpio_reconfigure+0x7a>
    7e0e:	7822      	ldrb	r2, [r4, #0]
    7e10:	0214      	lsls	r4, r2, #8
    7e12:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    7e14:	b10e      	cbz	r6, 7e1a <nrf_gpio_reconfigure+0x82>
    7e16:	7836      	ldrb	r6, [r6, #0]
    7e18:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    7e1a:	432c      	orrs	r4, r5
    7e1c:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
    7e1e:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    7e22:	b003      	add	sp, #12
    7e24:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007e26 <nrf_gpio_cfg_sense_set>:
{
    7e26:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    7e28:	f10d 030f 	add.w	r3, sp, #15
    7e2c:	9301      	str	r3, [sp, #4]
    7e2e:	2300      	movs	r3, #0
{
    7e30:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    7e34:	9300      	str	r3, [sp, #0]
    7e36:	461a      	mov	r2, r3
    7e38:	4619      	mov	r1, r3
    7e3a:	f7ff ffad 	bl	7d98 <nrf_gpio_reconfigure>
}
    7e3e:	b005      	add	sp, #20
    7e40:	f85d fb04 	ldr.w	pc, [sp], #4

00007e44 <start_playback.isra.0>:
static uint32_t start_playback(nrfx_pwm_t const * p_instance,
    7e44:	b510      	push	{r4, lr}
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    7e46:	2402      	movs	r4, #2
    7e48:	720c      	strb	r4, [r1, #8]
    p_cb->flags = flags;
    7e4a:	724a      	strb	r2, [r1, #9]
    if (p_cb->handler)
    7e4c:	6809      	ldr	r1, [r1, #0]
    7e4e:	b171      	cbz	r1, 7e6e <start_playback.isra.0+0x2a>
            int_mask |= NRF_PWM_INT_SEQEND0_MASK;
    7e50:	f012 0f04 	tst.w	r2, #4
    7e54:	bf0c      	ite	eq
    7e56:	2182      	moveq	r1, #130	; 0x82
    7e58:	2192      	movne	r1, #146	; 0x92
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ1)
    7e5a:	0714      	lsls	r4, r2, #28
            int_mask |= NRF_PWM_INT_SEQEND1_MASK;
    7e5c:	bf48      	it	mi
    7e5e:	f041 0120 	orrmi.w	r1, r1, #32
        if (flags & NRFX_PWM_FLAG_NO_EVT_FINISHED)
    7e62:	06d4      	lsls	r4, r2, #27
            int_mask &= ~NRF_PWM_INT_LOOPSDONE_MASK;
    7e64:	bf48      	it	mi
    7e66:	f021 0180 	bicmi.w	r1, r1, #128	; 0x80
    p_reg->INTEN = mask;
    7e6a:	f8c0 1300 	str.w	r1, [r0, #768]	; 0x300
    if (flags & NRFX_PWM_FLAG_START_VIA_TASK)
    7e6e:	0612      	lsls	r2, r2, #24
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7e70:	f04f 0100 	mov.w	r1, #0
    7e74:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7e78:	bf58      	it	pl
    7e7a:	2201      	movpl	r2, #1
    7e7c:	f8d0 4104 	ldr.w	r4, [r0, #260]	; 0x104
    7e80:	bf56      	itet	pl
    7e82:	50c2      	strpl	r2, [r0, r3]
    return ((uint32_t)p_reg + (uint32_t)task);
    7e84:	18c0      	addmi	r0, r0, r3
    return 0;
    7e86:	4608      	movpl	r0, r1
}
    7e88:	bd10      	pop	{r4, pc}

00007e8a <nrfx_pwm_stop>:
{
    7e8a:	b538      	push	{r3, r4, r5, lr}
    nrf_pwm_shorts_set(p_instance->p_registers, 0);
    7e8c:	6803      	ldr	r3, [r0, #0]
    p_reg->SHORTS = mask;
    7e8e:	2200      	movs	r2, #0
    7e90:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7e94:	2201      	movs	r2, #1
    7e96:	605a      	str	r2, [r3, #4]
{
    7e98:	4605      	mov	r5, r0
    7e9a:	460c      	mov	r4, r1
    if (nrfx_pwm_is_stopped(p_instance))
    7e9c:	f7fd fce0 	bl	5860 <nrfx_pwm_is_stopped>
    7ea0:	b938      	cbnz	r0, 7eb2 <nrfx_pwm_stop+0x28>
            if (nrfx_pwm_is_stopped(p_instance))
    7ea2:	4628      	mov	r0, r5
    7ea4:	f7fd fcdc 	bl	5860 <nrfx_pwm_is_stopped>
    7ea8:	b918      	cbnz	r0, 7eb2 <nrfx_pwm_stop+0x28>
        } while (wait_until_stopped);
    7eaa:	2c00      	cmp	r4, #0
    7eac:	d1f9      	bne.n	7ea2 <nrfx_pwm_stop+0x18>
}
    7eae:	4620      	mov	r0, r4
    7eb0:	bd38      	pop	{r3, r4, r5, pc}
        ret_val = true;
    7eb2:	2401      	movs	r4, #1
    7eb4:	e7fb      	b.n	7eae <nrfx_pwm_stop+0x24>

00007eb6 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    7eb6:	f7fd bce7 	b.w	5888 <_DoInit>

00007eba <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    7eba:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    7ebc:	f7ff fffb 	bl	7eb6 <SEGGER_RTT_Init>

	return 0;
}
    7ec0:	2000      	movs	r0, #0
    7ec2:	bd08      	pop	{r3, pc}

00007ec4 <z_device_state_init>:
}
    7ec4:	4770      	bx	lr

00007ec6 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    7ec6:	b138      	cbz	r0, 7ed8 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    7ec8:	68c3      	ldr	r3, [r0, #12]
    7eca:	8818      	ldrh	r0, [r3, #0]
    7ecc:	f3c0 0008 	ubfx	r0, r0, #0, #9
    7ed0:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    7ed4:	4258      	negs	r0, r3
    7ed6:	4158      	adcs	r0, r3
}
    7ed8:	4770      	bx	lr

00007eda <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    7eda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7edc:	4605      	mov	r5, r0
    7ede:	460e      	mov	r6, r1
	__asm__ volatile(
    7ee0:	f04f 0320 	mov.w	r3, #32
    7ee4:	f3ef 8711 	mrs	r7, BASEPRI
    7ee8:	f383 8812 	msr	BASEPRI_MAX, r3
    7eec:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    7ef0:	f7fe fb4a 	bl	6588 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    7ef4:	4631      	mov	r1, r6
    7ef6:	4604      	mov	r4, r0
    7ef8:	4628      	mov	r0, r5
    7efa:	f7ff ff31 	bl	7d60 <k_sys_fatal_error_handler>
	__asm__ volatile(
    7efe:	f387 8811 	msr	BASEPRI, r7
    7f02:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    7f06:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    7f08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    7f0c:	f7fb b88e 	b.w	302c <z_impl_k_thread_abort>

00007f10 <k_mem_slab_init>:
{
    7f10:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    7f12:	2400      	movs	r4, #0
    7f14:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    7f16:	ea41 0402 	orr.w	r4, r1, r2
    7f1a:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    7f1e:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
    7f22:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    7f24:	d10c      	bne.n	7f40 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
    7f26:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    7f28:	42a3      	cmp	r3, r4
    7f2a:	d103      	bne.n	7f34 <k_mem_slab_init+0x24>
    7f2c:	e9c0 0000 	strd	r0, r0, [r0]
}
    7f30:	2000      	movs	r0, #0
}
    7f32:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    7f34:	6945      	ldr	r5, [r0, #20]
    7f36:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    7f38:	3401      	adds	r4, #1
		slab->free_list = p;
    7f3a:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    7f3c:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    7f3e:	e7f3      	b.n	7f28 <k_mem_slab_init+0x18>
		return -EINVAL;
    7f40:	f06f 0015 	mvn.w	r0, #21
	return rc;
    7f44:	e7f5      	b.n	7f32 <k_mem_slab_init+0x22>

00007f46 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    7f46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7f48:	4604      	mov	r4, r0
    7f4a:	460d      	mov	r5, r1
	__asm__ volatile(
    7f4c:	f04f 0320 	mov.w	r3, #32
    7f50:	f3ef 8611 	mrs	r6, BASEPRI
    7f54:	f383 8812 	msr	BASEPRI_MAX, r3
    7f58:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    7f5c:	6947      	ldr	r7, [r0, #20]
    7f5e:	b977      	cbnz	r7, 7f7e <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    7f60:	f000 f90d 	bl	817e <z_unpend_first_thread>

		if (pending_thread != NULL) {
    7f64:	b158      	cbz	r0, 7f7e <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    7f66:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    7f68:	6142      	str	r2, [r0, #20]
    7f6a:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
    7f6c:	f000 f893 	bl	8096 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    7f70:	4631      	mov	r1, r6
    7f72:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    7f76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    7f7a:	f7fe b849 	b.w	6010 <z_reschedule>
	**(char ***) mem = slab->free_list;
    7f7e:	682b      	ldr	r3, [r5, #0]
    7f80:	6962      	ldr	r2, [r4, #20]
    7f82:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    7f84:	682b      	ldr	r3, [r5, #0]
    7f86:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    7f88:	69a3      	ldr	r3, [r4, #24]
    7f8a:	3b01      	subs	r3, #1
    7f8c:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    7f8e:	f386 8811 	msr	BASEPRI, r6
    7f92:	f3bf 8f6f 	isb	sy
}
    7f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007f98 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    7f98:	f3ef 8005 	mrs	r0, IPSR
}
    7f9c:	3800      	subs	r0, #0
    7f9e:	bf18      	it	ne
    7fa0:	2001      	movne	r0, #1
    7fa2:	4770      	bx	lr

00007fa4 <z_impl_k_thread_name_set>:
}
    7fa4:	f06f 0057 	mvn.w	r0, #87	; 0x57
    7fa8:	4770      	bx	lr

00007faa <z_impl_k_thread_start>:
	z_sched_start(thread);
    7faa:	f7fe b92f 	b.w	620c <z_sched_start>

00007fae <z_pm_save_idle_exit>:
{
    7fae:	b508      	push	{r3, lr}
	pm_system_resume();
    7fb0:	f7fa fbf8 	bl	27a4 <pm_system_resume>
}
    7fb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    7fb8:	f7ff bed1 	b.w	7d5e <sys_clock_idle_exit>

00007fbc <z_impl_k_mutex_init>:
{
    7fbc:	4603      	mov	r3, r0
	mutex->owner = NULL;
    7fbe:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    7fc0:	e9c3 0002 	strd	r0, r0, [r3, #8]
    7fc4:	e9c3 3300 	strd	r3, r3, [r3]
}
    7fc8:	4770      	bx	lr

00007fca <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    7fca:	b15a      	cbz	r2, 7fe4 <z_impl_k_sem_init+0x1a>
    7fcc:	428a      	cmp	r2, r1
    7fce:	d309      	bcc.n	7fe4 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
    7fd0:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
    7fd4:	e9c0 1202 	strd	r1, r2, [r0, #8]
    7fd8:	e9c0 0000 	strd	r0, r0, [r0]
    7fdc:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
    7fe0:	2000      	movs	r0, #0
    7fe2:	4770      	bx	lr
		return -EINVAL;
    7fe4:	f06f 0015 	mvn.w	r0, #21
}
    7fe8:	4770      	bx	lr

00007fea <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    7fea:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    7fee:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    7ff0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    7ff2:	2300      	movs	r3, #0
	node->prev = NULL;
    7ff4:	e9c0 3300 	strd	r3, r3, [r0]
}
    7ff8:	4770      	bx	lr

00007ffa <unpend_thread_no_timeout>:
{
    7ffa:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    7ffc:	f7ff fff5 	bl	7fea <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    8000:	7b43      	ldrb	r3, [r0, #13]
    8002:	f023 0302 	bic.w	r3, r3, #2
    8006:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    8008:	2300      	movs	r3, #0
    800a:	6083      	str	r3, [r0, #8]
}
    800c:	bd08      	pop	{r3, pc}

0000800e <z_unpend_thread_no_timeout>:
{
    800e:	b508      	push	{r3, lr}
	__asm__ volatile(
    8010:	f04f 0320 	mov.w	r3, #32
    8014:	f3ef 8111 	mrs	r1, BASEPRI
    8018:	f383 8812 	msr	BASEPRI_MAX, r3
    801c:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    8020:	f7ff ffeb 	bl	7ffa <unpend_thread_no_timeout>
	__asm__ volatile(
    8024:	f381 8811 	msr	BASEPRI, r1
    8028:	f3bf 8f6f 	isb	sy
}
    802c:	bd08      	pop	{r3, pc}

0000802e <z_unpend_thread>:
{
    802e:	b510      	push	{r4, lr}
	__asm__ volatile(
    8030:	f04f 0320 	mov.w	r3, #32
    8034:	f3ef 8411 	mrs	r4, BASEPRI
    8038:	f383 8812 	msr	BASEPRI_MAX, r3
    803c:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    8040:	f7ff ffdb 	bl	7ffa <unpend_thread_no_timeout>
	__asm__ volatile(
    8044:	f384 8811 	msr	BASEPRI, r4
    8048:	f3bf 8f6f 	isb	sy
}
    804c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8050:	3018      	adds	r0, #24
    8052:	f000 b8c9 	b.w	81e8 <z_abort_timeout>

00008056 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    8056:	4603      	mov	r3, r0
    8058:	b920      	cbnz	r0, 8064 <z_reschedule_irqlock+0xe>
    805a:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    805e:	b90a      	cbnz	r2, 8064 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    8060:	f7fa bda2 	b.w	2ba8 <arch_swap>
    8064:	f383 8811 	msr	BASEPRI, r3
    8068:	f3bf 8f6f 	isb	sy
}
    806c:	4770      	bx	lr

0000806e <z_reschedule_unlocked>:
	__asm__ volatile(
    806e:	f04f 0320 	mov.w	r3, #32
    8072:	f3ef 8011 	mrs	r0, BASEPRI
    8076:	f383 8812 	msr	BASEPRI_MAX, r3
    807a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    807e:	f7ff bfea 	b.w	8056 <z_reschedule_irqlock>

00008082 <z_priq_dumb_best>:
{
    8082:	4603      	mov	r3, r0
	return list->head == list;
    8084:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8086:	4283      	cmp	r3, r0
    8088:	d003      	beq.n	8092 <z_priq_dumb_best+0x10>
	if (n != NULL) {
    808a:	2800      	cmp	r0, #0
    808c:	bf38      	it	cc
    808e:	2000      	movcc	r0, #0
    8090:	4770      	bx	lr
	struct k_thread *thread = NULL;
    8092:	2000      	movs	r0, #0
}
    8094:	4770      	bx	lr

00008096 <z_ready_thread>:
{
    8096:	b510      	push	{r4, lr}
    8098:	f04f 0320 	mov.w	r3, #32
    809c:	f3ef 8411 	mrs	r4, BASEPRI
    80a0:	f383 8812 	msr	BASEPRI_MAX, r3
    80a4:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    80a8:	f7fe f878 	bl	619c <ready_thread>
	__asm__ volatile(
    80ac:	f384 8811 	msr	BASEPRI, r4
    80b0:	f3bf 8f6f 	isb	sy
}
    80b4:	bd10      	pop	{r4, pc}

000080b6 <z_thread_timeout>:
{
    80b6:	b510      	push	{r4, lr}
    80b8:	4601      	mov	r1, r0
	__asm__ volatile(
    80ba:	f04f 0320 	mov.w	r3, #32
    80be:	f3ef 8411 	mrs	r4, BASEPRI
    80c2:	f383 8812 	msr	BASEPRI_MAX, r3
    80c6:	f3bf 8f6f 	isb	sy
		if (!killed) {
    80ca:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    80ce:	f013 0f28 	tst.w	r3, #40	; 0x28
    80d2:	d10d      	bne.n	80f0 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    80d4:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    80d8:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    80da:	b10b      	cbz	r3, 80e0 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    80dc:	f7ff ff8d 	bl	7ffa <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    80e0:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    80e4:	f023 0314 	bic.w	r3, r3, #20
    80e8:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    80ec:	f7fe f856 	bl	619c <ready_thread>
	__asm__ volatile(
    80f0:	f384 8811 	msr	BASEPRI, r4
    80f4:	f3bf 8f6f 	isb	sy
}
    80f8:	bd10      	pop	{r4, pc}

000080fa <add_to_waitq_locked>:
{
    80fa:	b538      	push	{r3, r4, r5, lr}
    80fc:	4604      	mov	r4, r0
    80fe:	460d      	mov	r5, r1
	unready_thread(thread);
    8100:	f7fe f8a2 	bl	6248 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    8104:	7b63      	ldrb	r3, [r4, #13]
    8106:	f043 0302 	orr.w	r3, r3, #2
    810a:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    810c:	b1b5      	cbz	r5, 813c <add_to_waitq_locked+0x42>
	return list->head == list;
    810e:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    8110:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8112:	429d      	cmp	r5, r3
    8114:	bf08      	it	eq
    8116:	2300      	moveq	r3, #0
    8118:	2b00      	cmp	r3, #0
    811a:	bf38      	it	cc
    811c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    811e:	b19b      	cbz	r3, 8148 <add_to_waitq_locked+0x4e>
	int32_t b1 = thread_1->base.prio;
    8120:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    8124:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    8128:	4291      	cmp	r1, r2
    812a:	d008      	beq.n	813e <add_to_waitq_locked+0x44>
		return b2 - b1;
    812c:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    812e:	2a00      	cmp	r2, #0
    8130:	dd05      	ble.n	813e <add_to_waitq_locked+0x44>
	sys_dnode_t *const prev = successor->prev;
    8132:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    8134:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    8138:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    813a:	605c      	str	r4, [r3, #4]
}
    813c:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    813e:	686a      	ldr	r2, [r5, #4]
    8140:	4293      	cmp	r3, r2
    8142:	d001      	beq.n	8148 <add_to_waitq_locked+0x4e>
    8144:	681b      	ldr	r3, [r3, #0]
    8146:	e7ea      	b.n	811e <add_to_waitq_locked+0x24>
	sys_dnode_t *const tail = list->tail;
    8148:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    814a:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    814e:	601c      	str	r4, [r3, #0]
	list->tail = node;
    8150:	606c      	str	r4, [r5, #4]
    8152:	e7f3      	b.n	813c <add_to_waitq_locked+0x42>

00008154 <z_unpend1_no_timeout>:
{
    8154:	b510      	push	{r4, lr}
	__asm__ volatile(
    8156:	f04f 0320 	mov.w	r3, #32
    815a:	f3ef 8411 	mrs	r4, BASEPRI
    815e:	f383 8812 	msr	BASEPRI_MAX, r3
    8162:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    8166:	f7ff ff8c 	bl	8082 <z_priq_dumb_best>
		if (thread != NULL) {
    816a:	4601      	mov	r1, r0
    816c:	b108      	cbz	r0, 8172 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
    816e:	f7ff ff44 	bl	7ffa <unpend_thread_no_timeout>
	__asm__ volatile(
    8172:	f384 8811 	msr	BASEPRI, r4
    8176:	f3bf 8f6f 	isb	sy
}
    817a:	4608      	mov	r0, r1
    817c:	bd10      	pop	{r4, pc}

0000817e <z_unpend_first_thread>:
{
    817e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    8180:	f04f 0320 	mov.w	r3, #32
    8184:	f3ef 8511 	mrs	r5, BASEPRI
    8188:	f383 8812 	msr	BASEPRI_MAX, r3
    818c:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    8190:	f7ff ff77 	bl	8082 <z_priq_dumb_best>
		if (thread != NULL) {
    8194:	4604      	mov	r4, r0
    8196:	b120      	cbz	r0, 81a2 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    8198:	f7ff ff2f 	bl	7ffa <unpend_thread_no_timeout>
    819c:	3018      	adds	r0, #24
    819e:	f000 f823 	bl	81e8 <z_abort_timeout>
	__asm__ volatile(
    81a2:	f385 8811 	msr	BASEPRI, r5
    81a6:	f3bf 8f6f 	isb	sy
}
    81aa:	4620      	mov	r0, r4
    81ac:	bd38      	pop	{r3, r4, r5, pc}

000081ae <z_sched_wake>:
{
    81ae:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    81b0:	f04f 0320 	mov.w	r3, #32
    81b4:	f3ef 8511 	mrs	r5, BASEPRI
    81b8:	f383 8812 	msr	BASEPRI_MAX, r3
    81bc:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    81c0:	f7ff ff5f 	bl	8082 <z_priq_dumb_best>
		if (thread != NULL) {
    81c4:	4604      	mov	r4, r0
    81c6:	b150      	cbz	r0, 81de <z_sched_wake+0x30>
    81c8:	67c1      	str	r1, [r0, #124]	; 0x7c
    81ca:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
    81cc:	f7ff ff15 	bl	7ffa <unpend_thread_no_timeout>
    81d0:	3018      	adds	r0, #24
    81d2:	f000 f809 	bl	81e8 <z_abort_timeout>
			ready_thread(thread);
    81d6:	4620      	mov	r0, r4
    81d8:	f7fd ffe0 	bl	619c <ready_thread>
			ret = true;
    81dc:	2001      	movs	r0, #1
	__asm__ volatile(
    81de:	f385 8811 	msr	BASEPRI, r5
    81e2:	f3bf 8f6f 	isb	sy
}
    81e6:	bd38      	pop	{r3, r4, r5, pc}

000081e8 <z_abort_timeout>:
{
    81e8:	b510      	push	{r4, lr}
	__asm__ volatile(
    81ea:	f04f 0220 	mov.w	r2, #32
    81ee:	f3ef 8411 	mrs	r4, BASEPRI
    81f2:	f382 8812 	msr	BASEPRI_MAX, r2
    81f6:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    81fa:	6803      	ldr	r3, [r0, #0]
    81fc:	b13b      	cbz	r3, 820e <z_abort_timeout+0x26>
			remove_timeout(to);
    81fe:	f7fe fa61 	bl	66c4 <remove_timeout>
			ret = 0;
    8202:	2000      	movs	r0, #0
	__asm__ volatile(
    8204:	f384 8811 	msr	BASEPRI, r4
    8208:	f3bf 8f6f 	isb	sy
}
    820c:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    820e:	f06f 0015 	mvn.w	r0, #21
    8212:	e7f7      	b.n	8204 <z_abort_timeout+0x1c>

00008214 <z_get_next_timeout_expiry>:
{
    8214:	b510      	push	{r4, lr}
	__asm__ volatile(
    8216:	f04f 0320 	mov.w	r3, #32
    821a:	f3ef 8411 	mrs	r4, BASEPRI
    821e:	f383 8812 	msr	BASEPRI_MAX, r3
    8222:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    8226:	f7fe fa67 	bl	66f8 <next_timeout>
	__asm__ volatile(
    822a:	f384 8811 	msr	BASEPRI, r4
    822e:	f3bf 8f6f 	isb	sy
}
    8232:	bd10      	pop	{r4, pc}

00008234 <z_set_timeout_expiry>:
{
    8234:	b570      	push	{r4, r5, r6, lr}
    8236:	4604      	mov	r4, r0
    8238:	460d      	mov	r5, r1
	__asm__ volatile(
    823a:	f04f 0320 	mov.w	r3, #32
    823e:	f3ef 8611 	mrs	r6, BASEPRI
    8242:	f383 8812 	msr	BASEPRI_MAX, r3
    8246:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    824a:	f7fe fa55 	bl	66f8 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    824e:	2801      	cmp	r0, #1
    8250:	dd05      	ble.n	825e <z_set_timeout_expiry+0x2a>
    8252:	42a0      	cmp	r0, r4
    8254:	db03      	blt.n	825e <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    8256:	4629      	mov	r1, r5
    8258:	4620      	mov	r0, r4
    825a:	f7fc fc81 	bl	4b60 <sys_clock_set_timeout>
	__asm__ volatile(
    825e:	f386 8811 	msr	BASEPRI, r6
    8262:	f3bf 8f6f 	isb	sy
}
    8266:	bd70      	pop	{r4, r5, r6, pc}

00008268 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    8268:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    826a:	f7fe fb65 	bl	6938 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    826e:	bd08      	pop	{r3, pc}

00008270 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    8270:	f7fe bb62 	b.w	6938 <sys_clock_tick_get>

00008274 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    8274:	b108      	cbz	r0, 827a <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    8276:	f7fb b813 	b.w	32a0 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    827a:	4770      	bx	lr

0000827c <k_timer_init>:
	timer->status = 0U;
    827c:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    827e:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
    8282:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
    8286:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    828a:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    828e:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    8290:	6343      	str	r3, [r0, #52]	; 0x34
}
    8292:	4770      	bx	lr

00008294 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    8294:	b510      	push	{r4, lr}
    8296:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    8298:	f7ff ffa6 	bl	81e8 <z_abort_timeout>

	if (inactive) {
    829c:	b9b0      	cbnz	r0, 82cc <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    829e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    82a0:	b10b      	cbz	r3, 82a6 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    82a2:	4620      	mov	r0, r4
    82a4:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    82a6:	f104 0018 	add.w	r0, r4, #24
    82aa:	f7ff ff53 	bl	8154 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    82ae:	b168      	cbz	r0, 82cc <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    82b0:	f7ff fef1 	bl	8096 <z_ready_thread>
	__asm__ volatile(
    82b4:	f04f 0320 	mov.w	r3, #32
    82b8:	f3ef 8011 	mrs	r0, BASEPRI
    82bc:	f383 8812 	msr	BASEPRI_MAX, r3
    82c0:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    82c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
    82c8:	f7ff bec5 	b.w	8056 <z_reschedule_irqlock>
    82cc:	bd10      	pop	{r4, pc}

000082ce <signal_poll_event>:
{
    82ce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
    82d2:	6884      	ldr	r4, [r0, #8]
{
    82d4:	4605      	mov	r5, r0
    82d6:	460e      	mov	r6, r1
	if (poller != NULL) {
    82d8:	b144      	cbz	r4, 82ec <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
    82da:	7863      	ldrb	r3, [r4, #1]
    82dc:	2b01      	cmp	r3, #1
    82de:	d138      	bne.n	8352 <signal_poll_event+0x84>
	if (!z_is_thread_pending(thread)) {
    82e0:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    82e4:	f013 0302 	ands.w	r3, r3, #2
    82e8:	d10a      	bne.n	8300 <signal_poll_event+0x32>
		poller->is_polling = false;
    82ea:	7023      	strb	r3, [r4, #0]
	event->state |= state;
    82ec:	68eb      	ldr	r3, [r5, #12]
    82ee:	f3c3 3145 	ubfx	r1, r3, #13, #6
    82f2:	430e      	orrs	r6, r1
	event->poller = NULL;
    82f4:	2000      	movs	r0, #0
	event->state |= state;
    82f6:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
    82fa:	60a8      	str	r0, [r5, #8]
	event->state |= state;
    82fc:	60eb      	str	r3, [r5, #12]
	return retcode;
    82fe:	e00d      	b.n	831c <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
    8300:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
    8304:	f04f 31ff 	mov.w	r1, #4294967295
    8308:	f06f 0001 	mvn.w	r0, #1
    830c:	428b      	cmp	r3, r1
    830e:	bf08      	it	eq
    8310:	4282      	cmpeq	r2, r0
    8312:	d105      	bne.n	8320 <signal_poll_event+0x52>
		poller->is_polling = false;
    8314:	2300      	movs	r3, #0
    8316:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
    8318:	f06f 000a 	mvn.w	r0, #10
}
    831c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
    8320:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
    8324:	4640      	mov	r0, r8
    8326:	f7ff fe82 	bl	802e <z_unpend_thread>
	arch_thread_return_value_set(thread,
    832a:	2e08      	cmp	r6, #8
    832c:	bf0c      	ite	eq
    832e:	f06f 0303 	mvneq.w	r3, #3
    8332:	2300      	movne	r3, #0
    8334:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    8336:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    833a:	06db      	lsls	r3, r3, #27
    833c:	d102      	bne.n	8344 <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
    833e:	f854 7c48 	ldr.w	r7, [r4, #-72]
    8342:	b10f      	cbz	r7, 8348 <signal_poll_event+0x7a>
		poller->is_polling = false;
    8344:	2300      	movs	r3, #0
    8346:	e7d0      	b.n	82ea <signal_poll_event+0x1c>
	z_ready_thread(thread);
    8348:	4640      	mov	r0, r8
    834a:	f7ff fea4 	bl	8096 <z_ready_thread>
		poller->is_polling = false;
    834e:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
    8350:	e7cc      	b.n	82ec <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
    8352:	2b02      	cmp	r3, #2
    8354:	d1f6      	bne.n	8344 <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
    8356:	7823      	ldrb	r3, [r4, #0]
    8358:	2b00      	cmp	r3, #0
    835a:	d0c7      	beq.n	82ec <signal_poll_event+0x1e>
    835c:	f854 7c04 	ldr.w	r7, [r4, #-4]
    8360:	2f00      	cmp	r7, #0
    8362:	d0f4      	beq.n	834e <signal_poll_event+0x80>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
    8364:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
    8368:	f1a4 0914 	sub.w	r9, r4, #20
    836c:	f104 0014 	add.w	r0, r4, #20
    8370:	f7ff ff3a 	bl	81e8 <z_abort_timeout>
		twork->poll_result = 0;
    8374:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
    8378:	4649      	mov	r1, r9
    837a:	4638      	mov	r0, r7
    837c:	f000 f818 	bl	83b0 <k_work_submit_to_queue>
		poller->is_polling = false;
    8380:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
    8384:	e7b2      	b.n	82ec <signal_poll_event+0x1e>

00008386 <z_handle_obj_poll_events>:
{
    8386:	4603      	mov	r3, r0
	return list->head == list;
    8388:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
    838a:	4283      	cmp	r3, r0
    838c:	d008      	beq.n	83a0 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
    838e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    8392:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    8394:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    8396:	2300      	movs	r3, #0
	node->prev = NULL;
    8398:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
    839c:	f7ff bf97 	b.w	82ce <signal_poll_event>
}
    83a0:	4770      	bx	lr

000083a2 <notify_queue_locked>:
	if (queue != NULL) {
    83a2:	b120      	cbz	r0, 83ae <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    83a4:	2200      	movs	r2, #0
    83a6:	4611      	mov	r1, r2
    83a8:	3088      	adds	r0, #136	; 0x88
    83aa:	f7ff bf00 	b.w	81ae <z_sched_wake>
}
    83ae:	4770      	bx	lr

000083b0 <k_work_submit_to_queue>:
{
    83b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    83b2:	9001      	str	r0, [sp, #4]
    83b4:	4608      	mov	r0, r1
    83b6:	f04f 0320 	mov.w	r3, #32
    83ba:	f3ef 8511 	mrs	r5, BASEPRI
    83be:	f383 8812 	msr	BASEPRI_MAX, r3
    83c2:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    83c6:	a901      	add	r1, sp, #4
    83c8:	f7fe fc60 	bl	6c8c <submit_to_queue_locked>
    83cc:	4604      	mov	r4, r0
	__asm__ volatile(
    83ce:	f385 8811 	msr	BASEPRI, r5
    83d2:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
    83d6:	2800      	cmp	r0, #0
    83d8:	dd04      	ble.n	83e4 <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
    83da:	f7fe f8db 	bl	6594 <z_impl_k_is_preempt_thread>
    83de:	b108      	cbz	r0, 83e4 <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
    83e0:	f7fe f82a 	bl	6438 <z_impl_k_yield>
}
    83e4:	4620      	mov	r0, r4
    83e6:	b003      	add	sp, #12
    83e8:	bd30      	pop	{r4, r5, pc}

000083ea <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    83ea:	4770      	bx	lr

000083ec <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    83ec:	f7fc bc18 	b.w	4c20 <SystemInit>
